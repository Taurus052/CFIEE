
insertsort_main.elf:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <__start>:
#
#  li x3, 0x1000
#  csrrs x0, mhcr, x3

#la x3, 0x20000
  la  x2, __kernel_stack
       0:	200c0117          	auipc	sp,0x200c0
       4:	ff810113          	addi	sp,sp,-8 # 200bfff8 <__kernel_stack>
#  sw x0, 0(x2)
#  addi x2, x2, -4
#  addi x3, x3, -4
#  bnez x3, Init_Stack

  la x3, __erodata
       8:	00005197          	auipc	gp,0x5
       c:	72018193          	addi	gp,gp,1824 # 5728 <__erodata>
  la x4, __data_start__
      10:	20000217          	auipc	tp,0x20000
      14:	ff020213          	addi	tp,tp,-16 # 20000000 <__data_start__>
  la x5, __data_end__
      18:	20001297          	auipc	t0,0x20001
      1c:	89028293          	addi	t0,t0,-1904 # 200008a8 <__malloc_sbrk_base>

  sub x5, x5, x4
      20:	404282b3          	sub	t0,t0,tp
  beqz x5, L_loop0_done
      24:	00028b63          	beqz	t0,3a <L_loop0_done>

00000028 <L_loop0>:

L_loop0:
   lw x6, 0(x3)
      28:	0001a303          	lw	t1,0(gp)
   sw x6, 0(x4)
      2c:	00622023          	sw	t1,0(tp) # 0 <__start>
   addi x3, x3, 0x4
      30:	0191                	addi	gp,gp,4
   addi x4, x4, 0x4
      32:	0211                	addi	tp,tp,4
   addi x5, x5, -4
      34:	12f1                	addi	t0,t0,-4
   bnez x5, L_loop0
      36:	fe0299e3          	bnez	t0,28 <L_loop0>

0000003a <L_loop0_done>:

L_loop0_done:
   la x3, __data_end__
      3a:	20001197          	auipc	gp,0x20001
      3e:	86e18193          	addi	gp,gp,-1938 # 200008a8 <__malloc_sbrk_base>
   la x4, __bss_end__
      42:	20001217          	auipc	tp,0x20001
      46:	8c620213          	addi	tp,tp,-1850 # 20000908 <__malloc_max_total_mem>

   li x5, 0
      4a:	4281                	li	t0,0
   sub x4, x4, x3
      4c:	40320233          	sub	tp,tp,gp
   beqz x4, L_loop1_done
      50:	00020863          	beqz	tp,60 <L_loop1_done>

00000054 <L_loop1>:

L_loop1:
   sw x5, 0(x3)
      54:	0051a023          	sw	t0,0(gp)
   addi x3, x3, 0x4
      58:	0191                	addi	gp,gp,4
   addi x4, x4, -4
      5a:	1271                	addi	tp,tp,-4
   bnez x4, L_loop1  
      5c:	fe021ce3          	bnez	tp,54 <L_loop1>

00000060 <L_loop1_done>:


L_loop1_done:
  
  la x3, trap_handler
      60:	00000197          	auipc	gp,0x0
      64:	0e018193          	addi	gp,gp,224 # 140 <trap_handler>
  csrw mtvec, x3
      68:	30519073          	csrw	mtvec,gp

  la x3, vector_table
      6c:	00000197          	auipc	gp,0x0
      70:	11418193          	addi	gp,gp,276 # 180 <vector_table>
  addi x3, x3, 64
      74:	04018193          	addi	gp,gp,64
  csrw mtvt, x3
      78:	30719073          	csrw	mtvt,gp


  li a5, 0xeffff000
      7c:	effff7b7          	lui	a5,0xeffff
  li a6, 0x20000
      80:	00020837          	lui	a6,0x20
  sw a6, 0(a5)
      84:	0107a023          	sw	a6,0(a5) # effff000 <__kernel_stack+0xcff3f008>
  li a7, 0xc
      88:	48b1                	li	a7,12
  sw a7, 4(a5)
      8a:	0117a223          	sw	a7,4(a5)

  li a6, 0x40000
      8e:	00040837          	lui	a6,0x40
  li a7, 0xc
      92:	48b1                	li	a7,12
  sw a6, 8(a5)
      94:	0107a423          	sw	a6,8(a5)
  sw a7, 12(a5)
      98:	0117a623          	sw	a7,12(a5)
  
  li a6, 0x50000
      9c:	00050837          	lui	a6,0x50
  li a7, 0x10
      a0:	48c1                	li	a7,16
  sw a6, 16(a5)
      a2:	0107a823          	sw	a6,16(a5)
  sw a7, 20(a5)
      a6:	0117aa23          	sw	a7,20(a5)

  li a5, 0x40011000
      aa:	400117b7          	lui	a5,0x40011
  li a6, 0xff
      ae:	0ff00813          	li	a6,255
  sw a6, 0(a5)
      b2:	0107a023          	sw	a6,0(a5) # 40011000 <__kernel_stack+0x1ff51008>
  li a6, 0x3
      b6:	480d                	li	a6,3
  sw a6, 8(a5)
      b8:	0107a423          	sw	a6,8(a5)
  lw a6, 4(a5)
      bc:	0047a803          	lw	a6,4(a5)


# enable mie
  li   x3,0x88 
      c0:	08800193          	li	gp,136
  csrw mstatus,x3
      c4:	30019073          	csrw	mstatus,gp

# enable fpu
  li x3, 0x2000
      c8:	6189                	lui	gp,0x2
  csrs mstatus,x3
      ca:	3001a073          	csrs	mstatus,gp

  li   x3,0x103f
      ce:	6185                	lui	gp,0x1
      d0:	03f18193          	addi	gp,gp,63 # 103f <_ftoa+0xcb>
  csrw mhcr,x3
      d4:	7c119073          	csrw	mhcr,gp
  li   x3,0x400c
      d8:	6191                	lui	gp,0x4
      da:	01b1                	addi	gp,gp,12
  csrw mhint,x3
      dc:	7c519073          	csrw	mhint,gp

000000e0 <__to_main>:
  
__to_main:
  jal main
      e0:	5f6000ef          	jal	ra,6d6 <main>

000000e4 <__exit>:


  .global __exit
__exit:
  fence.i
      e4:	0000100f          	fence.i
  fence
      e8:	0ff0000f          	fence
  li    x4, 0x6000fff8
      ec:	60010237          	lui	tp,0x60010
      f0:	1261                	addi	tp,tp,-8
  addi  x3, x0,0xFF
      f2:	0ff00193          	li	gp,255
  slli  x3, x3,0x4
      f6:	0192                	slli	gp,gp,0x4
  addi  x3, x3, 0xf #0xFFF
      f8:	01bd                	addi	gp,gp,15
  sw	x3, 0(x4)
      fa:	00322023          	sw	gp,0(tp) # 60010000 <__kernel_stack+0x3ff50008>

000000fe <__fail>:

  .global __fail
__fail:
  fence.i
      fe:	0000100f          	fence.i
  fence
     102:	0ff0000f          	fence
  li    x4, 0x6000fff8
     106:	60010237          	lui	tp,0x60010
     10a:	1261                	addi	tp,tp,-8
  addi  x3, x0,0xEE
     10c:	0ee00193          	li	gp,238
  slli  x3, x3,0x4
     110:	0192                	slli	gp,gp,0x4
  addi  x3, x3,0xe #0xEEE
     112:	01b9                	addi	gp,gp,14
  sw	x3, 0(x4)
     114:	00322023          	sw	gp,0(tp) # 60010000 <__kernel_stack+0x3ff50008>
     118:	00000013          	nop
     11c:	00000013          	nop
     120:	00000013          	nop
     124:	00000013          	nop
     128:	00000013          	nop
     12c:	00000013          	nop
     130:	00000013          	nop
     134:	00000013          	nop
     138:	00000013          	nop
     13c:	00000013          	nop

00000140 <trap_handler>:

  .align 6  
  .global trap_handler
trap_handler:
  j __synchronous_exception
     140:	a019                	j	146 <__synchronous_exception>
     142:	0001                	nop
  .align 2  
  j __fail
     144:	bf6d                	j	fe <__fail>

00000146 <__synchronous_exception>:
 
__synchronous_exception:
  sw   x13,-4(x2)
     146:	fed12e23          	sw	a3,-4(sp)
  sw   x14,-8(x2)
     14a:	fee12c23          	sw	a4,-8(sp)
  sw   x15,-12(x2)
     14e:	fef12a23          	sw	a5,-12(sp)
  csrr x14,mcause
     152:	34202773          	csrr	a4,mcause
  andi x15,x14,0xff  #cause
     156:	0ff77793          	andi	a5,a4,255
  srli x14,x14,0x1b   #int
     15a:	836d                	srli	a4,a4,0x1b
  andi x14,x14,0x10   #mask bit
     15c:	8b41                	andi	a4,a4,16
  add  x14,x14,x15    #{int,cause}
     15e:	973e                	add	a4,a4,a5

  slli x14,x14,0x2  #offset
     160:	070a                	slli	a4,a4,0x2
  la   x15,vector_table
     162:	00000797          	auipc	a5,0x0
     166:	01e78793          	addi	a5,a5,30 # 180 <vector_table>
  add  x15,x14,x15  #target pc
     16a:	97ba                	add	a5,a5,a4
  lw   x14, 0(x15)  #get exception addr
     16c:	4398                	lw	a4,0(a5)
  lw   x13, -4(x2)  #recover x16
     16e:	ffc12683          	lw	a3,-4(sp)
  lw   x15, -12(x2) #recover x15
     172:	ff412783          	lw	a5,-12(sp)
#addi x14,x14,-4
  jr   x14
     176:	8702                	jr	a4
     178:	00000013          	nop
     17c:	00000013          	nop

00000180 <vector_table>:
     180:	0580                	addi	s0,sp,704
     182:	0000                	unimp
     184:	0580                	addi	s0,sp,704
     186:	0000                	unimp
     188:	0580                	addi	s0,sp,704
     18a:	0000                	unimp
     18c:	0580                	addi	s0,sp,704
     18e:	0000                	unimp
     190:	0580                	addi	s0,sp,704
     192:	0000                	unimp
     194:	0580                	addi	s0,sp,704
     196:	0000                	unimp
     198:	0580                	addi	s0,sp,704
     19a:	0000                	unimp
     19c:	0580                	addi	s0,sp,704
     19e:	0000                	unimp
     1a0:	0580                	addi	s0,sp,704
     1a2:	0000                	unimp
     1a4:	0580                	addi	s0,sp,704
     1a6:	0000                	unimp
     1a8:	0580                	addi	s0,sp,704
     1aa:	0000                	unimp
     1ac:	0580                	addi	s0,sp,704
     1ae:	0000                	unimp
     1b0:	0580                	addi	s0,sp,704
     1b2:	0000                	unimp
     1b4:	0580                	addi	s0,sp,704
     1b6:	0000                	unimp
     1b8:	0580                	addi	s0,sp,704
     1ba:	0000                	unimp
     1bc:	0580                	addi	s0,sp,704
     1be:	0000                	unimp
     1c0:	0580                	addi	s0,sp,704
     1c2:	0000                	unimp
     1c4:	0580                	addi	s0,sp,704
     1c6:	0000                	unimp
     1c8:	0580                	addi	s0,sp,704
     1ca:	0000                	unimp
     1cc:	0580                	addi	s0,sp,704
     1ce:	0000                	unimp
     1d0:	0580                	addi	s0,sp,704
     1d2:	0000                	unimp
     1d4:	0580                	addi	s0,sp,704
     1d6:	0000                	unimp
     1d8:	0580                	addi	s0,sp,704
     1da:	0000                	unimp
     1dc:	0580                	addi	s0,sp,704
     1de:	0000                	unimp
     1e0:	0580                	addi	s0,sp,704
     1e2:	0000                	unimp
     1e4:	0580                	addi	s0,sp,704
     1e6:	0000                	unimp
     1e8:	0580                	addi	s0,sp,704
     1ea:	0000                	unimp
     1ec:	0580                	addi	s0,sp,704
     1ee:	0000                	unimp
     1f0:	0580                	addi	s0,sp,704
     1f2:	0000                	unimp
     1f4:	0580                	addi	s0,sp,704
     1f6:	0000                	unimp
     1f8:	0580                	addi	s0,sp,704
     1fa:	0000                	unimp
     1fc:	0580                	addi	s0,sp,704
     1fe:	0000                	unimp
     200:	0580                	addi	s0,sp,704
     202:	0000                	unimp
     204:	0580                	addi	s0,sp,704
     206:	0000                	unimp
     208:	0580                	addi	s0,sp,704
     20a:	0000                	unimp
     20c:	0580                	addi	s0,sp,704
     20e:	0000                	unimp
     210:	0580                	addi	s0,sp,704
     212:	0000                	unimp
     214:	0580                	addi	s0,sp,704
     216:	0000                	unimp
     218:	0580                	addi	s0,sp,704
     21a:	0000                	unimp
     21c:	0580                	addi	s0,sp,704
     21e:	0000                	unimp
     220:	0580                	addi	s0,sp,704
     222:	0000                	unimp
     224:	0580                	addi	s0,sp,704
     226:	0000                	unimp
     228:	0580                	addi	s0,sp,704
     22a:	0000                	unimp
     22c:	0580                	addi	s0,sp,704
     22e:	0000                	unimp
     230:	0580                	addi	s0,sp,704
     232:	0000                	unimp
     234:	0580                	addi	s0,sp,704
     236:	0000                	unimp
     238:	0580                	addi	s0,sp,704
     23a:	0000                	unimp
     23c:	0580                	addi	s0,sp,704
     23e:	0000                	unimp
     240:	0580                	addi	s0,sp,704
     242:	0000                	unimp
     244:	0580                	addi	s0,sp,704
     246:	0000                	unimp
     248:	0580                	addi	s0,sp,704
     24a:	0000                	unimp
     24c:	0580                	addi	s0,sp,704
     24e:	0000                	unimp
     250:	0580                	addi	s0,sp,704
     252:	0000                	unimp
     254:	0580                	addi	s0,sp,704
     256:	0000                	unimp
     258:	0580                	addi	s0,sp,704
     25a:	0000                	unimp
     25c:	0580                	addi	s0,sp,704
     25e:	0000                	unimp
     260:	0580                	addi	s0,sp,704
     262:	0000                	unimp
     264:	0580                	addi	s0,sp,704
     266:	0000                	unimp
     268:	0580                	addi	s0,sp,704
     26a:	0000                	unimp
     26c:	0580                	addi	s0,sp,704
     26e:	0000                	unimp
     270:	0580                	addi	s0,sp,704
     272:	0000                	unimp
     274:	0580                	addi	s0,sp,704
     276:	0000                	unimp
     278:	0580                	addi	s0,sp,704
     27a:	0000                	unimp
     27c:	0580                	addi	s0,sp,704
     27e:	0000                	unimp
     280:	0580                	addi	s0,sp,704
     282:	0000                	unimp
     284:	0580                	addi	s0,sp,704
     286:	0000                	unimp
     288:	0580                	addi	s0,sp,704
     28a:	0000                	unimp
     28c:	0580                	addi	s0,sp,704
     28e:	0000                	unimp
     290:	0580                	addi	s0,sp,704
     292:	0000                	unimp
     294:	0580                	addi	s0,sp,704
     296:	0000                	unimp
     298:	0580                	addi	s0,sp,704
     29a:	0000                	unimp
     29c:	0580                	addi	s0,sp,704
     29e:	0000                	unimp
     2a0:	0580                	addi	s0,sp,704
     2a2:	0000                	unimp
     2a4:	0580                	addi	s0,sp,704
     2a6:	0000                	unimp
     2a8:	0580                	addi	s0,sp,704
     2aa:	0000                	unimp
     2ac:	0580                	addi	s0,sp,704
     2ae:	0000                	unimp
     2b0:	0580                	addi	s0,sp,704
     2b2:	0000                	unimp
     2b4:	0580                	addi	s0,sp,704
     2b6:	0000                	unimp
     2b8:	0580                	addi	s0,sp,704
     2ba:	0000                	unimp
     2bc:	0580                	addi	s0,sp,704
     2be:	0000                	unimp
     2c0:	0580                	addi	s0,sp,704
     2c2:	0000                	unimp
     2c4:	0580                	addi	s0,sp,704
     2c6:	0000                	unimp
     2c8:	0580                	addi	s0,sp,704
     2ca:	0000                	unimp
     2cc:	0580                	addi	s0,sp,704
     2ce:	0000                	unimp
     2d0:	0580                	addi	s0,sp,704
     2d2:	0000                	unimp
     2d4:	0580                	addi	s0,sp,704
     2d6:	0000                	unimp
     2d8:	0580                	addi	s0,sp,704
     2da:	0000                	unimp
     2dc:	0580                	addi	s0,sp,704
     2de:	0000                	unimp
     2e0:	0580                	addi	s0,sp,704
     2e2:	0000                	unimp
     2e4:	0580                	addi	s0,sp,704
     2e6:	0000                	unimp
     2e8:	0580                	addi	s0,sp,704
     2ea:	0000                	unimp
     2ec:	0580                	addi	s0,sp,704
     2ee:	0000                	unimp
     2f0:	0580                	addi	s0,sp,704
     2f2:	0000                	unimp
     2f4:	0580                	addi	s0,sp,704
     2f6:	0000                	unimp
     2f8:	0580                	addi	s0,sp,704
     2fa:	0000                	unimp
     2fc:	0580                	addi	s0,sp,704
     2fe:	0000                	unimp
     300:	0580                	addi	s0,sp,704
     302:	0000                	unimp
     304:	0580                	addi	s0,sp,704
     306:	0000                	unimp
     308:	0580                	addi	s0,sp,704
     30a:	0000                	unimp
     30c:	0580                	addi	s0,sp,704
     30e:	0000                	unimp
     310:	0580                	addi	s0,sp,704
     312:	0000                	unimp
     314:	0580                	addi	s0,sp,704
     316:	0000                	unimp
     318:	0580                	addi	s0,sp,704
     31a:	0000                	unimp
     31c:	0580                	addi	s0,sp,704
     31e:	0000                	unimp
     320:	0580                	addi	s0,sp,704
     322:	0000                	unimp
     324:	0580                	addi	s0,sp,704
     326:	0000                	unimp
     328:	0580                	addi	s0,sp,704
     32a:	0000                	unimp
     32c:	0580                	addi	s0,sp,704
     32e:	0000                	unimp
     330:	0580                	addi	s0,sp,704
     332:	0000                	unimp
     334:	0580                	addi	s0,sp,704
     336:	0000                	unimp
     338:	0580                	addi	s0,sp,704
     33a:	0000                	unimp
     33c:	0580                	addi	s0,sp,704
     33e:	0000                	unimp
     340:	0580                	addi	s0,sp,704
     342:	0000                	unimp
     344:	0580                	addi	s0,sp,704
     346:	0000                	unimp
     348:	0580                	addi	s0,sp,704
     34a:	0000                	unimp
     34c:	0580                	addi	s0,sp,704
     34e:	0000                	unimp
     350:	0580                	addi	s0,sp,704
     352:	0000                	unimp
     354:	0580                	addi	s0,sp,704
     356:	0000                	unimp
     358:	0580                	addi	s0,sp,704
     35a:	0000                	unimp
     35c:	0580                	addi	s0,sp,704
     35e:	0000                	unimp
     360:	0580                	addi	s0,sp,704
     362:	0000                	unimp
     364:	0580                	addi	s0,sp,704
     366:	0000                	unimp
     368:	0580                	addi	s0,sp,704
     36a:	0000                	unimp
     36c:	0580                	addi	s0,sp,704
     36e:	0000                	unimp
     370:	0580                	addi	s0,sp,704
     372:	0000                	unimp
     374:	0580                	addi	s0,sp,704
     376:	0000                	unimp
     378:	0580                	addi	s0,sp,704
     37a:	0000                	unimp
     37c:	0580                	addi	s0,sp,704
     37e:	0000                	unimp
     380:	0580                	addi	s0,sp,704
     382:	0000                	unimp
     384:	0580                	addi	s0,sp,704
     386:	0000                	unimp
     388:	0580                	addi	s0,sp,704
     38a:	0000                	unimp
     38c:	0580                	addi	s0,sp,704
     38e:	0000                	unimp
     390:	0580                	addi	s0,sp,704
     392:	0000                	unimp
     394:	0580                	addi	s0,sp,704
     396:	0000                	unimp
     398:	0580                	addi	s0,sp,704
     39a:	0000                	unimp
     39c:	0580                	addi	s0,sp,704
     39e:	0000                	unimp
     3a0:	0580                	addi	s0,sp,704
     3a2:	0000                	unimp
     3a4:	0580                	addi	s0,sp,704
     3a6:	0000                	unimp
     3a8:	0580                	addi	s0,sp,704
     3aa:	0000                	unimp
     3ac:	0580                	addi	s0,sp,704
     3ae:	0000                	unimp
     3b0:	0580                	addi	s0,sp,704
     3b2:	0000                	unimp
     3b4:	0580                	addi	s0,sp,704
     3b6:	0000                	unimp
     3b8:	0580                	addi	s0,sp,704
     3ba:	0000                	unimp
     3bc:	0580                	addi	s0,sp,704
     3be:	0000                	unimp
     3c0:	0580                	addi	s0,sp,704
     3c2:	0000                	unimp
     3c4:	0580                	addi	s0,sp,704
     3c6:	0000                	unimp
     3c8:	0580                	addi	s0,sp,704
     3ca:	0000                	unimp
     3cc:	0580                	addi	s0,sp,704
     3ce:	0000                	unimp
     3d0:	0580                	addi	s0,sp,704
     3d2:	0000                	unimp
     3d4:	0580                	addi	s0,sp,704
     3d6:	0000                	unimp
     3d8:	0580                	addi	s0,sp,704
     3da:	0000                	unimp
     3dc:	0580                	addi	s0,sp,704
     3de:	0000                	unimp
     3e0:	0580                	addi	s0,sp,704
     3e2:	0000                	unimp
     3e4:	0580                	addi	s0,sp,704
     3e6:	0000                	unimp
     3e8:	0580                	addi	s0,sp,704
     3ea:	0000                	unimp
     3ec:	0580                	addi	s0,sp,704
     3ee:	0000                	unimp
     3f0:	0580                	addi	s0,sp,704
     3f2:	0000                	unimp
     3f4:	0580                	addi	s0,sp,704
     3f6:	0000                	unimp
     3f8:	0580                	addi	s0,sp,704
     3fa:	0000                	unimp
     3fc:	0580                	addi	s0,sp,704
     3fe:	0000                	unimp
     400:	0580                	addi	s0,sp,704
     402:	0000                	unimp
     404:	0580                	addi	s0,sp,704
     406:	0000                	unimp
     408:	0580                	addi	s0,sp,704
     40a:	0000                	unimp
     40c:	0580                	addi	s0,sp,704
     40e:	0000                	unimp
     410:	0580                	addi	s0,sp,704
     412:	0000                	unimp
     414:	0580                	addi	s0,sp,704
     416:	0000                	unimp
     418:	0580                	addi	s0,sp,704
     41a:	0000                	unimp
     41c:	0580                	addi	s0,sp,704
     41e:	0000                	unimp
     420:	0580                	addi	s0,sp,704
     422:	0000                	unimp
     424:	0580                	addi	s0,sp,704
     426:	0000                	unimp
     428:	0580                	addi	s0,sp,704
     42a:	0000                	unimp
     42c:	0580                	addi	s0,sp,704
     42e:	0000                	unimp
     430:	0580                	addi	s0,sp,704
     432:	0000                	unimp
     434:	0580                	addi	s0,sp,704
     436:	0000                	unimp
     438:	0580                	addi	s0,sp,704
     43a:	0000                	unimp
     43c:	0580                	addi	s0,sp,704
     43e:	0000                	unimp
     440:	0580                	addi	s0,sp,704
     442:	0000                	unimp
     444:	0580                	addi	s0,sp,704
     446:	0000                	unimp
     448:	0580                	addi	s0,sp,704
     44a:	0000                	unimp
     44c:	0580                	addi	s0,sp,704
     44e:	0000                	unimp
     450:	0580                	addi	s0,sp,704
     452:	0000                	unimp
     454:	0580                	addi	s0,sp,704
     456:	0000                	unimp
     458:	0580                	addi	s0,sp,704
     45a:	0000                	unimp
     45c:	0580                	addi	s0,sp,704
     45e:	0000                	unimp
     460:	0580                	addi	s0,sp,704
     462:	0000                	unimp
     464:	0580                	addi	s0,sp,704
     466:	0000                	unimp
     468:	0580                	addi	s0,sp,704
     46a:	0000                	unimp
     46c:	0580                	addi	s0,sp,704
     46e:	0000                	unimp
     470:	0580                	addi	s0,sp,704
     472:	0000                	unimp
     474:	0580                	addi	s0,sp,704
     476:	0000                	unimp
     478:	0580                	addi	s0,sp,704
     47a:	0000                	unimp
     47c:	0580                	addi	s0,sp,704
     47e:	0000                	unimp
     480:	0580                	addi	s0,sp,704
     482:	0000                	unimp
     484:	0580                	addi	s0,sp,704
     486:	0000                	unimp
     488:	0580                	addi	s0,sp,704
     48a:	0000                	unimp
     48c:	0580                	addi	s0,sp,704
     48e:	0000                	unimp
     490:	0580                	addi	s0,sp,704
     492:	0000                	unimp
     494:	0580                	addi	s0,sp,704
     496:	0000                	unimp
     498:	0580                	addi	s0,sp,704
     49a:	0000                	unimp
     49c:	0580                	addi	s0,sp,704
     49e:	0000                	unimp
     4a0:	0580                	addi	s0,sp,704
     4a2:	0000                	unimp
     4a4:	0580                	addi	s0,sp,704
     4a6:	0000                	unimp
     4a8:	0580                	addi	s0,sp,704
     4aa:	0000                	unimp
     4ac:	0580                	addi	s0,sp,704
     4ae:	0000                	unimp
     4b0:	0580                	addi	s0,sp,704
     4b2:	0000                	unimp
     4b4:	0580                	addi	s0,sp,704
     4b6:	0000                	unimp
     4b8:	0580                	addi	s0,sp,704
     4ba:	0000                	unimp
     4bc:	0580                	addi	s0,sp,704
     4be:	0000                	unimp
     4c0:	0580                	addi	s0,sp,704
     4c2:	0000                	unimp
     4c4:	0580                	addi	s0,sp,704
     4c6:	0000                	unimp
     4c8:	0580                	addi	s0,sp,704
     4ca:	0000                	unimp
     4cc:	0580                	addi	s0,sp,704
     4ce:	0000                	unimp
     4d0:	0580                	addi	s0,sp,704
     4d2:	0000                	unimp
     4d4:	0580                	addi	s0,sp,704
     4d6:	0000                	unimp
     4d8:	0580                	addi	s0,sp,704
     4da:	0000                	unimp
     4dc:	0580                	addi	s0,sp,704
     4de:	0000                	unimp
     4e0:	0580                	addi	s0,sp,704
     4e2:	0000                	unimp
     4e4:	0580                	addi	s0,sp,704
     4e6:	0000                	unimp
     4e8:	0580                	addi	s0,sp,704
     4ea:	0000                	unimp
     4ec:	0580                	addi	s0,sp,704
     4ee:	0000                	unimp
     4f0:	0580                	addi	s0,sp,704
     4f2:	0000                	unimp
     4f4:	0580                	addi	s0,sp,704
     4f6:	0000                	unimp
     4f8:	0580                	addi	s0,sp,704
     4fa:	0000                	unimp
     4fc:	0580                	addi	s0,sp,704
     4fe:	0000                	unimp
     500:	0580                	addi	s0,sp,704
     502:	0000                	unimp
     504:	0580                	addi	s0,sp,704
     506:	0000                	unimp
     508:	0580                	addi	s0,sp,704
     50a:	0000                	unimp
     50c:	0580                	addi	s0,sp,704
     50e:	0000                	unimp
     510:	0580                	addi	s0,sp,704
     512:	0000                	unimp
     514:	0580                	addi	s0,sp,704
     516:	0000                	unimp
     518:	0580                	addi	s0,sp,704
     51a:	0000                	unimp
     51c:	0580                	addi	s0,sp,704
     51e:	0000                	unimp
     520:	0580                	addi	s0,sp,704
     522:	0000                	unimp
     524:	0580                	addi	s0,sp,704
     526:	0000                	unimp
     528:	0580                	addi	s0,sp,704
     52a:	0000                	unimp
     52c:	0580                	addi	s0,sp,704
     52e:	0000                	unimp
     530:	0580                	addi	s0,sp,704
     532:	0000                	unimp
     534:	0580                	addi	s0,sp,704
     536:	0000                	unimp
     538:	0580                	addi	s0,sp,704
     53a:	0000                	unimp
     53c:	0580                	addi	s0,sp,704
     53e:	0000                	unimp
     540:	0580                	addi	s0,sp,704
     542:	0000                	unimp
     544:	0580                	addi	s0,sp,704
     546:	0000                	unimp
     548:	0580                	addi	s0,sp,704
     54a:	0000                	unimp
     54c:	0580                	addi	s0,sp,704
     54e:	0000                	unimp
     550:	0580                	addi	s0,sp,704
     552:	0000                	unimp
     554:	0580                	addi	s0,sp,704
     556:	0000                	unimp
     558:	0580                	addi	s0,sp,704
     55a:	0000                	unimp
     55c:	0580                	addi	s0,sp,704
     55e:	0000                	unimp
     560:	0580                	addi	s0,sp,704
     562:	0000                	unimp
     564:	0580                	addi	s0,sp,704
     566:	0000                	unimp
     568:	0580                	addi	s0,sp,704
     56a:	0000                	unimp
     56c:	0580                	addi	s0,sp,704
     56e:	0000                	unimp
     570:	0580                	addi	s0,sp,704
     572:	0000                	unimp
     574:	0580                	addi	s0,sp,704
     576:	0000                	unimp
     578:	0580                	addi	s0,sp,704
     57a:	0000                	unimp
     57c:	0580                	addi	s0,sp,704
	...

00000580 <__dummy>:
	.long   __dummy
	.endr

  .global __dummy
__dummy:  
  j __fail
     580:	bebd                	j	fe <__fail>
	...

000005b4 <benchmark>:
int
benchmark (void)
{
  int i,j, temp;
  i = 2;
  while(i <= 10){
     5b4:	20001637          	lui	a2,0x20001
     5b8:	8bc60613          	addi	a2,a2,-1860 # 200008bc <a+0x8>
  i = 2;
     5bc:	4589                	li	a1,2
  while(i <= 10){
     5be:	452d                	li	a0,11
      j = i;
      while (a[j] < a[j-1])
     5c0:	4214                	lw	a3,0(a2)
     5c2:	ffc62703          	lw	a4,-4(a2)
     5c6:	87b2                	mv	a5,a2
     5c8:	00e6fa63          	bgeu	a3,a4,5dc <benchmark+0x28>
      {
	temp = a[j];
	a[j] = a[j-1];
     5cc:	c398                	sw	a4,0(a5)
      while (a[j] < a[j-1])
     5ce:	ff87a703          	lw	a4,-8(a5)
	a[j-1] = temp;
     5d2:	fed7ae23          	sw	a3,-4(a5)
      while (a[j] < a[j-1])
     5d6:	17f1                	addi	a5,a5,-4
     5d8:	fee6eae3          	bltu	a3,a4,5cc <benchmark+0x18>
	j--;
      }
      i++;
     5dc:	0585                	addi	a1,a1,1
  while(i <= 10){
     5de:	0611                	addi	a2,a2,4
     5e0:	fea590e3          	bne	a1,a0,5c0 <benchmark+0xc>
    }


  return 0;
}
     5e4:	4501                	li	a0,0
     5e6:	8082                	ret

000005e8 <initialise_benchmark>:

void initialise_benchmark() {
  a[0] = 0;
     5e8:	200017b7          	lui	a5,0x20001
     5ec:	8b478793          	addi	a5,a5,-1868 # 200008b4 <a>
  a[1] = 11;
     5f0:	472d                	li	a4,11
     5f2:	c3d8                	sw	a4,4(a5)
  a[2] = 10;
     5f4:	4729                	li	a4,10
     5f6:	c798                	sw	a4,8(a5)
  a[3] = 9;
     5f8:	4725                	li	a4,9
     5fa:	c7d8                	sw	a4,12(a5)
  a[4] = 8;
     5fc:	4721                	li	a4,8
     5fe:	cb98                	sw	a4,16(a5)
  a[5] = 7;
     600:	471d                	li	a4,7
     602:	cbd8                	sw	a4,20(a5)
  a[6] = 6;
     604:	4719                	li	a4,6
     606:	cf98                	sw	a4,24(a5)
  a[7] = 5;
     608:	4715                	li	a4,5
     60a:	cfd8                	sw	a4,28(a5)
  a[8] = 4;
     60c:	4711                	li	a4,4
     60e:	d398                	sw	a4,32(a5)
  a[9] = 3;
     610:	470d                	li	a4,3
     612:	d3d8                	sw	a4,36(a5)
  a[10]= 2;
     614:	4709                	li	a4,2
  a[0] = 0;
     616:	0007a023          	sw	zero,0(a5)
  a[10]= 2;
     61a:	d798                	sw	a4,40(a5)
}
     61c:	8082                	ret

0000061e <verify_benchmark>:

int verify_benchmark(int unused) {
  int i;
  int expected[] = {0,2,3,4,5,6,7,8,9,10,11};
     61e:	6795                	lui	a5,0x5
     620:	33c78793          	addi	a5,a5,828 # 533c <__errno+0x4a>
     624:	0007ae83          	lw	t4,0(a5)
     628:	0047ae03          	lw	t3,4(a5)
     62c:	0087a303          	lw	t1,8(a5)
     630:	00c7a883          	lw	a7,12(a5)
     634:	0107a803          	lw	a6,16(a5)
     638:	4bc8                	lw	a0,20(a5)
     63a:	4f8c                	lw	a1,24(a5)
     63c:	4fd0                	lw	a2,28(a5)
     63e:	5394                	lw	a3,32(a5)
     640:	53d8                	lw	a4,36(a5)
     642:	579c                	lw	a5,40(a5)
int verify_benchmark(int unused) {
     644:	715d                	addi	sp,sp,-80
     646:	c2a6                	sw	s1,68(sp)
     648:	200014b7          	lui	s1,0x20001
     64c:	c4a2                	sw	s0,72(sp)
     64e:	c0ca                	sw	s2,64(sp)
     650:	de4e                	sw	s3,60(sp)
     652:	dc52                	sw	s4,56(sp)
     654:	da56                	sw	s5,52(sp)
     656:	c686                	sw	ra,76(sp)
  int expected[] = {0,2,3,4,5,6,7,8,9,10,11};
     658:	c276                	sw	t4,4(sp)
     65a:	c472                	sw	t3,8(sp)
     65c:	c61a                	sw	t1,12(sp)
     65e:	c846                	sw	a7,16(sp)
     660:	ca42                	sw	a6,20(sp)
     662:	cc2a                	sw	a0,24(sp)
     664:	ce2e                	sw	a1,28(sp)
     666:	d032                	sw	a2,32(sp)
     668:	d236                	sw	a3,36(sp)
     66a:	d43a                	sw	a4,40(sp)
     66c:	d63e                	sw	a5,44(sp)
  for (i=0; i<11; i++)
     66e:	8b448493          	addi	s1,s1,-1868 # 200008b4 <a>
     672:	00410913          	addi	s2,sp,4
     676:	4401                	li	s0,0
     {// printf("%d\n",a[i]);
    if (a[i] != expected[i])
        printf("erro");
    else
        printf("a[%d]=%d=expected[%d]=%d\n",i,a[i],i,expected[i]);
     678:	6a95                	lui	s5,0x5
        printf("erro");
     67a:	6a15                	lui	s4,0x5
  for (i=0; i<11; i++)
     67c:	49ad                	li	s3,11
     67e:	a801                	j	68e <verify_benchmark+0x70>
     680:	0405                	addi	s0,s0,1
        printf("erro");
     682:	37e010ef          	jal	ra,1a00 <printf>
  for (i=0; i<11; i++)
     686:	0491                	addi	s1,s1,4
     688:	0911                	addi	s2,s2,4
     68a:	03340563          	beq	s0,s3,6b4 <verify_benchmark+0x96>
    if (a[i] != expected[i])
     68e:	4098                	lw	a4,0(s1)
     690:	00092783          	lw	a5,0(s2)
        printf("erro");
     694:	300a0513          	addi	a0,s4,768 # 5300 <__errno+0xe>
    if (a[i] != expected[i])
     698:	fef714e3          	bne	a4,a5,680 <verify_benchmark+0x62>
        printf("a[%d]=%d=expected[%d]=%d\n",i,a[i],i,expected[i]);
     69c:	86a2                	mv	a3,s0
     69e:	85a2                	mv	a1,s0
     6a0:	863a                	mv	a2,a4
     6a2:	308a8513          	addi	a0,s5,776 # 5308 <__errno+0x16>
  for (i=0; i<11; i++)
     6a6:	0405                	addi	s0,s0,1
        printf("a[%d]=%d=expected[%d]=%d\n",i,a[i],i,expected[i]);
     6a8:	358010ef          	jal	ra,1a00 <printf>
  for (i=0; i<11; i++)
     6ac:	0491                	addi	s1,s1,4
     6ae:	0911                	addi	s2,s2,4
     6b0:	fd341fe3          	bne	s0,s3,68e <verify_benchmark+0x70>
  //return 0;}
  //return 1;

}
}
     6b4:	40b6                	lw	ra,76(sp)
     6b6:	4426                	lw	s0,72(sp)
     6b8:	4496                	lw	s1,68(sp)
     6ba:	4906                	lw	s2,64(sp)
     6bc:	59f2                	lw	s3,60(sp)
     6be:	5a62                	lw	s4,56(sp)
     6c0:	5ad2                	lw	s5,52(sp)
     6c2:	6161                	addi	sp,sp,80
     6c4:	8082                	ret

000006c6 <fputc>:
t_ck_uart_device uart0 = {0xFFFF};

//重写fputc
int fputc(int ch, FILE *stream)
{ 
	ck_uart_putc(&uart0, (char)ch);
     6c6:	0ff57593          	andi	a1,a0,255
     6ca:	20000537          	lui	a0,0x20000
     6ce:	00450513          	addi	a0,a0,4 # 20000004 <uart0>
     6d2:	65c0106f          	j	1d2e <ck_uart_putc>

000006d6 <main>:
{
//--------------------------------------------------------
  // setup uart
  //--------------------------------------------------------
  t_ck_uart_cfig   uart_cfig;
  uart_cfig.baudrate = BAUD;       // any integer value is allowed
     6d6:	6795                	lui	a5,0x5
{
     6d8:	7179                	addi	sp,sp,-48
  uart_cfig.baudrate = BAUD;       // any integer value is allowed
     6da:	b0078793          	addi	a5,a5,-1280 # 4b00 <_malloc_r+0x400>
{
     6de:	d422                	sw	s0,40(sp)
  uart_cfig.baudrate = BAUD;       // any integer value is allowed
     6e0:	c43e                	sw	a5,8(sp)
  uart_cfig.parity = PARITY_NONE;     // PARITY_NONE / PARITY_ODD / PARITY_EVEN
  uart_cfig.stopbit = STOPBIT_1;      // STOPBIT_1 / STOPBIT_2
  uart_cfig.wordsize = WORDSIZE_8;    // from WORDSIZE_5 to WORDSIZE_8
  uart_cfig.txmode = ENABLE;          // ENABLE or DISABLE
  // open UART device with id = 0 (UART0)
  ck_uart_open(&uart0, 0);
     6e2:	20000437          	lui	s0,0x20000
  uart_cfig.wordsize = WORDSIZE_8;    // from WORDSIZE_5 to WORDSIZE_8
     6e6:	478d                	li	a5,3
     6e8:	ca3e                	sw	a5,20(sp)
  ck_uart_open(&uart0, 0);
     6ea:	4581                	li	a1,0
  uart_cfig.txmode = ENABLE;          // ENABLE or DISABLE
     6ec:	4785                	li	a5,1
  ck_uart_open(&uart0, 0);
     6ee:	00440513          	addi	a0,s0,4 # 20000004 <uart0>
{
     6f2:	d606                	sw	ra,44(sp)
  uart_cfig.txmode = ENABLE;          // ENABLE or DISABLE
     6f4:	ce3e                	sw	a5,28(sp)
  uart_cfig.parity = PARITY_NONE;     // PARITY_NONE / PARITY_ODD / PARITY_EVEN
     6f6:	c802                	sw	zero,16(sp)
  uart_cfig.stopbit = STOPBIT_1;      // STOPBIT_1 / STOPBIT_2
     6f8:	c602                	sw	zero,12(sp)
  ck_uart_open(&uart0, 0);
     6fa:	562010ef          	jal	ra,1c5c <ck_uart_open>
  // initialize uart using uart_cfig structure
  ck_uart_init(&uart0, &uart_cfig);
     6fe:	002c                	addi	a1,sp,8
     700:	00440513          	addi	a0,s0,4
     704:	56c010ef          	jal	ra,1c70 <ck_uart_init>


initialise_benchmark();
     708:	35c5                	jal	5e8 <initialise_benchmark>
benchmark();
     70a:	356d                	jal	5b4 <benchmark>
verify_benchmark(1);
     70c:	4505                	li	a0,1
     70e:	3f01                	jal	61e <verify_benchmark>
printf("insertsort TEST Finsh!\n");
     710:	6515                	lui	a0,0x5
     712:	32450513          	addi	a0,a0,804 # 5324 <__errno+0x32>
     716:	2a0010ef          	jal	ra,19b6 <puts>
   return 0;

    }
     71a:	50b2                	lw	ra,44(sp)
     71c:	5422                	lw	s0,40(sp)
     71e:	4501                	li	a0,0
     720:	6145                	addi	sp,sp,48
     722:	8082                	ret

00000724 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
     724:	00d67563          	bgeu	a2,a3,72e <_out_buffer+0xa>
    ((char*)buffer)[idx] = character;
     728:	95b2                	add	a1,a1,a2
     72a:	00a58023          	sb	a0,0(a1)
  }
}
     72e:	8082                	ret

00000730 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
     730:	8082                	ret

00000732 <_out_rev>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
     732:	7179                	addi	sp,sp,-48
     734:	d226                	sw	s1,36(sp)
     736:	d04a                	sw	s2,32(sp)
     738:	ce4e                	sw	s3,28(sp)
     73a:	cc52                	sw	s4,24(sp)
     73c:	ca56                	sw	s5,20(sp)
     73e:	c85a                	sw	s6,16(sp)
     740:	8ab2                	mv	s5,a2
     742:	c462                	sw	s8,8(sp)
     744:	c266                	sw	s9,4(sp)
     746:	c06a                	sw	s10,0(sp)
     748:	d606                	sw	ra,44(sp)
     74a:	d422                	sw	s0,40(sp)
     74c:	c65e                	sw	s7,12(sp)
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
     74e:	0038f613          	andi	a2,a7,3
{
     752:	8cc6                	mv	s9,a7
     754:	892a                	mv	s2,a0
     756:	89ae                	mv	s3,a1
     758:	8a36                	mv	s4,a3
     75a:	8b3a                	mv	s6,a4
     75c:	8d3e                	mv	s10,a5
     75e:	8c42                	mv	s8,a6
     760:	84d6                	mv	s1,s5
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
     762:	e205                	bnez	a2,782 <_out_rev+0x50>
    for (size_t i = len; i < width; i++) {
     764:	0107ff63          	bgeu	a5,a6,782 <_out_rev+0x50>
     768:	40f804b3          	sub	s1,a6,a5
     76c:	94d6                	add	s1,s1,s5
     76e:	8456                	mv	s0,s5
      out(' ', buffer, idx++, maxlen);
     770:	8622                	mv	a2,s0
     772:	86d2                	mv	a3,s4
     774:	0405                	addi	s0,s0,1
     776:	85ce                	mv	a1,s3
     778:	02000513          	li	a0,32
     77c:	9902                	jalr	s2
    for (size_t i = len; i < width; i++) {
     77e:	fe9419e3          	bne	s0,s1,770 <_out_rev+0x3e>
    }
  }

  // reverse string
  while (len) {
     782:	020d0163          	beqz	s10,7a4 <_out_rev+0x72>
     786:	01ab0433          	add	s0,s6,s10
     78a:	00940bb3          	add	s7,s0,s1
    out(buf[--len], buffer, idx++, maxlen);
     78e:	fff44503          	lbu	a0,-1(s0)
     792:	408b8633          	sub	a2,s7,s0
     796:	86d2                	mv	a3,s4
  while (len) {
     798:	147d                	addi	s0,s0,-1
    out(buf[--len], buffer, idx++, maxlen);
     79a:	85ce                	mv	a1,s3
     79c:	9902                	jalr	s2
  while (len) {
     79e:	fe8b18e3          	bne	s6,s0,78e <_out_rev+0x5c>
    out(buf[--len], buffer, idx++, maxlen);
     7a2:	94ea                	add	s1,s1,s10
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
     7a4:	002cfc93          	andi	s9,s9,2
     7a8:	020c8063          	beqz	s9,7c8 <_out_rev+0x96>
    while (idx - start_idx < width) {
     7ac:	41548ab3          	sub	s5,s1,s5
     7b0:	018afc63          	bgeu	s5,s8,7c8 <_out_rev+0x96>
      out(' ', buffer, idx++, maxlen);
     7b4:	8626                	mv	a2,s1
    while (idx - start_idx < width) {
     7b6:	0a85                	addi	s5,s5,1
      out(' ', buffer, idx++, maxlen);
     7b8:	86d2                	mv	a3,s4
     7ba:	85ce                	mv	a1,s3
     7bc:	02000513          	li	a0,32
     7c0:	0485                	addi	s1,s1,1
     7c2:	9902                	jalr	s2
    while (idx - start_idx < width) {
     7c4:	ff8ae8e3          	bltu	s5,s8,7b4 <_out_rev+0x82>
    }
  }

  return idx;
}
     7c8:	50b2                	lw	ra,44(sp)
     7ca:	5422                	lw	s0,40(sp)
     7cc:	5902                	lw	s2,32(sp)
     7ce:	49f2                	lw	s3,28(sp)
     7d0:	4a62                	lw	s4,24(sp)
     7d2:	4ad2                	lw	s5,20(sp)
     7d4:	4b42                	lw	s6,16(sp)
     7d6:	4bb2                	lw	s7,12(sp)
     7d8:	4c22                	lw	s8,8(sp)
     7da:	4c92                	lw	s9,4(sp)
     7dc:	4d02                	lw	s10,0(sp)
     7de:	8526                	mv	a0,s1
     7e0:	5492                	lw	s1,36(sp)
     7e2:	6145                	addi	sp,sp,48
     7e4:	8082                	ret

000007e6 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
     7e6:	43a2                	lw	t2,8(sp)
     7e8:	4282                	lw	t0,0(sp)
     7ea:	4f92                	lw	t6,4(sp)
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
     7ec:	0023f313          	andi	t1,t2,2
{
     7f0:	8f42                	mv	t5,a6
  if (!(flags & FLAGS_LEFT)) {
     7f2:	04031f63          	bnez	t1,850 <_ntoa_format+0x6a>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
     7f6:	0013f813          	andi	a6,t2,1
     7fa:	0e0f9d63          	bnez	t6,8f4 <_ntoa_format+0x10e>
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     7fe:	0257f363          	bgeu	a5,t0,824 <_ntoa_format+0x3e>
     802:	437d                	li	t1,31
     804:	1cf36b63          	bltu	t1,a5,9da <_ntoa_format+0x1f4>
      buf[len++] = '0';
     808:	03000e13          	li	t3,48
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     80c:	02000e93          	li	t4,32
     810:	a019                	j	816 <_ntoa_format+0x30>
     812:	01d78963          	beq	a5,t4,824 <_ntoa_format+0x3e>
      buf[len++] = '0';
     816:	0785                	addi	a5,a5,1
     818:	00f70333          	add	t1,a4,a5
     81c:	ffc30fa3          	sb	t3,-1(t1)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     820:	fe57e9e3          	bltu	a5,t0,812 <_ntoa_format+0x2c>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     824:	02080663          	beqz	a6,850 <_ntoa_format+0x6a>
     828:	03f7f463          	bgeu	a5,t6,850 <_ntoa_format+0x6a>
     82c:	02000813          	li	a6,32
     830:	0f078363          	beq	a5,a6,916 <_ntoa_format+0x130>
      buf[len++] = '0';
     834:	03000e13          	li	t3,48
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     838:	02000e93          	li	t4,32
     83c:	a019                	j	842 <_ntoa_format+0x5c>
     83e:	0dd78c63          	beq	a5,t4,916 <_ntoa_format+0x130>
      buf[len++] = '0';
     842:	0785                	addi	a5,a5,1
     844:	00f70333          	add	t1,a4,a5
     848:	ffc30fa3          	sb	t3,-1(t1)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     84c:	fff799e3          	bne	a5,t6,83e <_ntoa_format+0x58>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
     850:	0103f813          	andi	a6,t2,16
     854:	06080a63          	beqz	a6,8c8 <_ntoa_format+0xe2>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
     858:	4003f813          	andi	a6,t2,1024
     85c:	04081563          	bnez	a6,8a6 <_ntoa_format+0xc0>
     860:	02079f63          	bnez	a5,89e <_ntoa_format+0xb8>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     864:	47c1                	li	a5,16
     866:	12f88663          	beq	a7,a5,992 <_ntoa_format+0x1ac>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     86a:	4789                	li	a5,2
     86c:	16f88163          	beq	a7,a5,9ce <_ntoa_format+0x1e8>
      buf[len++] = 'b';
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
      buf[len++] = '0';
     870:	03000793          	li	a5,48
     874:	00f70023          	sb	a5,0(a4)
     878:	4785                	li	a5,1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    if (negative) {
     87a:	040f0d63          	beqz	t5,8d4 <_ntoa_format+0xee>
      buf[len++] = '-';
     87e:	00f70833          	add	a6,a4,a5
     882:	02d00893          	li	a7,45
     886:	01180023          	sb	a7,0(a6) # 50000 <_global_impure_ptr+0x4a840>
     88a:	0785                	addi	a5,a5,1
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
     88c:	889e                	mv	a7,t2
     88e:	887e                	mv	a6,t6
     890:	b54d                	j	732 <_out_rev>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
     892:	4003f793          	andi	a5,t2,1024
     896:	12079363          	bnez	a5,9bc <_ntoa_format+0x1d6>
     89a:	02000793          	li	a5,32
     89e:	0af28e63          	beq	t0,a5,95a <_ntoa_format+0x174>
     8a2:	0aff8c63          	beq	t6,a5,95a <_ntoa_format+0x174>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     8a6:	4841                	li	a6,16
     8a8:	0d088563          	beq	a7,a6,972 <_ntoa_format+0x18c>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     8ac:	4809                	li	a6,2
     8ae:	09088c63          	beq	a7,a6,946 <_ntoa_format+0x160>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
     8b2:	02000813          	li	a6,32
     8b6:	fd078be3          	beq	a5,a6,88c <_ntoa_format+0xa6>
      buf[len++] = '0';
     8ba:	00f70833          	add	a6,a4,a5
     8be:	03000893          	li	a7,48
     8c2:	01180023          	sb	a7,0(a6)
     8c6:	0785                	addi	a5,a5,1
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
     8c8:	02000813          	li	a6,32
     8cc:	fd0780e3          	beq	a5,a6,88c <_ntoa_format+0xa6>
    if (negative) {
     8d0:	fa0f17e3          	bnez	t5,87e <_ntoa_format+0x98>
    else if (flags & FLAGS_PLUS) {
     8d4:	0043f813          	andi	a6,t2,4
     8d8:	04081d63          	bnez	a6,932 <_ntoa_format+0x14c>
    else if (flags & FLAGS_SPACE) {
     8dc:	0083f813          	andi	a6,t2,8
     8e0:	fa0806e3          	beqz	a6,88c <_ntoa_format+0xa6>
      buf[len++] = ' ';
     8e4:	00f70833          	add	a6,a4,a5
     8e8:	02000893          	li	a7,32
     8ec:	01180023          	sb	a7,0(a6)
     8f0:	0785                	addi	a5,a5,1
     8f2:	bf69                	j	88c <_ntoa_format+0xa6>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
     8f4:	02080763          	beqz	a6,922 <_ntoa_format+0x13c>
     8f8:	040f1f63          	bnez	t5,956 <_ntoa_format+0x170>
     8fc:	00c3f313          	andi	t1,t2,12
     900:	04031b63          	bnez	t1,956 <_ntoa_format+0x170>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     904:	f257f2e3          	bgeu	a5,t0,828 <_ntoa_format+0x42>
     908:	437d                	li	t1,31
     90a:	eef37fe3          	bgeu	t1,a5,808 <_ntoa_format+0x22>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     90e:	02000793          	li	a5,32
     912:	f3f7ffe3          	bgeu	a5,t6,850 <_ntoa_format+0x6a>
  if (flags & FLAGS_HASH) {
     916:	0103f793          	andi	a5,t2,16
     91a:	ffa5                	bnez	a5,892 <_ntoa_format+0xac>
     91c:	02000793          	li	a5,32
     920:	b7b5                	j	88c <_ntoa_format+0xa6>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     922:	f257f7e3          	bgeu	a5,t0,850 <_ntoa_format+0x6a>
     926:	437d                	li	t1,31
     928:	eef370e3          	bgeu	t1,a5,808 <_ntoa_format+0x22>
     92c:	02000793          	li	a5,32
     930:	b705                	j	850 <_ntoa_format+0x6a>
      buf[len++] = '+';  // ignore the space if the '+' exists
     932:	00f70833          	add	a6,a4,a5
     936:	02b00893          	li	a7,43
     93a:	01180023          	sb	a7,0(a6)
     93e:	0785                	addi	a5,a5,1
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
     940:	889e                	mv	a7,t2
     942:	887e                	mv	a6,t6
     944:	b3fd                	j	732 <_out_rev>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     946:	02000813          	li	a6,32
     94a:	f50781e3          	beq	a5,a6,88c <_ntoa_format+0xa6>
      buf[len++] = 'b';
     94e:	00f70833          	add	a6,a4,a5
     952:	0785                	addi	a5,a5,1
     954:	a055                	j	9f8 <_ntoa_format+0x212>
      width--;
     956:	1ffd                	addi	t6,t6,-1
     958:	b775                	j	904 <_ntoa_format+0x11e>
      len--;
     95a:	fff78813          	addi	a6,a5,-1
      if (len && (base == 16U)) {
     95e:	f00803e3          	beqz	a6,864 <_ntoa_format+0x7e>
     962:	4341                	li	t1,16
     964:	08688063          	beq	a7,t1,9e4 <_ntoa_format+0x1fe>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     968:	4309                	li	t1,2
     96a:	08688663          	beq	a7,t1,9f6 <_ntoa_format+0x210>
     96e:	87c2                	mv	a5,a6
     970:	b7a9                	j	8ba <_ntoa_format+0xd4>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     972:	0203f813          	andi	a6,t2,32
     976:	02081763          	bnez	a6,9a4 <_ntoa_format+0x1be>
     97a:	02000813          	li	a6,32
     97e:	f10787e3          	beq	a5,a6,88c <_ntoa_format+0xa6>
      buf[len++] = 'x';
     982:	00f708b3          	add	a7,a4,a5
     986:	0785                	addi	a5,a5,1
     988:	07800813          	li	a6,120
     98c:	01088023          	sb	a6,0(a7)
     990:	b70d                	j	8b2 <_ntoa_format+0xcc>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     992:	0203f793          	andi	a5,t2,32
     996:	e795                	bnez	a5,9c2 <_ntoa_format+0x1dc>
      buf[len++] = 'x';
     998:	07800793          	li	a5,120
     99c:	00f70023          	sb	a5,0(a4)
     9a0:	4785                	li	a5,1
     9a2:	bf21                	j	8ba <_ntoa_format+0xd4>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     9a4:	02000813          	li	a6,32
     9a8:	ef0782e3          	beq	a5,a6,88c <_ntoa_format+0xa6>
      buf[len++] = 'X';
     9ac:	00f70833          	add	a6,a4,a5
     9b0:	05800893          	li	a7,88
     9b4:	01180023          	sb	a7,0(a6)
     9b8:	0785                	addi	a5,a5,1
     9ba:	bde5                	j	8b2 <_ntoa_format+0xcc>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
     9bc:	02000793          	li	a5,32
     9c0:	b5dd                	j	8a6 <_ntoa_format+0xc0>
      buf[len++] = 'X';
     9c2:	05800793          	li	a5,88
     9c6:	00f70023          	sb	a5,0(a4)
     9ca:	4785                	li	a5,1
     9cc:	b5fd                	j	8ba <_ntoa_format+0xd4>
      buf[len++] = 'b';
     9ce:	06200793          	li	a5,98
     9d2:	00f70023          	sb	a5,0(a4)
     9d6:	4785                	li	a5,1
     9d8:	b5cd                	j	8ba <_ntoa_format+0xd4>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     9da:	02000793          	li	a5,32
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     9de:	e40815e3          	bnez	a6,828 <_ntoa_format+0x42>
     9e2:	b5bd                	j	850 <_ntoa_format+0x6a>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     9e4:	0203f893          	andi	a7,t2,32
        len--;
     9e8:	17f9                	addi	a5,a5,-2
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     9ea:	fc0891e3          	bnez	a7,9ac <_ntoa_format+0x1c6>
      buf[len++] = 'x';
     9ee:	00f708b3          	add	a7,a4,a5
     9f2:	87c2                	mv	a5,a6
     9f4:	bf51                	j	988 <_ntoa_format+0x1a2>
      buf[len++] = 'b';
     9f6:	983a                	add	a6,a6,a4
     9f8:	06200893          	li	a7,98
     9fc:	01180023          	sb	a7,0(a6)
     a00:	bd4d                	j	8b2 <_ntoa_format+0xcc>

00000a02 <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
     a02:	7139                	addi	sp,sp,-64
     a04:	dc22                	sw	s0,56(sp)
     a06:	de06                	sw	ra,60(sp)
     a08:	8ec2                	mv	t4,a6
     a0a:	4416                	lw	s0,68(sp)
     a0c:	8e3a                	mv	t3,a4
     a0e:	883e                	mv	a6,a5
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
     a10:	e709                	bnez	a4,a1a <_ntoa_long+0x18>
    flags &= ~FLAGS_HASH;
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
     a12:	40047793          	andi	a5,s0,1024
    flags &= ~FLAGS_HASH;
     a16:	983d                	andi	s0,s0,-17
  if (!(flags & FLAGS_PRECISION) || value) {
     a18:	e3bd                	bnez	a5,a7e <_ntoa_long+0x7c>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     a1a:	02047713          	andi	a4,s0,32
     a1e:	06100293          	li	t0,97
     a22:	eb39                	bnez	a4,a78 <_ntoa_long+0x76>
     a24:	4781                	li	a5,0
     a26:	0818                	addi	a4,sp,16
     a28:	43a5                	li	t2,9
     a2a:	12d9                	addi	t0,t0,-10
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     a2c:	02000093          	li	ra,32
     a30:	a021                	j	a38 <_ntoa_long+0x36>
     a32:	02178963          	beq	a5,ra,a64 <_ntoa_long+0x62>
      value /= base;
     a36:	8e1a                	mv	t3,t1
      const char digit = (char)(value % base);
     a38:	03de7f33          	remu	t5,t3,t4
     a3c:	0fff7313          	andi	t1,t5,255
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     a40:	03030f93          	addi	t6,t1,48
     a44:	9316                	add	t1,t1,t0
     a46:	0ff37313          	andi	t1,t1,255
     a4a:	01e3e463          	bltu	t2,t5,a52 <_ntoa_long+0x50>
     a4e:	0ffff313          	andi	t1,t6,255
     a52:	0785                	addi	a5,a5,1
     a54:	00f70f33          	add	t5,a4,a5
     a58:	fe6f0fa3          	sb	t1,-1(t5)
      value /= base;
     a5c:	03de5333          	divu	t1,t3,t4
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     a60:	fdde79e3          	bgeu	t3,t4,a32 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
     a64:	4306                	lw	t1,64(sp)
     a66:	c422                	sw	s0,8(sp)
     a68:	c046                	sw	a7,0(sp)
     a6a:	c21a                	sw	t1,4(sp)
     a6c:	88f6                	mv	a7,t4
     a6e:	3ba5                	jal	7e6 <_ntoa_format>
}
     a70:	50f2                	lw	ra,60(sp)
     a72:	5462                	lw	s0,56(sp)
     a74:	6121                	addi	sp,sp,64
     a76:	8082                	ret
     a78:	04100293          	li	t0,65
     a7c:	b765                	j	a24 <_ntoa_long+0x22>
  size_t len = 0U;
     a7e:	4781                	li	a5,0
     a80:	0818                	addi	a4,sp,16
     a82:	b7cd                	j	a64 <_ntoa_long+0x62>

00000a84 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
     a84:	7175                	addi	sp,sp,-144
     a86:	d2d6                	sw	s5,100(sp)
     a88:	d0da                	sw	s6,96(sp)
     a8a:	cede                	sw	s7,92(sp)
     a8c:	cce2                	sw	s8,88(sp)
     a8e:	cae6                	sw	s9,84(sp)
     a90:	c8ea                	sw	s10,80(sp)
     a92:	c6ee                	sw	s11,76(sp)
     a94:	de86                	sw	ra,124(sp)
     a96:	8dbe                	mv	s11,a5
     a98:	dca2                	sw	s0,120(sp)
     a9a:	daa6                	sw	s1,116(sp)
     a9c:	d8ca                	sw	s2,112(sp)
     a9e:	d6ce                	sw	s3,108(sp)
     aa0:	d4d2                	sw	s4,104(sp)
     aa2:	c746                	sw	a7,140(sp)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
     aa4:	8fd9                	or	a5,a5,a4
{
     aa6:	cc2a                	sw	a0,24(sp)
     aa8:	ce2e                	sw	a1,28(sp)
     aaa:	4b4a                	lw	s6,144(sp)
     aac:	8aba                	mv	s5,a4
     aae:	8bb2                	mv	s7,a2
     ab0:	8c36                	mv	s8,a3
     ab2:	8cc2                	mv	s9,a6
     ab4:	8d46                	mv	s10,a7
  if (!value) {
     ab6:	eb89                	bnez	a5,ac8 <_ntoa_long_long+0x44>
    flags &= ~FLAGS_HASH;
     ab8:	477a                	lw	a4,156(sp)
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
     aba:	47fa                	lw	a5,156(sp)
    flags &= ~FLAGS_HASH;
     abc:	fef77a13          	andi	s4,a4,-17
  if (!(flags & FLAGS_PRECISION) || value) {
     ac0:	4007f793          	andi	a5,a5,1024
    flags &= ~FLAGS_HASH;
     ac4:	cf52                	sw	s4,156(sp)
  if (!(flags & FLAGS_PRECISION) || value) {
     ac6:	e3bd                	bnez	a5,b2c <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     ac8:	47fa                	lw	a5,156(sp)
     aca:	06100413          	li	s0,97
     ace:	0207f793          	andi	a5,a5,32
     ad2:	e3c5                	bnez	a5,b72 <_ntoa_long_long+0xee>
     ad4:	4a01                	li	s4,0
     ad6:	1004                	addi	s1,sp,32
     ad8:	4925                	li	s2,9
     ada:	1459                	addi	s0,s0,-10
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     adc:	02000993          	li	s3,32
      const char digit = (char)(value % base);
     ae0:	866a                	mv	a2,s10
     ae2:	86da                	mv	a3,s6
     ae4:	8556                	mv	a0,s5
     ae6:	85ee                	mv	a1,s11
     ae8:	6b0010ef          	jal	ra,2198 <__umoddi3>
     aec:	0ff57513          	andi	a0,a0,255
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     af0:	00850833          	add	a6,a0,s0
     af4:	03050613          	addi	a2,a0,48
     af8:	0ff87813          	andi	a6,a6,255
     afc:	00a96463          	bltu	s2,a0,b04 <_ntoa_long_long+0x80>
     b00:	0ff67813          	andi	a6,a2,255
     b04:	0a05                	addi	s4,s4,1
     b06:	014488b3          	add	a7,s1,s4
      value /= base;
     b0a:	8556                	mv	a0,s5
     b0c:	85ee                	mv	a1,s11
     b0e:	866a                	mv	a2,s10
     b10:	86da                	mv	a3,s6
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     b12:	ff088fa3          	sb	a6,-1(a7)
      value /= base;
     b16:	322010ef          	jal	ra,1e38 <__udivdi3>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     b1a:	016deb63          	bltu	s11,s6,b30 <_ntoa_long_long+0xac>
     b1e:	05bb0763          	beq	s6,s11,b6c <_ntoa_long_long+0xe8>
     b22:	013a0763          	beq	s4,s3,b30 <_ntoa_long_long+0xac>
      value /= base;
     b26:	8aaa                	mv	s5,a0
     b28:	8dae                	mv	s11,a1
     b2a:	bf5d                	j	ae0 <_ntoa_long_long+0x5c>
  size_t len = 0U;
     b2c:	4a01                	li	s4,0
     b2e:	1004                	addi	s1,sp,32
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
     b30:	476a                	lw	a4,152(sp)
     b32:	47fa                	lw	a5,156(sp)
     b34:	45f2                	lw	a1,28(sp)
     b36:	c23a                	sw	a4,4(sp)
     b38:	475a                	lw	a4,148(sp)
     b3a:	4562                	lw	a0,24(sp)
     b3c:	c43e                	sw	a5,8(sp)
     b3e:	c03a                	sw	a4,0(sp)
     b40:	88ea                	mv	a7,s10
     b42:	8866                	mv	a6,s9
     b44:	87d2                	mv	a5,s4
     b46:	8726                	mv	a4,s1
     b48:	86e2                	mv	a3,s8
     b4a:	865e                	mv	a2,s7
     b4c:	3969                	jal	7e6 <_ntoa_format>
}
     b4e:	50f6                	lw	ra,124(sp)
     b50:	5466                	lw	s0,120(sp)
     b52:	54d6                	lw	s1,116(sp)
     b54:	5946                	lw	s2,112(sp)
     b56:	59b6                	lw	s3,108(sp)
     b58:	5a26                	lw	s4,104(sp)
     b5a:	5a96                	lw	s5,100(sp)
     b5c:	5b06                	lw	s6,96(sp)
     b5e:	4bf6                	lw	s7,92(sp)
     b60:	4c66                	lw	s8,88(sp)
     b62:	4cd6                	lw	s9,84(sp)
     b64:	4d46                	lw	s10,80(sp)
     b66:	4db6                	lw	s11,76(sp)
     b68:	6149                	addi	sp,sp,144
     b6a:	8082                	ret
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     b6c:	fbaafbe3          	bgeu	s5,s10,b22 <_ntoa_long_long+0x9e>
     b70:	b7c1                	j	b30 <_ntoa_long_long+0xac>
     b72:	04100413          	li	s0,65
     b76:	bfb9                	j	ad4 <_ntoa_long_long+0x50>

00000b78 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
     b78:	7119                	addi	sp,sp,-128
     b7a:	d8ca                	sw	s2,112(sp)
     b7c:	d6ce                	sw	s3,108(sp)
     b7e:	d4d2                	sw	s4,104(sp)
     b80:	d2d6                	sw	s5,100(sp)
     b82:	89aa                	mv	s3,a0
     b84:	8a2e                	mv	s4,a1
     b86:	8932                	mv	s2,a2
     b88:	8ab6                	mv	s5,a3
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
     b8a:	863a                	mv	a2,a4
     b8c:	86be                	mv	a3,a5
     b8e:	853a                	mv	a0,a4
     b90:	85be                	mv	a1,a5
{
     b92:	dca2                	sw	s0,120(sp)
     b94:	daa6                	sw	s1,116(sp)
     b96:	d0da                	sw	s6,96(sp)
     b98:	cce2                	sw	s8,88(sp)
     b9a:	cae6                	sw	s9,84(sp)
     b9c:	de86                	sw	ra,124(sp)
     b9e:	cede                	sw	s7,92(sp)
     ba0:	c8ea                	sw	s10,80(sp)
     ba2:	c6ee                	sw	s11,76(sp)
     ba4:	843a                	mv	s0,a4
     ba6:	84be                	mv	s1,a5
     ba8:	8c42                	mv	s8,a6
     baa:	8b46                	mv	s6,a7
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
     bac:	071020ef          	jal	ra,341c <__eqdf2>
{
     bb0:	4c8a                	lw	s9,128(sp)
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
     bb2:	36051063          	bnez	a0,f12 <_etoa+0x39a>
     bb6:	6795                	lui	a5,0x5
     bb8:	7287a603          	lw	a2,1832(a5) # 5728 <__erodata>
     bbc:	72c7a683          	lw	a3,1836(a5)
     bc0:	8522                	mv	a0,s0
     bc2:	85a6                	mv	a1,s1
     bc4:	0fd020ef          	jal	ra,34c0 <__gedf2>
     bc8:	34a04563          	bgtz	a0,f12 <_etoa+0x39a>
     bcc:	6795                	lui	a5,0x5
     bce:	7307a603          	lw	a2,1840(a5) # 5730 <__erodata+0x8>
     bd2:	7347a683          	lw	a3,1844(a5)
     bd6:	8522                	mv	a0,s0
     bd8:	85a6                	mv	a1,s1
     bda:	19d020ef          	jal	ra,3576 <__ledf2>
     bde:	32054a63          	bltz	a0,f12 <_etoa+0x39a>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
  }

  // determine the sign
  const bool negative = value < 0;
  if (negative) {
     be2:	8522                	mv	a0,s0
     be4:	85a6                	mv	a1,s1
     be6:	4601                	li	a2,0
     be8:	4681                	li	a3,0
     bea:	18d020ef          	jal	ra,3576 <__ledf2>
    value = -value;
     bee:	80000bb7          	lui	s7,0x80000
     bf2:	d222                	sw	s0,36(sp)
     bf4:	009bcbb3          	xor	s7,s7,s1
  if (negative) {
     bf8:	00054363          	bltz	a0,bfe <_etoa+0x86>
     bfc:	8ba6                	mv	s7,s1
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
     bfe:	400cf793          	andi	a5,s9,1024
     c02:	de3e                	sw	a5,60(sp)
     c04:	e391                	bnez	a5,c08 <_etoa+0x90>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
     c06:	4c19                	li	s8,6
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
     c08:	014bd513          	srli	a0,s7,0x14
     c0c:	7ff57513          	andi	a0,a0,2047
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
     c10:	c0150513          	addi	a0,a0,-1023
     c14:	1e3030ef          	jal	ra,45f6 <__floatsidf>
     c18:	6795                	lui	a5,0x5
     c1a:	7387a603          	lw	a2,1848(a5) # 5738 <__erodata+0x10>
     c1e:	73c7a683          	lw	a3,1852(a5)
     c22:	20b020ef          	jal	ra,362c <__muldf3>
     c26:	6795                	lui	a5,0x5
     c28:	7407a603          	lw	a2,1856(a5) # 5740 <__erodata+0x18>
     c2c:	7447a683          	lw	a3,1860(a5)
     c30:	0a9010ef          	jal	ra,24d8 <__adddf3>
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
     c34:	00cb9793          	slli	a5,s7,0xc
     c38:	00c7d713          	srli	a4,a5,0xc
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
     c3c:	6795                	lui	a5,0x5
     c3e:	7487a603          	lw	a2,1864(a5) # 5748 <__erodata+0x20>
     c42:	74c7a683          	lw	a3,1868(a5)
     c46:	3ff007b7          	lui	a5,0x3ff00
     c4a:	8fd9                	or	a5,a5,a4
     c4c:	8daa                	mv	s11,a0
     c4e:	8d2e                	mv	s10,a1
     c50:	8522                	mv	a0,s0
     c52:	85be                	mv	a1,a5
     c54:	777020ef          	jal	ra,3bca <__subdf3>
     c58:	6795                	lui	a5,0x5
     c5a:	7507a603          	lw	a2,1872(a5) # 5750 <__erodata+0x28>
     c5e:	7547a683          	lw	a3,1876(a5)
     c62:	1cb020ef          	jal	ra,362c <__muldf3>
     c66:	862a                	mv	a2,a0
     c68:	86ae                	mv	a3,a1
     c6a:	856e                	mv	a0,s11
     c6c:	85ea                	mv	a1,s10
     c6e:	06b010ef          	jal	ra,24d8 <__adddf3>
     c72:	025030ef          	jal	ra,4496 <__fixdfsi>
     c76:	8d2a                	mv	s10,a0
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
     c78:	17f030ef          	jal	ra,45f6 <__floatsidf>
     c7c:	6795                	lui	a5,0x5
     c7e:	7587a603          	lw	a2,1880(a5) # 5758 <__erodata+0x30>
     c82:	75c7a683          	lw	a3,1884(a5)
     c86:	8dae                	mv	s11,a1
     c88:	cc2a                	sw	a0,24(sp)
     c8a:	1a3020ef          	jal	ra,362c <__muldf3>
     c8e:	6715                	lui	a4,0x5
     c90:	76072603          	lw	a2,1888(a4) # 5760 <__erodata+0x38>
     c94:	76472683          	lw	a3,1892(a4)
     c98:	041010ef          	jal	ra,24d8 <__adddf3>
     c9c:	7fa030ef          	jal	ra,4496 <__fixdfsi>
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
     ca0:	47e2                	lw	a5,24(sp)
     ca2:	6695                	lui	a3,0x5
     ca4:	7686a603          	lw	a2,1896(a3) # 5768 <__erodata+0x40>
     ca8:	76c6a683          	lw	a3,1900(a3)
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
     cac:	872a                	mv	a4,a0
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
     cae:	85ee                	mv	a1,s11
     cb0:	853e                	mv	a0,a5
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
     cb2:	8dba                	mv	s11,a4
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
     cb4:	179020ef          	jal	ra,362c <__muldf3>
     cb8:	87aa                	mv	a5,a0
     cba:	856e                	mv	a0,s11
     cbc:	cc3e                	sw	a5,24(sp)
     cbe:	d46e                	sw	s11,40(sp)
     cc0:	8dae                	mv	s11,a1
     cc2:	135030ef          	jal	ra,45f6 <__floatsidf>
     cc6:	6715                	lui	a4,0x5
     cc8:	77072603          	lw	a2,1904(a4) # 5770 <__erodata+0x48>
     ccc:	77472683          	lw	a3,1908(a4)
     cd0:	15d020ef          	jal	ra,362c <__muldf3>
     cd4:	47e2                	lw	a5,24(sp)
     cd6:	862a                	mv	a2,a0
     cd8:	86ae                	mv	a3,a1
     cda:	853e                	mv	a0,a5
     cdc:	85ee                	mv	a1,s11
     cde:	6ed020ef          	jal	ra,3bca <__subdf3>
  const double z2 = z * z;
     ce2:	862a                	mv	a2,a0
     ce4:	86ae                	mv	a3,a1
     ce6:	d62a                	sw	a0,44(sp)
     ce8:	cc2e                	sw	a1,24(sp)
     cea:	143020ef          	jal	ra,362c <__muldf3>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     cee:	47e2                	lw	a5,24(sp)
     cf0:	5732                	lw	a4,44(sp)
  const double z2 = z * z;
     cf2:	8daa                	mv	s11,a0
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     cf4:	86be                	mv	a3,a5
  const double z2 = z * z;
     cf6:	882e                	mv	a6,a1
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     cf8:	863a                	mv	a2,a4
     cfa:	85be                	mv	a1,a5
     cfc:	853a                	mv	a0,a4
     cfe:	da3e                	sw	a5,52(sp)
     d00:	dc3a                	sw	a4,56(sp)
  const double z2 = z * z;
     d02:	cc42                	sw	a6,24(sp)
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     d04:	7d4010ef          	jal	ra,24d8 <__adddf3>
     d08:	6695                	lui	a3,0x5
     d0a:	882e                	mv	a6,a1
     d0c:	7786a603          	lw	a2,1912(a3) # 5778 <__erodata+0x50>
     d10:	45e2                	lw	a1,24(sp)
     d12:	77c6a683          	lw	a3,1916(a3)
     d16:	88aa                	mv	a7,a0
     d18:	856e                	mv	a0,s11
     d1a:	d846                	sw	a7,48(sp)
     d1c:	d642                	sw	a6,44(sp)
     d1e:	072020ef          	jal	ra,2d90 <__divdf3>
     d22:	6715                	lui	a4,0x5
     d24:	78072603          	lw	a2,1920(a4) # 5780 <__erodata+0x58>
     d28:	78472683          	lw	a3,1924(a4)
     d2c:	7ac010ef          	jal	ra,24d8 <__adddf3>
     d30:	86ae                	mv	a3,a1
     d32:	45e2                	lw	a1,24(sp)
     d34:	862a                	mv	a2,a0
     d36:	856e                	mv	a0,s11
     d38:	058020ef          	jal	ra,2d90 <__divdf3>
     d3c:	6695                	lui	a3,0x5
     d3e:	7886a603          	lw	a2,1928(a3) # 5788 <__erodata+0x60>
     d42:	78c6a683          	lw	a3,1932(a3)
     d46:	792010ef          	jal	ra,24d8 <__adddf3>
     d4a:	86ae                	mv	a3,a1
     d4c:	45e2                	lw	a1,24(sp)
     d4e:	862a                	mv	a2,a0
     d50:	856e                	mv	a0,s11
     d52:	03e020ef          	jal	ra,2d90 <__divdf3>
     d56:	5762                	lw	a4,56(sp)
     d58:	57d2                	lw	a5,52(sp)
     d5a:	6695                	lui	a3,0x5
     d5c:	832a                	mv	t1,a0
     d5e:	8dae                	mv	s11,a1
     d60:	7906a503          	lw	a0,1936(a3) # 5790 <__erodata+0x68>
     d64:	7946a583          	lw	a1,1940(a3)
     d68:	863a                	mv	a2,a4
     d6a:	86be                	mv	a3,a5
     d6c:	cc1a                	sw	t1,24(sp)
     d6e:	65d020ef          	jal	ra,3bca <__subdf3>
     d72:	4362                	lw	t1,24(sp)
     d74:	862a                	mv	a2,a0
     d76:	86ae                	mv	a3,a1
     d78:	851a                	mv	a0,t1
     d7a:	85ee                	mv	a1,s11
     d7c:	75c010ef          	jal	ra,24d8 <__adddf3>
     d80:	58c2                	lw	a7,48(sp)
     d82:	5832                	lw	a6,44(sp)
     d84:	862a                	mv	a2,a0
     d86:	86ae                	mv	a3,a1
     d88:	8546                	mv	a0,a7
     d8a:	85c2                	mv	a1,a6
     d8c:	004020ef          	jal	ra,2d90 <__divdf3>
     d90:	6795                	lui	a5,0x5
     d92:	7987a603          	lw	a2,1944(a5) # 5798 <__erodata+0x70>
     d96:	79c7a683          	lw	a3,1948(a5)
     d9a:	73e010ef          	jal	ra,24d8 <__adddf3>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
     d9e:	57a2                	lw	a5,40(sp)
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     da0:	4601                	li	a2,0
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
     da2:	3ff78793          	addi	a5,a5,1023
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     da6:	07d2                	slli	a5,a5,0x14
     da8:	86be                	mv	a3,a5
     daa:	083020ef          	jal	ra,362c <__muldf3>
  // correct for rounding errors
  if (value < conv.F) {
     dae:	8622                	mv	a2,s0
     db0:	86de                	mv	a3,s7
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     db2:	8daa                	mv	s11,a0
     db4:	cc2e                	sw	a1,24(sp)
  if (value < conv.F) {
     db6:	70a020ef          	jal	ra,34c0 <__gedf2>
     dba:	18a04463          	bgtz	a0,f42 <_etoa+0x3ca>
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     dbe:	43e2                	lw	t2,24(sp)
     dc0:	836e                	mv	t1,s11
    expval--;
    conv.F /= 10;
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
     dc2:	063d0d93          	addi	s11,s10,99

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
     dc6:	00bcd793          	srli	a5,s9,0xb
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
     dca:	0c600713          	li	a4,198
     dce:	01b73db3          	sltu	s11,a4,s11
  if (flags & FLAGS_ADAPT_EXP) {
     dd2:	8b85                	andi	a5,a5,1
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
     dd4:	0d91                	addi	s11,s11,4
  if (flags & FLAGS_ADAPT_EXP) {
     dd6:	c7a1                	beqz	a5,e1e <_etoa+0x2a6>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
     dd8:	6795                	lui	a5,0x5
     dda:	7a07a603          	lw	a2,1952(a5) # 57a0 <__erodata+0x78>
     dde:	7a47a683          	lw	a3,1956(a5)
     de2:	8522                	mv	a0,s0
     de4:	85de                	mv	a1,s7
     de6:	cc1a                	sw	t1,24(sp)
     de8:	ce1e                	sw	t2,28(sp)
     dea:	6d6020ef          	jal	ra,34c0 <__gedf2>
     dee:	4362                	lw	t1,24(sp)
     df0:	43f2                	lw	t2,28(sp)
     df2:	00054f63          	bltz	a0,e10 <_etoa+0x298>
     df6:	6795                	lui	a5,0x5
     df8:	7a87a603          	lw	a2,1960(a5) # 57a8 <__erodata+0x80>
     dfc:	7ac7a683          	lw	a3,1964(a5)
     e00:	8522                	mv	a0,s0
     e02:	85de                	mv	a1,s7
     e04:	772020ef          	jal	ra,3576 <__ledf2>
     e08:	4362                	lw	t1,24(sp)
     e0a:	43f2                	lw	t2,28(sp)
     e0c:	14054863          	bltz	a0,f5c <_etoa+0x3e4>
      minwidth = 0U;
      expval   = 0;
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
     e10:	000c0763          	beqz	s8,e1e <_etoa+0x2a6>
        --prec;
     e14:	57f2                	lw	a5,60(sp)
     e16:	00f037b3          	snez	a5,a5
     e1a:	40fc0c33          	sub	s8,s8,a5
  if (width > minwidth) {
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
     e1e:	4881                	li	a7,0
  if (width > minwidth) {
     e20:	016df463          	bgeu	s11,s6,e28 <_etoa+0x2b0>
    fwidth -= minwidth;
     e24:	41bb08b3          	sub	a7,s6,s11
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
     e28:	002cf793          	andi	a5,s9,2
     e2c:	d43e                	sw	a5,40(sp)
     e2e:	c799                	beqz	a5,e3c <_etoa+0x2c4>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
     e30:	001db793          	seqz	a5,s11
     e34:	40f007b3          	neg	a5,a5
     e38:	00f8f8b3          	and	a7,a7,a5
  }

  // rescale the float value
  if (expval) {
     e3c:	000d0c63          	beqz	s10,e54 <_etoa+0x2dc>
    value /= conv.F;
     e40:	85de                	mv	a1,s7
     e42:	8522                	mv	a0,s0
     e44:	861a                	mv	a2,t1
     e46:	869e                	mv	a3,t2
     e48:	cc46                	sw	a7,24(sp)
     e4a:	747010ef          	jal	ra,2d90 <__divdf3>
     e4e:	48e2                	lw	a7,24(sp)
     e50:	d22a                	sw	a0,36(sp)
     e52:	8bae                	mv	s7,a1
  }

  // output the floating part
  const size_t start_idx = idx;
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
     e54:	8522                	mv	a0,s0
     e56:	85a6                	mv	a1,s1
     e58:	4601                	li	a2,0
     e5a:	4681                	li	a3,0
     e5c:	cc46                	sw	a7,24(sp)
     e5e:	718020ef          	jal	ra,3576 <__ledf2>
     e62:	48e2                	lw	a7,24(sp)
     e64:	00055663          	bgez	a0,e70 <_etoa+0x2f8>
     e68:	800007b7          	lui	a5,0x80000
     e6c:	0177cbb3          	xor	s7,a5,s7
     e70:	5512                	lw	a0,36(sp)
     e72:	77fd                	lui	a5,0xfffff
     e74:	7ff78793          	addi	a5,a5,2047 # fffff7ff <__kernel_stack+0xdff3f807>
     e78:	00fcf7b3          	and	a5,s9,a5
     e7c:	c03e                	sw	a5,0(sp)
     e7e:	872a                	mv	a4,a0
     e80:	8862                	mv	a6,s8
     e82:	87de                	mv	a5,s7
     e84:	86d6                	mv	a3,s5
     e86:	864a                	mv	a2,s2
     e88:	85d2                	mv	a1,s4
     e8a:	854e                	mv	a0,s3
     e8c:	20e5                	jal	f74 <_ftoa>
     e8e:	842a                	mv	s0,a0

  // output the exponent part
  if (minwidth) {
     e90:	060d8163          	beqz	s11,ef2 <_etoa+0x37a>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
     e94:	01ac9513          	slli	a0,s9,0x1a
     e98:	857d                	srai	a0,a0,0x1f
     e9a:	9901                	andi	a0,a0,-32
     e9c:	8622                	mv	a2,s0
     e9e:	86d6                	mv	a3,s5
     ea0:	85d2                	mv	a1,s4
     ea2:	06550513          	addi	a0,a0,101
     ea6:	9982                	jalr	s3
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
     ea8:	41fd5713          	srai	a4,s10,0x1f
     eac:	01a746b3          	xor	a3,a4,s10
     eb0:	4795                	li	a5,5
     eb2:	1dfd                	addi	s11,s11,-1
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
     eb4:	00140613          	addi	a2,s0,1
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
     eb8:	c23e                	sw	a5,4(sp)
     eba:	40e68733          	sub	a4,a3,a4
     ebe:	01fd5793          	srli	a5,s10,0x1f
     ec2:	c06e                	sw	s11,0(sp)
     ec4:	4881                	li	a7,0
     ec6:	4829                	li	a6,10
     ec8:	86d6                	mv	a3,s5
     eca:	85d2                	mv	a1,s4
     ecc:	854e                	mv	a0,s3
     ece:	3e15                	jal	a02 <_ntoa_long>
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
     ed0:	57a2                	lw	a5,40(sp)
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
     ed2:	842a                	mv	s0,a0
    if (flags & FLAGS_LEFT) {
     ed4:	cf99                	beqz	a5,ef2 <_etoa+0x37a>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
     ed6:	41250933          	sub	s2,a0,s2
     eda:	01697c63          	bgeu	s2,s6,ef2 <_etoa+0x37a>
     ede:	8622                	mv	a2,s0
     ee0:	0905                	addi	s2,s2,1
     ee2:	86d6                	mv	a3,s5
     ee4:	85d2                	mv	a1,s4
     ee6:	02000513          	li	a0,32
     eea:	0405                	addi	s0,s0,1
     eec:	9982                	jalr	s3
     eee:	ff6968e3          	bltu	s2,s6,ede <_etoa+0x366>
    }
  }
  return idx;
}
     ef2:	50f6                	lw	ra,124(sp)
     ef4:	8522                	mv	a0,s0
     ef6:	5466                	lw	s0,120(sp)
     ef8:	54d6                	lw	s1,116(sp)
     efa:	5946                	lw	s2,112(sp)
     efc:	59b6                	lw	s3,108(sp)
     efe:	5a26                	lw	s4,104(sp)
     f00:	5a96                	lw	s5,100(sp)
     f02:	5b06                	lw	s6,96(sp)
     f04:	4bf6                	lw	s7,92(sp)
     f06:	4c66                	lw	s8,88(sp)
     f08:	4cd6                	lw	s9,84(sp)
     f0a:	4d46                	lw	s10,80(sp)
     f0c:	4db6                	lw	s11,76(sp)
     f0e:	6109                	addi	sp,sp,128
     f10:	8082                	ret
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
     f12:	8722                	mv	a4,s0
}
     f14:	5466                	lw	s0,120(sp)
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
     f16:	c166                	sw	s9,128(sp)
}
     f18:	50f6                	lw	ra,124(sp)
     f1a:	4bf6                	lw	s7,92(sp)
     f1c:	4cd6                	lw	s9,84(sp)
     f1e:	4d46                	lw	s10,80(sp)
     f20:	4db6                	lw	s11,76(sp)
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
     f22:	87a6                	mv	a5,s1
     f24:	88da                	mv	a7,s6
}
     f26:	54d6                	lw	s1,116(sp)
     f28:	5b06                	lw	s6,96(sp)
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
     f2a:	8862                	mv	a6,s8
     f2c:	86d6                	mv	a3,s5
}
     f2e:	4c66                	lw	s8,88(sp)
     f30:	5a96                	lw	s5,100(sp)
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
     f32:	864a                	mv	a2,s2
     f34:	85d2                	mv	a1,s4
}
     f36:	5946                	lw	s2,112(sp)
     f38:	5a26                	lw	s4,104(sp)
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
     f3a:	854e                	mv	a0,s3
}
     f3c:	59b6                	lw	s3,108(sp)
     f3e:	6109                	addi	sp,sp,128
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
     f40:	a815                	j	f74 <_ftoa>
    conv.F /= 10;
     f42:	6795                	lui	a5,0x5
     f44:	7807a603          	lw	a2,1920(a5) # 5780 <__erodata+0x58>
     f48:	7847a683          	lw	a3,1924(a5)
     f4c:	45e2                	lw	a1,24(sp)
     f4e:	856e                	mv	a0,s11
    expval--;
     f50:	1d7d                	addi	s10,s10,-1
    conv.F /= 10;
     f52:	63f010ef          	jal	ra,2d90 <__divdf3>
     f56:	832a                	mv	t1,a0
     f58:	83ae                	mv	t2,a1
     f5a:	b5a5                	j	dc2 <_etoa+0x24a>
      if ((int)prec > expval) {
     f5c:	018d5a63          	bge	s10,s8,f70 <_etoa+0x3f8>
        prec = (unsigned)((int)prec - expval - 1);
     f60:	41ac0c33          	sub	s8,s8,s10
     f64:	1c7d                	addi	s8,s8,-1
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
     f66:	400cec93          	ori	s9,s9,1024
      minwidth = 0U;
     f6a:	4d81                	li	s11,0
      expval   = 0;
     f6c:	4d01                	li	s10,0
     f6e:	bd45                	j	e1e <_etoa+0x2a6>
        prec = 0;
     f70:	4c01                	li	s8,0
     f72:	bfd5                	j	f66 <_etoa+0x3ee>

00000f74 <_ftoa>:
{
     f74:	7119                	addi	sp,sp,-128
     f76:	d6ce                	sw	s3,108(sp)
     f78:	d4d2                	sw	s4,104(sp)
     f7a:	d2d6                	sw	s5,100(sp)
     f7c:	cce2                	sw	s8,88(sp)
     f7e:	89aa                	mv	s3,a0
     f80:	8a2e                	mv	s4,a1
     f82:	8ab2                	mv	s5,a2
     f84:	8c36                	mv	s8,a3
  if (value != value)
     f86:	863a                	mv	a2,a4
     f88:	86be                	mv	a3,a5
     f8a:	853a                	mv	a0,a4
     f8c:	85be                	mv	a1,a5
{
     f8e:	dca2                	sw	s0,120(sp)
     f90:	daa6                	sw	s1,116(sp)
     f92:	d8ca                	sw	s2,112(sp)
     f94:	d0da                	sw	s6,96(sp)
     f96:	cae6                	sw	s9,84(sp)
     f98:	de86                	sw	ra,124(sp)
     f9a:	cede                	sw	s7,92(sp)
     f9c:	c8ea                	sw	s10,80(sp)
     f9e:	c6ee                	sw	s11,76(sp)
     fa0:	84ba                	mv	s1,a4
     fa2:	843e                	mv	s0,a5
     fa4:	8b42                	mv	s6,a6
     fa6:	8946                	mv	s2,a7
  if (value != value)
     fa8:	474020ef          	jal	ra,341c <__eqdf2>
{
     fac:	4c8a                	lw	s9,128(sp)
  if (value != value)
     fae:	16051d63          	bnez	a0,1128 <_ftoa+0x1b4>
  if (value < -DBL_MAX)
     fb2:	6795                	lui	a5,0x5
     fb4:	7307a603          	lw	a2,1840(a5) # 5730 <__erodata+0x8>
     fb8:	7347a683          	lw	a3,1844(a5)
     fbc:	8526                	mv	a0,s1
     fbe:	85a2                	mv	a1,s0
     fc0:	5b6020ef          	jal	ra,3576 <__ledf2>
     fc4:	1e054463          	bltz	a0,11ac <_ftoa+0x238>
  if (value > DBL_MAX)
     fc8:	6795                	lui	a5,0x5
     fca:	7287a603          	lw	a2,1832(a5) # 5728 <__erodata>
     fce:	72c7a683          	lw	a3,1836(a5)
     fd2:	8526                	mv	a0,s1
     fd4:	85a2                	mv	a1,s0
     fd6:	4ea020ef          	jal	ra,34c0 <__gedf2>
     fda:	12a04d63          	bgtz	a0,1114 <_ftoa+0x1a0>
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
     fde:	6795                	lui	a5,0x5
     fe0:	7b07a603          	lw	a2,1968(a5) # 57b0 <__erodata+0x88>
     fe4:	7b47a683          	lw	a3,1972(a5)
     fe8:	8526                	mv	a0,s1
     fea:	85a2                	mv	a1,s0
     fec:	4d4020ef          	jal	ra,34c0 <__gedf2>
     ff0:	18a04663          	bgtz	a0,117c <_ftoa+0x208>
     ff4:	6795                	lui	a5,0x5
     ff6:	7b87a603          	lw	a2,1976(a5) # 57b8 <__erodata+0x90>
     ffa:	7bc7a683          	lw	a3,1980(a5)
     ffe:	8526                	mv	a0,s1
    1000:	85a2                	mv	a1,s0
    1002:	574020ef          	jal	ra,3576 <__ledf2>
    1006:	16054b63          	bltz	a0,117c <_ftoa+0x208>
  if (value < 0) {
    100a:	8526                	mv	a0,s1
    100c:	85a2                	mv	a1,s0
    100e:	4601                	li	a2,0
    1010:	4681                	li	a3,0
    1012:	564020ef          	jal	ra,3576 <__ledf2>
    1016:	14054863          	bltz	a0,1166 <_ftoa+0x1f2>
  bool negative = false;
    101a:	ce02                	sw	zero,28(sp)
  if (!(flags & FLAGS_PRECISION)) {
    101c:	400cf793          	andi	a5,s9,1024
    1020:	e391                	bnez	a5,1024 <_ftoa+0xb0>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    1022:	4b19                	li	s6,6
    1024:	1014                	addi	a3,sp,32
    1026:	fe0b0513          	addi	a0,s6,-32
    102a:	8bda                	mv	s7,s6
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    102c:	4625                	li	a2,9
    buf[len++] = '0';
    102e:	03000593          	li	a1,48
    1032:	a039                	j	1040 <_ftoa+0xcc>
    1034:	00b68023          	sb	a1,0(a3)
    prec--;
    1038:	1bfd                	addi	s7,s7,-1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    103a:	0685                	addi	a3,a3,1
    103c:	26ab8363          	beq	s7,a0,12a2 <_ftoa+0x32e>
    buf[len++] = '0';
    1040:	417b0db3          	sub	s11,s6,s7
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    1044:	ff7668e3          	bltu	a2,s7,1034 <_ftoa+0xc0>
  int whole = (int)value;
    1048:	85a2                	mv	a1,s0
    104a:	8526                	mv	a0,s1
    104c:	44a030ef          	jal	ra,4496 <__fixdfsi>
  double tmp = (value - whole) * pow10[prec];
    1050:	6615                	lui	a2,0x5
    1052:	56060613          	addi	a2,a2,1376 # 5560 <pow10.0>
    1056:	003b9693          	slli	a3,s7,0x3
    105a:	96b2                	add	a3,a3,a2
    105c:	0046a803          	lw	a6,4(a3)
    1060:	429c                	lw	a5,0(a3)
  int whole = (int)value;
    1062:	8d2a                	mv	s10,a0
  double tmp = (value - whole) * pow10[prec];
    1064:	c642                	sw	a6,12(sp)
    1066:	c43e                	sw	a5,8(sp)
    1068:	58e030ef          	jal	ra,45f6 <__floatsidf>
    106c:	862a                	mv	a2,a0
    106e:	86ae                	mv	a3,a1
    1070:	8526                	mv	a0,s1
    1072:	85a2                	mv	a1,s0
    1074:	357020ef          	jal	ra,3bca <__subdf3>
    1078:	4622                	lw	a2,8(sp)
    107a:	46b2                	lw	a3,12(sp)
    107c:	5b0020ef          	jal	ra,362c <__muldf3>
    1080:	ca2e                	sw	a1,20(sp)
    1082:	cc2a                	sw	a0,24(sp)
  unsigned long frac = (unsigned long)tmp;
    1084:	4d8030ef          	jal	ra,455c <__fixunsdfsi>
    1088:	8b2a                	mv	s6,a0
  diff = tmp - frac;
    108a:	5d2030ef          	jal	ra,465c <__floatunsidf>
    108e:	47d2                	lw	a5,20(sp)
    1090:	4362                	lw	t1,24(sp)
    1092:	862a                	mv	a2,a0
    1094:	86ae                	mv	a3,a1
    1096:	851a                	mv	a0,t1
    1098:	85be                	mv	a1,a5
    109a:	331020ef          	jal	ra,3bca <__subdf3>
  if (diff > 0.5) {
    109e:	6715                	lui	a4,0x5
    10a0:	76072303          	lw	t1,1888(a4) # 5760 <__erodata+0x38>
    10a4:	76472383          	lw	t2,1892(a4)
  diff = tmp - frac;
    10a8:	ca2a                	sw	a0,20(sp)
  if (diff > 0.5) {
    10aa:	861a                	mv	a2,t1
    10ac:	869e                	mv	a3,t2
  diff = tmp - frac;
    10ae:	cc2e                	sw	a1,24(sp)
  if (diff > 0.5) {
    10b0:	410020ef          	jal	ra,34c0 <__gedf2>
    10b4:	6795                	lui	a5,0x5
    10b6:	7607a303          	lw	t1,1888(a5) # 5760 <__erodata+0x38>
    10ba:	7647a383          	lw	t2,1892(a5)
    10be:	1ca05663          	blez	a0,128a <_ftoa+0x316>
    ++frac;
    10c2:	0b05                	addi	s6,s6,1
    if (frac >= pow10[prec]) {
    10c4:	855a                	mv	a0,s6
    10c6:	596030ef          	jal	ra,465c <__floatunsidf>
    10ca:	862a                	mv	a2,a0
    10cc:	86ae                	mv	a3,a1
    10ce:	4522                	lw	a0,8(sp)
    10d0:	45b2                	lw	a1,12(sp)
    10d2:	4a4020ef          	jal	ra,3576 <__ledf2>
    10d6:	00a04463          	bgtz	a0,10de <_ftoa+0x16a>
      ++whole;
    10da:	0d05                	addi	s10,s10,1
      frac = 0;
    10dc:	4b01                	li	s6,0
  if (prec == 0U) {
    10de:	100b8d63          	beqz	s7,11f8 <_ftoa+0x284>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    10e2:	02000313          	li	t1,32
      buf[len++] = (char)(48U + (frac % 10U));
    10e6:	4629                	li	a2,10
      if (!(frac /= 10U)) {
    10e8:	4e25                	li	t3,9
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    10ea:	0c6d8863          	beq	s11,t1,11ba <_ftoa+0x246>
      buf[len++] = (char)(48U + (frac % 10U));
    10ee:	02cb76b3          	remu	a3,s6,a2
    10f2:	0d85                	addi	s11,s11,1
    10f4:	101c                	addi	a5,sp,32
    10f6:	01b78533          	add	a0,a5,s11
      --count;
    10fa:	fffb8593          	addi	a1,s7,-1 # 7fffffff <__kernel_stack+0x5ff40007>
      buf[len++] = (char)(48U + (frac % 10U));
    10fe:	03068693          	addi	a3,a3,48
    1102:	fed50fa3          	sb	a3,-1(a0)
      if (!(frac /= 10U)) {
    1106:	02cb56b3          	divu	a3,s6,a2
    110a:	1f6e7b63          	bgeu	t3,s6,1300 <_ftoa+0x38c>
      --count;
    110e:	8bae                	mv	s7,a1
      if (!(frac /= 10U)) {
    1110:	8b36                	mv	s6,a3
    1112:	bfe1                	j	10ea <_ftoa+0x176>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
    1114:	004cf793          	andi	a5,s9,4
    1118:	e3b1                	bnez	a5,115c <_ftoa+0x1e8>
    111a:	6715                	lui	a4,0x5
    111c:	36870713          	addi	a4,a4,872 # 5368 <__errno+0x76>
    1120:	478d                	li	a5,3
    1122:	88e6                	mv	a7,s9
    1124:	884a                	mv	a6,s2
    1126:	a039                	j	1134 <_ftoa+0x1c0>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
    1128:	6715                	lui	a4,0x5
    112a:	88e6                	mv	a7,s9
    112c:	884a                	mv	a6,s2
    112e:	478d                	li	a5,3
    1130:	37470713          	addi	a4,a4,884 # 5374 <__errno+0x82>
}
    1134:	5466                	lw	s0,120(sp)
    1136:	50f6                	lw	ra,124(sp)
    1138:	54d6                	lw	s1,116(sp)
    113a:	5946                	lw	s2,112(sp)
    113c:	5b06                	lw	s6,96(sp)
    113e:	4bf6                	lw	s7,92(sp)
    1140:	4cd6                	lw	s9,84(sp)
    1142:	4d46                	lw	s10,80(sp)
    1144:	4db6                	lw	s11,76(sp)
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    1146:	86e2                	mv	a3,s8
    1148:	8656                	mv	a2,s5
}
    114a:	4c66                	lw	s8,88(sp)
    114c:	5a96                	lw	s5,100(sp)
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    114e:	85d2                	mv	a1,s4
    1150:	854e                	mv	a0,s3
}
    1152:	5a26                	lw	s4,104(sp)
    1154:	59b6                	lw	s3,108(sp)
    1156:	6109                	addi	sp,sp,128
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    1158:	ddaff06f          	j	732 <_out_rev>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
    115c:	6715                	lui	a4,0x5
    115e:	36c70713          	addi	a4,a4,876 # 536c <__errno+0x7a>
    1162:	4791                	li	a5,4
    1164:	bf7d                	j	1122 <_ftoa+0x1ae>
    value = 0 - value;
    1166:	8626                	mv	a2,s1
    1168:	86a2                	mv	a3,s0
    116a:	4501                	li	a0,0
    116c:	4581                	li	a1,0
    116e:	25d020ef          	jal	ra,3bca <__subdf3>
    negative = true;
    1172:	4785                	li	a5,1
    value = 0 - value;
    1174:	84aa                	mv	s1,a0
    1176:	842e                	mv	s0,a1
    negative = true;
    1178:	ce3e                	sw	a5,28(sp)
    117a:	b54d                	j	101c <_ftoa+0xa8>
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    117c:	87a2                	mv	a5,s0
}
    117e:	5466                	lw	s0,120(sp)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    1180:	c166                	sw	s9,128(sp)
}
    1182:	50f6                	lw	ra,124(sp)
    1184:	4bf6                	lw	s7,92(sp)
    1186:	4cd6                	lw	s9,84(sp)
    1188:	4d46                	lw	s10,80(sp)
    118a:	4db6                	lw	s11,76(sp)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    118c:	8726                	mv	a4,s1
    118e:	88ca                	mv	a7,s2
}
    1190:	54d6                	lw	s1,116(sp)
    1192:	5946                	lw	s2,112(sp)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    1194:	885a                	mv	a6,s6
    1196:	86e2                	mv	a3,s8
}
    1198:	5b06                	lw	s6,96(sp)
    119a:	4c66                	lw	s8,88(sp)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    119c:	8656                	mv	a2,s5
    119e:	85d2                	mv	a1,s4
}
    11a0:	5a96                	lw	s5,100(sp)
    11a2:	5a26                	lw	s4,104(sp)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    11a4:	854e                	mv	a0,s3
}
    11a6:	59b6                	lw	s3,108(sp)
    11a8:	6109                	addi	sp,sp,128
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    11aa:	b2f9                	j	b78 <_etoa>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    11ac:	6715                	lui	a4,0x5
    11ae:	88e6                	mv	a7,s9
    11b0:	884a                	mv	a6,s2
    11b2:	4791                	li	a5,4
    11b4:	37870713          	addi	a4,a4,888 # 5378 <__errno+0x86>
    11b8:	bfb5                	j	1134 <_ftoa+0x1c0>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    11ba:	003cf793          	andi	a5,s9,3
    11be:	4705                	li	a4,1
    11c0:	0ee78463          	beq	a5,a4,12a8 <_ftoa+0x334>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    11c4:	02000793          	li	a5,32
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    11c8:	88e6                	mv	a7,s9
    11ca:	884a                	mv	a6,s2
    11cc:	1018                	addi	a4,sp,32
    11ce:	86e2                	mv	a3,s8
    11d0:	8656                	mv	a2,s5
    11d2:	85d2                	mv	a1,s4
    11d4:	854e                	mv	a0,s3
    11d6:	d5cff0ef          	jal	ra,732 <_out_rev>
}
    11da:	50f6                	lw	ra,124(sp)
    11dc:	5466                	lw	s0,120(sp)
    11de:	54d6                	lw	s1,116(sp)
    11e0:	5946                	lw	s2,112(sp)
    11e2:	59b6                	lw	s3,108(sp)
    11e4:	5a26                	lw	s4,104(sp)
    11e6:	5a96                	lw	s5,100(sp)
    11e8:	5b06                	lw	s6,96(sp)
    11ea:	4bf6                	lw	s7,92(sp)
    11ec:	4c66                	lw	s8,88(sp)
    11ee:	4cd6                	lw	s9,84(sp)
    11f0:	4d46                	lw	s10,80(sp)
    11f2:	4db6                	lw	s11,76(sp)
    11f4:	6109                	addi	sp,sp,128
    11f6:	8082                	ret
    diff = value - (double)whole;
    11f8:	856a                	mv	a0,s10
    11fa:	3fc030ef          	jal	ra,45f6 <__floatsidf>
    11fe:	862a                	mv	a2,a0
    1200:	86ae                	mv	a3,a1
    1202:	8526                	mv	a0,s1
    1204:	85a2                	mv	a1,s0
    1206:	1c5020ef          	jal	ra,3bca <__subdf3>
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    120a:	6795                	lui	a5,0x5
    120c:	7607ab03          	lw	s6,1888(a5) # 5760 <__erodata+0x38>
    1210:	7647ab83          	lw	s7,1892(a5)
    diff = value - (double)whole;
    1214:	84aa                	mv	s1,a0
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    1216:	865a                	mv	a2,s6
    1218:	86de                	mv	a3,s7
    diff = value - (double)whole;
    121a:	842e                	mv	s0,a1
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    121c:	35a020ef          	jal	ra,3576 <__ledf2>
    1220:	00055a63          	bgez	a0,1234 <_ftoa+0x2c0>
    1224:	8526                	mv	a0,s1
    1226:	85a2                	mv	a1,s0
    1228:	865a                	mv	a2,s6
    122a:	86de                	mv	a3,s7
    122c:	294020ef          	jal	ra,34c0 <__gedf2>
    1230:	00a05563          	blez	a0,123a <_ftoa+0x2c6>
      ++whole;
    1234:	001d7793          	andi	a5,s10,1
    1238:	9d3e                	add	s10,s10,a5
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    123a:	02000593          	li	a1,32
    buf[len++] = (char)(48 + (whole % 10));
    123e:	46a9                	li	a3,10
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    1240:	f6bd8de3          	beq	s11,a1,11ba <_ftoa+0x246>
    buf[len++] = (char)(48 + (whole % 10));
    1244:	02dd67b3          	rem	a5,s10,a3
    1248:	0d85                	addi	s11,s11,1
    124a:	1018                	addi	a4,sp,32
    124c:	01b70633          	add	a2,a4,s11
    if (!(whole /= 10)) {
    1250:	02dd4d33          	div	s10,s10,a3
    buf[len++] = (char)(48 + (whole % 10));
    1254:	03078793          	addi	a5,a5,48
    1258:	fef60fa3          	sb	a5,-1(a2)
    if (!(whole /= 10)) {
    125c:	fe0d12e3          	bnez	s10,1240 <_ftoa+0x2cc>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    1260:	003cf793          	andi	a5,s9,3
    1264:	4685                	li	a3,1
    1266:	04d78363          	beq	a5,a3,12ac <_ftoa+0x338>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    126a:	02000693          	li	a3,32
    126e:	f4dd8be3          	beq	s11,a3,11c4 <_ftoa+0x250>
    if (negative) {
    1272:	47f2                	lw	a5,28(sp)
    1274:	c7bd                	beqz	a5,12e2 <_ftoa+0x36e>
      buf[len++] = '-';
    1276:	009c                	addi	a5,sp,64
    1278:	01b786b3          	add	a3,a5,s11
    127c:	02d00713          	li	a4,45
    1280:	001d8793          	addi	a5,s11,1
    1284:	fee68023          	sb	a4,-32(a3)
    1288:	b781                	j	11c8 <_ftoa+0x254>
  else if (diff < 0.5) {
    128a:	4552                	lw	a0,20(sp)
    128c:	45e2                	lw	a1,24(sp)
    128e:	861a                	mv	a2,t1
    1290:	869e                	mv	a3,t2
    1292:	2e4020ef          	jal	ra,3576 <__ledf2>
    1296:	e40544e3          	bltz	a0,10de <_ftoa+0x16a>
  else if ((frac == 0U) || (frac & 1U)) {
    129a:	0a0b1263          	bnez	s6,133e <_ftoa+0x3ca>
    ++frac;
    129e:	0b05                	addi	s6,s6,1
    12a0:	bd3d                	j	10de <_ftoa+0x16a>
    12a2:	02000d93          	li	s11,32
    12a6:	b34d                	j	1048 <_ftoa+0xd4>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    12a8:	02000d93          	li	s11,32
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    12ac:	fa090fe3          	beqz	s2,126a <_ftoa+0x2f6>
    12b0:	47f2                	lw	a5,28(sp)
    12b2:	e7d5                	bnez	a5,135e <_ftoa+0x3ea>
    12b4:	00ccf793          	andi	a5,s9,12
    12b8:	e3dd                	bnez	a5,135e <_ftoa+0x3ea>
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    12ba:	fb2df8e3          	bgeu	s11,s2,126a <_ftoa+0x2f6>
    12be:	02000793          	li	a5,32
      buf[len++] = '0';
    12c2:	03000613          	li	a2,48
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    12c6:	02000693          	li	a3,32
    12ca:	eefd8de3          	beq	s11,a5,11c4 <_ftoa+0x250>
      buf[len++] = '0';
    12ce:	0d85                	addi	s11,s11,1
    12d0:	101c                	addi	a5,sp,32
    12d2:	97ee                	add	a5,a5,s11
    12d4:	fec78fa3          	sb	a2,-1(a5)
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    12d8:	f92d89e3          	beq	s11,s2,126a <_ftoa+0x2f6>
    12dc:	fedd99e3          	bne	s11,a3,12ce <_ftoa+0x35a>
    12e0:	b5d5                	j	11c4 <_ftoa+0x250>
    else if (flags & FLAGS_PLUS) {
    12e2:	004cf793          	andi	a5,s9,4
    12e6:	e3b5                	bnez	a5,134a <_ftoa+0x3d6>
    else if (flags & FLAGS_SPACE) {
    12e8:	008cf613          	andi	a2,s9,8
    12ec:	87ee                	mv	a5,s11
    12ee:	ec060de3          	beqz	a2,11c8 <_ftoa+0x254>
      buf[len++] = ' ';
    12f2:	0098                	addi	a4,sp,64
    12f4:	976e                	add	a4,a4,s11
    12f6:	001d8793          	addi	a5,s11,1
    12fa:	fed70023          	sb	a3,-32(a4)
    12fe:	b5e9                	j	11c8 <_ftoa+0x254>
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    1300:	ea6d8de3          	beq	s11,t1,11ba <_ftoa+0x246>
    1304:	866e                	mv	a2,s11
      buf[len++] = '0';
    1306:	03000893          	li	a7,48
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    130a:	02000513          	li	a0,32
    130e:	cd99                	beqz	a1,132c <_ftoa+0x3b8>
      buf[len++] = '0';
    1310:	0605                	addi	a2,a2,1
    1312:	101c                	addi	a5,sp,32
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    1314:	fff64693          	not	a3,a2
      buf[len++] = '0';
    1318:	00c785b3          	add	a1,a5,a2
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    131c:	96ee                	add	a3,a3,s11
      buf[len++] = '0';
    131e:	ff158fa3          	sb	a7,-1(a1)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    1322:	96de                	add	a3,a3,s7
    1324:	e8a60be3          	beq	a2,a0,11ba <_ftoa+0x246>
    1328:	fe0694e3          	bnez	a3,1310 <_ftoa+0x39c>
      buf[len++] = '.';
    132c:	009c                	addi	a5,sp,64
    132e:	97b2                	add	a5,a5,a2
    1330:	02e00693          	li	a3,46
    1334:	00160d93          	addi	s11,a2,1
    1338:	fed78023          	sb	a3,-32(a5)
    133c:	bdfd                	j	123a <_ftoa+0x2c6>
  else if ((frac == 0U) || (frac & 1U)) {
    133e:	001b7693          	andi	a3,s6,1
    1342:	d8068ee3          	beqz	a3,10de <_ftoa+0x16a>
    ++frac;
    1346:	0b05                	addi	s6,s6,1
    1348:	bb59                	j	10de <_ftoa+0x16a>
      buf[len++] = '+';  // ignore the space if the '+' exists
    134a:	009c                	addi	a5,sp,64
    134c:	01b786b3          	add	a3,a5,s11
    1350:	02b00713          	li	a4,43
    1354:	001d8793          	addi	a5,s11,1
    1358:	fee68023          	sb	a4,-32(a3)
    135c:	b5b5                	j	11c8 <_ftoa+0x254>
      width--;
    135e:	197d                	addi	s2,s2,-1
    1360:	bfa9                	j	12ba <_ftoa+0x346>

00001362 <_out_char>:
  if (character) {
    1362:	e111                	bnez	a0,1366 <_out_char+0x4>
}
    1364:	8082                	ret
    fputc(character, (void *)-1);
    1366:	55fd                	li	a1,-1
    1368:	b5eff06f          	j	6c6 <fputc>

0000136c <_out_fct>:
  if (character) {
    136c:	c501                	beqz	a0,1374 <_out_fct+0x8>
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
    136e:	419c                	lw	a5,0(a1)
    1370:	41cc                	lw	a1,4(a1)
    1372:	8782                	jr	a5
}
    1374:	8082                	ret

00001376 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    1376:	7159                	addi	sp,sp,-112
    1378:	d4a2                	sw	s0,104(sp)
    137a:	d2a6                	sw	s1,100(sp)
    137c:	d0ca                	sw	s2,96(sp)
    137e:	cece                	sw	s3,92(sp)
    1380:	c6de                	sw	s7,76(sp)
    1382:	d686                	sw	ra,108(sp)
    1384:	ccd2                	sw	s4,88(sp)
    1386:	cad6                	sw	s5,84(sp)
    1388:	c8da                	sw	s6,80(sp)
    138a:	c4e2                	sw	s8,72(sp)
    138c:	c2e6                	sw	s9,68(sp)
    138e:	c0ea                	sw	s10,64(sp)
    1390:	de6e                	sw	s11,60(sp)
    1392:	892e                	mv	s2,a1
    1394:	84b2                	mv	s1,a2
    1396:	8bb6                	mv	s7,a3
    1398:	843a                	mv	s0,a4
    139a:	89aa                	mv	s3,a0
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    139c:	38058e63          	beqz	a1,1738 <_vsnprintf+0x3c2>
    // use null output function
    out = _out_null;
  }

  while (*format)
    13a0:	000bc503          	lbu	a0,0(s7)
    13a4:	4d81                	li	s11,0
    13a6:	3a050063          	beqz	a0,1746 <_vsnprintf+0x3d0>
    13aa:	6795                	lui	a5,0x5
    13ac:	41078793          	addi	a5,a5,1040 # 5410 <__errno+0x11e>
    13b0:	6b15                	lui	s6,0x5
    13b2:	6a15                	lui	s4,0x5
    13b4:	d23e                	sw	a5,36(sp)
    13b6:	3c4b0793          	addi	a5,s6,964 # 53c4 <__errno+0xd2>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    13ba:	02500a93          	li	s5,37
    13be:	380a0a13          	addi	s4,s4,896 # 5380 <__errno+0x8e>
    13c2:	d03e                	sw	a5,32(sp)
    13c4:	a809                	j	13d6 <_vsnprintf+0x60>
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    13c6:	866e                	mv	a2,s11
    13c8:	86a6                	mv	a3,s1
    13ca:	85ca                	mv	a1,s2
    13cc:	0d85                	addi	s11,s11,1
    13ce:	9982                	jalr	s3
  while (*format)
    13d0:	000bc503          	lbu	a0,0(s7)
    13d4:	c955                	beqz	a0,1488 <_vsnprintf+0x112>
      format++;
    13d6:	0b85                	addi	s7,s7,1
    if (*format != '%') {
    13d8:	ff5517e3          	bne	a0,s5,13c6 <_vsnprintf+0x50>
    flags = 0U;
    13dc:	4681                	li	a3,0
    13de:	45c1                	li	a1,16
      switch (*format) {
    13e0:	000bc503          	lbu	a0,0(s7)
      format++;
    13e4:	001b8713          	addi	a4,s7,1
    13e8:	863a                	mv	a2,a4
    13ea:	fe050793          	addi	a5,a0,-32
    13ee:	0ff7f793          	andi	a5,a5,255
    13f2:	00f5e663          	bltu	a1,a5,13fe <_vsnprintf+0x88>
    13f6:	078a                	slli	a5,a5,0x2
    13f8:	97d2                	add	a5,a5,s4
    13fa:	439c                	lw	a5,0(a5)
    13fc:	8782                	jr	a5
  return (ch >= '0') && (ch <= '9');
    13fe:	fd050793          	addi	a5,a0,-48
    if (_is_digit(*format)) {
    1402:	0ff7f793          	andi	a5,a5,255
    1406:	45a5                	li	a1,9
    1408:	10f5f263          	bgeu	a1,a5,150c <_vsnprintf+0x196>
    else if (*format == '*') {
    140c:	02a00793          	li	a5,42
    1410:	12f50863          	beq	a0,a5,1540 <_vsnprintf+0x1ca>
    1414:	865e                	mv	a2,s7
    width = 0U;
    1416:	4c01                	li	s8,0
      format++;
    1418:	8bba                	mv	s7,a4
    if (*format == '.') {
    141a:	02e00793          	li	a5,46
    precision = 0U;
    141e:	4b01                	li	s6,0
    if (*format == '.') {
    1420:	08f50e63          	beq	a0,a5,14bc <_vsnprintf+0x146>
    switch (*format) {
    1424:	f9850793          	addi	a5,a0,-104
    1428:	0ff7f793          	andi	a5,a5,255
    142c:	4749                	li	a4,18
    142e:	00f76c63          	bltu	a4,a5,1446 <_vsnprintf+0xd0>
    1432:	5702                	lw	a4,32(sp)
    1434:	078a                	slli	a5,a5,0x2
    1436:	97ba                	add	a5,a5,a4
    1438:	439c                	lw	a5,0(a5)
    143a:	8782                	jr	a5
    switch (*format) {
    143c:	00164503          	lbu	a0,1(a2)
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    1440:	1006e693          	ori	a3,a3,256
        format++;
    1444:	0b85                	addi	s7,s7,1
    switch (*format) {
    1446:	fdb50793          	addi	a5,a0,-37
    144a:	0ff7f793          	andi	a5,a5,255
    144e:	05300713          	li	a4,83
    1452:	f6f76ae3          	bltu	a4,a5,13c6 <_vsnprintf+0x50>
    1456:	5712                	lw	a4,36(sp)
    1458:	078a                	slli	a5,a5,0x2
    145a:	97ba                	add	a5,a5,a4
    145c:	439c                	lw	a5,0(a5)
    145e:	8782                	jr	a5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    1460:	0016e693          	ori	a3,a3,1
      format++;
    1464:	8bba                	mv	s7,a4
    1466:	bfad                	j	13e0 <_vsnprintf+0x6a>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    1468:	0026e693          	ori	a3,a3,2
      format++;
    146c:	8bba                	mv	s7,a4
    146e:	bf8d                	j	13e0 <_vsnprintf+0x6a>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    1470:	0046e693          	ori	a3,a3,4
      format++;
    1474:	8bba                	mv	s7,a4
    1476:	b7ad                	j	13e0 <_vsnprintf+0x6a>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    1478:	0106e693          	ori	a3,a3,16
      format++;
    147c:	8bba                	mv	s7,a4
    147e:	b78d                	j	13e0 <_vsnprintf+0x6a>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    1480:	0086e693          	ori	a3,a3,8
      format++;
    1484:	8bba                	mv	s7,a4
    1486:	bfa9                	j	13e0 <_vsnprintf+0x6a>

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

  // return written chars without terminating \0
  return (int)idx;
    1488:	846e                	mv	s0,s11
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    148a:	009de463          	bltu	s11,s1,1492 <_vsnprintf+0x11c>
    148e:	fff48d93          	addi	s11,s1,-1
    1492:	86a6                	mv	a3,s1
    1494:	866e                	mv	a2,s11
    1496:	85ca                	mv	a1,s2
    1498:	4501                	li	a0,0
    149a:	9982                	jalr	s3
}
    149c:	50b6                	lw	ra,108(sp)
    149e:	8522                	mv	a0,s0
    14a0:	5426                	lw	s0,104(sp)
    14a2:	5496                	lw	s1,100(sp)
    14a4:	5906                	lw	s2,96(sp)
    14a6:	49f6                	lw	s3,92(sp)
    14a8:	4a66                	lw	s4,88(sp)
    14aa:	4ad6                	lw	s5,84(sp)
    14ac:	4b46                	lw	s6,80(sp)
    14ae:	4bb6                	lw	s7,76(sp)
    14b0:	4c26                	lw	s8,72(sp)
    14b2:	4c96                	lw	s9,68(sp)
    14b4:	4d06                	lw	s10,64(sp)
    14b6:	5df2                	lw	s11,60(sp)
    14b8:	6165                	addi	sp,sp,112
    14ba:	8082                	ret
      if (_is_digit(*format)) {
    14bc:	00164503          	lbu	a0,1(a2)
    14c0:	4725                	li	a4,9
      flags |= FLAGS_PRECISION;
    14c2:	4006e693          	ori	a3,a3,1024
  return (ch >= '0') && (ch <= '9');
    14c6:	fd050793          	addi	a5,a0,-48
      if (_is_digit(*format)) {
    14ca:	0ff7f793          	andi	a5,a5,255
    14ce:	00f77963          	bgeu	a4,a5,14e0 <_vsnprintf+0x16a>
      else if (*format == '*') {
    14d2:	02a00793          	li	a5,42
    14d6:	26f50c63          	beq	a0,a5,174e <_vsnprintf+0x3d8>
      format++;
    14da:	865e                	mv	a2,s7
        format++;
    14dc:	0b85                	addi	s7,s7,1
    14de:	b799                	j	1424 <_vsnprintf+0xae>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    14e0:	002b1793          	slli	a5,s6,0x2
    14e4:	01678833          	add	a6,a5,s6
    14e8:	85de                	mv	a1,s7
    14ea:	0806                	slli	a6,a6,0x1
    14ec:	0b85                	addi	s7,s7,1
    14ee:	982a                	add	a6,a6,a0
  while (_is_digit(**str)) {
    14f0:	000bc503          	lbu	a0,0(s7)
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    14f4:	fd080b13          	addi	s6,a6,-48
  return (ch >= '0') && (ch <= '9');
    14f8:	fd050793          	addi	a5,a0,-48
  while (_is_digit(**str)) {
    14fc:	0ff7f793          	andi	a5,a5,255
    1500:	fef770e3          	bgeu	a4,a5,14e0 <_vsnprintf+0x16a>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1504:	865e                	mv	a2,s7
        format++;
    1506:	00258b93          	addi	s7,a1,2
    150a:	bf29                	j	1424 <_vsnprintf+0xae>
  unsigned int i = 0U;
    150c:	4c01                	li	s8,0
  while (_is_digit(**str)) {
    150e:	4625                	li	a2,9
    1510:	a011                	j	1514 <_vsnprintf+0x19e>
    1512:	0705                	addi	a4,a4,1
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1514:	002c1793          	slli	a5,s8,0x2
    1518:	018788b3          	add	a7,a5,s8
    151c:	0886                	slli	a7,a7,0x1
    151e:	98aa                	add	a7,a7,a0
  while (_is_digit(**str)) {
    1520:	00074503          	lbu	a0,0(a4)
    1524:	85de                	mv	a1,s7
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1526:	fd088c13          	addi	s8,a7,-48
  return (ch >= '0') && (ch <= '9');
    152a:	fd050793          	addi	a5,a0,-48
  while (_is_digit(**str)) {
    152e:	0ff7f793          	andi	a5,a5,255
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1532:	8bba                	mv	s7,a4
  while (_is_digit(**str)) {
    1534:	fcf67fe3          	bgeu	a2,a5,1512 <_vsnprintf+0x19c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1538:	863a                	mv	a2,a4
      format++;
    153a:	00258b93          	addi	s7,a1,2
    153e:	bdf1                	j	141a <_vsnprintf+0xa4>
      const int w = va_arg(va, int);
    1540:	00042c03          	lw	s8,0(s0)
    1544:	0411                	addi	s0,s0,4
      if (w < 0) {
    1546:	000c4663          	bltz	s8,1552 <_vsnprintf+0x1dc>
    if (*format == '.') {
    154a:	001bc503          	lbu	a0,1(s7)
      format++;
    154e:	0b89                	addi	s7,s7,2
    1550:	b5e9                	j	141a <_vsnprintf+0xa4>
    if (*format == '.') {
    1552:	001bc503          	lbu	a0,1(s7)
        flags |= FLAGS_LEFT;    // reverse padding
    1556:	0026e693          	ori	a3,a3,2
        width = (unsigned int)-w;
    155a:	41800c33          	neg	s8,s8
      format++;
    155e:	0b89                	addi	s7,s7,2
    1560:	bd6d                	j	141a <_vsnprintf+0xa4>
        if (*format == 'x' || *format == 'X') {
    1562:	07800793          	li	a5,120
    1566:	3af50363          	beq	a0,a5,190c <_vsnprintf+0x596>
    156a:	05800793          	li	a5,88
    156e:	28f50a63          	beq	a0,a5,1802 <_vsnprintf+0x48c>
        else if (*format == 'o') {
    1572:	06f00793          	li	a5,111
    1576:	3cf50263          	beq	a0,a5,193a <_vsnprintf+0x5c4>
        else if (*format == 'b') {
    157a:	06200793          	li	a5,98
    157e:	40f50663          	beq	a0,a5,198a <_vsnprintf+0x614>
        if ((*format != 'i') && (*format != 'd')) {
    1582:	06900713          	li	a4,105
          flags &= ~FLAGS_HASH;   // no hash for dec format
    1586:	fef6f593          	andi	a1,a3,-17
        if (flags & FLAGS_PRECISION) {
    158a:	4006f793          	andi	a5,a3,1024
        if ((*format != 'i') && (*format != 'd')) {
    158e:	42e51263          	bne	a0,a4,19b2 <_vsnprintf+0x63c>
        if (flags & FLAGS_PRECISION) {
    1592:	38079563          	bnez	a5,191c <_vsnprintf+0x5a6>
          if (flags & FLAGS_LONG_LONG) {
    1596:	2006f693          	andi	a3,a3,512
          base = 10U;
    159a:	4829                	li	a6,10
          if (flags & FLAGS_LONG_LONG) {
    159c:	32069663          	bnez	a3,18c8 <_vsnprintf+0x552>
          else if (flags & FLAGS_LONG) {
    15a0:	1005f793          	andi	a5,a1,256
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    15a4:	00440c93          	addi	s9,s0,4
          else if (flags & FLAGS_LONG) {
    15a8:	3c079463          	bnez	a5,1970 <_vsnprintf+0x5fa>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    15ac:	0405f793          	andi	a5,a1,64
    15b0:	36079b63          	bnez	a5,1926 <_vsnprintf+0x5b0>
    15b4:	0805f793          	andi	a5,a1,128
    15b8:	3c078b63          	beqz	a5,198e <_vsnprintf+0x618>
    15bc:	00041783          	lh	a5,0(s0)
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    15c0:	40f7d693          	srai	a3,a5,0xf
    15c4:	00d7c733          	xor	a4,a5,a3
    15c8:	8f15                	sub	a4,a4,a3
    15ca:	0742                	slli	a4,a4,0x10
    15cc:	8341                	srli	a4,a4,0x10
    15ce:	866e                	mv	a2,s11
    15d0:	c22e                	sw	a1,4(sp)
    15d2:	c062                	sw	s8,0(sp)
    15d4:	88da                	mv	a7,s6
    15d6:	83fd                	srli	a5,a5,0x1f
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    15d8:	86a6                	mv	a3,s1
    15da:	85ca                	mv	a1,s2
    15dc:	854e                	mv	a0,s3
    15de:	c24ff0ef          	jal	ra,a02 <_ntoa_long>
    15e2:	8daa                	mv	s11,a0
    15e4:	8466                	mv	s0,s9
        break;
    15e6:	b3ed                	j	13d0 <_vsnprintf+0x5a>
    switch (*format) {
    15e8:	00164503          	lbu	a0,1(a2)
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    15ec:	2006e693          	ori	a3,a3,512
        format++;
    15f0:	0b85                	addi	s7,s7,1
        break;
    15f2:	bd91                	j	1446 <_vsnprintf+0xd0>
        if (*format == 'h') {
    15f4:	00164503          	lbu	a0,1(a2)
    15f8:	06800793          	li	a5,104
    15fc:	1ef50863          	beq	a0,a5,17ec <_vsnprintf+0x476>
        flags |= FLAGS_SHORT;
    1600:	0806e693          	ori	a3,a3,128
        format++;
    1604:	0b85                	addi	s7,s7,1
    1606:	b581                	j	1446 <_vsnprintf+0xd0>
        if (*format == 'l') {
    1608:	00164503          	lbu	a0,1(a2)
    160c:	06c00793          	li	a5,108
    1610:	e2f518e3          	bne	a0,a5,1440 <_vsnprintf+0xca>
    switch (*format) {
    1614:	00264503          	lbu	a0,2(a2)
          flags |= FLAGS_LONG_LONG;
    1618:	3006e693          	ori	a3,a3,768
        format++;
    161c:	00360b93          	addi	s7,a2,3
    1620:	b51d                	j	1446 <_vsnprintf+0xd0>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
    1622:	04600793          	li	a5,70
    1626:	18f50163          	beq	a0,a5,17a8 <_vsnprintf+0x432>
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    162a:	041d                	addi	s0,s0,7
    162c:	9861                	andi	s0,s0,-8
    162e:	4018                	lw	a4,0(s0)
    1630:	405c                	lw	a5,4(s0)
    1632:	866e                	mv	a2,s11
    1634:	c036                	sw	a3,0(sp)
    1636:	88e2                	mv	a7,s8
    1638:	885a                	mv	a6,s6
    163a:	86a6                	mv	a3,s1
    163c:	85ca                	mv	a1,s2
    163e:	854e                	mv	a0,s3
    1640:	3a15                	jal	f74 <_ftoa>
    1642:	0421                	addi	s0,s0,8
    1644:	8daa                	mv	s11,a0
        break;
    1646:	b369                	j	13d0 <_vsnprintf+0x5a>
      out(*format, buffer, idx++, maxlen);
    1648:	001d8d13          	addi	s10,s11,1
        if (!(flags & FLAGS_LEFT)) {
    164c:	8a89                	andi	a3,a3,2
      out(*format, buffer, idx++, maxlen);
    164e:	8cea                	mv	s9,s10
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    1650:	00440b13          	addi	s6,s0,4
        if (!(flags & FLAGS_LEFT)) {
    1654:	20068463          	beqz	a3,185c <_vsnprintf+0x4e6>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    1658:	00044503          	lbu	a0,0(s0)
    165c:	866e                	mv	a2,s11
    165e:	86a6                	mv	a3,s1
    1660:	85ca                	mv	a1,s2
    1662:	9982                	jalr	s3
          while (l++ < width) {
    1664:	4785                	li	a5,1
    1666:	9de2                	add	s11,s11,s8
    1668:	2d87f663          	bgeu	a5,s8,1934 <_vsnprintf+0x5be>
            out(' ', buffer, idx++, maxlen);
    166c:	8666                	mv	a2,s9
    166e:	86a6                	mv	a3,s1
    1670:	0c85                	addi	s9,s9,1
    1672:	85ca                	mv	a1,s2
    1674:	02000513          	li	a0,32
    1678:	9982                	jalr	s3
          while (l++ < width) {
    167a:	ff9d99e3          	bne	s11,s9,166c <_vsnprintf+0x2f6>
        break;
    167e:	845a                	mv	s0,s6
    1680:	bb81                	j	13d0 <_vsnprintf+0x5a>
        out('%', buffer, idx++, maxlen);
    1682:	866e                	mv	a2,s11
    1684:	86a6                	mv	a3,s1
    1686:	85ca                	mv	a1,s2
    1688:	02500513          	li	a0,37
    168c:	0d85                	addi	s11,s11,1
    168e:	9982                	jalr	s3
        break;
    1690:	b381                	j	13d0 <_vsnprintf+0x5a>
        const char* p = va_arg(va, char*);
    1692:	00042d03          	lw	s10,0(s0)
    1696:	00440793          	addi	a5,s0,4
    169a:	d63e                	sw	a5,44(sp)
  for (s = str; *s && maxsize--; ++s);
    169c:	000d4503          	lbu	a0,0(s10)
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    16a0:	0c0b1563          	bnez	s6,176a <_vsnprintf+0x3f4>
  for (s = str; *s && maxsize--; ++s);
    16a4:	5cf9                	li	s9,-2
    16a6:	2e050b63          	beqz	a0,199c <_vsnprintf+0x626>
    16aa:	0c85                	addi	s9,s9,1
    16ac:	9cea                	add	s9,s9,s10
    16ae:	87ea                	mv	a5,s10
    16b0:	a019                	j	16b6 <_vsnprintf+0x340>
    16b2:	14fc8463          	beq	s9,a5,17fa <_vsnprintf+0x484>
    16b6:	0017c703          	lbu	a4,1(a5)
    16ba:	0785                	addi	a5,a5,1
    16bc:	fb7d                	bnez	a4,16b2 <_vsnprintf+0x33c>
  return (unsigned int)(s - str);
    16be:	41a787b3          	sub	a5,a5,s10
    16c2:	d43e                	sw	a5,40(sp)
        if (flags & FLAGS_PRECISION) {
    16c4:	4006f793          	andi	a5,a3,1024
    16c8:	ce3e                	sw	a5,28(sp)
    16ca:	c789                	beqz	a5,16d4 <_vsnprintf+0x35e>
          l = (l < precision ? l : precision);
    16cc:	57a2                	lw	a5,40(sp)
    16ce:	00fb7363          	bgeu	s6,a5,16d4 <_vsnprintf+0x35e>
    16d2:	d45a                	sw	s6,40(sp)
        if (!(flags & FLAGS_LEFT)) {
    16d4:	0026f413          	andi	s0,a3,2
    16d8:	1a040d63          	beqz	s0,1892 <_vsnprintf+0x51c>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    16dc:	0c050a63          	beqz	a0,17b0 <_vsnprintf+0x43a>
    16e0:	866e                	mv	a2,s11
    16e2:	a011                	j	16e6 <_vsnprintf+0x370>
          out(*(p++), buffer, idx++, maxlen);
    16e4:	8666                	mv	a2,s9
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    16e6:	47f2                	lw	a5,28(sp)
    16e8:	c791                	beqz	a5,16f4 <_vsnprintf+0x37e>
    16ea:	fffb0793          	addi	a5,s6,-1
    16ee:	160b0563          	beqz	s6,1858 <_vsnprintf+0x4e2>
    16f2:	8b3e                	mv	s6,a5
          out(*(p++), buffer, idx++, maxlen);
    16f4:	86a6                	mv	a3,s1
    16f6:	85ca                	mv	a1,s2
    16f8:	00160c93          	addi	s9,a2,1
    16fc:	9982                	jalr	s3
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    16fe:	41bc87b3          	sub	a5,s9,s11
    1702:	97ea                	add	a5,a5,s10
    1704:	0007c503          	lbu	a0,0(a5)
    1708:	fd71                	bnez	a0,16e4 <_vsnprintf+0x36e>
        if (flags & FLAGS_LEFT) {
    170a:	0a041263          	bnez	s0,17ae <_vsnprintf+0x438>
        const char* p = va_arg(va, char*);
    170e:	5432                	lw	s0,44(sp)
        break;
    1710:	8de6                	mv	s11,s9
    1712:	b97d                	j	13d0 <_vsnprintf+0x5a>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    1714:	4018                	lw	a4,0(s0)
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    1716:	0216e693          	ori	a3,a3,33
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    171a:	47a1                	li	a5,8
    171c:	866e                	mv	a2,s11
    171e:	c236                	sw	a3,4(sp)
    1720:	c03e                	sw	a5,0(sp)
    1722:	88da                	mv	a7,s6
    1724:	4841                	li	a6,16
    1726:	4781                	li	a5,0
    1728:	86a6                	mv	a3,s1
    172a:	85ca                	mv	a1,s2
    172c:	854e                	mv	a0,s3
    172e:	ad4ff0ef          	jal	ra,a02 <_ntoa_long>
    1732:	0411                	addi	s0,s0,4
    1734:	8daa                	mv	s11,a0
        break;
    1736:	b969                	j	13d0 <_vsnprintf+0x5a>
  while (*format)
    1738:	000bc503          	lbu	a0,0(s7)
    out = _out_null;
    173c:	73000993          	li	s3,1840
  while (*format)
    1740:	4d81                	li	s11,0
    1742:	c60514e3          	bnez	a0,13aa <_vsnprintf+0x34>
    1746:	4401                	li	s0,0
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    1748:	d49de5e3          	bltu	s11,s1,1492 <_vsnprintf+0x11c>
    174c:	b389                	j	148e <_vsnprintf+0x118>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    174e:	00042b03          	lw	s6,0(s0)
    switch (*format) {
    1752:	00264503          	lbu	a0,2(a2)
        format++;
    1756:	00360b93          	addi	s7,a2,3
        precision = prec > 0 ? (unsigned int)prec : 0U;
    175a:	fffb4793          	not	a5,s6
    175e:	87fd                	srai	a5,a5,0x1f
    1760:	00fb7b33          	and	s6,s6,a5
        const int prec = (int)va_arg(va, int);
    1764:	0411                	addi	s0,s0,4
        format++;
    1766:	0609                	addi	a2,a2,2
    1768:	b975                	j	1424 <_vsnprintf+0xae>
  for (s = str; *s && maxsize--; ++s);
    176a:	22050963          	beqz	a0,199c <_vsnprintf+0x626>
    176e:	fffb0c93          	addi	s9,s6,-1
    1772:	bf25                	j	16aa <_vsnprintf+0x334>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    1774:	0df57793          	andi	a5,a0,223
    1778:	04700713          	li	a4,71
    177c:	04e78b63          	beq	a5,a4,17d2 <_vsnprintf+0x45c>
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    1780:	04500793          	li	a5,69
    1784:	06f50163          	beq	a0,a5,17e6 <_vsnprintf+0x470>
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    1788:	041d                	addi	s0,s0,7
    178a:	9861                	andi	s0,s0,-8
    178c:	4018                	lw	a4,0(s0)
    178e:	405c                	lw	a5,4(s0)
    1790:	866e                	mv	a2,s11
    1792:	c036                	sw	a3,0(sp)
    1794:	88e2                	mv	a7,s8
    1796:	885a                	mv	a6,s6
    1798:	86a6                	mv	a3,s1
    179a:	85ca                	mv	a1,s2
    179c:	854e                	mv	a0,s3
    179e:	bdaff0ef          	jal	ra,b78 <_etoa>
    17a2:	0421                	addi	s0,s0,8
    17a4:	8daa                	mv	s11,a0
        break;
    17a6:	b12d                	j	13d0 <_vsnprintf+0x5a>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
    17a8:	0206e693          	ori	a3,a3,32
    17ac:	bdbd                	j	162a <_vsnprintf+0x2b4>
    17ae:	8de6                	mv	s11,s9
          while (l++ < width) {
    17b0:	57a2                	lw	a5,40(sp)
    17b2:	1187f963          	bgeu	a5,s8,18c4 <_vsnprintf+0x54e>
    17b6:	01bc0733          	add	a4,s8,s11
    17ba:	40f70cb3          	sub	s9,a4,a5
            out(' ', buffer, idx++, maxlen);
    17be:	866e                	mv	a2,s11
    17c0:	86a6                	mv	a3,s1
    17c2:	0d85                	addi	s11,s11,1
    17c4:	85ca                	mv	a1,s2
    17c6:	02000513          	li	a0,32
    17ca:	9982                	jalr	s3
          while (l++ < width) {
    17cc:	ffbc99e3          	bne	s9,s11,17be <_vsnprintf+0x448>
    17d0:	bf3d                	j	170e <_vsnprintf+0x398>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    17d2:	6785                	lui	a5,0x1
    17d4:	80078793          	addi	a5,a5,-2048 # 800 <_ntoa_format+0x1a>
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    17d8:	0fd57513          	andi	a0,a0,253
    17dc:	04500713          	li	a4,69
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    17e0:	8edd                	or	a3,a3,a5
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    17e2:	fae513e3          	bne	a0,a4,1788 <_vsnprintf+0x412>
    17e6:	0206e693          	ori	a3,a3,32
    17ea:	bf79                	j	1788 <_vsnprintf+0x412>
    switch (*format) {
    17ec:	00264503          	lbu	a0,2(a2)
          flags |= FLAGS_CHAR;
    17f0:	0c06e693          	ori	a3,a3,192
        format++;
    17f4:	00360b93          	addi	s7,a2,3
    17f8:	b1b9                	j	1446 <_vsnprintf+0xd0>
  return (unsigned int)(s - str);
    17fa:	41ac87b3          	sub	a5,s9,s10
    17fe:	d43e                	sw	a5,40(sp)
    1800:	b5d1                	j	16c4 <_vsnprintf+0x34e>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    1802:	ff36f593          	andi	a1,a3,-13
        if (flags & FLAGS_PRECISION) {
    1806:	4006f793          	andi	a5,a3,1024
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    180a:	0205e593          	ori	a1,a1,32
          base = 16U;
    180e:	4841                	li	a6,16
        if (flags & FLAGS_PRECISION) {
    1810:	10078863          	beqz	a5,1920 <_vsnprintf+0x5aa>
          flags &= ~FLAGS_ZEROPAD;
    1814:	99f9                	andi	a1,a1,-2
        if ((*format == 'i') || (*format == 'd')) {
    1816:	06900793          	li	a5,105
          if (flags & FLAGS_LONG_LONG) {
    181a:	2005f693          	andi	a3,a1,512
        if ((*format == 'i') || (*format == 'd')) {
    181e:	d6f50fe3          	beq	a0,a5,159c <_vsnprintf+0x226>
    1822:	06400793          	li	a5,100
    1826:	d6f50be3          	beq	a0,a5,159c <_vsnprintf+0x226>
          if (flags & FLAGS_LONG_LONG) {
    182a:	12069763          	bnez	a3,1958 <_vsnprintf+0x5e2>
          else if (flags & FLAGS_LONG) {
    182e:	1005f793          	andi	a5,a1,256
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    1832:	00440c93          	addi	s9,s0,4
          else if (flags & FLAGS_LONG) {
    1836:	10079f63          	bnez	a5,1954 <_vsnprintf+0x5de>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    183a:	0405f793          	andi	a5,a1,64
    183e:	ebe5                	bnez	a5,192e <_vsnprintf+0x5b8>
    1840:	0805f793          	andi	a5,a1,128
    1844:	10078863          	beqz	a5,1954 <_vsnprintf+0x5de>
    1848:	00045703          	lhu	a4,0(s0)
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    184c:	866e                	mv	a2,s11
    184e:	c22e                	sw	a1,4(sp)
    1850:	c062                	sw	s8,0(sp)
    1852:	88da                	mv	a7,s6
    1854:	4781                	li	a5,0
    1856:	b349                	j	15d8 <_vsnprintf+0x262>
    1858:	8cb2                	mv	s9,a2
    185a:	bd45                	j	170a <_vsnprintf+0x394>
          while (l++ < width) {
    185c:	4785                	li	a5,1
    185e:	1587f563          	bgeu	a5,s8,19a8 <_vsnprintf+0x632>
    1862:	fffd8c93          	addi	s9,s11,-1
    1866:	9ce2                	add	s9,s9,s8
    1868:	a011                	j	186c <_vsnprintf+0x4f6>
    186a:	0d05                	addi	s10,s10,1
            out(' ', buffer, idx++, maxlen);
    186c:	866e                	mv	a2,s11
    186e:	86a6                	mv	a3,s1
    1870:	85ca                	mv	a1,s2
    1872:	02000513          	li	a0,32
    1876:	8dea                	mv	s11,s10
    1878:	9982                	jalr	s3
          while (l++ < width) {
    187a:	ff9d18e3          	bne	s10,s9,186a <_vsnprintf+0x4f4>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    187e:	001d0d93          	addi	s11,s10,1
    1882:	00044503          	lbu	a0,0(s0)
    1886:	86a6                	mv	a3,s1
    1888:	8666                	mv	a2,s9
    188a:	85ca                	mv	a1,s2
    188c:	9982                	jalr	s3
        break;
    188e:	845a                	mv	s0,s6
    1890:	b681                	j	13d0 <_vsnprintf+0x5a>
          while (l++ < width) {
    1892:	5722                	lw	a4,40(sp)
    1894:	00170793          	addi	a5,a4,1
    1898:	11877463          	bgeu	a4,s8,19a0 <_vsnprintf+0x62a>
    189c:	01bc07b3          	add	a5,s8,s11
    18a0:	40e78cb3          	sub	s9,a5,a4
            out(' ', buffer, idx++, maxlen);
    18a4:	866e                	mv	a2,s11
    18a6:	86a6                	mv	a3,s1
    18a8:	0d85                	addi	s11,s11,1
    18aa:	85ca                	mv	a1,s2
    18ac:	02000513          	li	a0,32
    18b0:	9982                	jalr	s3
          while (l++ < width) {
    18b2:	ffbc99e3          	bne	s9,s11,18a4 <_vsnprintf+0x52e>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    18b6:	000d4503          	lbu	a0,0(s10)
          while (l++ < width) {
    18ba:	001c0793          	addi	a5,s8,1
    18be:	d43e                	sw	a5,40(sp)
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    18c0:	e20510e3          	bnez	a0,16e0 <_vsnprintf+0x36a>
          while (l++ < width) {
    18c4:	8cee                	mv	s9,s11
    18c6:	b5a1                	j	170e <_vsnprintf+0x398>
            const long long value = va_arg(va, long long);
    18c8:	041d                	addi	s0,s0,7
    18ca:	9861                	andi	s0,s0,-8
    18cc:	00442f03          	lw	t5,4(s0)
    18d0:	401c                	lw	a5,0(s0)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    18d2:	88c2                	mv	a7,a6
    18d4:	41ff5693          	srai	a3,t5,0x1f
    18d8:	8fb5                	xor	a5,a5,a3
    18da:	40d78733          	sub	a4,a5,a3
    18de:	01e6c533          	xor	a0,a3,t5
    18e2:	00e7b7b3          	sltu	a5,a5,a4
    18e6:	40d506b3          	sub	a3,a0,a3
    18ea:	866e                	mv	a2,s11
    18ec:	c62e                	sw	a1,12(sp)
    18ee:	c462                	sw	s8,8(sp)
    18f0:	c25a                	sw	s6,4(sp)
    18f2:	c002                	sw	zero,0(sp)
    18f4:	01ff5813          	srli	a6,t5,0x1f
    18f8:	40f687b3          	sub	a5,a3,a5
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    18fc:	86a6                	mv	a3,s1
    18fe:	85ca                	mv	a1,s2
    1900:	854e                	mv	a0,s3
    1902:	982ff0ef          	jal	ra,a84 <_ntoa_long_long>
    1906:	0421                	addi	s0,s0,8
    1908:	8daa                	mv	s11,a0
    190a:	b4d9                	j	13d0 <_vsnprintf+0x5a>
        if (flags & FLAGS_PRECISION) {
    190c:	4006f793          	andi	a5,a3,1024
          base = 16U;
    1910:	4841                	li	a6,16
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    1912:	ff36f593          	andi	a1,a3,-13
        if (flags & FLAGS_PRECISION) {
    1916:	f00780e3          	beqz	a5,1816 <_vsnprintf+0x4a0>
    191a:	bded                	j	1814 <_vsnprintf+0x49e>
          base = 10U;
    191c:	4829                	li	a6,10
    191e:	bddd                	j	1814 <_vsnprintf+0x49e>
        if ((*format == 'i') || (*format == 'd')) {
    1920:	2006f693          	andi	a3,a3,512
    1924:	b719                	j	182a <_vsnprintf+0x4b4>
    1926:	00044783          	lbu	a5,0(s0)
    192a:	873e                	mv	a4,a5
    192c:	b14d                	j	15ce <_vsnprintf+0x258>
    192e:	00044703          	lbu	a4,0(s0)
    1932:	bf29                	j	184c <_vsnprintf+0x4d6>
          while (l++ < width) {
    1934:	8dea                	mv	s11,s10
        break;
    1936:	845a                	mv	s0,s6
    1938:	bc61                	j	13d0 <_vsnprintf+0x5a>
          base =  8U;
    193a:	4821                	li	a6,8
    precision = 0U;
    193c:	85b6                	mv	a1,a3
        if ((*format != 'i') && (*format != 'd')) {
    193e:	06400713          	li	a4,100
        if (flags & FLAGS_PRECISION) {
    1942:	4005f793          	andi	a5,a1,1024
        if ((*format != 'i') && (*format != 'd')) {
    1946:	06e51463          	bne	a0,a4,19ae <_vsnprintf+0x638>
          if (flags & FLAGS_LONG_LONG) {
    194a:	2005f693          	andi	a3,a1,512
        if (flags & FLAGS_PRECISION) {
    194e:	c40787e3          	beqz	a5,159c <_vsnprintf+0x226>
    1952:	b5c9                	j	1814 <_vsnprintf+0x49e>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    1954:	4018                	lw	a4,0(s0)
    1956:	bddd                	j	184c <_vsnprintf+0x4d6>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    1958:	041d                	addi	s0,s0,7
    195a:	9861                	andi	s0,s0,-8
    195c:	4018                	lw	a4,0(s0)
    195e:	405c                	lw	a5,4(s0)
    1960:	88c2                	mv	a7,a6
    1962:	866e                	mv	a2,s11
    1964:	c62e                	sw	a1,12(sp)
    1966:	c462                	sw	s8,8(sp)
    1968:	c25a                	sw	s6,4(sp)
    196a:	c002                	sw	zero,0(sp)
    196c:	4801                	li	a6,0
    196e:	b779                	j	18fc <_vsnprintf+0x586>
            const long value = va_arg(va, long);
    1970:	401c                	lw	a5,0(s0)
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    1972:	866e                	mv	a2,s11
    1974:	c22e                	sw	a1,4(sp)
    1976:	41f7d713          	srai	a4,a5,0x1f
    197a:	00f746b3          	xor	a3,a4,a5
    197e:	c062                	sw	s8,0(sp)
    1980:	88da                	mv	a7,s6
    1982:	83fd                	srli	a5,a5,0x1f
    1984:	40e68733          	sub	a4,a3,a4
    1988:	b981                	j	15d8 <_vsnprintf+0x262>
          base =  2U;
    198a:	4809                	li	a6,2
    198c:	bf45                	j	193c <_vsnprintf+0x5c6>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    198e:	401c                	lw	a5,0(s0)
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    1990:	41f7d693          	srai	a3,a5,0x1f
    1994:	00f6c733          	xor	a4,a3,a5
    1998:	8f15                	sub	a4,a4,a3
    199a:	b915                	j	15ce <_vsnprintf+0x258>
  for (s = str; *s && maxsize--; ++s);
    199c:	d402                	sw	zero,40(sp)
    199e:	b31d                	j	16c4 <_vsnprintf+0x34e>
          while (l++ < width) {
    19a0:	d43e                	sw	a5,40(sp)
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    19a2:	d2051fe3          	bnez	a0,16e0 <_vsnprintf+0x36a>
    19a6:	bf39                	j	18c4 <_vsnprintf+0x54e>
          while (l++ < width) {
    19a8:	8cee                	mv	s9,s11
    19aa:	8dea                	mv	s11,s10
    19ac:	bdd9                	j	1882 <_vsnprintf+0x50c>
    19ae:	86ae                	mv	a3,a1
    19b0:	b78d                	j	1912 <_vsnprintf+0x59c>
          base = 10U;
    19b2:	4829                	li	a6,10
    19b4:	b769                	j	193e <_vsnprintf+0x5c8>

000019b6 <puts>:
{
    19b6:	1141                	addi	sp,sp,-16
    19b8:	c422                	sw	s0,8(sp)
    19ba:	c606                	sw	ra,12(sp)
    19bc:	842a                	mv	s0,a0
   while(*s !='\0')
    19be:	00054503          	lbu	a0,0(a0)
    19c2:	c901                	beqz	a0,19d2 <puts+0x1c>
       fputc(*s, (void *)-1);
    19c4:	55fd                	li	a1,-1
       s++;
    19c6:	0405                	addi	s0,s0,1
       fputc(*s, (void *)-1);
    19c8:	cfffe0ef          	jal	ra,6c6 <fputc>
   while(*s !='\0')
    19cc:	00044503          	lbu	a0,0(s0)
    19d0:	f975                	bnez	a0,19c4 <puts+0xe>
   fputc('\n', (void *)-1);
    19d2:	55fd                	li	a1,-1
    19d4:	4529                	li	a0,10
    19d6:	cf1fe0ef          	jal	ra,6c6 <fputc>
}
    19da:	40b2                	lw	ra,12(sp)
    19dc:	4422                	lw	s0,8(sp)
    19de:	4501                	li	a0,0
    19e0:	0141                	addi	sp,sp,16
    19e2:	8082                	ret

000019e4 <_putchar>:
    fputc(character, (void *)-1);
    19e4:	55fd                	li	a1,-1
    19e6:	ce1fe06f          	j	6c6 <fputc>

000019ea <putchar>:
{
    19ea:	1141                	addi	sp,sp,-16
    fputc(character, (void *)-1);
    19ec:	55fd                	li	a1,-1
    19ee:	0ff57513          	andi	a0,a0,255
{
    19f2:	c606                	sw	ra,12(sp)
    fputc(character, (void *)-1);
    19f4:	cd3fe0ef          	jal	ra,6c6 <fputc>
}
    19f8:	40b2                	lw	ra,12(sp)
    19fa:	4501                	li	a0,0
    19fc:	0141                	addi	sp,sp,16
    19fe:	8082                	ret

00001a00 <printf>:


///////////////////////////////////////////////////////////////////////////////

int printf(const char* format, ...)
{
    1a00:	7139                	addi	sp,sp,-64
  va_list va;
  va_start(va, format);
    1a02:	02410313          	addi	t1,sp,36
{
    1a06:	d636                	sw	a3,44(sp)
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    1a08:	86aa                	mv	a3,a0
    1a0a:	6505                	lui	a0,0x1
{
    1a0c:	d22e                	sw	a1,36(sp)
    1a0e:	d432                	sw	a2,40(sp)
    1a10:	d83a                	sw	a4,48(sp)
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    1a12:	002c                	addi	a1,sp,8
    1a14:	871a                	mv	a4,t1
    1a16:	567d                	li	a2,-1
    1a18:	36250513          	addi	a0,a0,866 # 1362 <_out_char>
{
    1a1c:	ce06                	sw	ra,28(sp)
    1a1e:	da3e                	sw	a5,52(sp)
    1a20:	dc42                	sw	a6,56(sp)
    1a22:	de46                	sw	a7,60(sp)
  va_start(va, format);
    1a24:	c61a                	sw	t1,12(sp)
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    1a26:	3a81                	jal	1376 <_vsnprintf>
  va_end(va);
  return ret;
}
    1a28:	40f2                	lw	ra,28(sp)
    1a2a:	6121                	addi	sp,sp,64
    1a2c:	8082                	ret

00001a2e <sprintf>:


int sprintf(char* buffer, const char* format, ...)
{
    1a2e:	7139                	addi	sp,sp,-64
  va_list va;
  va_start(va, format);
    1a30:	02810313          	addi	t1,sp,40
{
    1a34:	d636                	sw	a3,44(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    1a36:	86ae                	mv	a3,a1
    1a38:	85aa                	mv	a1,a0
{
    1a3a:	d432                	sw	a2,40(sp)
    1a3c:	d83a                	sw	a4,48(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    1a3e:	567d                	li	a2,-1
    1a40:	871a                	mv	a4,t1
    1a42:	72400513          	li	a0,1828
{
    1a46:	ce06                	sw	ra,28(sp)
    1a48:	da3e                	sw	a5,52(sp)
    1a4a:	dc42                	sw	a6,56(sp)
    1a4c:	de46                	sw	a7,60(sp)
  va_start(va, format);
    1a4e:	c61a                	sw	t1,12(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    1a50:	321d                	jal	1376 <_vsnprintf>
  va_end(va);
  return ret;
}
    1a52:	40f2                	lw	ra,28(sp)
    1a54:	6121                	addi	sp,sp,64
    1a56:	8082                	ret

00001a58 <snprintf>:


int snprintf(char* buffer, size_t count, const char* format, ...)
{
    1a58:	7139                	addi	sp,sp,-64
  va_list va;
  va_start(va, format);
    1a5a:	02c10313          	addi	t1,sp,44
{
    1a5e:	d636                	sw	a3,44(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    1a60:	86b2                	mv	a3,a2
    1a62:	862e                	mv	a2,a1
    1a64:	85aa                	mv	a1,a0
{
    1a66:	d83a                	sw	a4,48(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    1a68:	72400513          	li	a0,1828
    1a6c:	871a                	mv	a4,t1
{
    1a6e:	ce06                	sw	ra,28(sp)
    1a70:	da3e                	sw	a5,52(sp)
    1a72:	dc42                	sw	a6,56(sp)
    1a74:	de46                	sw	a7,60(sp)
  va_start(va, format);
    1a76:	c61a                	sw	t1,12(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    1a78:	38fd                	jal	1376 <_vsnprintf>
  va_end(va);
  return ret;
}
    1a7a:	40f2                	lw	ra,28(sp)
    1a7c:	6121                	addi	sp,sp,64
    1a7e:	8082                	ret

00001a80 <vprintf>:


int vprintf(const char* format, va_list va)
{
    1a80:	1101                	addi	sp,sp,-32
    1a82:	86aa                	mv	a3,a0
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    1a84:	6505                	lui	a0,0x1
{
    1a86:	872e                	mv	a4,a1
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    1a88:	567d                	li	a2,-1
    1a8a:	006c                	addi	a1,sp,12
    1a8c:	36250513          	addi	a0,a0,866 # 1362 <_out_char>
{
    1a90:	ce06                	sw	ra,28(sp)
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    1a92:	30d5                	jal	1376 <_vsnprintf>
}
    1a94:	40f2                	lw	ra,28(sp)
    1a96:	6105                	addi	sp,sp,32
    1a98:	8082                	ret

00001a9a <vsnprintf>:


int vsnprintf(char* buffer, size_t count, const char* format, va_list va)
{
    1a9a:	8736                	mv	a4,a3
  return _vsnprintf(_out_buffer, buffer, count, format, va);
    1a9c:	86b2                	mv	a3,a2
    1a9e:	862e                	mv	a2,a1
    1aa0:	85aa                	mv	a1,a0
    1aa2:	72400513          	li	a0,1828
    1aa6:	b8c1                	j	1376 <_vsnprintf>

00001aa8 <fctprintf>:
}


int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
    1aa8:	7139                	addi	sp,sp,-64
  va_list va;
  va_start(va, format);
    1aaa:	02c10313          	addi	t1,sp,44
{
    1aae:	8eaa                	mv	t4,a0
  const out_fct_wrap_type out_fct_wrap = { out, arg };
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    1ab0:	6505                	lui	a0,0x1
{
    1ab2:	8e2e                	mv	t3,a1
    1ab4:	d636                	sw	a3,44(sp)
    1ab6:	d83a                	sw	a4,48(sp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    1ab8:	86b2                	mv	a3,a2
    1aba:	002c                	addi	a1,sp,8
    1abc:	871a                	mv	a4,t1
    1abe:	567d                	li	a2,-1
    1ac0:	36c50513          	addi	a0,a0,876 # 136c <_out_fct>
{
    1ac4:	ce06                	sw	ra,28(sp)
    1ac6:	da3e                	sw	a5,52(sp)
    1ac8:	dc42                	sw	a6,56(sp)
    1aca:	de46                	sw	a7,60(sp)
  va_start(va, format);
    1acc:	c21a                	sw	t1,4(sp)
  const out_fct_wrap_type out_fct_wrap = { out, arg };
    1ace:	c476                	sw	t4,8(sp)
    1ad0:	c672                	sw	t3,12(sp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    1ad2:	3055                	jal	1376 <_vsnprintf>
  va_end(va);
  return ret;
}
    1ad4:	40f2                	lw	ra,28(sp)
    1ad6:	6121                	addi	sp,sp,64
    1ad8:	8082                	ret

00001ada <get_vtimer>:
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
int get_vtimer()
{
    1ada:	1141                	addi	sp,sp,-16
  volatile unsigned int   LoadCount;
  asm ("csrr %[LoadCount], time\n"
    1adc:	c01027f3          	rdtime	a5
    1ae0:	c63e                	sw	a5,12(sp)
      :[LoadCount]"=r"(LoadCount)
      :
      :
      );
  //LoadCount = *TIMER_ADDR;
  return LoadCount;
    1ae2:	4532                	lw	a0,12(sp)
  //int *TIMER_ADDR;
  //TIMER_ADDR = 0xE0013000;
  //volatile unsigned int   LoadCount;
  //LoadCount = *TIMER_ADDR;
  //return LoadCount;
}
    1ae4:	0141                	addi	sp,sp,16
    1ae6:	8082                	ret

00001ae8 <sim_end>:
{
  int *END_ADDR;
  END_ADDR = 0x6000FFF8;
  unsigned int END_DATA;
  END_DATA= 0xffff0000;
  *END_ADDR = END_DATA;
    1ae8:	600107b7          	lui	a5,0x60010
    1aec:	7741                	lui	a4,0xffff0
    1aee:	fee7ac23          	sw	a4,-8(a5) # 6000fff8 <__kernel_stack+0x3ff50000>
}
    1af2:	8082                	ret

00001af4 <ck_uart_set_baudrate>:

void ck_uart_set_baudrate(p_ck_uart_device uart_device, uint32_t baudrate)
{ /* {{{ ck_uart_set_baudrate */
    uint32_t baud_div;
    uint32_t *addr = uart_device->register_map;
    baud_div = (APB_FREQ/baudrate) >> 4;
    1af4:	05f5e7b7          	lui	a5,0x5f5e
    1af8:	10078793          	addi	a5,a5,256 # 5f5e100 <_global_impure_ptr+0x5f58940>
    1afc:	02b7d7b3          	divu	a5,a5,a1
    uint32_t *addr = uart_device->register_map;
    1b00:	4158                	lw	a4,4(a0)
    uart_device->baudrate = baudrate;
    1b02:	c50c                	sw	a1,8(a0)
    *(reg8_t*)(addr+CK_UART_LCR) |= LCR_SET_DLAB;
    1b04:	00c74683          	lbu	a3,12(a4) # ffff000c <__kernel_stack+0xdff30014>
    1b08:	f806e693          	ori	a3,a3,-128
    1b0c:	0ff6f693          	andi	a3,a3,255
    1b10:	00d70623          	sb	a3,12(a4)
    baud_div = (APB_FREQ/baudrate) >> 4;
    1b14:	0047d693          	srli	a3,a5,0x4
    *(reg8_t*)(addr+CK_UART_DLL) = (baud_div & 0xFF);
    1b18:	0ff6f693          	andi	a3,a3,255
    *(reg8_t*)(addr+CK_UART_DLH) = ((baud_div >> 8) & 0xFF);
    1b1c:	83b1                	srli	a5,a5,0xc
    *(reg8_t*)(addr+CK_UART_DLL) = (baud_div & 0xFF);
    1b1e:	00d70023          	sb	a3,0(a4)
    *(reg8_t*)(addr+CK_UART_DLH) = ((baud_div >> 8) & 0xFF);
    1b22:	0ff7f793          	andi	a5,a5,255
    1b26:	00f70223          	sb	a5,4(a4)
    *(reg8_t*)(addr+CK_UART_LCR) &= (~LCR_SET_DLAB);
    1b2a:	00c74783          	lbu	a5,12(a4)
    1b2e:	07f7f793          	andi	a5,a5,127
    1b32:	00f70623          	sb	a5,12(a4)
} /* }}} */
    1b36:	8082                	ret

00001b38 <ck_uart_set_parity>:

void ck_uart_set_parity(p_ck_uart_device uart_device, t_ck_uart_parity parity)
{ /* {{{ ck_uart_set_parity */
    uart_device->parity = parity;
    1b38:	c54c                	sw	a1,12(a0)
    switch (parity)
    1b3a:	4785                	li	a5,1
    1b3c:	04f58363          	beq	a1,a5,1b82 <ck_uart_set_parity+0x4a>
    1b40:	4789                	li	a5,2
    1b42:	00f58d63          	beq	a1,a5,1b5c <ck_uart_set_parity+0x24>
    1b46:	00058363          	beqz	a1,1b4c <ck_uart_set_parity+0x14>
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_PARITY_EVEN;
            break;
        default:
            break;
    }
} /* }}} */
    1b4a:	8082                	ret
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= (~LCR_PARITY_ENABLE);
    1b4c:	4158                	lw	a4,4(a0)
    1b4e:	00c74783          	lbu	a5,12(a4)
    1b52:	0f77f793          	andi	a5,a5,247
    1b56:	00f70623          	sb	a5,12(a4)
            break;
    1b5a:	8082                	ret
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_PARITY_ENABLE;
    1b5c:	4158                	lw	a4,4(a0)
    1b5e:	00c74783          	lbu	a5,12(a4)
    1b62:	0ff7f793          	andi	a5,a5,255
    1b66:	0087e793          	ori	a5,a5,8
    1b6a:	00f70623          	sb	a5,12(a4)
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_PARITY_EVEN;
    1b6e:	4158                	lw	a4,4(a0)
    1b70:	00c74783          	lbu	a5,12(a4)
    1b74:	0ff7f793          	andi	a5,a5,255
    1b78:	0107e793          	ori	a5,a5,16
    1b7c:	00f70623          	sb	a5,12(a4)
} /* }}} */
    1b80:	8082                	ret
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_PARITY_ENABLE;
    1b82:	4158                	lw	a4,4(a0)
    1b84:	00c74783          	lbu	a5,12(a4)
    1b88:	0ff7f793          	andi	a5,a5,255
    1b8c:	0087e793          	ori	a5,a5,8
    1b90:	00f70623          	sb	a5,12(a4)
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= LCR_PARITY_ODD;
    1b94:	4158                	lw	a4,4(a0)
    1b96:	00c74783          	lbu	a5,12(a4)
    1b9a:	0ef7f793          	andi	a5,a5,239
    1b9e:	00f70623          	sb	a5,12(a4)
            break;
    1ba2:	8082                	ret

00001ba4 <ck_uart_set_wordsize>:

void ck_uart_set_wordsize(p_ck_uart_device uart_device, t_ck_uart_wordsize wordsize)
{ /* {{{ ck_uart_set_wordsize */
    uart_device->wordsize = wordsize;
    1ba4:	c94c                	sw	a1,20(a0)
    switch (wordsize)
    1ba6:	4789                	li	a5,2
    1ba8:	04f58d63          	beq	a1,a5,1c02 <ck_uart_set_wordsize+0x5e>
    1bac:	02b7e563          	bltu	a5,a1,1bd6 <ck_uart_set_wordsize+0x32>
    1bb0:	04058163          	beqz	a1,1bf2 <ck_uart_set_wordsize+0x4e>
    {
        case WORDSIZE_5:
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= LCR_WORD_SIZE_5;
            break;
        case WORDSIZE_6:
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= 0xfd;
    1bb4:	4158                	lw	a4,4(a0)
    1bb6:	00c74783          	lbu	a5,12(a4)
    1bba:	0fd7f793          	andi	a5,a5,253
    1bbe:	00f70623          	sb	a5,12(a4)
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_WORD_SIZE_6;
    1bc2:	4158                	lw	a4,4(a0)
    1bc4:	00c74783          	lbu	a5,12(a4)
    1bc8:	0ff7f793          	andi	a5,a5,255
    1bcc:	0017e793          	ori	a5,a5,1
    1bd0:	00f70623          	sb	a5,12(a4)
            break;
    1bd4:	8082                	ret
    switch (wordsize)
    1bd6:	478d                	li	a5,3
    1bd8:	00f59c63          	bne	a1,a5,1bf0 <ck_uart_set_wordsize+0x4c>
        case WORDSIZE_7:
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= 0xfe;
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_WORD_SIZE_7;
            break;
        case WORDSIZE_8:
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_WORD_SIZE_8;
    1bdc:	4158                	lw	a4,4(a0)
    1bde:	00c74783          	lbu	a5,12(a4)
    1be2:	0ff7f793          	andi	a5,a5,255
    1be6:	0037e793          	ori	a5,a5,3
    1bea:	00f70623          	sb	a5,12(a4)
            break;
        default:
            break;
    }			
} /* }}} */
    1bee:	8082                	ret
    1bf0:	8082                	ret
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= LCR_WORD_SIZE_5;
    1bf2:	4158                	lw	a4,4(a0)
    1bf4:	00c74783          	lbu	a5,12(a4)
    1bf8:	0fc7f793          	andi	a5,a5,252
    1bfc:	00f70623          	sb	a5,12(a4)
            break;
    1c00:	8082                	ret
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= 0xfe;
    1c02:	4158                	lw	a4,4(a0)
    1c04:	00c74783          	lbu	a5,12(a4)
    1c08:	0fe7f793          	andi	a5,a5,254
    1c0c:	00f70623          	sb	a5,12(a4)
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_WORD_SIZE_7;
    1c10:	4158                	lw	a4,4(a0)
    1c12:	00c74783          	lbu	a5,12(a4)
    1c16:	0ff7f793          	andi	a5,a5,255
    1c1a:	0027e793          	ori	a5,a5,2
    1c1e:	00f70623          	sb	a5,12(a4)
            break;
    1c22:	8082                	ret

00001c24 <ck_uart_set_stopbit>:

void ck_uart_set_stopbit(p_ck_uart_device uart_device, t_ck_uart_stopbit stopbit)
{ /* {{{ ck_uart_set_stopbit */
    uart_device->stopbit = stopbit;
    1c24:	c90c                	sw	a1,16(a0)
    switch(stopbit)
    1c26:	cd99                	beqz	a1,1c44 <ck_uart_set_stopbit+0x20>
    1c28:	4785                	li	a5,1
    1c2a:	00f59c63          	bne	a1,a5,1c42 <ck_uart_set_stopbit+0x1e>
    {
        case STOPBIT_1:
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= LCR_STOP_BIT1;
            break;
        case STOPBIT_2:
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_STOP_BIT2;
    1c2e:	4158                	lw	a4,4(a0)
    1c30:	00c74783          	lbu	a5,12(a4)
    1c34:	0ff7f793          	andi	a5,a5,255
    1c38:	0047e793          	ori	a5,a5,4
    1c3c:	00f70623          	sb	a5,12(a4)
            break;
        default:
            break;
    }
} /* }}} */
    1c40:	8082                	ret
    1c42:	8082                	ret
    1c44:	4158                	lw	a4,4(a0)
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= LCR_STOP_BIT1;
    1c46:	00c74783          	lbu	a5,12(a4)
    1c4a:	0fb7f793          	andi	a5,a5,251
    1c4e:	00f70623          	sb	a5,12(a4)
            break;
    1c52:	8082                	ret

00001c54 <ck_uart_set_rxmode>:


void ck_uart_set_rxmode(p_ck_uart_device uart_device, t_ck_uart_mode rxmode)
{ /* {{{ ck_uart_set_rxmode */
    uart_device->rxmode = rxmode;
    1c54:	cd0c                	sw	a1,24(a0)

} /* }}} */
    1c56:	8082                	ret

00001c58 <ck_uart_set_txmode>:

void ck_uart_set_txmode(p_ck_uart_device uart_device, t_ck_uart_mode txmode)
{ /* {{{ ck_uart_set_txmode */
    uart_device->txmode = txmode;
    1c58:	cd4c                	sw	a1,28(a0)
} /* }}} */
    1c5a:	8082                	ret

00001c5c <ck_uart_open>:
 * @param  id: UART device ID
 * @retval 0 if success, 1 if fail
 */
uint32_t ck_uart_open(p_ck_uart_device uart_device, uint32_t id)
{
    if (id == 0)
    1c5c:	e981                	bnez	a1,1c6c <ck_uart_open+0x10>
    {
        uart_device->uart_id = 0;
        uart_device->register_map = (uint32_t*)UART0_BASE_ADDR;
    1c5e:	400157b7          	lui	a5,0x40015
        uart_device->uart_id = 0;
    1c62:	00052023          	sw	zero,0(a0)
        uart_device->register_map = (uint32_t*)UART0_BASE_ADDR;
    1c66:	c15c                	sw	a5,4(a0)
        return 0;
    1c68:	4501                	li	a0,0
    1c6a:	8082                	ret
    }
    else
    {
        return 1;
    1c6c:	4505                	li	a0,1
    }
}
    1c6e:	8082                	ret

00001c70 <ck_uart_init>:
 * @param  uart_cfig: uart configurations collection, a structure datatype
 * @retval 0 if success, 1 if fail
 */
uint32_t ck_uart_init(p_ck_uart_device uart_device, p_ck_uart_cfig uart_cfig)
{
    if (uart_device->uart_id == 0xFFFF)
    1c70:	4118                	lw	a4,0(a0)
    1c72:	67c1                	lui	a5,0x10
    1c74:	17fd                	addi	a5,a5,-1
    1c76:	0af70163          	beq	a4,a5,1d18 <ck_uart_init+0xa8>
        return 1;
    ck_uart_set_baudrate(uart_device, uart_cfig->baudrate);
    1c7a:	4194                	lw	a3,0(a1)
    baud_div = (APB_FREQ/baudrate) >> 4;
    1c7c:	05f5e7b7          	lui	a5,0x5f5e
    1c80:	10078793          	addi	a5,a5,256 # 5f5e100 <_global_impure_ptr+0x5f58940>
    1c84:	02d7d7b3          	divu	a5,a5,a3
    uint32_t *addr = uart_device->register_map;
    1c88:	4158                	lw	a4,4(a0)
{
    1c8a:	1141                	addi	sp,sp,-16
    1c8c:	c606                	sw	ra,12(sp)
    1c8e:	c422                	sw	s0,8(sp)
    1c90:	c226                	sw	s1,4(sp)
    uart_device->baudrate = baudrate;
    1c92:	c514                	sw	a3,8(a0)
    *(reg8_t*)(addr+CK_UART_LCR) |= LCR_SET_DLAB;
    1c94:	00c74683          	lbu	a3,12(a4)
    1c98:	84ae                	mv	s1,a1
    1c9a:	842a                	mv	s0,a0
    1c9c:	f806e693          	ori	a3,a3,-128
    1ca0:	0ff6f693          	andi	a3,a3,255
    1ca4:	00d70623          	sb	a3,12(a4)
    baud_div = (APB_FREQ/baudrate) >> 4;
    1ca8:	0047d693          	srli	a3,a5,0x4
    *(reg8_t*)(addr+CK_UART_DLL) = (baud_div & 0xFF);
    1cac:	0ff6f693          	andi	a3,a3,255
    *(reg8_t*)(addr+CK_UART_DLH) = ((baud_div >> 8) & 0xFF);
    1cb0:	83b1                	srli	a5,a5,0xc
    *(reg8_t*)(addr+CK_UART_DLL) = (baud_div & 0xFF);
    1cb2:	00d70023          	sb	a3,0(a4)
    *(reg8_t*)(addr+CK_UART_DLH) = ((baud_div >> 8) & 0xFF);
    1cb6:	0ff7f793          	andi	a5,a5,255
    1cba:	00f70223          	sb	a5,4(a4)
    *(reg8_t*)(addr+CK_UART_LCR) &= (~LCR_SET_DLAB);
    1cbe:	00c74783          	lbu	a5,12(a4)
    1cc2:	07f7f793          	andi	a5,a5,127
    1cc6:	00f70623          	sb	a5,12(a4)
    ck_uart_set_parity(uart_device, uart_cfig->parity);
    1cca:	458c                	lw	a1,8(a1)
    1ccc:	35b5                	jal	1b38 <ck_uart_set_parity>
    ck_uart_set_wordsize(uart_device, uart_cfig->wordsize);
    1cce:	44cc                	lw	a1,12(s1)
    1cd0:	8522                	mv	a0,s0
    1cd2:	3dc9                	jal	1ba4 <ck_uart_set_wordsize>
    ck_uart_set_stopbit(uart_device, uart_cfig->stopbit);
    1cd4:	40dc                	lw	a5,4(s1)
    uart_device->stopbit = stopbit;
    1cd6:	c81c                	sw	a5,16(s0)
    switch(stopbit)
    1cd8:	cb85                	beqz	a5,1d08 <ck_uart_init+0x98>
    1cda:	4705                	li	a4,1
    1cdc:	00e78c63          	beq	a5,a4,1cf4 <ck_uart_init+0x84>
    uart_device->rxmode = rxmode;
    1ce0:	4898                	lw	a4,16(s1)
    uart_device->txmode = txmode;
    1ce2:	48dc                	lw	a5,20(s1)
    ck_uart_set_rxmode(uart_device, uart_cfig->rxmode);
    ck_uart_set_txmode(uart_device, uart_cfig->txmode);
    return 0;
}
    1ce4:	40b2                	lw	ra,12(sp)
    uart_device->rxmode = rxmode;
    1ce6:	cc18                	sw	a4,24(s0)
    uart_device->txmode = txmode;
    1ce8:	cc5c                	sw	a5,28(s0)
}
    1cea:	4422                	lw	s0,8(sp)
    1cec:	4492                	lw	s1,4(sp)
    return 0;
    1cee:	4501                	li	a0,0
}
    1cf0:	0141                	addi	sp,sp,16
    1cf2:	8082                	ret
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_STOP_BIT2;
    1cf4:	4058                	lw	a4,4(s0)
    1cf6:	00c74783          	lbu	a5,12(a4)
    1cfa:	0ff7f793          	andi	a5,a5,255
    1cfe:	0047e793          	ori	a5,a5,4
    1d02:	00f70623          	sb	a5,12(a4)
            break;
    1d06:	bfe9                	j	1ce0 <ck_uart_init+0x70>
    1d08:	4058                	lw	a4,4(s0)
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= LCR_STOP_BIT1;
    1d0a:	00c74783          	lbu	a5,12(a4)
    1d0e:	0fb7f793          	andi	a5,a5,251
    1d12:	00f70623          	sb	a5,12(a4)
            break;
    1d16:	b7e9                	j	1ce0 <ck_uart_init+0x70>
        return 1;
    1d18:	4505                	li	a0,1
}
    1d1a:	8082                	ret

00001d1c <ck_uart_close>:
 */
uint32_t ck_uart_close(p_ck_uart_device uart_device)
{
    ck_uart_set_rxmode(uart_device, DISABLE);
    ck_uart_set_txmode(uart_device, DISABLE);
    uart_device->uart_id = 0xFFFF;
    1d1c:	67c1                	lui	a5,0x10
    1d1e:	17fd                	addi	a5,a5,-1
    uart_device->rxmode = rxmode;
    1d20:	00052c23          	sw	zero,24(a0)
    uart_device->txmode = txmode;
    1d24:	00052e23          	sw	zero,28(a0)
    uart_device->uart_id = 0xFFFF;
    1d28:	c11c                	sw	a5,0(a0)
    return 0;
}
    1d2a:	4501                	li	a0,0
    1d2c:	8082                	ret

00001d2e <ck_uart_putc>:
 * @param  c: character needs to transmit
 * @retval 0 if success, 1 if fail
 */
uint32_t ck_uart_putc(p_ck_uart_device uart_device, uint8_t c)
{
    if (uart_device->txmode == DISABLE)
    1d2e:	4d5c                	lw	a5,28(a0)
    1d30:	cb99                	beqz	a5,1d46 <ck_uart_putc+0x18>
        return 1;
    // wait until uart transmit buffer is empty
    while (!((*(reg8_t*)(uart_device->register_map+CK_UART_LSR)) & CK_LSR_TRANS_EMPTY));
    1d32:	4158                	lw	a4,4(a0)
    1d34:	01474783          	lbu	a5,20(a4)
    1d38:	0207f793          	andi	a5,a5,32
    1d3c:	dfe5                	beqz	a5,1d34 <ck_uart_putc+0x6>

    *(reg8_t*)(uart_device->register_map+CK_UART_THR) = c;
    1d3e:	00b70023          	sb	a1,0(a4)
    return 0;
    1d42:	4501                	li	a0,0
    1d44:	8082                	ret
        return 1;
    1d46:	4505                	li	a0,1
}
    1d48:	8082                	ret

00001d4a <ck_uart_status>:
    //uart_lsr = *(reg8_t*)(uart_device->register_map+CK_UART_LSR);
    if (uart_lsr & CK_LSR_TEMT)
        return 0;
    else
        return 1;
}
    1d4a:	4501                	li	a0,0
    1d4c:	8082                	ret

00001d4e <vasprintf>:


#define CHUNKSIZE (256)

int vasprintf(char **ret, const char *fmt, va_list ap)
{
    1d4e:	1101                	addi	sp,sp,-32
    1d50:	c05a                	sw	s6,0(sp)
    1d52:	8b2a                	mv	s6,a0
    size_t chunks;
    size_t buflen;
    char * buf;
    int    len;

    chunks = ((strlen(fmt) + 1) / CHUNKSIZE) + 1;
    1d54:	852e                	mv	a0,a1
{
    1d56:	ca26                	sw	s1,20(sp)
    1d58:	c64e                	sw	s3,12(sp)
    1d5a:	c452                	sw	s4,8(sp)
    1d5c:	c256                	sw	s5,4(sp)
    1d5e:	ce06                	sw	ra,28(sp)
    1d60:	cc22                	sw	s0,24(sp)
    1d62:	c84a                	sw	s2,16(sp)
    1d64:	8a2e                	mv	s4,a1
    1d66:	8ab2                	mv	s5,a2
    chunks = ((strlen(fmt) + 1) / CHUNKSIZE) + 1;
    1d68:	7ed020ef          	jal	ra,4d54 <strlen>
    1d6c:	00150993          	addi	s3,a0,1
    1d70:	f009f993          	andi	s3,s3,-256
    buflen = chunks * CHUNKSIZE;
    1d74:	10098493          	addi	s1,s3,256

    *ret = NULL;
    1d78:	000b2023          	sw	zero,0(s6)
    1d7c:	20098993          	addi	s3,s3,512
    for (;;) {
        buf = malloc(buflen);
    1d80:	8526                	mv	a0,s1
    1d82:	165020ef          	jal	ra,46e6 <malloc>
        if (buf == NULL) {
            return -ENOMEM;
        }
        len = vsnprintf(buf, buflen, fmt, ap);
    1d86:	85a6                	mv	a1,s1
    1d88:	86d6                	mv	a3,s5
    1d8a:	8652                	mv	a2,s4
        buf = malloc(buflen);
    1d8c:	892a                	mv	s2,a0
        if (buf == NULL) {
    1d8e:	cd29                	beqz	a0,1de8 <vasprintf+0x9a>
        len = vsnprintf(buf, buflen, fmt, ap);
    1d90:	3329                	jal	1a9a <vsnprintf>
    1d92:	842a                	mv	s0,a0

        if (len >= 0 && (size_t)len < buflen - 1) {
    1d94:	14fd                	addi	s1,s1,-1
            break;
        }
        free(buf);
    1d96:	854a                	mv	a0,s2
        if (len >= 0 && (size_t)len < buflen - 1) {
    1d98:	00044d63          	bltz	s0,1db2 <vasprintf+0x64>
    1d9c:	02946163          	bltu	s0,s1,1dbe <vasprintf+0x70>
        * len >= 0 is required for vsnprintf implementations that
        * return -1 for insufficient buffer
        */

        if (len >= 0 && buflen <= (size_t)len) {
            buflen = len + 1;
    1da0:	00140493          	addi	s1,s0,1
        free(buf);
    1da4:	14f020ef          	jal	ra,46f2 <free>
        if (len >= 0 && buflen <= (size_t)len) {
    1da8:	01346763          	bltu	s0,s3,1db6 <vasprintf+0x68>
    1dac:	10098993          	addi	s3,s3,256
    1db0:	bfc1                	j	1d80 <vasprintf+0x32>
        free(buf);
    1db2:	141020ef          	jal	ra,46f2 <free>
    1db6:	84ce                	mv	s1,s3
    1db8:	10098993          	addi	s3,s3,256
    1dbc:	b7d1                	j	1d80 <vasprintf+0x32>
        }
    }

    if (len > 0 && buf != NULL) {
    1dbe:	ec01                	bnez	s0,1dd6 <vasprintf+0x88>
        else
            *ret = buf;
    }

    return len;
}
    1dc0:	40f2                	lw	ra,28(sp)
    1dc2:	8522                	mv	a0,s0
    1dc4:	4462                	lw	s0,24(sp)
    1dc6:	44d2                	lw	s1,20(sp)
    1dc8:	4942                	lw	s2,16(sp)
    1dca:	49b2                	lw	s3,12(sp)
    1dcc:	4a22                	lw	s4,8(sp)
    1dce:	4a92                	lw	s5,4(sp)
    1dd0:	4b02                	lw	s6,0(sp)
    1dd2:	6105                	addi	sp,sp,32
    1dd4:	8082                	ret
        *ret = strdup(buf);
    1dd6:	73d020ef          	jal	ra,4d12 <strdup>
    1dda:	00ab2023          	sw	a0,0(s6)
        if (*ret != NULL)
    1dde:	c519                	beqz	a0,1dec <vasprintf+0x9e>
            free(buf);
    1de0:	854a                	mv	a0,s2
    1de2:	111020ef          	jal	ra,46f2 <free>
    1de6:	bfe9                	j	1dc0 <vasprintf+0x72>
            return -ENOMEM;
    1de8:	5451                	li	s0,-12
    1dea:	bfd9                	j	1dc0 <vasprintf+0x72>
            *ret = buf;
    1dec:	012b2023          	sw	s2,0(s6)
    1df0:	bfc1                	j	1dc0 <vasprintf+0x72>

00001df2 <asprintf>:

int asprintf(char **buf, const char *fmt, ...)
{
    1df2:	7139                	addi	sp,sp,-64
    va_list args;
    int     i;

    va_start(args, fmt);
    1df4:	02810313          	addi	t1,sp,40
{
    1df8:	d432                	sw	a2,40(sp)
    i = vasprintf(buf, fmt, args);
    1dfa:	861a                	mv	a2,t1
{
    1dfc:	ce06                	sw	ra,28(sp)
    1dfe:	d636                	sw	a3,44(sp)
    1e00:	d83a                	sw	a4,48(sp)
    1e02:	da3e                	sw	a5,52(sp)
    1e04:	dc42                	sw	a6,56(sp)
    1e06:	de46                	sw	a7,60(sp)
    va_start(args, fmt);
    1e08:	c61a                	sw	t1,12(sp)
    i = vasprintf(buf, fmt, args);
    1e0a:	3791                	jal	1d4e <vasprintf>
    va_end(args);
    return i;
}
    1e0c:	40f2                	lw	ra,28(sp)
    1e0e:	6121                	addi	sp,sp,64
    1e10:	8082                	ret

00001e12 <ck_intc_init>:

//config the interrupt controller
void ck_intc_init()
{
	int *picr = TCIP_BASE;
        *picr = 0x0;
    1e12:	e00007b7          	lui	a5,0xe0000
    1e16:	0007a023          	sw	zero,0(a5) # e0000000 <__kernel_stack+0xbff40008>
        
        // Write ISER
        int *piser = CLIC_BASE+INTIE+0x10;
        *piser = 0x810000;
    1e1a:	00810737          	lui	a4,0x810
    1e1e:	e08007b7          	lui	a5,0xe0800
    1e22:	40e7a823          	sw	a4,1040(a5) # e0800410 <__kernel_stack+0xc0740418>
}
    1e26:	8082                	ret

00001e28 <__thead_vprintfsprintf>:
#include <stdarg.h>

int __thead_vprintfsprintf(char *str, FILE *stream, const char *format, va_list arg_ptr)
{
    return 0;
}
    1e28:	4501                	li	a0,0
    1e2a:	8082                	ret

00001e2c <__thead_vprintfprintf>:

int __thead_vprintfprintf(FILE *stream, const char *format, va_list arg_ptr)
{
    return 0;
}
    1e2c:	4501                	li	a0,0
    1e2e:	8082                	ret

00001e30 <stdout>:

#undef stdout
int stdout()
{
    return 0;
}
    1e30:	4501                	li	a0,0
    1e32:	8082                	ret

00001e34 <os_critical_enter>:
      : :"r" (ch): "x13" );
}
*/
void os_critical_enter(void)
{
}
    1e34:	8082                	ret

00001e36 <os_critical_exit>:
    1e36:	8082                	ret

00001e38 <__udivdi3>:
    1e38:	88aa                	mv	a7,a0
    1e3a:	87ae                	mv	a5,a1
    1e3c:	8832                	mv	a6,a2
    1e3e:	8536                	mv	a0,a3
    1e40:	8346                	mv	t1,a7
    1e42:	20069663          	bnez	a3,204e <__udivdi3+0x216>
    1e46:	00003697          	auipc	a3,0x3
    1e4a:	7e268693          	addi	a3,a3,2018 # 5628 <__clz_tab>
    1e4e:	0ac5ff63          	bgeu	a1,a2,1f0c <__udivdi3+0xd4>
    1e52:	6741                	lui	a4,0x10
    1e54:	0ae67563          	bgeu	a2,a4,1efe <__udivdi3+0xc6>
    1e58:	0ff00713          	li	a4,255
    1e5c:	00c73733          	sltu	a4,a4,a2
    1e60:	070e                	slli	a4,a4,0x3
    1e62:	00e65533          	srl	a0,a2,a4
    1e66:	96aa                	add	a3,a3,a0
    1e68:	0006c683          	lbu	a3,0(a3)
    1e6c:	02000513          	li	a0,32
    1e70:	9736                	add	a4,a4,a3
    1e72:	40e506b3          	sub	a3,a0,a4
    1e76:	00e50b63          	beq	a0,a4,1e8c <__udivdi3+0x54>
    1e7a:	00d795b3          	sll	a1,a5,a3
    1e7e:	00e8d733          	srl	a4,a7,a4
    1e82:	00d61833          	sll	a6,a2,a3
    1e86:	8dd9                	or	a1,a1,a4
    1e88:	00d89333          	sll	t1,a7,a3
    1e8c:	01085893          	srli	a7,a6,0x10
    1e90:	0315d6b3          	divu	a3,a1,a7
    1e94:	01081613          	slli	a2,a6,0x10
    1e98:	8241                	srli	a2,a2,0x10
    1e9a:	01035793          	srli	a5,t1,0x10
    1e9e:	0315f733          	remu	a4,a1,a7
    1ea2:	8536                	mv	a0,a3
    1ea4:	02d605b3          	mul	a1,a2,a3
    1ea8:	0742                	slli	a4,a4,0x10
    1eaa:	8fd9                	or	a5,a5,a4
    1eac:	00b7fc63          	bgeu	a5,a1,1ec4 <__udivdi3+0x8c>
    1eb0:	97c2                	add	a5,a5,a6
    1eb2:	fff68513          	addi	a0,a3,-1
    1eb6:	0107e763          	bltu	a5,a6,1ec4 <__udivdi3+0x8c>
    1eba:	00b7f563          	bgeu	a5,a1,1ec4 <__udivdi3+0x8c>
    1ebe:	ffe68513          	addi	a0,a3,-2
    1ec2:	97c2                	add	a5,a5,a6
    1ec4:	8f8d                	sub	a5,a5,a1
    1ec6:	0317f733          	remu	a4,a5,a7
    1eca:	0342                	slli	t1,t1,0x10
    1ecc:	01035313          	srli	t1,t1,0x10
    1ed0:	0317d7b3          	divu	a5,a5,a7
    1ed4:	0742                	slli	a4,a4,0x10
    1ed6:	00676333          	or	t1,a4,t1
    1eda:	02f606b3          	mul	a3,a2,a5
    1ede:	863e                	mv	a2,a5
    1ee0:	00d37b63          	bgeu	t1,a3,1ef6 <__udivdi3+0xbe>
    1ee4:	9342                	add	t1,t1,a6
    1ee6:	fff78613          	addi	a2,a5,-1
    1eea:	01036663          	bltu	t1,a6,1ef6 <__udivdi3+0xbe>
    1eee:	00d37463          	bgeu	t1,a3,1ef6 <__udivdi3+0xbe>
    1ef2:	ffe78613          	addi	a2,a5,-2
    1ef6:	0542                	slli	a0,a0,0x10
    1ef8:	8d51                	or	a0,a0,a2
    1efa:	4581                	li	a1,0
    1efc:	a85d                	j	1fb2 <__udivdi3+0x17a>
    1efe:	01000537          	lui	a0,0x1000
    1f02:	4741                	li	a4,16
    1f04:	f4a66fe3          	bltu	a2,a0,1e62 <__udivdi3+0x2a>
    1f08:	4761                	li	a4,24
    1f0a:	bfa1                	j	1e62 <__udivdi3+0x2a>
    1f0c:	e601                	bnez	a2,1f14 <__udivdi3+0xdc>
    1f0e:	4705                	li	a4,1
    1f10:	02c75833          	divu	a6,a4,a2
    1f14:	6741                	lui	a4,0x10
    1f16:	08e87f63          	bgeu	a6,a4,1fb4 <__udivdi3+0x17c>
    1f1a:	0ff00713          	li	a4,255
    1f1e:	01077363          	bgeu	a4,a6,1f24 <__udivdi3+0xec>
    1f22:	4521                	li	a0,8
    1f24:	00a85733          	srl	a4,a6,a0
    1f28:	96ba                	add	a3,a3,a4
    1f2a:	0006c703          	lbu	a4,0(a3)
    1f2e:	02000613          	li	a2,32
    1f32:	972a                	add	a4,a4,a0
    1f34:	40e606b3          	sub	a3,a2,a4
    1f38:	08e61563          	bne	a2,a4,1fc2 <__udivdi3+0x18a>
    1f3c:	410787b3          	sub	a5,a5,a6
    1f40:	4585                	li	a1,1
    1f42:	01085893          	srli	a7,a6,0x10
    1f46:	01081613          	slli	a2,a6,0x10
    1f4a:	8241                	srli	a2,a2,0x10
    1f4c:	01035713          	srli	a4,t1,0x10
    1f50:	0317f6b3          	remu	a3,a5,a7
    1f54:	0317d7b3          	divu	a5,a5,a7
    1f58:	06c2                	slli	a3,a3,0x10
    1f5a:	8f55                	or	a4,a4,a3
    1f5c:	02f60e33          	mul	t3,a2,a5
    1f60:	853e                	mv	a0,a5
    1f62:	01c77c63          	bgeu	a4,t3,1f7a <__udivdi3+0x142>
    1f66:	9742                	add	a4,a4,a6
    1f68:	fff78513          	addi	a0,a5,-1
    1f6c:	01076763          	bltu	a4,a6,1f7a <__udivdi3+0x142>
    1f70:	01c77563          	bgeu	a4,t3,1f7a <__udivdi3+0x142>
    1f74:	ffe78513          	addi	a0,a5,-2
    1f78:	9742                	add	a4,a4,a6
    1f7a:	41c70733          	sub	a4,a4,t3
    1f7e:	031777b3          	remu	a5,a4,a7
    1f82:	0342                	slli	t1,t1,0x10
    1f84:	01035313          	srli	t1,t1,0x10
    1f88:	03175733          	divu	a4,a4,a7
    1f8c:	07c2                	slli	a5,a5,0x10
    1f8e:	0067e333          	or	t1,a5,t1
    1f92:	02e606b3          	mul	a3,a2,a4
    1f96:	863a                	mv	a2,a4
    1f98:	00d37b63          	bgeu	t1,a3,1fae <__udivdi3+0x176>
    1f9c:	9342                	add	t1,t1,a6
    1f9e:	fff70613          	addi	a2,a4,-1 # ffff <_global_impure_ptr+0xa83f>
    1fa2:	01036663          	bltu	t1,a6,1fae <__udivdi3+0x176>
    1fa6:	00d37463          	bgeu	t1,a3,1fae <__udivdi3+0x176>
    1faa:	ffe70613          	addi	a2,a4,-2
    1fae:	0542                	slli	a0,a0,0x10
    1fb0:	8d51                	or	a0,a0,a2
    1fb2:	8082                	ret
    1fb4:	01000737          	lui	a4,0x1000
    1fb8:	4541                	li	a0,16
    1fba:	f6e865e3          	bltu	a6,a4,1f24 <__udivdi3+0xec>
    1fbe:	4561                	li	a0,24
    1fc0:	b795                	j	1f24 <__udivdi3+0xec>
    1fc2:	00d81833          	sll	a6,a6,a3
    1fc6:	00e7d533          	srl	a0,a5,a4
    1fca:	00d89333          	sll	t1,a7,a3
    1fce:	00d797b3          	sll	a5,a5,a3
    1fd2:	00e8d733          	srl	a4,a7,a4
    1fd6:	01085893          	srli	a7,a6,0x10
    1fda:	00f76633          	or	a2,a4,a5
    1fde:	03157733          	remu	a4,a0,a7
    1fe2:	01081793          	slli	a5,a6,0x10
    1fe6:	83c1                	srli	a5,a5,0x10
    1fe8:	01065593          	srli	a1,a2,0x10
    1fec:	03155533          	divu	a0,a0,a7
    1ff0:	0742                	slli	a4,a4,0x10
    1ff2:	8f4d                	or	a4,a4,a1
    1ff4:	02a786b3          	mul	a3,a5,a0
    1ff8:	85aa                	mv	a1,a0
    1ffa:	00d77c63          	bgeu	a4,a3,2012 <__udivdi3+0x1da>
    1ffe:	9742                	add	a4,a4,a6
    2000:	fff50593          	addi	a1,a0,-1 # ffffff <_global_impure_ptr+0xffa83f>
    2004:	01076763          	bltu	a4,a6,2012 <__udivdi3+0x1da>
    2008:	00d77563          	bgeu	a4,a3,2012 <__udivdi3+0x1da>
    200c:	ffe50593          	addi	a1,a0,-2
    2010:	9742                	add	a4,a4,a6
    2012:	40d706b3          	sub	a3,a4,a3
    2016:	0316f733          	remu	a4,a3,a7
    201a:	0642                	slli	a2,a2,0x10
    201c:	8241                	srli	a2,a2,0x10
    201e:	0316d6b3          	divu	a3,a3,a7
    2022:	0742                	slli	a4,a4,0x10
    2024:	02d78533          	mul	a0,a5,a3
    2028:	00c767b3          	or	a5,a4,a2
    202c:	8736                	mv	a4,a3
    202e:	00a7fc63          	bgeu	a5,a0,2046 <__udivdi3+0x20e>
    2032:	97c2                	add	a5,a5,a6
    2034:	fff68713          	addi	a4,a3,-1
    2038:	0107e763          	bltu	a5,a6,2046 <__udivdi3+0x20e>
    203c:	00a7f563          	bgeu	a5,a0,2046 <__udivdi3+0x20e>
    2040:	ffe68713          	addi	a4,a3,-2
    2044:	97c2                	add	a5,a5,a6
    2046:	05c2                	slli	a1,a1,0x10
    2048:	8f89                	sub	a5,a5,a0
    204a:	8dd9                	or	a1,a1,a4
    204c:	bddd                	j	1f42 <__udivdi3+0x10a>
    204e:	14d5e263          	bltu	a1,a3,2192 <__udivdi3+0x35a>
    2052:	6741                	lui	a4,0x10
    2054:	02e6ff63          	bgeu	a3,a4,2092 <__udivdi3+0x25a>
    2058:	0ff00713          	li	a4,255
    205c:	00d735b3          	sltu	a1,a4,a3
    2060:	058e                	slli	a1,a1,0x3
    2062:	00b6d533          	srl	a0,a3,a1
    2066:	00003717          	auipc	a4,0x3
    206a:	5c270713          	addi	a4,a4,1474 # 5628 <__clz_tab>
    206e:	972a                	add	a4,a4,a0
    2070:	00074703          	lbu	a4,0(a4)
    2074:	02000513          	li	a0,32
    2078:	972e                	add	a4,a4,a1
    207a:	40e505b3          	sub	a1,a0,a4
    207e:	02e51163          	bne	a0,a4,20a0 <__udivdi3+0x268>
    2082:	4505                	li	a0,1
    2084:	f2f6e7e3          	bltu	a3,a5,1fb2 <__udivdi3+0x17a>
    2088:	00c8b533          	sltu	a0,a7,a2
    208c:	00154513          	xori	a0,a0,1
    2090:	b70d                	j	1fb2 <__udivdi3+0x17a>
    2092:	01000737          	lui	a4,0x1000
    2096:	45c1                	li	a1,16
    2098:	fce6e5e3          	bltu	a3,a4,2062 <__udivdi3+0x22a>
    209c:	45e1                	li	a1,24
    209e:	b7d1                	j	2062 <__udivdi3+0x22a>
    20a0:	00e65833          	srl	a6,a2,a4
    20a4:	00b696b3          	sll	a3,a3,a1
    20a8:	00d86833          	or	a6,a6,a3
    20ac:	00e7d333          	srl	t1,a5,a4
    20b0:	01085e93          	srli	t4,a6,0x10
    20b4:	03d376b3          	remu	a3,t1,t4
    20b8:	00b797b3          	sll	a5,a5,a1
    20bc:	00e8d733          	srl	a4,a7,a4
    20c0:	00b61e33          	sll	t3,a2,a1
    20c4:	00f76633          	or	a2,a4,a5
    20c8:	01081793          	slli	a5,a6,0x10
    20cc:	83c1                	srli	a5,a5,0x10
    20ce:	01065713          	srli	a4,a2,0x10
    20d2:	03d35333          	divu	t1,t1,t4
    20d6:	06c2                	slli	a3,a3,0x10
    20d8:	8f55                	or	a4,a4,a3
    20da:	02678f33          	mul	t5,a5,t1
    20de:	851a                	mv	a0,t1
    20e0:	01e77c63          	bgeu	a4,t5,20f8 <__udivdi3+0x2c0>
    20e4:	9742                	add	a4,a4,a6
    20e6:	fff30513          	addi	a0,t1,-1
    20ea:	01076763          	bltu	a4,a6,20f8 <__udivdi3+0x2c0>
    20ee:	01e77563          	bgeu	a4,t5,20f8 <__udivdi3+0x2c0>
    20f2:	ffe30513          	addi	a0,t1,-2
    20f6:	9742                	add	a4,a4,a6
    20f8:	41e70733          	sub	a4,a4,t5
    20fc:	03d776b3          	remu	a3,a4,t4
    2100:	03d75733          	divu	a4,a4,t4
    2104:	06c2                	slli	a3,a3,0x10
    2106:	02e78333          	mul	t1,a5,a4
    210a:	01061793          	slli	a5,a2,0x10
    210e:	83c1                	srli	a5,a5,0x10
    2110:	8fd5                	or	a5,a5,a3
    2112:	863a                	mv	a2,a4
    2114:	0067fc63          	bgeu	a5,t1,212c <__udivdi3+0x2f4>
    2118:	97c2                	add	a5,a5,a6
    211a:	fff70613          	addi	a2,a4,-1 # ffffff <_global_impure_ptr+0xffa83f>
    211e:	0107e763          	bltu	a5,a6,212c <__udivdi3+0x2f4>
    2122:	0067f563          	bgeu	a5,t1,212c <__udivdi3+0x2f4>
    2126:	ffe70613          	addi	a2,a4,-2
    212a:	97c2                	add	a5,a5,a6
    212c:	0542                	slli	a0,a0,0x10
    212e:	6ec1                	lui	t4,0x10
    2130:	8d51                	or	a0,a0,a2
    2132:	fffe8693          	addi	a3,t4,-1 # ffff <_global_impure_ptr+0xa83f>
    2136:	010e5613          	srli	a2,t3,0x10
    213a:	01055813          	srli	a6,a0,0x10
    213e:	406787b3          	sub	a5,a5,t1
    2142:	00d57333          	and	t1,a0,a3
    2146:	00de76b3          	and	a3,t3,a3
    214a:	02d30e33          	mul	t3,t1,a3
    214e:	02d806b3          	mul	a3,a6,a3
    2152:	010e5713          	srli	a4,t3,0x10
    2156:	02c30333          	mul	t1,t1,a2
    215a:	9336                	add	t1,t1,a3
    215c:	971a                	add	a4,a4,t1
    215e:	02c80833          	mul	a6,a6,a2
    2162:	00d77363          	bgeu	a4,a3,2168 <__udivdi3+0x330>
    2166:	9876                	add	a6,a6,t4
    2168:	01075693          	srli	a3,a4,0x10
    216c:	9836                	add	a6,a6,a3
    216e:	0307e063          	bltu	a5,a6,218e <__udivdi3+0x356>
    2172:	d90794e3          	bne	a5,a6,1efa <__udivdi3+0xc2>
    2176:	67c1                	lui	a5,0x10
    2178:	17fd                	addi	a5,a5,-1
    217a:	8f7d                	and	a4,a4,a5
    217c:	0742                	slli	a4,a4,0x10
    217e:	00fe7e33          	and	t3,t3,a5
    2182:	00b898b3          	sll	a7,a7,a1
    2186:	9772                	add	a4,a4,t3
    2188:	4581                	li	a1,0
    218a:	e2e8f4e3          	bgeu	a7,a4,1fb2 <__udivdi3+0x17a>
    218e:	157d                	addi	a0,a0,-1
    2190:	b3ad                	j	1efa <__udivdi3+0xc2>
    2192:	4581                	li	a1,0
    2194:	4501                	li	a0,0
    2196:	bd31                	j	1fb2 <__udivdi3+0x17a>

00002198 <__umoddi3>:
    2198:	832a                	mv	t1,a0
    219a:	8832                	mv	a6,a2
    219c:	87b6                	mv	a5,a3
    219e:	872e                	mv	a4,a1
    21a0:	1c069563          	bnez	a3,236a <__umoddi3+0x1d2>
    21a4:	00003697          	auipc	a3,0x3
    21a8:	48468693          	addi	a3,a3,1156 # 5628 <__clz_tab>
    21ac:	0ac5f663          	bgeu	a1,a2,2258 <__umoddi3+0xc0>
    21b0:	68c1                	lui	a7,0x10
    21b2:	09167c63          	bgeu	a2,a7,224a <__umoddi3+0xb2>
    21b6:	0ff00893          	li	a7,255
    21ba:	00c8f363          	bgeu	a7,a2,21c0 <__umoddi3+0x28>
    21be:	47a1                	li	a5,8
    21c0:	00f658b3          	srl	a7,a2,a5
    21c4:	96c6                	add	a3,a3,a7
    21c6:	0006c683          	lbu	a3,0(a3)
    21ca:	97b6                	add	a5,a5,a3
    21cc:	02000693          	li	a3,32
    21d0:	40f688b3          	sub	a7,a3,a5
    21d4:	00f68c63          	beq	a3,a5,21ec <__umoddi3+0x54>
    21d8:	011595b3          	sll	a1,a1,a7
    21dc:	00f357b3          	srl	a5,t1,a5
    21e0:	01161833          	sll	a6,a2,a7
    21e4:	00b7e733          	or	a4,a5,a1
    21e8:	01131533          	sll	a0,t1,a7
    21ec:	01085593          	srli	a1,a6,0x10
    21f0:	02b777b3          	remu	a5,a4,a1
    21f4:	01081613          	slli	a2,a6,0x10
    21f8:	8241                	srli	a2,a2,0x10
    21fa:	01055693          	srli	a3,a0,0x10
    21fe:	02b75733          	divu	a4,a4,a1
    2202:	07c2                	slli	a5,a5,0x10
    2204:	8edd                	or	a3,a3,a5
    2206:	02e60733          	mul	a4,a2,a4
    220a:	00e6f863          	bgeu	a3,a4,221a <__umoddi3+0x82>
    220e:	96c2                	add	a3,a3,a6
    2210:	0106e563          	bltu	a3,a6,221a <__umoddi3+0x82>
    2214:	00e6f363          	bgeu	a3,a4,221a <__umoddi3+0x82>
    2218:	96c2                	add	a3,a3,a6
    221a:	8e99                	sub	a3,a3,a4
    221c:	02b6f7b3          	remu	a5,a3,a1
    2220:	0542                	slli	a0,a0,0x10
    2222:	8141                	srli	a0,a0,0x10
    2224:	02b6d6b3          	divu	a3,a3,a1
    2228:	07c2                	slli	a5,a5,0x10
    222a:	8d5d                	or	a0,a0,a5
    222c:	02d606b3          	mul	a3,a2,a3
    2230:	00d57863          	bgeu	a0,a3,2240 <__umoddi3+0xa8>
    2234:	9542                	add	a0,a0,a6
    2236:	01056563          	bltu	a0,a6,2240 <__umoddi3+0xa8>
    223a:	00d57363          	bgeu	a0,a3,2240 <__umoddi3+0xa8>
    223e:	9542                	add	a0,a0,a6
    2240:	8d15                	sub	a0,a0,a3
    2242:	01155533          	srl	a0,a0,a7
    2246:	4581                	li	a1,0
    2248:	8082                	ret
    224a:	010008b7          	lui	a7,0x1000
    224e:	47c1                	li	a5,16
    2250:	f71668e3          	bltu	a2,a7,21c0 <__umoddi3+0x28>
    2254:	47e1                	li	a5,24
    2256:	b7ad                	j	21c0 <__umoddi3+0x28>
    2258:	e601                	bnez	a2,2260 <__umoddi3+0xc8>
    225a:	4705                	li	a4,1
    225c:	02c75833          	divu	a6,a4,a2
    2260:	6741                	lui	a4,0x10
    2262:	08e87363          	bgeu	a6,a4,22e8 <__umoddi3+0x150>
    2266:	0ff00713          	li	a4,255
    226a:	01077363          	bgeu	a4,a6,2270 <__umoddi3+0xd8>
    226e:	47a1                	li	a5,8
    2270:	00f85733          	srl	a4,a6,a5
    2274:	96ba                	add	a3,a3,a4
    2276:	0006c603          	lbu	a2,0(a3)
    227a:	963e                	add	a2,a2,a5
    227c:	02000793          	li	a5,32
    2280:	40c788b3          	sub	a7,a5,a2
    2284:	06c79963          	bne	a5,a2,22f6 <__umoddi3+0x15e>
    2288:	410585b3          	sub	a1,a1,a6
    228c:	01085693          	srli	a3,a6,0x10
    2290:	01081793          	slli	a5,a6,0x10
    2294:	83c1                	srli	a5,a5,0x10
    2296:	01055613          	srli	a2,a0,0x10
    229a:	02d5f733          	remu	a4,a1,a3
    229e:	02d5d5b3          	divu	a1,a1,a3
    22a2:	0742                	slli	a4,a4,0x10
    22a4:	8f51                	or	a4,a4,a2
    22a6:	02b785b3          	mul	a1,a5,a1
    22aa:	00b77863          	bgeu	a4,a1,22ba <__umoddi3+0x122>
    22ae:	9742                	add	a4,a4,a6
    22b0:	01076563          	bltu	a4,a6,22ba <__umoddi3+0x122>
    22b4:	00b77363          	bgeu	a4,a1,22ba <__umoddi3+0x122>
    22b8:	9742                	add	a4,a4,a6
    22ba:	40b705b3          	sub	a1,a4,a1
    22be:	02d5f733          	remu	a4,a1,a3
    22c2:	0542                	slli	a0,a0,0x10
    22c4:	8141                	srli	a0,a0,0x10
    22c6:	02d5d5b3          	divu	a1,a1,a3
    22ca:	02b785b3          	mul	a1,a5,a1
    22ce:	01071793          	slli	a5,a4,0x10
    22d2:	8d5d                	or	a0,a0,a5
    22d4:	00b57863          	bgeu	a0,a1,22e4 <__umoddi3+0x14c>
    22d8:	9542                	add	a0,a0,a6
    22da:	01056563          	bltu	a0,a6,22e4 <__umoddi3+0x14c>
    22de:	00b57363          	bgeu	a0,a1,22e4 <__umoddi3+0x14c>
    22e2:	9542                	add	a0,a0,a6
    22e4:	8d0d                	sub	a0,a0,a1
    22e6:	bfb1                	j	2242 <__umoddi3+0xaa>
    22e8:	01000737          	lui	a4,0x1000
    22ec:	47c1                	li	a5,16
    22ee:	f8e861e3          	bltu	a6,a4,2270 <__umoddi3+0xd8>
    22f2:	47e1                	li	a5,24
    22f4:	bfb5                	j	2270 <__umoddi3+0xd8>
    22f6:	01181833          	sll	a6,a6,a7
    22fa:	00c5d6b3          	srl	a3,a1,a2
    22fe:	01085793          	srli	a5,a6,0x10
    2302:	02f6f733          	remu	a4,a3,a5
    2306:	011595b3          	sll	a1,a1,a7
    230a:	00c35633          	srl	a2,t1,a2
    230e:	8e4d                	or	a2,a2,a1
    2310:	01081593          	slli	a1,a6,0x10
    2314:	81c1                	srli	a1,a1,0x10
    2316:	01131533          	sll	a0,t1,a7
    231a:	01065313          	srli	t1,a2,0x10
    231e:	02f6d6b3          	divu	a3,a3,a5
    2322:	0742                	slli	a4,a4,0x10
    2324:	00676733          	or	a4,a4,t1
    2328:	02d586b3          	mul	a3,a1,a3
    232c:	00d77863          	bgeu	a4,a3,233c <__umoddi3+0x1a4>
    2330:	9742                	add	a4,a4,a6
    2332:	01076563          	bltu	a4,a6,233c <__umoddi3+0x1a4>
    2336:	00d77363          	bgeu	a4,a3,233c <__umoddi3+0x1a4>
    233a:	9742                	add	a4,a4,a6
    233c:	40d706b3          	sub	a3,a4,a3
    2340:	02f6f733          	remu	a4,a3,a5
    2344:	0642                	slli	a2,a2,0x10
    2346:	8241                	srli	a2,a2,0x10
    2348:	02f6d6b3          	divu	a3,a3,a5
    234c:	0742                	slli	a4,a4,0x10
    234e:	02d586b3          	mul	a3,a1,a3
    2352:	00c765b3          	or	a1,a4,a2
    2356:	00d5f863          	bgeu	a1,a3,2366 <__umoddi3+0x1ce>
    235a:	95c2                	add	a1,a1,a6
    235c:	0105e563          	bltu	a1,a6,2366 <__umoddi3+0x1ce>
    2360:	00d5f363          	bgeu	a1,a3,2366 <__umoddi3+0x1ce>
    2364:	95c2                	add	a1,a1,a6
    2366:	8d95                	sub	a1,a1,a3
    2368:	b715                	j	228c <__umoddi3+0xf4>
    236a:	ecd5efe3          	bltu	a1,a3,2248 <__umoddi3+0xb0>
    236e:	67c1                	lui	a5,0x10
    2370:	04f6f463          	bgeu	a3,a5,23b8 <__umoddi3+0x220>
    2374:	0ff00893          	li	a7,255
    2378:	00d8b7b3          	sltu	a5,a7,a3
    237c:	078e                	slli	a5,a5,0x3
    237e:	00f6d8b3          	srl	a7,a3,a5
    2382:	00003817          	auipc	a6,0x3
    2386:	2a680813          	addi	a6,a6,678 # 5628 <__clz_tab>
    238a:	9846                	add	a6,a6,a7
    238c:	00084883          	lbu	a7,0(a6)
    2390:	98be                	add	a7,a7,a5
    2392:	02000793          	li	a5,32
    2396:	41178833          	sub	a6,a5,a7
    239a:	03179663          	bne	a5,a7,23c6 <__umoddi3+0x22e>
    239e:	00b6e463          	bltu	a3,a1,23a6 <__umoddi3+0x20e>
    23a2:	00c36963          	bltu	t1,a2,23b4 <__umoddi3+0x21c>
    23a6:	40c30533          	sub	a0,t1,a2
    23aa:	8d95                	sub	a1,a1,a3
    23ac:	00a33733          	sltu	a4,t1,a0
    23b0:	40e58733          	sub	a4,a1,a4
    23b4:	85ba                	mv	a1,a4
    23b6:	bd49                	j	2248 <__umoddi3+0xb0>
    23b8:	01000837          	lui	a6,0x1000
    23bc:	47c1                	li	a5,16
    23be:	fd06e0e3          	bltu	a3,a6,237e <__umoddi3+0x1e6>
    23c2:	47e1                	li	a5,24
    23c4:	bf6d                	j	237e <__umoddi3+0x1e6>
    23c6:	011657b3          	srl	a5,a2,a7
    23ca:	010696b3          	sll	a3,a3,a6
    23ce:	00d7ee33          	or	t3,a5,a3
    23d2:	0115d733          	srl	a4,a1,a7
    23d6:	010e5f13          	srli	t5,t3,0x10
    23da:	01061eb3          	sll	t4,a2,a6
    23de:	03e77633          	remu	a2,a4,t5
    23e2:	010595b3          	sll	a1,a1,a6
    23e6:	011357b3          	srl	a5,t1,a7
    23ea:	8fcd                	or	a5,a5,a1
    23ec:	010e1593          	slli	a1,t3,0x10
    23f0:	81c1                	srli	a1,a1,0x10
    23f2:	01031533          	sll	a0,t1,a6
    23f6:	0107d693          	srli	a3,a5,0x10
    23fa:	03e75733          	divu	a4,a4,t5
    23fe:	0642                	slli	a2,a2,0x10
    2400:	8ed1                	or	a3,a3,a2
    2402:	02e58333          	mul	t1,a1,a4
    2406:	863a                	mv	a2,a4
    2408:	0066fc63          	bgeu	a3,t1,2420 <__umoddi3+0x288>
    240c:	96f2                	add	a3,a3,t3
    240e:	fff70613          	addi	a2,a4,-1 # ffffff <_global_impure_ptr+0xffa83f>
    2412:	01c6e763          	bltu	a3,t3,2420 <__umoddi3+0x288>
    2416:	0066f563          	bgeu	a3,t1,2420 <__umoddi3+0x288>
    241a:	ffe70613          	addi	a2,a4,-2
    241e:	96f2                	add	a3,a3,t3
    2420:	406686b3          	sub	a3,a3,t1
    2424:	03e6f333          	remu	t1,a3,t5
    2428:	03e6d6b3          	divu	a3,a3,t5
    242c:	0342                	slli	t1,t1,0x10
    242e:	02d58733          	mul	a4,a1,a3
    2432:	01079593          	slli	a1,a5,0x10
    2436:	81c1                	srli	a1,a1,0x10
    2438:	00b365b3          	or	a1,t1,a1
    243c:	87b6                	mv	a5,a3
    243e:	00e5fc63          	bgeu	a1,a4,2456 <__umoddi3+0x2be>
    2442:	95f2                	add	a1,a1,t3
    2444:	fff68793          	addi	a5,a3,-1
    2448:	01c5e763          	bltu	a1,t3,2456 <__umoddi3+0x2be>
    244c:	00e5f563          	bgeu	a1,a4,2456 <__umoddi3+0x2be>
    2450:	ffe68793          	addi	a5,a3,-2
    2454:	95f2                	add	a1,a1,t3
    2456:	0642                	slli	a2,a2,0x10
    2458:	6f41                	lui	t5,0x10
    245a:	8e5d                	or	a2,a2,a5
    245c:	ffff0693          	addi	a3,t5,-1 # ffff <_global_impure_ptr+0xa83f>
    2460:	00d67333          	and	t1,a2,a3
    2464:	8d99                	sub	a1,a1,a4
    2466:	8241                	srli	a2,a2,0x10
    2468:	010ed713          	srli	a4,t4,0x10
    246c:	00def6b3          	and	a3,t4,a3
    2470:	02d307b3          	mul	a5,t1,a3
    2474:	02d606b3          	mul	a3,a2,a3
    2478:	02e30333          	mul	t1,t1,a4
    247c:	02e60633          	mul	a2,a2,a4
    2480:	9336                	add	t1,t1,a3
    2482:	0107d713          	srli	a4,a5,0x10
    2486:	971a                	add	a4,a4,t1
    2488:	00d77363          	bgeu	a4,a3,248e <__umoddi3+0x2f6>
    248c:	967a                	add	a2,a2,t5
    248e:	01075693          	srli	a3,a4,0x10
    2492:	96b2                	add	a3,a3,a2
    2494:	6641                	lui	a2,0x10
    2496:	167d                	addi	a2,a2,-1
    2498:	8f71                	and	a4,a4,a2
    249a:	0742                	slli	a4,a4,0x10
    249c:	8ff1                	and	a5,a5,a2
    249e:	97ba                	add	a5,a5,a4
    24a0:	00d5e663          	bltu	a1,a3,24ac <__umoddi3+0x314>
    24a4:	00d59b63          	bne	a1,a3,24ba <__umoddi3+0x322>
    24a8:	00f57963          	bgeu	a0,a5,24ba <__umoddi3+0x322>
    24ac:	41d78633          	sub	a2,a5,t4
    24b0:	00c7b7b3          	sltu	a5,a5,a2
    24b4:	97f2                	add	a5,a5,t3
    24b6:	8e9d                	sub	a3,a3,a5
    24b8:	87b2                	mv	a5,a2
    24ba:	40f507b3          	sub	a5,a0,a5
    24be:	00f53533          	sltu	a0,a0,a5
    24c2:	8d95                	sub	a1,a1,a3
    24c4:	8d89                	sub	a1,a1,a0
    24c6:	011598b3          	sll	a7,a1,a7
    24ca:	0107d533          	srl	a0,a5,a6
    24ce:	00a8e533          	or	a0,a7,a0
    24d2:	0105d5b3          	srl	a1,a1,a6
    24d6:	bb8d                	j	2248 <__umoddi3+0xb0>

000024d8 <__adddf3>:
    24d8:	1101                	addi	sp,sp,-32
    24da:	ce06                	sw	ra,28(sp)
    24dc:	cc22                	sw	s0,24(sp)
    24de:	ca26                	sw	s1,20(sp)
    24e0:	c84a                	sw	s2,16(sp)
    24e2:	c64e                	sw	s3,12(sp)
    24e4:	c452                	sw	s4,8(sp)
    24e6:	002029f3          	frrm	s3
    24ea:	001008b7          	lui	a7,0x100
    24ee:	18fd                	addi	a7,a7,-1
    24f0:	00b8f733          	and	a4,a7,a1
    24f4:	0145d413          	srli	s0,a1,0x14
    24f8:	01f5d493          	srli	s1,a1,0x1f
    24fc:	0146d593          	srli	a1,a3,0x14
    2500:	00371793          	slli	a5,a4,0x3
    2504:	00d8f8b3          	and	a7,a7,a3
    2508:	01d55713          	srli	a4,a0,0x1d
    250c:	7ff47413          	andi	s0,s0,2047
    2510:	7ff5f593          	andi	a1,a1,2047
    2514:	8f5d                	or	a4,a4,a5
    2516:	01f6d313          	srli	t1,a3,0x1f
    251a:	00351793          	slli	a5,a0,0x3
    251e:	01d65693          	srli	a3,a2,0x1d
    2522:	088e                	slli	a7,a7,0x3
    2524:	40b40533          	sub	a0,s0,a1
    2528:	00361813          	slli	a6,a2,0x3
    252c:	0116e6b3          	or	a3,a3,a7
    2530:	862a                	mv	a2,a0
    2532:	34649563          	bne	s1,t1,287c <__adddf3+0x3a4>
    2536:	10a05a63          	blez	a0,264a <__adddf3+0x172>
    253a:	04059463          	bnez	a1,2582 <__adddf3+0xaa>
    253e:	0106e533          	or	a0,a3,a6
    2542:	e511                	bnez	a0,254e <__adddf3+0x76>
    2544:	7ff00693          	li	a3,2047
    2548:	2ad61c63          	bne	a2,a3,2800 <__adddf3+0x328>
    254c:	a839                	j	256a <__adddf3+0x92>
    254e:	fff60513          	addi	a0,a2,-1 # ffff <_global_impure_ptr+0xa83f>
    2552:	e901                	bnez	a0,2562 <__adddf3+0x8a>
    2554:	983e                	add	a6,a6,a5
    2556:	96ba                	add	a3,a3,a4
    2558:	00f837b3          	sltu	a5,a6,a5
    255c:	96be                	add	a3,a3,a5
    255e:	4605                	li	a2,1
    2560:	a059                	j	25e6 <__adddf3+0x10e>
    2562:	7ff00893          	li	a7,2047
    2566:	05161163          	bne	a2,a7,25a8 <__adddf3+0xd0>
    256a:	00f766b3          	or	a3,a4,a5
    256e:	70068063          	beqz	a3,2c6e <__adddf3+0x796>
    2572:	004006b7          	lui	a3,0x400
    2576:	8ef9                	and	a3,a3,a4
    2578:	4401                	li	s0,0
    257a:	20069263          	bnez	a3,277e <__adddf3+0x2a6>
    257e:	45c1                	li	a1,16
    2580:	aafd                	j	277e <__adddf3+0x2a6>
    2582:	7ff00613          	li	a2,2047
    2586:	00c41e63          	bne	s0,a2,25a2 <__adddf3+0xca>
    258a:	00f766b3          	or	a3,a4,a5
    258e:	6e068363          	beqz	a3,2c74 <__adddf3+0x79c>
    2592:	004006b7          	lui	a3,0x400
    2596:	8ef9                	and	a3,a3,a4
    2598:	12068563          	beqz	a3,26c2 <__adddf3+0x1ea>
    259c:	7ff00613          	li	a2,2047
    25a0:	a485                	j	2800 <__adddf3+0x328>
    25a2:	00800637          	lui	a2,0x800
    25a6:	8ed1                	or	a3,a3,a2
    25a8:	03800613          	li	a2,56
    25ac:	08a64a63          	blt	a2,a0,2640 <__adddf3+0x168>
    25b0:	467d                	li	a2,31
    25b2:	06a64063          	blt	a2,a0,2612 <__adddf3+0x13a>
    25b6:	02000613          	li	a2,32
    25ba:	8e09                	sub	a2,a2,a0
    25bc:	00a858b3          	srl	a7,a6,a0
    25c0:	00c695b3          	sll	a1,a3,a2
    25c4:	00c81833          	sll	a6,a6,a2
    25c8:	0115e5b3          	or	a1,a1,a7
    25cc:	01003833          	snez	a6,a6
    25d0:	0105e833          	or	a6,a1,a6
    25d4:	00a6d533          	srl	a0,a3,a0
    25d8:	983e                	add	a6,a6,a5
    25da:	953a                	add	a0,a0,a4
    25dc:	00f837b3          	sltu	a5,a6,a5
    25e0:	00f506b3          	add	a3,a0,a5
    25e4:	8622                	mv	a2,s0
    25e6:	008007b7          	lui	a5,0x800
    25ea:	8ff5                	and	a5,a5,a3
    25ec:	cbb5                	beqz	a5,2660 <__adddf3+0x188>
    25ee:	0605                	addi	a2,a2,1
    25f0:	7ff00793          	li	a5,2047
    25f4:	26f60363          	beq	a2,a5,285a <__adddf3+0x382>
    25f8:	ff800737          	lui	a4,0xff800
    25fc:	177d                	addi	a4,a4,-1
    25fe:	00185793          	srli	a5,a6,0x1
    2602:	8f75                	and	a4,a4,a3
    2604:	00187813          	andi	a6,a6,1
    2608:	0107e833          	or	a6,a5,a6
    260c:	01f71793          	slli	a5,a4,0x1f
    2610:	a2ed                	j	27fa <__adddf3+0x322>
    2612:	fe050593          	addi	a1,a0,-32
    2616:	02000893          	li	a7,32
    261a:	00b6d5b3          	srl	a1,a3,a1
    261e:	4601                	li	a2,0
    2620:	01150863          	beq	a0,a7,2630 <__adddf3+0x158>
    2624:	04000613          	li	a2,64
    2628:	40a60533          	sub	a0,a2,a0
    262c:	00a69633          	sll	a2,a3,a0
    2630:	01066833          	or	a6,a2,a6
    2634:	01003833          	snez	a6,a6
    2638:	0105e833          	or	a6,a1,a6
    263c:	4501                	li	a0,0
    263e:	bf69                	j	25d8 <__adddf3+0x100>
    2640:	0106e833          	or	a6,a3,a6
    2644:	01003833          	snez	a6,a6
    2648:	bfd5                	j	263c <__adddf3+0x164>
    264a:	c97d                	beqz	a0,2740 <__adddf3+0x268>
    264c:	40858633          	sub	a2,a1,s0
    2650:	e821                	bnez	s0,26a0 <__adddf3+0x1c8>
    2652:	00f76533          	or	a0,a4,a5
    2656:	e911                	bnez	a0,266a <__adddf3+0x192>
    2658:	7ff00793          	li	a5,2047
    265c:	02f60663          	beq	a2,a5,2688 <__adddf3+0x1b0>
    2660:	8736                	mv	a4,a3
    2662:	87c2                	mv	a5,a6
    2664:	40060563          	beqz	a2,2a6e <__adddf3+0x596>
    2668:	aa61                	j	2800 <__adddf3+0x328>
    266a:	fff60893          	addi	a7,a2,-1 # 7fffff <_global_impure_ptr+0x7fa83f>
    266e:	00089963          	bnez	a7,2680 <__adddf3+0x1a8>
    2672:	97c2                	add	a5,a5,a6
    2674:	0107b833          	sltu	a6,a5,a6
    2678:	96ba                	add	a3,a3,a4
    267a:	96c2                	add	a3,a3,a6
    267c:	883e                	mv	a6,a5
    267e:	b5c5                	j	255e <__adddf3+0x86>
    2680:	7ff00513          	li	a0,2047
    2684:	04a61563          	bne	a2,a0,26ce <__adddf3+0x1f6>
    2688:	0106e7b3          	or	a5,a3,a6
    268c:	5e078763          	beqz	a5,2c7a <__adddf3+0x7a2>
    2690:	004007b7          	lui	a5,0x400
    2694:	8ff5                	and	a5,a5,a3
    2696:	8736                	mv	a4,a3
    2698:	5e079363          	bnez	a5,2c7e <__adddf3+0x7a6>
    269c:	87c2                	mv	a5,a6
    269e:	b5c5                	j	257e <__adddf3+0xa6>
    26a0:	7ff00513          	li	a0,2047
    26a4:	02a59163          	bne	a1,a0,26c6 <__adddf3+0x1ee>
    26a8:	0106e7b3          	or	a5,a3,a6
    26ac:	5a078463          	beqz	a5,2c54 <__adddf3+0x77c>
    26b0:	004007b7          	lui	a5,0x400
    26b4:	8ff5                	and	a5,a5,a3
    26b6:	8736                	mv	a4,a3
    26b8:	5a079363          	bnez	a5,2c5e <__adddf3+0x786>
    26bc:	87c2                	mv	a5,a6
    26be:	7ff00613          	li	a2,2047
    26c2:	4401                	li	s0,0
    26c4:	bd6d                	j	257e <__adddf3+0xa6>
    26c6:	00800537          	lui	a0,0x800
    26ca:	8f49                	or	a4,a4,a0
    26cc:	88b2                	mv	a7,a2
    26ce:	03800613          	li	a2,56
    26d2:	07164363          	blt	a2,a7,2738 <__adddf3+0x260>
    26d6:	467d                	li	a2,31
    26d8:	03164b63          	blt	a2,a7,270e <__adddf3+0x236>
    26dc:	02000513          	li	a0,32
    26e0:	41150533          	sub	a0,a0,a7
    26e4:	00a71633          	sll	a2,a4,a0
    26e8:	0117d333          	srl	t1,a5,a7
    26ec:	00a797b3          	sll	a5,a5,a0
    26f0:	00666633          	or	a2,a2,t1
    26f4:	00f037b3          	snez	a5,a5
    26f8:	8fd1                	or	a5,a5,a2
    26fa:	01175733          	srl	a4,a4,a7
    26fe:	97c2                	add	a5,a5,a6
    2700:	9736                	add	a4,a4,a3
    2702:	0107b6b3          	sltu	a3,a5,a6
    2706:	96ba                	add	a3,a3,a4
    2708:	883e                	mv	a6,a5
    270a:	862e                	mv	a2,a1
    270c:	bde9                	j	25e6 <__adddf3+0x10e>
    270e:	fe088613          	addi	a2,a7,-32 # fffe0 <_global_impure_ptr+0xfa820>
    2712:	02000313          	li	t1,32
    2716:	00c75633          	srl	a2,a4,a2
    271a:	4501                	li	a0,0
    271c:	00688863          	beq	a7,t1,272c <__adddf3+0x254>
    2720:	04000513          	li	a0,64
    2724:	41150533          	sub	a0,a0,a7
    2728:	00a71533          	sll	a0,a4,a0
    272c:	8fc9                	or	a5,a5,a0
    272e:	00f037b3          	snez	a5,a5
    2732:	8fd1                	or	a5,a5,a2
    2734:	4701                	li	a4,0
    2736:	b7e1                	j	26fe <__adddf3+0x226>
    2738:	8fd9                	or	a5,a5,a4
    273a:	00f037b3          	snez	a5,a5
    273e:	bfdd                	j	2734 <__adddf3+0x25c>
    2740:	00140613          	addi	a2,s0,1
    2744:	7fe67513          	andi	a0,a2,2046
    2748:	ed41                	bnez	a0,27e0 <__adddf3+0x308>
    274a:	00f76533          	or	a0,a4,a5
    274e:	e421                	bnez	s0,2796 <__adddf3+0x2be>
    2750:	4c050563          	beqz	a0,2c1a <__adddf3+0x742>
    2754:	0106e633          	or	a2,a3,a6
    2758:	30060b63          	beqz	a2,2a6e <__adddf3+0x596>
    275c:	983e                	add	a6,a6,a5
    275e:	00f837b3          	sltu	a5,a6,a5
    2762:	9736                	add	a4,a4,a3
    2764:	973e                	add	a4,a4,a5
    2766:	008007b7          	lui	a5,0x800
    276a:	8ff9                	and	a5,a5,a4
    276c:	4a078863          	beqz	a5,2c1c <__adddf3+0x744>
    2770:	ff8007b7          	lui	a5,0xff800
    2774:	17fd                	addi	a5,a5,-1
    2776:	8f7d                	and	a4,a4,a5
    2778:	4581                	li	a1,0
    277a:	87c2                	mv	a5,a6
    277c:	4605                	li	a2,1
    277e:	0077f693          	andi	a3,a5,7
    2782:	e6d5                	bnez	a3,282e <__adddf3+0x356>
    2784:	58040363          	beqz	s0,2d0a <__adddf3+0x832>
    2788:	0015f693          	andi	a3,a1,1
    278c:	56068f63          	beqz	a3,2d0a <__adddf3+0x832>
    2790:	0025e593          	ori	a1,a1,2
    2794:	ab9d                	j	2d0a <__adddf3+0x832>
    2796:	7ff00613          	li	a2,2047
    279a:	02c41d63          	bne	s0,a2,27d4 <__adddf3+0x2fc>
    279e:	5e050563          	beqz	a0,2d88 <__adddf3+0x8b0>
    27a2:	00400637          	lui	a2,0x400
    27a6:	8e79                	and	a2,a2,a4
    27a8:	00163613          	seqz	a2,a2
    27ac:	0612                	slli	a2,a2,0x4
    27ae:	54859363          	bne	a1,s0,2cf4 <__adddf3+0x81c>
    27b2:	85b2                	mv	a1,a2
    27b4:	0106e633          	or	a2,a3,a6
    27b8:	c611                	beqz	a2,27c4 <__adddf3+0x2ec>
    27ba:	00400637          	lui	a2,0x400
    27be:	8e75                	and	a2,a2,a3
    27c0:	e211                	bnez	a2,27c4 <__adddf3+0x2ec>
    27c2:	45c1                	li	a1,16
    27c4:	52051963          	bnez	a0,2cf6 <__adddf3+0x81e>
    27c8:	8736                	mv	a4,a3
    27ca:	87c2                	mv	a5,a6
    27cc:	4401                	li	s0,0
    27ce:	7ff00613          	li	a2,2047
    27d2:	b775                	j	277e <__adddf3+0x2a6>
    27d4:	00c59463          	bne	a1,a2,27dc <__adddf3+0x304>
    27d8:	4581                	li	a1,0
    27da:	bfe9                	j	27b4 <__adddf3+0x2dc>
    27dc:	4581                	li	a1,0
    27de:	b7dd                	j	27c4 <__adddf3+0x2ec>
    27e0:	7ff00593          	li	a1,2047
    27e4:	02b60063          	beq	a2,a1,2804 <__adddf3+0x32c>
    27e8:	983e                	add	a6,a6,a5
    27ea:	00f837b3          	sltu	a5,a6,a5
    27ee:	9736                	add	a4,a4,a3
    27f0:	973e                	add	a4,a4,a5
    27f2:	01f71793          	slli	a5,a4,0x1f
    27f6:	00185813          	srli	a6,a6,0x1
    27fa:	0107e7b3          	or	a5,a5,a6
    27fe:	8305                	srli	a4,a4,0x1
    2800:	4401                	li	s0,0
    2802:	a9bd                	j	2c80 <__adddf3+0x7a8>
    2804:	00098763          	beqz	s3,2812 <__adddf3+0x33a>
    2808:	478d                	li	a5,3
    280a:	00f99763          	bne	s3,a5,2818 <__adddf3+0x340>
    280e:	00049a63          	bnez	s1,2822 <__adddf3+0x34a>
    2812:	7ff00613          	li	a2,2047
    2816:	a889                	j	2868 <__adddf3+0x390>
    2818:	4789                	li	a5,2
    281a:	00f99463          	bne	s3,a5,2822 <__adddf3+0x34a>
    281e:	fe049ae3          	bnez	s1,2812 <__adddf3+0x33a>
    2822:	4401                	li	s0,0
    2824:	577d                	li	a4,-1
    2826:	57fd                	li	a5,-1
    2828:	7fe00613          	li	a2,2046
    282c:	4595                	li	a1,5
    282e:	4689                	li	a3,2
    2830:	0015e593          	ori	a1,a1,1
    2834:	48d98763          	beq	s3,a3,2cc2 <__adddf3+0x7ea>
    2838:	468d                	li	a3,3
    283a:	48d98063          	beq	s3,a3,2cba <__adddf3+0x7e2>
    283e:	48099363          	bnez	s3,2cc4 <__adddf3+0x7ec>
    2842:	00f7f693          	andi	a3,a5,15
    2846:	4511                	li	a0,4
    2848:	46a68e63          	beq	a3,a0,2cc4 <__adddf3+0x7ec>
    284c:	00478693          	addi	a3,a5,4 # ff800004 <__kernel_stack+0xdf74000c>
    2850:	00f6b7b3          	sltu	a5,a3,a5
    2854:	973e                	add	a4,a4,a5
    2856:	87b6                	mv	a5,a3
    2858:	a1b5                	j	2cc4 <__adddf3+0x7ec>
    285a:	00098763          	beqz	s3,2868 <__adddf3+0x390>
    285e:	478d                	li	a5,3
    2860:	00f99863          	bne	s3,a5,2870 <__adddf3+0x398>
    2864:	3e049f63          	bnez	s1,2c62 <__adddf3+0x78a>
    2868:	4701                	li	a4,0
    286a:	4781                	li	a5,0
    286c:	4595                	li	a1,5
    286e:	a971                	j	2d0a <__adddf3+0x832>
    2870:	4789                	li	a5,2
    2872:	3ef99863          	bne	s3,a5,2c62 <__adddf3+0x78a>
    2876:	fe0499e3          	bnez	s1,2868 <__adddf3+0x390>
    287a:	b765                	j	2822 <__adddf3+0x34a>
    287c:	0ca05763          	blez	a0,294a <__adddf3+0x472>
    2880:	08059263          	bnez	a1,2904 <__adddf3+0x42c>
    2884:	0106e533          	or	a0,a3,a6
    2888:	ca050ee3          	beqz	a0,2544 <__adddf3+0x6c>
    288c:	fff60513          	addi	a0,a2,-1 # 3fffff <_global_impure_ptr+0x3fa83f>
    2890:	e911                	bnez	a0,28a4 <__adddf3+0x3cc>
    2892:	41078833          	sub	a6,a5,a6
    2896:	40d706b3          	sub	a3,a4,a3
    289a:	0107b7b3          	sltu	a5,a5,a6
    289e:	8e9d                	sub	a3,a3,a5
    28a0:	4605                	li	a2,1
    28a2:	a0a9                	j	28ec <__adddf3+0x414>
    28a4:	7ff00893          	li	a7,2047
    28a8:	cd1601e3          	beq	a2,a7,256a <__adddf3+0x92>
    28ac:	03800613          	li	a2,56
    28b0:	08a64863          	blt	a2,a0,2940 <__adddf3+0x468>
    28b4:	467d                	li	a2,31
    28b6:	04a64f63          	blt	a2,a0,2914 <__adddf3+0x43c>
    28ba:	02000613          	li	a2,32
    28be:	8e09                	sub	a2,a2,a0
    28c0:	00c695b3          	sll	a1,a3,a2
    28c4:	00a858b3          	srl	a7,a6,a0
    28c8:	00c81833          	sll	a6,a6,a2
    28cc:	0115e5b3          	or	a1,a1,a7
    28d0:	01003833          	snez	a6,a6
    28d4:	0105e833          	or	a6,a1,a6
    28d8:	00a6d6b3          	srl	a3,a3,a0
    28dc:	41078833          	sub	a6,a5,a6
    28e0:	40d706b3          	sub	a3,a4,a3
    28e4:	0107b7b3          	sltu	a5,a5,a6
    28e8:	8e9d                	sub	a3,a3,a5
    28ea:	8622                	mv	a2,s0
    28ec:	00800937          	lui	s2,0x800
    28f0:	0126f7b3          	and	a5,a3,s2
    28f4:	d60786e3          	beqz	a5,2660 <__adddf3+0x188>
    28f8:	197d                	addi	s2,s2,-1
    28fa:	0126f933          	and	s2,a3,s2
    28fe:	8a42                	mv	s4,a6
    2900:	8432                	mv	s0,a2
    2902:	a4b5                	j	2b6e <__adddf3+0x696>
    2904:	7ff00613          	li	a2,2047
    2908:	c8c401e3          	beq	s0,a2,258a <__adddf3+0xb2>
    290c:	00800637          	lui	a2,0x800
    2910:	8ed1                	or	a3,a3,a2
    2912:	bf69                	j	28ac <__adddf3+0x3d4>
    2914:	fe050593          	addi	a1,a0,-32 # 7fffe0 <_global_impure_ptr+0x7fa820>
    2918:	02000893          	li	a7,32
    291c:	00b6d5b3          	srl	a1,a3,a1
    2920:	4601                	li	a2,0
    2922:	01150763          	beq	a0,a7,2930 <__adddf3+0x458>
    2926:	04000613          	li	a2,64
    292a:	8e09                	sub	a2,a2,a0
    292c:	00c69633          	sll	a2,a3,a2
    2930:	01066833          	or	a6,a2,a6
    2934:	01003833          	snez	a6,a6
    2938:	0105e833          	or	a6,a1,a6
    293c:	4681                	li	a3,0
    293e:	bf79                	j	28dc <__adddf3+0x404>
    2940:	0106e833          	or	a6,a3,a6
    2944:	01003833          	snez	a6,a6
    2948:	bfd5                	j	293c <__adddf3+0x464>
    294a:	cd75                	beqz	a0,2a46 <__adddf3+0x56e>
    294c:	40858633          	sub	a2,a1,s0
    2950:	e439                	bnez	s0,299e <__adddf3+0x4c6>
    2952:	00f76533          	or	a0,a4,a5
    2956:	e509                	bnez	a0,2960 <__adddf3+0x488>
    2958:	7ff00793          	li	a5,2047
    295c:	849a                	mv	s1,t1
    295e:	b9fd                	j	265c <__adddf3+0x184>
    2960:	fff60893          	addi	a7,a2,-1 # 7fffff <_global_impure_ptr+0x7fa83f>
    2964:	00089c63          	bnez	a7,297c <__adddf3+0x4a4>
    2968:	40f807b3          	sub	a5,a6,a5
    296c:	00f83833          	sltu	a6,a6,a5
    2970:	8e99                	sub	a3,a3,a4
    2972:	410686b3          	sub	a3,a3,a6
    2976:	849a                	mv	s1,t1
    2978:	883e                	mv	a6,a5
    297a:	b71d                	j	28a0 <__adddf3+0x3c8>
    297c:	7ff00513          	li	a0,2047
    2980:	04a61663          	bne	a2,a0,29cc <__adddf3+0x4f4>
    2984:	0106e7b3          	or	a5,a3,a6
    2988:	2e078e63          	beqz	a5,2c84 <__adddf3+0x7ac>
    298c:	004007b7          	lui	a5,0x400
    2990:	8ff5                	and	a5,a5,a3
    2992:	8736                	mv	a4,a3
    2994:	2e079b63          	bnez	a5,2c8a <__adddf3+0x7b2>
    2998:	87c2                	mv	a5,a6
    299a:	849a                	mv	s1,t1
    299c:	b6cd                	j	257e <__adddf3+0xa6>
    299e:	7ff00513          	li	a0,2047
    29a2:	02a59163          	bne	a1,a0,29c4 <__adddf3+0x4ec>
    29a6:	0106e7b3          	or	a5,a3,a6
    29aa:	2e078363          	beqz	a5,2c90 <__adddf3+0x7b8>
    29ae:	004007b7          	lui	a5,0x400
    29b2:	8ff5                	and	a5,a5,a3
    29b4:	8736                	mv	a4,a3
    29b6:	2e079163          	bnez	a5,2c98 <__adddf3+0x7c0>
    29ba:	87c2                	mv	a5,a6
    29bc:	7ff00613          	li	a2,2047
    29c0:	849a                	mv	s1,t1
    29c2:	b301                	j	26c2 <__adddf3+0x1ea>
    29c4:	00800537          	lui	a0,0x800
    29c8:	8f49                	or	a4,a4,a0
    29ca:	88b2                	mv	a7,a2
    29cc:	03800613          	li	a2,56
    29d0:	07164763          	blt	a2,a7,2a3e <__adddf3+0x566>
    29d4:	467d                	li	a2,31
    29d6:	03164f63          	blt	a2,a7,2a14 <__adddf3+0x53c>
    29da:	02000513          	li	a0,32
    29de:	41150533          	sub	a0,a0,a7
    29e2:	00a71633          	sll	a2,a4,a0
    29e6:	0117de33          	srl	t3,a5,a7
    29ea:	00a797b3          	sll	a5,a5,a0
    29ee:	01c66633          	or	a2,a2,t3
    29f2:	00f037b3          	snez	a5,a5
    29f6:	8fd1                	or	a5,a5,a2
    29f8:	01175733          	srl	a4,a4,a7
    29fc:	40f807b3          	sub	a5,a6,a5
    2a00:	40e68733          	sub	a4,a3,a4
    2a04:	00f836b3          	sltu	a3,a6,a5
    2a08:	40d706b3          	sub	a3,a4,a3
    2a0c:	883e                	mv	a6,a5
    2a0e:	862e                	mv	a2,a1
    2a10:	849a                	mv	s1,t1
    2a12:	bde9                	j	28ec <__adddf3+0x414>
    2a14:	fe088613          	addi	a2,a7,-32
    2a18:	02000e13          	li	t3,32
    2a1c:	00c75633          	srl	a2,a4,a2
    2a20:	4501                	li	a0,0
    2a22:	01c88863          	beq	a7,t3,2a32 <__adddf3+0x55a>
    2a26:	04000513          	li	a0,64
    2a2a:	41150533          	sub	a0,a0,a7
    2a2e:	00a71533          	sll	a0,a4,a0
    2a32:	8fc9                	or	a5,a5,a0
    2a34:	00f037b3          	snez	a5,a5
    2a38:	8fd1                	or	a5,a5,a2
    2a3a:	4701                	li	a4,0
    2a3c:	b7c1                	j	29fc <__adddf3+0x524>
    2a3e:	8fd9                	or	a5,a5,a4
    2a40:	00f037b3          	snez	a5,a5
    2a44:	bfdd                	j	2a3a <__adddf3+0x562>
    2a46:	00140613          	addi	a2,s0,1
    2a4a:	7fe67613          	andi	a2,a2,2046
    2a4e:	ea7d                	bnez	a2,2b44 <__adddf3+0x66c>
    2a50:	00f768b3          	or	a7,a4,a5
    2a54:	0106e533          	or	a0,a3,a6
    2a58:	e05d                	bnez	s0,2afe <__adddf3+0x626>
    2a5a:	06089263          	bnez	a7,2abe <__adddf3+0x5e6>
    2a5e:	1c051163          	bnez	a0,2c20 <__adddf3+0x748>
    2a62:	ffe98493          	addi	s1,s3,-2
    2a66:	0014b493          	seqz	s1,s1
    2a6a:	4701                	li	a4,0
    2a6c:	4781                	li	a5,0
    2a6e:	00e7e6b3          	or	a3,a5,a4
    2a72:	24068063          	beqz	a3,2cb2 <__adddf3+0x7da>
    2a76:	01f7d693          	srli	a3,a5,0x1f
    2a7a:	00171413          	slli	s0,a4,0x1
    2a7e:	9436                	add	s0,s0,a3
    2a80:	00179693          	slli	a3,a5,0x1
    2a84:	0076f613          	andi	a2,a3,7
    2a88:	4581                	li	a1,0
    2a8a:	c605                	beqz	a2,2ab2 <__adddf3+0x5da>
    2a8c:	4609                	li	a2,2
    2a8e:	1ac98963          	beq	s3,a2,2c40 <__adddf3+0x768>
    2a92:	460d                	li	a2,3
    2a94:	18c98c63          	beq	s3,a2,2c2c <__adddf3+0x754>
    2a98:	4585                	li	a1,1
    2a9a:	00099c63          	bnez	s3,2ab2 <__adddf3+0x5da>
    2a9e:	00f6f613          	andi	a2,a3,15
    2aa2:	4511                	li	a0,4
    2aa4:	00a60763          	beq	a2,a0,2ab2 <__adddf3+0x5da>
    2aa8:	ffc6b693          	sltiu	a3,a3,-4
    2aac:	0016c693          	xori	a3,a3,1
    2ab0:	9436                	add	s0,s0,a3
    2ab2:	8061                	srli	s0,s0,0x18
    2ab4:	00144413          	xori	s0,s0,1
    2ab8:	8805                	andi	s0,s0,1
    2aba:	4601                	li	a2,0
    2abc:	b1c9                	j	277e <__adddf3+0x2a6>
    2abe:	d945                	beqz	a0,2a6e <__adddf3+0x596>
    2ac0:	410785b3          	sub	a1,a5,a6
    2ac4:	00b7b533          	sltu	a0,a5,a1
    2ac8:	40d70633          	sub	a2,a4,a3
    2acc:	8e09                	sub	a2,a2,a0
    2ace:	00800537          	lui	a0,0x800
    2ad2:	8d71                	and	a0,a0,a2
    2ad4:	c919                	beqz	a0,2aea <__adddf3+0x612>
    2ad6:	40f807b3          	sub	a5,a6,a5
    2ada:	40e68733          	sub	a4,a3,a4
    2ade:	00f83833          	sltu	a6,a6,a5
    2ae2:	41070733          	sub	a4,a4,a6
    2ae6:	849a                	mv	s1,t1
    2ae8:	b759                	j	2a6e <__adddf3+0x596>
    2aea:	00c5e7b3          	or	a5,a1,a2
    2aee:	12079c63          	bnez	a5,2c26 <__adddf3+0x74e>
    2af2:	ffe98493          	addi	s1,s3,-2
    2af6:	0014b493          	seqz	s1,s1
    2afa:	4701                	li	a4,0
    2afc:	bf8d                	j	2a6e <__adddf3+0x596>
    2afe:	7ff00613          	li	a2,2047
    2b02:	00c41e63          	bne	s0,a2,2b1e <__adddf3+0x646>
    2b06:	26088963          	beqz	a7,2d78 <__adddf3+0x8a0>
    2b0a:	00400637          	lui	a2,0x400
    2b0e:	8e79                	and	a2,a2,a4
    2b10:	00163613          	seqz	a2,a2
    2b14:	0612                	slli	a2,a2,0x4
    2b16:	26859563          	bne	a1,s0,2d80 <__adddf3+0x8a8>
    2b1a:	85b2                	mv	a1,a2
    2b1c:	a021                	j	2b24 <__adddf3+0x64c>
    2b1e:	02c59163          	bne	a1,a2,2b40 <__adddf3+0x668>
    2b22:	4581                	li	a1,0
    2b24:	c511                	beqz	a0,2b30 <__adddf3+0x658>
    2b26:	00400637          	lui	a2,0x400
    2b2a:	8e75                	and	a2,a2,a3
    2b2c:	e211                	bnez	a2,2b30 <__adddf3+0x658>
    2b2e:	45c1                	li	a1,16
    2b30:	24089963          	bnez	a7,2d82 <__adddf3+0x8aa>
    2b34:	16050763          	beqz	a0,2ca2 <__adddf3+0x7ca>
    2b38:	8736                	mv	a4,a3
    2b3a:	87c2                	mv	a5,a6
    2b3c:	849a                	mv	s1,t1
    2b3e:	b179                	j	27cc <__adddf3+0x2f4>
    2b40:	4581                	li	a1,0
    2b42:	b7fd                	j	2b30 <__adddf3+0x658>
    2b44:	41078a33          	sub	s4,a5,a6
    2b48:	0147b633          	sltu	a2,a5,s4
    2b4c:	40d70933          	sub	s2,a4,a3
    2b50:	40c90933          	sub	s2,s2,a2
    2b54:	00800637          	lui	a2,0x800
    2b58:	00c97633          	and	a2,s2,a2
    2b5c:	c62d                	beqz	a2,2bc6 <__adddf3+0x6ee>
    2b5e:	40f80a33          	sub	s4,a6,a5
    2b62:	8e99                	sub	a3,a3,a4
    2b64:	01483833          	sltu	a6,a6,s4
    2b68:	41068933          	sub	s2,a3,a6
    2b6c:	849a                	mv	s1,t1
    2b6e:	06090063          	beqz	s2,2bce <__adddf3+0x6f6>
    2b72:	854a                	mv	a0,s2
    2b74:	337010ef          	jal	ra,46aa <__clzsi2>
    2b78:	ff850613          	addi	a2,a0,-8 # 7ffff8 <_global_impure_ptr+0x7fa838>
    2b7c:	47fd                	li	a5,31
    2b7e:	04c7ce63          	blt	a5,a2,2bda <__adddf3+0x702>
    2b82:	02000693          	li	a3,32
    2b86:	8e91                	sub	a3,a3,a2
    2b88:	00c91733          	sll	a4,s2,a2
    2b8c:	00da56b3          	srl	a3,s4,a3
    2b90:	8ed9                	or	a3,a3,a4
    2b92:	00ca1833          	sll	a6,s4,a2
    2b96:	06864b63          	blt	a2,s0,2c0c <__adddf3+0x734>
    2b9a:	8e01                	sub	a2,a2,s0
    2b9c:	00160713          	addi	a4,a2,1 # 800001 <_global_impure_ptr+0x7fa841>
    2ba0:	47fd                	li	a5,31
    2ba2:	04e7c263          	blt	a5,a4,2be6 <__adddf3+0x70e>
    2ba6:	02000613          	li	a2,32
    2baa:	8e19                	sub	a2,a2,a4
    2bac:	00c697b3          	sll	a5,a3,a2
    2bb0:	00e85533          	srl	a0,a6,a4
    2bb4:	00c81633          	sll	a2,a6,a2
    2bb8:	8fc9                	or	a5,a5,a0
    2bba:	00c03633          	snez	a2,a2
    2bbe:	8fd1                	or	a5,a5,a2
    2bc0:	00e6d733          	srl	a4,a3,a4
    2bc4:	b56d                	j	2a6e <__adddf3+0x596>
    2bc6:	012a67b3          	or	a5,s4,s2
    2bca:	f3d5                	bnez	a5,2b6e <__adddf3+0x696>
    2bcc:	b71d                	j	2af2 <__adddf3+0x61a>
    2bce:	8552                	mv	a0,s4
    2bd0:	2db010ef          	jal	ra,46aa <__clzsi2>
    2bd4:	02050513          	addi	a0,a0,32
    2bd8:	b745                	j	2b78 <__adddf3+0x6a0>
    2bda:	fd850693          	addi	a3,a0,-40
    2bde:	00da16b3          	sll	a3,s4,a3
    2be2:	4801                	li	a6,0
    2be4:	bf4d                	j	2b96 <__adddf3+0x6be>
    2be6:	1605                	addi	a2,a2,-31
    2be8:	02000593          	li	a1,32
    2bec:	00c6d633          	srl	a2,a3,a2
    2bf0:	4781                	li	a5,0
    2bf2:	00b70763          	beq	a4,a1,2c00 <__adddf3+0x728>
    2bf6:	04000793          	li	a5,64
    2bfa:	8f99                	sub	a5,a5,a4
    2bfc:	00f697b3          	sll	a5,a3,a5
    2c00:	00f867b3          	or	a5,a6,a5
    2c04:	00f037b3          	snez	a5,a5
    2c08:	8fd1                	or	a5,a5,a2
    2c0a:	bdc5                	j	2afa <__adddf3+0x622>
    2c0c:	ff8007b7          	lui	a5,0xff800
    2c10:	17fd                	addi	a5,a5,-1
    2c12:	40c40633          	sub	a2,s0,a2
    2c16:	8efd                	and	a3,a3,a5
    2c18:	b4a1                	j	2660 <__adddf3+0x188>
    2c1a:	8736                	mv	a4,a3
    2c1c:	87c2                	mv	a5,a6
    2c1e:	bd81                	j	2a6e <__adddf3+0x596>
    2c20:	8736                	mv	a4,a3
    2c22:	87c2                	mv	a5,a6
    2c24:	b5c9                	j	2ae6 <__adddf3+0x60e>
    2c26:	8732                	mv	a4,a2
    2c28:	87ae                	mv	a5,a1
    2c2a:	b591                	j	2a6e <__adddf3+0x596>
    2c2c:	85a6                	mv	a1,s1
    2c2e:	e80492e3          	bnez	s1,2ab2 <__adddf3+0x5da>
    2c32:	ff86b693          	sltiu	a3,a3,-8
    2c36:	0016c693          	xori	a3,a3,1
    2c3a:	9436                	add	s0,s0,a3
    2c3c:	4585                	li	a1,1
    2c3e:	bd95                	j	2ab2 <__adddf3+0x5da>
    2c40:	4585                	li	a1,1
    2c42:	e60488e3          	beqz	s1,2ab2 <__adddf3+0x5da>
    2c46:	ff86b693          	sltiu	a3,a3,-8
    2c4a:	0016c693          	xori	a3,a3,1
    2c4e:	9436                	add	s0,s0,a3
    2c50:	85a6                	mv	a1,s1
    2c52:	b585                	j	2ab2 <__adddf3+0x5da>
    2c54:	4701                	li	a4,0
    2c56:	7ff00613          	li	a2,2047
    2c5a:	4581                	li	a1,0
    2c5c:	a07d                	j	2d0a <__adddf3+0x832>
    2c5e:	87c2                	mv	a5,a6
    2c60:	ba35                	j	259c <__adddf3+0xc4>
    2c62:	577d                	li	a4,-1
    2c64:	57fd                	li	a5,-1
    2c66:	7fe00613          	li	a2,2046
    2c6a:	4401                	li	s0,0
    2c6c:	b6c1                	j	282c <__adddf3+0x354>
    2c6e:	4701                	li	a4,0
    2c70:	4781                	li	a5,0
    2c72:	a861                	j	2d0a <__adddf3+0x832>
    2c74:	4701                	li	a4,0
    2c76:	4781                	li	a5,0
    2c78:	bff9                	j	2c56 <__adddf3+0x77e>
    2c7a:	4701                	li	a4,0
    2c7c:	bff9                	j	2c5a <__adddf3+0x782>
    2c7e:	87c2                	mv	a5,a6
    2c80:	4581                	li	a1,0
    2c82:	bcf5                	j	277e <__adddf3+0x2a6>
    2c84:	4701                	li	a4,0
    2c86:	849a                	mv	s1,t1
    2c88:	bfc9                	j	2c5a <__adddf3+0x782>
    2c8a:	87c2                	mv	a5,a6
    2c8c:	849a                	mv	s1,t1
    2c8e:	bfcd                	j	2c80 <__adddf3+0x7a8>
    2c90:	4701                	li	a4,0
    2c92:	7ff00613          	li	a2,2047
    2c96:	bfc5                	j	2c86 <__adddf3+0x7ae>
    2c98:	87c2                	mv	a5,a6
    2c9a:	7ff00613          	li	a2,2047
    2c9e:	849a                	mv	s1,t1
    2ca0:	b685                	j	2800 <__adddf3+0x328>
    2ca2:	4781                	li	a5,0
    2ca4:	4481                	li	s1,0
    2ca6:	00400737          	lui	a4,0x400
    2caa:	7ff00613          	li	a2,2047
    2cae:	45c1                	li	a1,16
    2cb0:	a8a9                	j	2d0a <__adddf3+0x832>
    2cb2:	4701                	li	a4,0
    2cb4:	4781                	li	a5,0
    2cb6:	4601                	li	a2,0
    2cb8:	b74d                	j	2c5a <__adddf3+0x782>
    2cba:	e489                	bnez	s1,2cc4 <__adddf3+0x7ec>
    2cbc:	00878693          	addi	a3,a5,8 # ff800008 <__kernel_stack+0xdf740010>
    2cc0:	be41                	j	2850 <__adddf3+0x378>
    2cc2:	fced                	bnez	s1,2cbc <__adddf3+0x7e4>
    2cc4:	ac0416e3          	bnez	s0,2790 <__adddf3+0x2b8>
    2cc8:	a089                	j	2d0a <__adddf3+0x832>
    2cca:	4781                	li	a5,0
    2ccc:	02098063          	beqz	s3,2cec <__adddf3+0x814>
    2cd0:	470d                	li	a4,3
    2cd2:	00e99863          	bne	s3,a4,2ce2 <__adddf3+0x80a>
    2cd6:	00048b63          	beqz	s1,2cec <__adddf3+0x814>
    2cda:	57fd                	li	a5,-1
    2cdc:	7fe00613          	li	a2,2046
    2ce0:	a031                	j	2cec <__adddf3+0x814>
    2ce2:	4709                	li	a4,2
    2ce4:	fee99be3          	bne	s3,a4,2cda <__adddf3+0x802>
    2ce8:	fe0489e3          	beqz	s1,2cda <__adddf3+0x802>
    2cec:	0055e593          	ori	a1,a1,5
    2cf0:	873e                	mv	a4,a5
    2cf2:	a80d                	j	2d24 <__adddf3+0x84c>
    2cf4:	85b2                	mv	a1,a2
    2cf6:	0106e6b3          	or	a3,a3,a6
    2cfa:	ac0689e3          	beqz	a3,27cc <__adddf3+0x2f4>
    2cfe:	4481                	li	s1,0
    2d00:	00400737          	lui	a4,0x400
    2d04:	4781                	li	a5,0
    2d06:	7ff00613          	li	a2,2047
    2d0a:	008006b7          	lui	a3,0x800
    2d0e:	8ef9                	and	a3,a3,a4
    2d10:	ca91                	beqz	a3,2d24 <__adddf3+0x84c>
    2d12:	0605                	addi	a2,a2,1
    2d14:	7ff00693          	li	a3,2047
    2d18:	fad609e3          	beq	a2,a3,2cca <__adddf3+0x7f2>
    2d1c:	ff8006b7          	lui	a3,0xff800
    2d20:	16fd                	addi	a3,a3,-1
    2d22:	8f75                	and	a4,a4,a3
    2d24:	0037d513          	srli	a0,a5,0x3
    2d28:	7ff00693          	li	a3,2047
    2d2c:	01d71793          	slli	a5,a4,0x1d
    2d30:	8fc9                	or	a5,a5,a0
    2d32:	830d                	srli	a4,a4,0x3
    2d34:	00d61963          	bne	a2,a3,2d46 <__adddf3+0x86e>
    2d38:	8fd9                	or	a5,a5,a4
    2d3a:	4701                	li	a4,0
    2d3c:	c789                	beqz	a5,2d46 <__adddf3+0x86e>
    2d3e:	00080737          	lui	a4,0x80
    2d42:	4781                	li	a5,0
    2d44:	4481                	li	s1,0
    2d46:	7ff006b7          	lui	a3,0x7ff00
    2d4a:	0652                	slli	a2,a2,0x14
    2d4c:	0732                	slli	a4,a4,0xc
    2d4e:	8e75                	and	a2,a2,a3
    2d50:	8331                	srli	a4,a4,0xc
    2d52:	8f51                	or	a4,a4,a2
    2d54:	04fe                	slli	s1,s1,0x1f
    2d56:	009766b3          	or	a3,a4,s1
    2d5a:	873e                	mv	a4,a5
    2d5c:	87b6                	mv	a5,a3
    2d5e:	c199                	beqz	a1,2d64 <__adddf3+0x88c>
    2d60:	0015a073          	csrs	fflags,a1
    2d64:	40f2                	lw	ra,28(sp)
    2d66:	4462                	lw	s0,24(sp)
    2d68:	44d2                	lw	s1,20(sp)
    2d6a:	4942                	lw	s2,16(sp)
    2d6c:	49b2                	lw	s3,12(sp)
    2d6e:	4a22                	lw	s4,8(sp)
    2d70:	853a                	mv	a0,a4
    2d72:	85be                	mv	a1,a5
    2d74:	6105                	addi	sp,sp,32
    2d76:	8082                	ret
    2d78:	da8585e3          	beq	a1,s0,2b22 <__adddf3+0x64a>
    2d7c:	4581                	li	a1,0
    2d7e:	bb5d                	j	2b34 <__adddf3+0x65c>
    2d80:	85b2                	mv	a1,a2
    2d82:	a40505e3          	beqz	a0,27cc <__adddf3+0x2f4>
    2d86:	bfa5                	j	2cfe <__adddf3+0x826>
    2d88:	a48588e3          	beq	a1,s0,27d8 <__adddf3+0x300>
    2d8c:	4581                	li	a1,0
    2d8e:	bc2d                	j	27c8 <__adddf3+0x2f0>

00002d90 <__divdf3>:
    2d90:	7179                	addi	sp,sp,-48
    2d92:	d422                	sw	s0,40(sp)
    2d94:	ca56                	sw	s5,20(sp)
    2d96:	c266                	sw	s9,4(sp)
    2d98:	d606                	sw	ra,44(sp)
    2d9a:	d226                	sw	s1,36(sp)
    2d9c:	d04a                	sw	s2,32(sp)
    2d9e:	ce4e                	sw	s3,28(sp)
    2da0:	cc52                	sw	s4,24(sp)
    2da2:	c85a                	sw	s6,16(sp)
    2da4:	c65e                	sw	s7,12(sp)
    2da6:	c462                	sw	s8,8(sp)
    2da8:	842a                	mv	s0,a0
    2daa:	8cb2                	mv	s9,a2
    2dac:	8ab6                	mv	s5,a3
    2dae:	00202973          	frrm	s2
    2db2:	0145db13          	srli	s6,a1,0x14
    2db6:	00c59b93          	slli	s7,a1,0xc
    2dba:	7ffb7b13          	andi	s6,s6,2047
    2dbe:	00cbdb93          	srli	s7,s7,0xc
    2dc2:	01f5da13          	srli	s4,a1,0x1f
    2dc6:	020b0663          	beqz	s6,2df2 <__divdf3+0x62>
    2dca:	7ff00793          	li	a5,2047
    2dce:	06fb0b63          	beq	s6,a5,2e44 <__divdf3+0xb4>
    2dd2:	01d55713          	srli	a4,a0,0x1d
    2dd6:	0b8e                	slli	s7,s7,0x3
    2dd8:	01776bb3          	or	s7,a4,s7
    2ddc:	008007b7          	lui	a5,0x800
    2de0:	00fbebb3          	or	s7,s7,a5
    2de4:	00351993          	slli	s3,a0,0x3
    2de8:	c01b0b13          	addi	s6,s6,-1023
    2dec:	4c01                	li	s8,0
    2dee:	4481                	li	s1,0
    2df0:	a0bd                	j	2e5e <__divdf3+0xce>
    2df2:	00abe7b3          	or	a5,s7,a0
    2df6:	c7e9                	beqz	a5,2ec0 <__divdf3+0x130>
    2df8:	020b8b63          	beqz	s7,2e2e <__divdf3+0x9e>
    2dfc:	855e                	mv	a0,s7
    2dfe:	0ad010ef          	jal	ra,46aa <__clzsi2>
    2e02:	ff550713          	addi	a4,a0,-11
    2e06:	47f1                	li	a5,28
    2e08:	02e7c863          	blt	a5,a4,2e38 <__divdf3+0xa8>
    2e0c:	46f5                	li	a3,29
    2e0e:	ff850993          	addi	s3,a0,-8
    2e12:	8e99                	sub	a3,a3,a4
    2e14:	013b9bb3          	sll	s7,s7,s3
    2e18:	00d456b3          	srl	a3,s0,a3
    2e1c:	0176ebb3          	or	s7,a3,s7
    2e20:	013419b3          	sll	s3,s0,s3
    2e24:	c0d00593          	li	a1,-1011
    2e28:	40a58b33          	sub	s6,a1,a0
    2e2c:	b7c1                	j	2dec <__divdf3+0x5c>
    2e2e:	07d010ef          	jal	ra,46aa <__clzsi2>
    2e32:	02050513          	addi	a0,a0,32
    2e36:	b7f1                	j	2e02 <__divdf3+0x72>
    2e38:	fd850b93          	addi	s7,a0,-40
    2e3c:	01741bb3          	sll	s7,s0,s7
    2e40:	4981                	li	s3,0
    2e42:	b7cd                	j	2e24 <__divdf3+0x94>
    2e44:	00abe433          	or	s0,s7,a0
    2e48:	c049                	beqz	s0,2eca <__divdf3+0x13a>
    2e4a:	000807b7          	lui	a5,0x80
    2e4e:	00fbf7b3          	and	a5,s7,a5
    2e52:	89aa                	mv	s3,a0
    2e54:	7ff00b13          	li	s6,2047
    2e58:	4c0d                	li	s8,3
    2e5a:	44c1                	li	s1,16
    2e5c:	fbc9                	bnez	a5,2dee <__divdf3+0x5e>
    2e5e:	00ca9513          	slli	a0,s5,0xc
    2e62:	00c55413          	srli	s0,a0,0xc
    2e66:	014ad513          	srli	a0,s5,0x14
    2e6a:	7ff57593          	andi	a1,a0,2047
    2e6e:	87e6                	mv	a5,s9
    2e70:	01fada93          	srli	s5,s5,0x1f
    2e74:	c1ad                	beqz	a1,2ed6 <__divdf3+0x146>
    2e76:	7ff00713          	li	a4,2047
    2e7a:	0ae58963          	beq	a1,a4,2f2c <__divdf3+0x19c>
    2e7e:	01dcd793          	srli	a5,s9,0x1d
    2e82:	00341513          	slli	a0,s0,0x3
    2e86:	8d5d                	or	a0,a0,a5
    2e88:	00800437          	lui	s0,0x800
    2e8c:	8c49                	or	s0,s0,a0
    2e8e:	003c9793          	slli	a5,s9,0x3
    2e92:	c0158513          	addi	a0,a1,-1023
    2e96:	4701                	li	a4,0
    2e98:	002c1693          	slli	a3,s8,0x2
    2e9c:	8ed9                	or	a3,a3,a4
    2e9e:	40ab05b3          	sub	a1,s6,a0
    2ea2:	16fd                	addi	a3,a3,-1
    2ea4:	4539                	li	a0,14
    2ea6:	015a4633          	xor	a2,s4,s5
    2eaa:	0ad56a63          	bltu	a0,a3,2f5e <__divdf3+0x1ce>
    2eae:	00002517          	auipc	a0,0x2
    2eb2:	70250513          	addi	a0,a0,1794 # 55b0 <pow10.0+0x50>
    2eb6:	068a                	slli	a3,a3,0x2
    2eb8:	96aa                	add	a3,a3,a0
    2eba:	4294                	lw	a3,0(a3)
    2ebc:	96aa                	add	a3,a3,a0
    2ebe:	8682                	jr	a3
    2ec0:	4b81                	li	s7,0
    2ec2:	4981                	li	s3,0
    2ec4:	4b01                	li	s6,0
    2ec6:	4c05                	li	s8,1
    2ec8:	b71d                	j	2dee <__divdf3+0x5e>
    2eca:	4b81                	li	s7,0
    2ecc:	4981                	li	s3,0
    2ece:	7ff00b13          	li	s6,2047
    2ed2:	4c09                	li	s8,2
    2ed4:	bf29                	j	2dee <__divdf3+0x5e>
    2ed6:	019467b3          	or	a5,s0,s9
    2eda:	c7ad                	beqz	a5,2f44 <__divdf3+0x1b4>
    2edc:	02040c63          	beqz	s0,2f14 <__divdf3+0x184>
    2ee0:	8522                	mv	a0,s0
    2ee2:	7c8010ef          	jal	ra,46aa <__clzsi2>
    2ee6:	85aa                	mv	a1,a0
    2ee8:	ff558693          	addi	a3,a1,-11
    2eec:	47f1                	li	a5,28
    2eee:	02d7c963          	blt	a5,a3,2f20 <__divdf3+0x190>
    2ef2:	4775                	li	a4,29
    2ef4:	ff858793          	addi	a5,a1,-8
    2ef8:	8f15                	sub	a4,a4,a3
    2efa:	00f41533          	sll	a0,s0,a5
    2efe:	00ecd733          	srl	a4,s9,a4
    2f02:	00a76433          	or	s0,a4,a0
    2f06:	00fc97b3          	sll	a5,s9,a5
    2f0a:	c0d00713          	li	a4,-1011
    2f0e:	40b70533          	sub	a0,a4,a1
    2f12:	b751                	j	2e96 <__divdf3+0x106>
    2f14:	8566                	mv	a0,s9
    2f16:	794010ef          	jal	ra,46aa <__clzsi2>
    2f1a:	02050593          	addi	a1,a0,32
    2f1e:	b7e9                	j	2ee8 <__divdf3+0x158>
    2f20:	fd858513          	addi	a0,a1,-40
    2f24:	00ac9433          	sll	s0,s9,a0
    2f28:	4781                	li	a5,0
    2f2a:	b7c5                	j	2f0a <__divdf3+0x17a>
    2f2c:	01946633          	or	a2,s0,s9
    2f30:	ce19                	beqz	a2,2f4e <__divdf3+0x1be>
    2f32:	00080737          	lui	a4,0x80
    2f36:	8f61                	and	a4,a4,s0
    2f38:	7ff00513          	li	a0,2047
    2f3c:	ef19                	bnez	a4,2f5a <__divdf3+0x1ca>
    2f3e:	470d                	li	a4,3
    2f40:	44c1                	li	s1,16
    2f42:	bf99                	j	2e98 <__divdf3+0x108>
    2f44:	4401                	li	s0,0
    2f46:	4781                	li	a5,0
    2f48:	4501                	li	a0,0
    2f4a:	4705                	li	a4,1
    2f4c:	b7b1                	j	2e98 <__divdf3+0x108>
    2f4e:	4401                	li	s0,0
    2f50:	4781                	li	a5,0
    2f52:	7ff00513          	li	a0,2047
    2f56:	4709                	li	a4,2
    2f58:	b781                	j	2e98 <__divdf3+0x108>
    2f5a:	470d                	li	a4,3
    2f5c:	bf35                	j	2e98 <__divdf3+0x108>
    2f5e:	01746663          	bltu	s0,s7,2f6a <__divdf3+0x1da>
    2f62:	268b9463          	bne	s7,s0,31ca <__divdf3+0x43a>
    2f66:	26f9e263          	bltu	s3,a5,31ca <__divdf3+0x43a>
    2f6a:	01fb9513          	slli	a0,s7,0x1f
    2f6e:	0019d713          	srli	a4,s3,0x1
    2f72:	01f99693          	slli	a3,s3,0x1f
    2f76:	001bdb93          	srli	s7,s7,0x1
    2f7a:	00e569b3          	or	s3,a0,a4
    2f7e:	00841513          	slli	a0,s0,0x8
    2f82:	0187d813          	srli	a6,a5,0x18
    2f86:	00a86833          	or	a6,a6,a0
    2f8a:	8141                	srli	a0,a0,0x10
    2f8c:	02abde33          	divu	t3,s7,a0
    2f90:	01081f13          	slli	t5,a6,0x10
    2f94:	010f5f13          	srli	t5,t5,0x10
    2f98:	00879893          	slli	a7,a5,0x8
    2f9c:	0109d793          	srli	a5,s3,0x10
    2fa0:	02abfbb3          	remu	s7,s7,a0
    2fa4:	8372                	mv	t1,t3
    2fa6:	03cf0733          	mul	a4,t5,t3
    2faa:	0bc2                	slli	s7,s7,0x10
    2fac:	0177e7b3          	or	a5,a5,s7
    2fb0:	00e7fc63          	bgeu	a5,a4,2fc8 <__divdf3+0x238>
    2fb4:	97c2                	add	a5,a5,a6
    2fb6:	fffe0313          	addi	t1,t3,-1
    2fba:	0107e763          	bltu	a5,a6,2fc8 <__divdf3+0x238>
    2fbe:	00e7f563          	bgeu	a5,a4,2fc8 <__divdf3+0x238>
    2fc2:	ffee0313          	addi	t1,t3,-2
    2fc6:	97c2                	add	a5,a5,a6
    2fc8:	8f99                	sub	a5,a5,a4
    2fca:	02a7deb3          	divu	t4,a5,a0
    2fce:	01099713          	slli	a4,s3,0x10
    2fd2:	8341                	srli	a4,a4,0x10
    2fd4:	02a7f7b3          	remu	a5,a5,a0
    2fd8:	89f6                	mv	s3,t4
    2fda:	03df0e33          	mul	t3,t5,t4
    2fde:	07c2                	slli	a5,a5,0x10
    2fe0:	8f5d                	or	a4,a4,a5
    2fe2:	01c77c63          	bgeu	a4,t3,2ffa <__divdf3+0x26a>
    2fe6:	9742                	add	a4,a4,a6
    2fe8:	fffe8993          	addi	s3,t4,-1
    2fec:	01076763          	bltu	a4,a6,2ffa <__divdf3+0x26a>
    2ff0:	01c77563          	bgeu	a4,t3,2ffa <__divdf3+0x26a>
    2ff4:	ffee8993          	addi	s3,t4,-2
    2ff8:	9742                	add	a4,a4,a6
    2ffa:	0342                	slli	t1,t1,0x10
    2ffc:	013369b3          	or	s3,t1,s3
    3000:	6341                	lui	t1,0x10
    3002:	fff30e93          	addi	t4,t1,-1 # ffff <_global_impure_ptr+0xa83f>
    3006:	0109d293          	srli	t0,s3,0x10
    300a:	0108df93          	srli	t6,a7,0x10
    300e:	41c70733          	sub	a4,a4,t3
    3012:	01d9fe33          	and	t3,s3,t4
    3016:	01d8feb3          	and	t4,a7,t4
    301a:	03de07b3          	mul	a5,t3,t4
    301e:	03d28433          	mul	s0,t0,t4
    3022:	03cf8e33          	mul	t3,t6,t3
    3026:	008e03b3          	add	t2,t3,s0
    302a:	0107de13          	srli	t3,a5,0x10
    302e:	9e1e                	add	t3,t3,t2
    3030:	03f282b3          	mul	t0,t0,t6
    3034:	008e7363          	bgeu	t3,s0,303a <__divdf3+0x2aa>
    3038:	929a                	add	t0,t0,t1
    303a:	63c1                	lui	t2,0x10
    303c:	010e5313          	srli	t1,t3,0x10
    3040:	13fd                	addi	t2,t2,-1
    3042:	929a                	add	t0,t0,t1
    3044:	007e7333          	and	t1,t3,t2
    3048:	0342                	slli	t1,t1,0x10
    304a:	0077f7b3          	and	a5,a5,t2
    304e:	933e                	add	t1,t1,a5
    3050:	00576763          	bltu	a4,t0,305e <__divdf3+0x2ce>
    3054:	844e                	mv	s0,s3
    3056:	02571e63          	bne	a4,t0,3092 <__divdf3+0x302>
    305a:	0266fc63          	bgeu	a3,t1,3092 <__divdf3+0x302>
    305e:	96c6                	add	a3,a3,a7
    3060:	0116b7b3          	sltu	a5,a3,a7
    3064:	97c2                	add	a5,a5,a6
    3066:	973e                	add	a4,a4,a5
    3068:	fff98413          	addi	s0,s3,-1
    306c:	00e86663          	bltu	a6,a4,3078 <__divdf3+0x2e8>
    3070:	02e81163          	bne	a6,a4,3092 <__divdf3+0x302>
    3074:	0116ef63          	bltu	a3,a7,3092 <__divdf3+0x302>
    3078:	00576663          	bltu	a4,t0,3084 <__divdf3+0x2f4>
    307c:	00e29b63          	bne	t0,a4,3092 <__divdf3+0x302>
    3080:	0066f963          	bgeu	a3,t1,3092 <__divdf3+0x302>
    3084:	96c6                	add	a3,a3,a7
    3086:	0116b7b3          	sltu	a5,a3,a7
    308a:	97c2                	add	a5,a5,a6
    308c:	ffe98413          	addi	s0,s3,-2
    3090:	973e                	add	a4,a4,a5
    3092:	40668333          	sub	t1,a3,t1
    3096:	40570733          	sub	a4,a4,t0
    309a:	0066b6b3          	sltu	a3,a3,t1
    309e:	8f15                	sub	a4,a4,a3
    30a0:	57fd                	li	a5,-1
    30a2:	0ee80763          	beq	a6,a4,3190 <__divdf3+0x400>
    30a6:	02a752b3          	divu	t0,a4,a0
    30aa:	01035793          	srli	a5,t1,0x10
    30ae:	02a77733          	remu	a4,a4,a0
    30b2:	8696                	mv	a3,t0
    30b4:	025f0e33          	mul	t3,t5,t0
    30b8:	0742                	slli	a4,a4,0x10
    30ba:	8f5d                	or	a4,a4,a5
    30bc:	01c77c63          	bgeu	a4,t3,30d4 <__divdf3+0x344>
    30c0:	9742                	add	a4,a4,a6
    30c2:	fff28693          	addi	a3,t0,-1
    30c6:	01076763          	bltu	a4,a6,30d4 <__divdf3+0x344>
    30ca:	01c77563          	bgeu	a4,t3,30d4 <__divdf3+0x344>
    30ce:	ffe28693          	addi	a3,t0,-2
    30d2:	9742                	add	a4,a4,a6
    30d4:	41c70733          	sub	a4,a4,t3
    30d8:	02a75e33          	divu	t3,a4,a0
    30dc:	01031793          	slli	a5,t1,0x10
    30e0:	83c1                	srli	a5,a5,0x10
    30e2:	02a77733          	remu	a4,a4,a0
    30e6:	03cf0f33          	mul	t5,t5,t3
    30ea:	0742                	slli	a4,a4,0x10
    30ec:	8f5d                	or	a4,a4,a5
    30ee:	87f2                	mv	a5,t3
    30f0:	01e77c63          	bgeu	a4,t5,3108 <__divdf3+0x378>
    30f4:	9742                	add	a4,a4,a6
    30f6:	fffe0793          	addi	a5,t3,-1
    30fa:	01076763          	bltu	a4,a6,3108 <__divdf3+0x378>
    30fe:	01e77563          	bgeu	a4,t5,3108 <__divdf3+0x378>
    3102:	ffee0793          	addi	a5,t3,-2
    3106:	9742                	add	a4,a4,a6
    3108:	06c2                	slli	a3,a3,0x10
    310a:	8edd                	or	a3,a3,a5
    310c:	01069793          	slli	a5,a3,0x10
    3110:	83c1                	srli	a5,a5,0x10
    3112:	0106d313          	srli	t1,a3,0x10
    3116:	026f8e33          	mul	t3,t6,t1
    311a:	41e70733          	sub	a4,a4,t5
    311e:	02ff8fb3          	mul	t6,t6,a5
    3122:	02fe8f33          	mul	t5,t4,a5
    3126:	03d30eb3          	mul	t4,t1,t4
    312a:	010f5793          	srli	a5,t5,0x10
    312e:	9ff6                	add	t6,t6,t4
    3130:	97fe                	add	a5,a5,t6
    3132:	01d7f463          	bgeu	a5,t4,313a <__divdf3+0x3aa>
    3136:	6541                	lui	a0,0x10
    3138:	9e2a                	add	t3,t3,a0
    313a:	0107d313          	srli	t1,a5,0x10
    313e:	9372                	add	t1,t1,t3
    3140:	6e41                	lui	t3,0x10
    3142:	1e7d                	addi	t3,t3,-1
    3144:	01c7f533          	and	a0,a5,t3
    3148:	0542                	slli	a0,a0,0x10
    314a:	01cf7f33          	and	t5,t5,t3
    314e:	957a                	add	a0,a0,t5
    3150:	00676663          	bltu	a4,t1,315c <__divdf3+0x3cc>
    3154:	2c671263          	bne	a4,t1,3418 <__divdf3+0x688>
    3158:	87b6                	mv	a5,a3
    315a:	c91d                	beqz	a0,3190 <__divdf3+0x400>
    315c:	9742                	add	a4,a4,a6
    315e:	fff68793          	addi	a5,a3,-1 # 7fefffff <__kernel_stack+0x5fe40007>
    3162:	03076163          	bltu	a4,a6,3184 <__divdf3+0x3f4>
    3166:	00676663          	bltu	a4,t1,3172 <__divdf3+0x3e2>
    316a:	2a671663          	bne	a4,t1,3416 <__divdf3+0x686>
    316e:	00a8fd63          	bgeu	a7,a0,3188 <__divdf3+0x3f8>
    3172:	ffe68793          	addi	a5,a3,-2
    3176:	00189693          	slli	a3,a7,0x1
    317a:	0116b8b3          	sltu	a7,a3,a7
    317e:	9846                	add	a6,a6,a7
    3180:	9742                	add	a4,a4,a6
    3182:	88b6                	mv	a7,a3
    3184:	00671463          	bne	a4,t1,318c <__divdf3+0x3fc>
    3188:	00a88463          	beq	a7,a0,3190 <__divdf3+0x400>
    318c:	0017e793          	ori	a5,a5,1
    3190:	3ff58813          	addi	a6,a1,1023
    3194:	11005863          	blez	a6,32a4 <__divdf3+0x514>
    3198:	0077f713          	andi	a4,a5,7
    319c:	cf25                	beqz	a4,3214 <__divdf3+0x484>
    319e:	4709                	li	a4,2
    31a0:	0014e493          	ori	s1,s1,1
    31a4:	06e90763          	beq	s2,a4,3212 <__divdf3+0x482>
    31a8:	470d                	li	a4,3
    31aa:	06e90063          	beq	s2,a4,320a <__divdf3+0x47a>
    31ae:	06091363          	bnez	s2,3214 <__divdf3+0x484>
    31b2:	00f7f713          	andi	a4,a5,15
    31b6:	4691                	li	a3,4
    31b8:	04d70e63          	beq	a4,a3,3214 <__divdf3+0x484>
    31bc:	00478713          	addi	a4,a5,4 # 80004 <_global_impure_ptr+0x7a844>
    31c0:	00f737b3          	sltu	a5,a4,a5
    31c4:	943e                	add	s0,s0,a5
    31c6:	87ba                	mv	a5,a4
    31c8:	a0b1                	j	3214 <__divdf3+0x484>
    31ca:	15fd                	addi	a1,a1,-1
    31cc:	4681                	li	a3,0
    31ce:	bb45                	j	2f7e <__divdf3+0x1ee>
    31d0:	8652                	mv	a2,s4
    31d2:	845e                	mv	s0,s7
    31d4:	87ce                	mv	a5,s3
    31d6:	8762                	mv	a4,s8
    31d8:	468d                	li	a3,3
    31da:	22d70763          	beq	a4,a3,3408 <__divdf3+0x678>
    31de:	4685                	li	a3,1
    31e0:	22d70163          	beq	a4,a3,3402 <__divdf3+0x672>
    31e4:	4689                	li	a3,2
    31e6:	fad715e3          	bne	a4,a3,3190 <__divdf3+0x400>
    31ea:	a029                	j	31f4 <__divdf3+0x464>
    31ec:	8656                	mv	a2,s5
    31ee:	b7ed                	j	31d8 <__divdf3+0x448>
    31f0:	0084e493          	ori	s1,s1,8
    31f4:	4501                	li	a0,0
    31f6:	4781                	li	a5,0
    31f8:	7ff00713          	li	a4,2047
    31fc:	a091                	j	3240 <__divdf3+0x4b0>
    31fe:	00080437          	lui	s0,0x80
    3202:	4781                	li	a5,0
    3204:	4601                	li	a2,0
    3206:	470d                	li	a4,3
    3208:	bfc1                	j	31d8 <__divdf3+0x448>
    320a:	e609                	bnez	a2,3214 <__divdf3+0x484>
    320c:	00878713          	addi	a4,a5,8
    3210:	bf45                	j	31c0 <__divdf3+0x430>
    3212:	fe6d                	bnez	a2,320c <__divdf3+0x47c>
    3214:	01000737          	lui	a4,0x1000
    3218:	8f61                	and	a4,a4,s0
    321a:	c719                	beqz	a4,3228 <__divdf3+0x498>
    321c:	ff000737          	lui	a4,0xff000
    3220:	177d                	addi	a4,a4,-1
    3222:	8c79                	and	s0,s0,a4
    3224:	40058813          	addi	a6,a1,1024
    3228:	7fe00713          	li	a4,2046
    322c:	05074663          	blt	a4,a6,3278 <__divdf3+0x4e8>
    3230:	0037d713          	srli	a4,a5,0x3
    3234:	01d41793          	slli	a5,s0,0x1d
    3238:	8fd9                	or	a5,a5,a4
    323a:	00345513          	srli	a0,s0,0x3
    323e:	8742                	mv	a4,a6
    3240:	0752                	slli	a4,a4,0x14
    3242:	7ff006b7          	lui	a3,0x7ff00
    3246:	0532                	slli	a0,a0,0xc
    3248:	8f75                	and	a4,a4,a3
    324a:	8131                	srli	a0,a0,0xc
    324c:	8d59                	or	a0,a0,a4
    324e:	067e                	slli	a2,a2,0x1f
    3250:	00c56733          	or	a4,a0,a2
    3254:	85ba                	mv	a1,a4
    3256:	853e                	mv	a0,a5
    3258:	c099                	beqz	s1,325e <__divdf3+0x4ce>
    325a:	0014a073          	csrs	fflags,s1
    325e:	50b2                	lw	ra,44(sp)
    3260:	5422                	lw	s0,40(sp)
    3262:	5492                	lw	s1,36(sp)
    3264:	5902                	lw	s2,32(sp)
    3266:	49f2                	lw	s3,28(sp)
    3268:	4a62                	lw	s4,24(sp)
    326a:	4ad2                	lw	s5,20(sp)
    326c:	4b42                	lw	s6,16(sp)
    326e:	4bb2                	lw	s7,12(sp)
    3270:	4c22                	lw	s8,8(sp)
    3272:	4c92                	lw	s9,4(sp)
    3274:	6145                	addi	sp,sp,48
    3276:	8082                	ret
    3278:	4789                	li	a5,2
    327a:	02f90363          	beq	s2,a5,32a0 <__divdf3+0x510>
    327e:	478d                	li	a5,3
    3280:	00f90863          	beq	s2,a5,3290 <__divdf3+0x500>
    3284:	00091763          	bnez	s2,3292 <__divdf3+0x502>
    3288:	4781                	li	a5,0
    328a:	7ff00713          	li	a4,2047
    328e:	a029                	j	3298 <__divdf3+0x508>
    3290:	de65                	beqz	a2,3288 <__divdf3+0x4f8>
    3292:	57fd                	li	a5,-1
    3294:	7fe00713          	li	a4,2046
    3298:	0054e493          	ori	s1,s1,5
    329c:	853e                	mv	a0,a5
    329e:	b74d                	j	3240 <__divdf3+0x4b0>
    32a0:	f665                	bnez	a2,3288 <__divdf3+0x4f8>
    32a2:	bfc5                	j	3292 <__divdf3+0x502>
    32a4:	4705                	li	a4,1
    32a6:	04081463          	bnez	a6,32ee <__divdf3+0x55e>
    32aa:	0077f693          	andi	a3,a5,7
    32ae:	8722                	mv	a4,s0
    32b0:	ca9d                	beqz	a3,32e6 <__divdf3+0x556>
    32b2:	4689                	li	a3,2
    32b4:	0014e493          	ori	s1,s1,1
    32b8:	02d90663          	beq	s2,a3,32e4 <__divdf3+0x554>
    32bc:	468d                	li	a3,3
    32be:	00d90f63          	beq	s2,a3,32dc <__divdf3+0x54c>
    32c2:	02091263          	bnez	s2,32e6 <__divdf3+0x556>
    32c6:	00f7f693          	andi	a3,a5,15
    32ca:	4511                	li	a0,4
    32cc:	00a68d63          	beq	a3,a0,32e6 <__divdf3+0x556>
    32d0:	ffc7b713          	sltiu	a4,a5,-4
    32d4:	00174713          	xori	a4,a4,1
    32d8:	9722                	add	a4,a4,s0
    32da:	a031                	j	32e6 <__divdf3+0x556>
    32dc:	e609                	bnez	a2,32e6 <__divdf3+0x556>
    32de:	ff87b713          	sltiu	a4,a5,-8
    32e2:	bfcd                	j	32d4 <__divdf3+0x544>
    32e4:	fe6d                	bnez	a2,32de <__divdf3+0x54e>
    32e6:	8361                	srli	a4,a4,0x18
    32e8:	00174713          	xori	a4,a4,1
    32ec:	8b05                	andi	a4,a4,1
    32ee:	4505                	li	a0,1
    32f0:	41050533          	sub	a0,a0,a6
    32f4:	03800693          	li	a3,56
    32f8:	0ca6c263          	blt	a3,a0,33bc <__divdf3+0x62c>
    32fc:	46fd                	li	a3,31
    32fe:	04a6ca63          	blt	a3,a0,3352 <__divdf3+0x5c2>
    3302:	41e58593          	addi	a1,a1,1054
    3306:	00a7d833          	srl	a6,a5,a0
    330a:	00b416b3          	sll	a3,s0,a1
    330e:	00b797b3          	sll	a5,a5,a1
    3312:	0106e6b3          	or	a3,a3,a6
    3316:	00f037b3          	snez	a5,a5
    331a:	8fd5                	or	a5,a5,a3
    331c:	00a45533          	srl	a0,s0,a0
    3320:	0077f693          	andi	a3,a5,7
    3324:	c2ad                	beqz	a3,3386 <__divdf3+0x5f6>
    3326:	4689                	li	a3,2
    3328:	0014e493          	ori	s1,s1,1
    332c:	04d90c63          	beq	s2,a3,3384 <__divdf3+0x5f4>
    3330:	468d                	li	a3,3
    3332:	04d90563          	beq	s2,a3,337c <__divdf3+0x5ec>
    3336:	04091863          	bnez	s2,3386 <__divdf3+0x5f6>
    333a:	00f7f693          	andi	a3,a5,15
    333e:	4591                	li	a1,4
    3340:	04b68363          	beq	a3,a1,3386 <__divdf3+0x5f6>
    3344:	00478693          	addi	a3,a5,4
    3348:	00f6b7b3          	sltu	a5,a3,a5
    334c:	953e                	add	a0,a0,a5
    334e:	87b6                	mv	a5,a3
    3350:	a81d                	j	3386 <__divdf3+0x5f6>
    3352:	5685                	li	a3,-31
    3354:	410686b3          	sub	a3,a3,a6
    3358:	02000893          	li	a7,32
    335c:	00d456b3          	srl	a3,s0,a3
    3360:	4801                	li	a6,0
    3362:	01150663          	beq	a0,a7,336e <__divdf3+0x5de>
    3366:	43e58593          	addi	a1,a1,1086
    336a:	00b41833          	sll	a6,s0,a1
    336e:	00f867b3          	or	a5,a6,a5
    3372:	00f037b3          	snez	a5,a5
    3376:	8fd5                	or	a5,a5,a3
    3378:	4501                	li	a0,0
    337a:	b75d                	j	3320 <__divdf3+0x590>
    337c:	e609                	bnez	a2,3386 <__divdf3+0x5f6>
    337e:	00878693          	addi	a3,a5,8
    3382:	b7d9                	j	3348 <__divdf3+0x5b8>
    3384:	fe6d                	bnez	a2,337e <__divdf3+0x5ee>
    3386:	008006b7          	lui	a3,0x800
    338a:	8ee9                	and	a3,a3,a0
    338c:	ca81                	beqz	a3,339c <__divdf3+0x60c>
    338e:	0014e493          	ori	s1,s1,1
    3392:	4501                	li	a0,0
    3394:	4781                	li	a5,0
    3396:	e305                	bnez	a4,33b6 <__divdf3+0x626>
    3398:	4705                	li	a4,1
    339a:	b55d                	j	3240 <__divdf3+0x4b0>
    339c:	0037d693          	srli	a3,a5,0x3
    33a0:	01d51793          	slli	a5,a0,0x1d
    33a4:	8fd5                	or	a5,a5,a3
    33a6:	810d                	srli	a0,a0,0x3
    33a8:	e8070ce3          	beqz	a4,3240 <__divdf3+0x4b0>
    33ac:	0014f713          	andi	a4,s1,1
    33b0:	e80708e3          	beqz	a4,3240 <__divdf3+0x4b0>
    33b4:	4701                	li	a4,0
    33b6:	0024e493          	ori	s1,s1,2
    33ba:	b559                	j	3240 <__divdf3+0x4b0>
    33bc:	8fc1                	or	a5,a5,s0
    33be:	cf91                	beqz	a5,33da <__divdf3+0x64a>
    33c0:	4789                	li	a5,2
    33c2:	0014e493          	ori	s1,s1,1
    33c6:	02f90363          	beq	s2,a5,33ec <__divdf3+0x65c>
    33ca:	478d                	li	a5,3
    33cc:	00f90c63          	beq	s2,a5,33e4 <__divdf3+0x654>
    33d0:	4785                	li	a5,1
    33d2:	00091363          	bnez	s2,33d8 <__divdf3+0x648>
    33d6:	4795                	li	a5,5
    33d8:	838d                	srli	a5,a5,0x3
    33da:	0024e493          	ori	s1,s1,2
    33de:	4501                	li	a0,0
    33e0:	4701                	li	a4,0
    33e2:	bdb9                	j	3240 <__divdf3+0x4b0>
    33e4:	47a5                	li	a5,9
    33e6:	da6d                	beqz	a2,33d8 <__divdf3+0x648>
    33e8:	4785                	li	a5,1
    33ea:	b7fd                	j	33d8 <__divdf3+0x648>
    33ec:	47a5                	li	a5,9
    33ee:	f66d                	bnez	a2,33d8 <__divdf3+0x648>
    33f0:	bfe5                	j	33e8 <__divdf3+0x658>
    33f2:	00080537          	lui	a0,0x80
    33f6:	4781                	li	a5,0
    33f8:	7ff00713          	li	a4,2047
    33fc:	4601                	li	a2,0
    33fe:	44c1                	li	s1,16
    3400:	b581                	j	3240 <__divdf3+0x4b0>
    3402:	4501                	li	a0,0
    3404:	4781                	li	a5,0
    3406:	bfe9                	j	33e0 <__divdf3+0x650>
    3408:	00080537          	lui	a0,0x80
    340c:	4781                	li	a5,0
    340e:	7ff00713          	li	a4,2047
    3412:	4601                	li	a2,0
    3414:	b535                	j	3240 <__divdf3+0x4b0>
    3416:	86be                	mv	a3,a5
    3418:	87b6                	mv	a5,a3
    341a:	bb8d                	j	318c <__divdf3+0x3fc>

0000341c <__eqdf2>:
    341c:	882a                	mv	a6,a0
    341e:	002027f3          	frrm	a5
    3422:	001007b7          	lui	a5,0x100
    3426:	0145d893          	srli	a7,a1,0x14
    342a:	17fd                	addi	a5,a5,-1
    342c:	0146d313          	srli	t1,a3,0x14
    3430:	8e2a                	mv	t3,a0
    3432:	7ff8f893          	andi	a7,a7,2047
    3436:	7ff00513          	li	a0,2047
    343a:	00b7f733          	and	a4,a5,a1
    343e:	8eb2                	mv	t4,a2
    3440:	8ff5                	and	a5,a5,a3
    3442:	81fd                	srli	a1,a1,0x1f
    3444:	7ff37313          	andi	t1,t1,2047
    3448:	82fd                	srli	a3,a3,0x1f
    344a:	00a89863          	bne	a7,a0,345a <__eqdf2+0x3e>
    344e:	01076533          	or	a0,a4,a6
    3452:	e531                	bnez	a0,349e <__eqdf2+0x82>
    3454:	07131463          	bne	t1,a7,34bc <__eqdf2+0xa0>
    3458:	a019                	j	345e <__eqdf2+0x42>
    345a:	00a31563          	bne	t1,a0,3464 <__eqdf2+0x48>
    345e:	00c7e533          	or	a0,a5,a2
    3462:	e515                	bnez	a0,348e <__eqdf2+0x72>
    3464:	4505                	li	a0,1
    3466:	04689c63          	bne	a7,t1,34be <__eqdf2+0xa2>
    346a:	04f71a63          	bne	a4,a5,34be <__eqdf2+0xa2>
    346e:	05de1863          	bne	t3,t4,34be <__eqdf2+0xa2>
    3472:	00d58c63          	beq	a1,a3,348a <__eqdf2+0x6e>
    3476:	04089463          	bnez	a7,34be <__eqdf2+0xa2>
    347a:	01076733          	or	a4,a4,a6
    347e:	00e03533          	snez	a0,a4
    3482:	8082                	ret
    3484:	00186073          	csrsi	fflags,16
    3488:	a815                	j	34bc <__eqdf2+0xa0>
    348a:	4501                	li	a0,0
    348c:	8082                	ret
    348e:	7ff00693          	li	a3,2047
    3492:	02d89163          	bne	a7,a3,34b4 <__eqdf2+0x98>
    3496:	01076833          	or	a6,a4,a6
    349a:	00080d63          	beqz	a6,34b4 <__eqdf2+0x98>
    349e:	000806b7          	lui	a3,0x80
    34a2:	8f75                	and	a4,a4,a3
    34a4:	d365                	beqz	a4,3484 <__eqdf2+0x68>
    34a6:	7ff00713          	li	a4,2047
    34aa:	4505                	li	a0,1
    34ac:	00e31963          	bne	t1,a4,34be <__eqdf2+0xa2>
    34b0:	8e5d                	or	a2,a2,a5
    34b2:	c611                	beqz	a2,34be <__eqdf2+0xa2>
    34b4:	00080737          	lui	a4,0x80
    34b8:	8ff9                	and	a5,a5,a4
    34ba:	d7e9                	beqz	a5,3484 <__eqdf2+0x68>
    34bc:	4505                	li	a0,1
    34be:	8082                	ret

000034c0 <__gedf2>:
    34c0:	87aa                	mv	a5,a0
    34c2:	00202773          	frrm	a4
    34c6:	00100737          	lui	a4,0x100
    34ca:	177d                	addi	a4,a4,-1
    34cc:	0145d813          	srli	a6,a1,0x14
    34d0:	00b778b3          	and	a7,a4,a1
    34d4:	832a                	mv	t1,a0
    34d6:	7ff87813          	andi	a6,a6,2047
    34da:	01f5d513          	srli	a0,a1,0x1f
    34de:	7ff00e93          	li	t4,2047
    34e2:	0146d593          	srli	a1,a3,0x14
    34e6:	8f75                	and	a4,a4,a3
    34e8:	8e32                	mv	t3,a2
    34ea:	7ff5f593          	andi	a1,a1,2047
    34ee:	82fd                	srli	a3,a3,0x1f
    34f0:	01d81a63          	bne	a6,t4,3504 <__gedf2+0x44>
    34f4:	00f8eeb3          	or	t4,a7,a5
    34f8:	060e8963          	beqz	t4,356a <__gedf2+0xaa>
    34fc:	00186073          	csrsi	fflags,16
    3500:	5579                	li	a0,-2
    3502:	8082                	ret
    3504:	01d59663          	bne	a1,t4,3510 <__gedf2+0x50>
    3508:	00c76eb3          	or	t4,a4,a2
    350c:	fe0e98e3          	bnez	t4,34fc <__gedf2+0x3c>
    3510:	04081f63          	bnez	a6,356e <__gedf2+0xae>
    3514:	00f8e7b3          	or	a5,a7,a5
    3518:	0017b793          	seqz	a5,a5
    351c:	e199                	bnez	a1,3522 <__gedf2+0x62>
    351e:	8e59                	or	a2,a2,a4
    3520:	c221                	beqz	a2,3560 <__gedf2+0xa0>
    3522:	00079a63          	bnez	a5,3536 <__gedf2+0x76>
    3526:	00d51463          	bne	a0,a3,352e <__gedf2+0x6e>
    352a:	0105da63          	bge	a1,a6,353e <__gedf2+0x7e>
    352e:	02050763          	beqz	a0,355c <__gedf2+0x9c>
    3532:	557d                	li	a0,-1
    3534:	8082                	ret
    3536:	557d                	li	a0,-1
    3538:	c699                	beqz	a3,3546 <__gedf2+0x86>
    353a:	8536                	mv	a0,a3
    353c:	8082                	ret
    353e:	00b85563          	bge	a6,a1,3548 <__gedf2+0x88>
    3542:	fe0508e3          	beqz	a0,3532 <__gedf2+0x72>
    3546:	8082                	ret
    3548:	ff1763e3          	bltu	a4,a7,352e <__gedf2+0x6e>
    354c:	00e89c63          	bne	a7,a4,3564 <__gedf2+0xa4>
    3550:	fc6e6fe3          	bltu	t3,t1,352e <__gedf2+0x6e>
    3554:	ffc367e3          	bltu	t1,t3,3542 <__gedf2+0x82>
    3558:	4501                	li	a0,0
    355a:	8082                	ret
    355c:	4505                	li	a0,1
    355e:	8082                	ret
    3560:	ffe5                	bnez	a5,3558 <__gedf2+0x98>
    3562:	b7f1                	j	352e <__gedf2+0x6e>
    3564:	fce8efe3          	bltu	a7,a4,3542 <__gedf2+0x82>
    3568:	bfc5                	j	3558 <__gedf2+0x98>
    356a:	f9058fe3          	beq	a1,a6,3508 <__gedf2+0x48>
    356e:	fa059ce3          	bnez	a1,3526 <__gedf2+0x66>
    3572:	4781                	li	a5,0
    3574:	b76d                	j	351e <__gedf2+0x5e>

00003576 <__ledf2>:
    3576:	87aa                	mv	a5,a0
    3578:	00202773          	frrm	a4
    357c:	00100737          	lui	a4,0x100
    3580:	177d                	addi	a4,a4,-1
    3582:	0145d813          	srli	a6,a1,0x14
    3586:	00b778b3          	and	a7,a4,a1
    358a:	832a                	mv	t1,a0
    358c:	7ff87813          	andi	a6,a6,2047
    3590:	01f5d513          	srli	a0,a1,0x1f
    3594:	7ff00e93          	li	t4,2047
    3598:	0146d593          	srli	a1,a3,0x14
    359c:	8f75                	and	a4,a4,a3
    359e:	8e32                	mv	t3,a2
    35a0:	7ff5f593          	andi	a1,a1,2047
    35a4:	82fd                	srli	a3,a3,0x1f
    35a6:	01d81a63          	bne	a6,t4,35ba <__ledf2+0x44>
    35aa:	00f8eeb3          	or	t4,a7,a5
    35ae:	060e8963          	beqz	t4,3620 <__ledf2+0xaa>
    35b2:	00186073          	csrsi	fflags,16
    35b6:	4509                	li	a0,2
    35b8:	8082                	ret
    35ba:	01d59663          	bne	a1,t4,35c6 <__ledf2+0x50>
    35be:	00c76eb3          	or	t4,a4,a2
    35c2:	fe0e98e3          	bnez	t4,35b2 <__ledf2+0x3c>
    35c6:	04081f63          	bnez	a6,3624 <__ledf2+0xae>
    35ca:	00f8e7b3          	or	a5,a7,a5
    35ce:	0017b793          	seqz	a5,a5
    35d2:	e199                	bnez	a1,35d8 <__ledf2+0x62>
    35d4:	8e59                	or	a2,a2,a4
    35d6:	c221                	beqz	a2,3616 <__ledf2+0xa0>
    35d8:	00079a63          	bnez	a5,35ec <__ledf2+0x76>
    35dc:	00d51463          	bne	a0,a3,35e4 <__ledf2+0x6e>
    35e0:	0105da63          	bge	a1,a6,35f4 <__ledf2+0x7e>
    35e4:	02050763          	beqz	a0,3612 <__ledf2+0x9c>
    35e8:	557d                	li	a0,-1
    35ea:	8082                	ret
    35ec:	557d                	li	a0,-1
    35ee:	c699                	beqz	a3,35fc <__ledf2+0x86>
    35f0:	8536                	mv	a0,a3
    35f2:	8082                	ret
    35f4:	00b85563          	bge	a6,a1,35fe <__ledf2+0x88>
    35f8:	fe0508e3          	beqz	a0,35e8 <__ledf2+0x72>
    35fc:	8082                	ret
    35fe:	ff1763e3          	bltu	a4,a7,35e4 <__ledf2+0x6e>
    3602:	00e89c63          	bne	a7,a4,361a <__ledf2+0xa4>
    3606:	fc6e6fe3          	bltu	t3,t1,35e4 <__ledf2+0x6e>
    360a:	ffc367e3          	bltu	t1,t3,35f8 <__ledf2+0x82>
    360e:	4501                	li	a0,0
    3610:	8082                	ret
    3612:	4505                	li	a0,1
    3614:	8082                	ret
    3616:	ffe5                	bnez	a5,360e <__ledf2+0x98>
    3618:	b7f1                	j	35e4 <__ledf2+0x6e>
    361a:	fce8efe3          	bltu	a7,a4,35f8 <__ledf2+0x82>
    361e:	bfc5                	j	360e <__ledf2+0x98>
    3620:	f9058fe3          	beq	a1,a6,35be <__ledf2+0x48>
    3624:	fa059ce3          	bnez	a1,35dc <__ledf2+0x66>
    3628:	4781                	li	a5,0
    362a:	b76d                	j	35d4 <__ledf2+0x5e>

0000362c <__muldf3>:
    362c:	7179                	addi	sp,sp,-48
    362e:	d422                	sw	s0,40(sp)
    3630:	ca56                	sw	s5,20(sp)
    3632:	c266                	sw	s9,4(sp)
    3634:	d606                	sw	ra,44(sp)
    3636:	d226                	sw	s1,36(sp)
    3638:	d04a                	sw	s2,32(sp)
    363a:	ce4e                	sw	s3,28(sp)
    363c:	cc52                	sw	s4,24(sp)
    363e:	c85a                	sw	s6,16(sp)
    3640:	c65e                	sw	s7,12(sp)
    3642:	c462                	sw	s8,8(sp)
    3644:	842a                	mv	s0,a0
    3646:	8cb2                	mv	s9,a2
    3648:	8ab6                	mv	s5,a3
    364a:	00202973          	frrm	s2
    364e:	0145db93          	srli	s7,a1,0x14
    3652:	00c59993          	slli	s3,a1,0xc
    3656:	7ffbfb93          	andi	s7,s7,2047
    365a:	00c9d993          	srli	s3,s3,0xc
    365e:	01f5db13          	srli	s6,a1,0x1f
    3662:	020b8663          	beqz	s7,368e <__muldf3+0x62>
    3666:	7ff00793          	li	a5,2047
    366a:	06fb8b63          	beq	s7,a5,36e0 <__muldf3+0xb4>
    366e:	01d55793          	srli	a5,a0,0x1d
    3672:	098e                	slli	s3,s3,0x3
    3674:	0137e9b3          	or	s3,a5,s3
    3678:	008007b7          	lui	a5,0x800
    367c:	00f9e9b3          	or	s3,s3,a5
    3680:	00351a13          	slli	s4,a0,0x3
    3684:	c01b8b93          	addi	s7,s7,-1023
    3688:	4c01                	li	s8,0
    368a:	4481                	li	s1,0
    368c:	a0bd                	j	36fa <__muldf3+0xce>
    368e:	00a9e7b3          	or	a5,s3,a0
    3692:	c7e1                	beqz	a5,375a <__muldf3+0x12e>
    3694:	02098b63          	beqz	s3,36ca <__muldf3+0x9e>
    3698:	854e                	mv	a0,s3
    369a:	010010ef          	jal	ra,46aa <__clzsi2>
    369e:	ff550713          	addi	a4,a0,-11 # 7fff5 <_global_impure_ptr+0x7a835>
    36a2:	47f1                	li	a5,28
    36a4:	02e7c863          	blt	a5,a4,36d4 <__muldf3+0xa8>
    36a8:	47f5                	li	a5,29
    36aa:	ff850a13          	addi	s4,a0,-8
    36ae:	8f99                	sub	a5,a5,a4
    36b0:	014999b3          	sll	s3,s3,s4
    36b4:	00f457b3          	srl	a5,s0,a5
    36b8:	0137e9b3          	or	s3,a5,s3
    36bc:	01441a33          	sll	s4,s0,s4
    36c0:	c0d00b93          	li	s7,-1011
    36c4:	40ab8bb3          	sub	s7,s7,a0
    36c8:	b7c1                	j	3688 <__muldf3+0x5c>
    36ca:	7e1000ef          	jal	ra,46aa <__clzsi2>
    36ce:	02050513          	addi	a0,a0,32
    36d2:	b7f1                	j	369e <__muldf3+0x72>
    36d4:	fd850993          	addi	s3,a0,-40
    36d8:	013419b3          	sll	s3,s0,s3
    36dc:	4a01                	li	s4,0
    36de:	b7cd                	j	36c0 <__muldf3+0x94>
    36e0:	00a9e433          	or	s0,s3,a0
    36e4:	c041                	beqz	s0,3764 <__muldf3+0x138>
    36e6:	000807b7          	lui	a5,0x80
    36ea:	00f9f7b3          	and	a5,s3,a5
    36ee:	8a2a                	mv	s4,a0
    36f0:	7ff00b93          	li	s7,2047
    36f4:	4c0d                	li	s8,3
    36f6:	44c1                	li	s1,16
    36f8:	fbc9                	bnez	a5,368a <__muldf3+0x5e>
    36fa:	014ad513          	srli	a0,s5,0x14
    36fe:	00ca9413          	slli	s0,s5,0xc
    3702:	7ff57513          	andi	a0,a0,2047
    3706:	87e6                	mv	a5,s9
    3708:	8031                	srli	s0,s0,0xc
    370a:	01fada93          	srli	s5,s5,0x1f
    370e:	c12d                	beqz	a0,3770 <__muldf3+0x144>
    3710:	7ff00713          	li	a4,2047
    3714:	0ae50763          	beq	a0,a4,37c2 <__muldf3+0x196>
    3718:	01dcd793          	srli	a5,s9,0x1d
    371c:	040e                	slli	s0,s0,0x3
    371e:	8c5d                	or	s0,s0,a5
    3720:	008007b7          	lui	a5,0x800
    3724:	8c5d                	or	s0,s0,a5
    3726:	c0150513          	addi	a0,a0,-1023
    372a:	003c9793          	slli	a5,s9,0x3
    372e:	4701                	li	a4,0
    3730:	002c1693          	slli	a3,s8,0x2
    3734:	8ed9                	or	a3,a3,a4
    3736:	9baa                	add	s7,s7,a0
    3738:	16fd                	addi	a3,a3,-1
    373a:	4639                	li	a2,14
    373c:	015b45b3          	xor	a1,s6,s5
    3740:	001b8513          	addi	a0,s7,1
    3744:	0ed66b63          	bltu	a2,a3,383a <__muldf3+0x20e>
    3748:	00002617          	auipc	a2,0x2
    374c:	ea460613          	addi	a2,a2,-348 # 55ec <pow10.0+0x8c>
    3750:	068a                	slli	a3,a3,0x2
    3752:	96b2                	add	a3,a3,a2
    3754:	4294                	lw	a3,0(a3)
    3756:	96b2                	add	a3,a3,a2
    3758:	8682                	jr	a3
    375a:	4981                	li	s3,0
    375c:	4a01                	li	s4,0
    375e:	4b81                	li	s7,0
    3760:	4c05                	li	s8,1
    3762:	b725                	j	368a <__muldf3+0x5e>
    3764:	4981                	li	s3,0
    3766:	4a01                	li	s4,0
    3768:	7ff00b93          	li	s7,2047
    376c:	4c09                	li	s8,2
    376e:	bf31                	j	368a <__muldf3+0x5e>
    3770:	019467b3          	or	a5,s0,s9
    3774:	c3bd                	beqz	a5,37da <__muldf3+0x1ae>
    3776:	02040a63          	beqz	s0,37aa <__muldf3+0x17e>
    377a:	8522                	mv	a0,s0
    377c:	72f000ef          	jal	ra,46aa <__clzsi2>
    3780:	ff550693          	addi	a3,a0,-11
    3784:	47f1                	li	a5,28
    3786:	02d7c863          	blt	a5,a3,37b6 <__muldf3+0x18a>
    378a:	4775                	li	a4,29
    378c:	ff850793          	addi	a5,a0,-8
    3790:	8f15                	sub	a4,a4,a3
    3792:	00f41433          	sll	s0,s0,a5
    3796:	00ecd733          	srl	a4,s9,a4
    379a:	8c59                	or	s0,s0,a4
    379c:	00fc97b3          	sll	a5,s9,a5
    37a0:	c0d00713          	li	a4,-1011
    37a4:	40a70533          	sub	a0,a4,a0
    37a8:	b759                	j	372e <__muldf3+0x102>
    37aa:	8566                	mv	a0,s9
    37ac:	6ff000ef          	jal	ra,46aa <__clzsi2>
    37b0:	02050513          	addi	a0,a0,32
    37b4:	b7f1                	j	3780 <__muldf3+0x154>
    37b6:	fd850413          	addi	s0,a0,-40
    37ba:	008c9433          	sll	s0,s9,s0
    37be:	4781                	li	a5,0
    37c0:	b7c5                	j	37a0 <__muldf3+0x174>
    37c2:	01946633          	or	a2,s0,s9
    37c6:	ce19                	beqz	a2,37e4 <__muldf3+0x1b8>
    37c8:	00080737          	lui	a4,0x80
    37cc:	8f61                	and	a4,a4,s0
    37ce:	7ff00513          	li	a0,2047
    37d2:	ef19                	bnez	a4,37f0 <__muldf3+0x1c4>
    37d4:	470d                	li	a4,3
    37d6:	44c1                	li	s1,16
    37d8:	bfa1                	j	3730 <__muldf3+0x104>
    37da:	4401                	li	s0,0
    37dc:	4781                	li	a5,0
    37de:	4501                	li	a0,0
    37e0:	4705                	li	a4,1
    37e2:	b7b9                	j	3730 <__muldf3+0x104>
    37e4:	4401                	li	s0,0
    37e6:	4781                	li	a5,0
    37e8:	7ff00513          	li	a0,2047
    37ec:	4709                	li	a4,2
    37ee:	b789                	j	3730 <__muldf3+0x104>
    37f0:	470d                	li	a4,3
    37f2:	bf3d                	j	3730 <__muldf3+0x104>
    37f4:	00080437          	lui	s0,0x80
    37f8:	4781                	li	a5,0
    37fa:	7ff00713          	li	a4,2047
    37fe:	4581                	li	a1,0
    3800:	44c1                	li	s1,16
    3802:	0752                	slli	a4,a4,0x14
    3804:	7ff006b7          	lui	a3,0x7ff00
    3808:	0432                	slli	s0,s0,0xc
    380a:	8f75                	and	a4,a4,a3
    380c:	8031                	srli	s0,s0,0xc
    380e:	05fe                	slli	a1,a1,0x1f
    3810:	8c59                	or	s0,s0,a4
    3812:	00b46733          	or	a4,s0,a1
    3816:	853e                	mv	a0,a5
    3818:	85ba                	mv	a1,a4
    381a:	c099                	beqz	s1,3820 <__muldf3+0x1f4>
    381c:	0014a073          	csrs	fflags,s1
    3820:	50b2                	lw	ra,44(sp)
    3822:	5422                	lw	s0,40(sp)
    3824:	5492                	lw	s1,36(sp)
    3826:	5902                	lw	s2,32(sp)
    3828:	49f2                	lw	s3,28(sp)
    382a:	4a62                	lw	s4,24(sp)
    382c:	4ad2                	lw	s5,20(sp)
    382e:	4b42                	lw	s6,16(sp)
    3830:	4bb2                	lw	s7,12(sp)
    3832:	4c22                	lw	s8,8(sp)
    3834:	4c92                	lw	s9,4(sp)
    3836:	6145                	addi	sp,sp,48
    3838:	8082                	ret
    383a:	6ec1                	lui	t4,0x10
    383c:	fffe8e13          	addi	t3,t4,-1 # ffff <_global_impure_ptr+0xa83f>
    3840:	010a5713          	srli	a4,s4,0x10
    3844:	0107d893          	srli	a7,a5,0x10
    3848:	01ca7a33          	and	s4,s4,t3
    384c:	01c7f7b3          	and	a5,a5,t3
    3850:	03488833          	mul	a6,a7,s4
    3854:	034786b3          	mul	a3,a5,s4
    3858:	02f70f33          	mul	t5,a4,a5
    385c:	01e80333          	add	t1,a6,t5
    3860:	0106d813          	srli	a6,a3,0x10
    3864:	981a                	add	a6,a6,t1
    3866:	03170633          	mul	a2,a4,a7
    386a:	01e87363          	bgeu	a6,t5,3870 <__muldf3+0x244>
    386e:	9676                	add	a2,a2,t4
    3870:	01085f93          	srli	t6,a6,0x10
    3874:	01c87833          	and	a6,a6,t3
    3878:	01c6f6b3          	and	a3,a3,t3
    387c:	01045e93          	srli	t4,s0,0x10
    3880:	01c47e33          	and	t3,s0,t3
    3884:	0842                	slli	a6,a6,0x10
    3886:	9836                	add	a6,a6,a3
    3888:	03c70f33          	mul	t5,a4,t3
    388c:	03ca06b3          	mul	a3,s4,t3
    3890:	034e8a33          	mul	s4,t4,s4
    3894:	01ea0333          	add	t1,s4,t5
    3898:	0106da13          	srli	s4,a3,0x10
    389c:	9a1a                	add	s4,s4,t1
    389e:	03d70733          	mul	a4,a4,t4
    38a2:	01ea7463          	bgeu	s4,t5,38aa <__muldf3+0x27e>
    38a6:	6341                	lui	t1,0x10
    38a8:	971a                	add	a4,a4,t1
    38aa:	010a5313          	srli	t1,s4,0x10
    38ae:	933a                	add	t1,t1,a4
    38b0:	6741                	lui	a4,0x10
    38b2:	fff70f13          	addi	t5,a4,-1 # ffff <_global_impure_ptr+0xa83f>
    38b6:	01ea7a33          	and	s4,s4,t5
    38ba:	01e6f6b3          	and	a3,a3,t5
    38be:	0109d413          	srli	s0,s3,0x10
    38c2:	0a42                	slli	s4,s4,0x10
    38c4:	01e9f9b3          	and	s3,s3,t5
    38c8:	03378f33          	mul	t5,a5,s3
    38cc:	9a36                	add	s4,s4,a3
    38ce:	9fd2                	add	t6,t6,s4
    38d0:	033886b3          	mul	a3,a7,s3
    38d4:	02f407b3          	mul	a5,s0,a5
    38d8:	028882b3          	mul	t0,a7,s0
    38dc:	00f688b3          	add	a7,a3,a5
    38e0:	010f5693          	srli	a3,t5,0x10
    38e4:	96c6                	add	a3,a3,a7
    38e6:	00f6f363          	bgeu	a3,a5,38ec <__muldf3+0x2c0>
    38ea:	92ba                	add	t0,t0,a4
    38ec:	6741                	lui	a4,0x10
    38ee:	fff70793          	addi	a5,a4,-1 # ffff <_global_impure_ptr+0xa83f>
    38f2:	00ff7f33          	and	t5,t5,a5
    38f6:	0106d893          	srli	a7,a3,0x10
    38fa:	8efd                	and	a3,a3,a5
    38fc:	03c987b3          	mul	a5,s3,t3
    3900:	06c2                	slli	a3,a3,0x10
    3902:	96fa                	add	a3,a3,t5
    3904:	9896                	add	a7,a7,t0
    3906:	03c40e33          	mul	t3,s0,t3
    390a:	033e89b3          	mul	s3,t4,s3
    390e:	028e8f33          	mul	t5,t4,s0
    3912:	99f2                	add	s3,s3,t3
    3914:	0107d413          	srli	s0,a5,0x10
    3918:	99a2                	add	s3,s3,s0
    391a:	01c9f363          	bgeu	s3,t3,3920 <__muldf3+0x2f4>
    391e:	9f3a                	add	t5,t5,a4
    3920:	6e41                	lui	t3,0x10
    3922:	1e7d                	addi	t3,t3,-1
    3924:	01c9f733          	and	a4,s3,t3
    3928:	01c7f7b3          	and	a5,a5,t3
    392c:	0742                	slli	a4,a4,0x10
    392e:	967e                	add	a2,a2,t6
    3930:	973e                	add	a4,a4,a5
    3932:	01463a33          	sltu	s4,a2,s4
    3936:	971a                	add	a4,a4,t1
    3938:	01470433          	add	s0,a4,s4
    393c:	9636                	add	a2,a2,a3
    393e:	00d636b3          	sltu	a3,a2,a3
    3942:	01140e33          	add	t3,s0,a7
    3946:	00de0eb3          	add	t4,t3,a3
    394a:	00673733          	sltu	a4,a4,t1
    394e:	01443433          	sltu	s0,s0,s4
    3952:	8c59                	or	s0,s0,a4
    3954:	00deb6b3          	sltu	a3,t4,a3
    3958:	0109d993          	srli	s3,s3,0x10
    395c:	011e38b3          	sltu	a7,t3,a7
    3960:	944e                	add	s0,s0,s3
    3962:	00d8e6b3          	or	a3,a7,a3
    3966:	9436                	add	s0,s0,a3
    3968:	947a                	add	s0,s0,t5
    396a:	017ed793          	srli	a5,t4,0x17
    396e:	0426                	slli	s0,s0,0x9
    3970:	8c5d                	or	s0,s0,a5
    3972:	00961793          	slli	a5,a2,0x9
    3976:	0107e7b3          	or	a5,a5,a6
    397a:	00f037b3          	snez	a5,a5
    397e:	825d                	srli	a2,a2,0x17
    3980:	01000737          	lui	a4,0x1000
    3984:	8fd1                	or	a5,a5,a2
    3986:	0ea6                	slli	t4,t4,0x9
    3988:	8f61                	and	a4,a4,s0
    398a:	01d7e7b3          	or	a5,a5,t4
    398e:	cb25                	beqz	a4,39fe <__muldf3+0x3d2>
    3990:	0017d713          	srli	a4,a5,0x1
    3994:	8b85                	andi	a5,a5,1
    3996:	8fd9                	or	a5,a5,a4
    3998:	01f41713          	slli	a4,s0,0x1f
    399c:	8fd9                	or	a5,a5,a4
    399e:	8005                	srli	s0,s0,0x1
    39a0:	3ff50813          	addi	a6,a0,1023
    39a4:	0d005063          	blez	a6,3a64 <__muldf3+0x438>
    39a8:	0077f713          	andi	a4,a5,7
    39ac:	c325                	beqz	a4,3a0c <__muldf3+0x3e0>
    39ae:	4709                	li	a4,2
    39b0:	0014e493          	ori	s1,s1,1
    39b4:	04e90b63          	beq	s2,a4,3a0a <__muldf3+0x3de>
    39b8:	470d                	li	a4,3
    39ba:	04e90463          	beq	s2,a4,3a02 <__muldf3+0x3d6>
    39be:	04091763          	bnez	s2,3a0c <__muldf3+0x3e0>
    39c2:	00f7f713          	andi	a4,a5,15
    39c6:	4691                	li	a3,4
    39c8:	04d70263          	beq	a4,a3,3a0c <__muldf3+0x3e0>
    39cc:	00478713          	addi	a4,a5,4 # 800004 <_global_impure_ptr+0x7fa844>
    39d0:	00f737b3          	sltu	a5,a4,a5
    39d4:	943e                	add	s0,s0,a5
    39d6:	87ba                	mv	a5,a4
    39d8:	a815                	j	3a0c <__muldf3+0x3e0>
    39da:	85da                	mv	a1,s6
    39dc:	844e                	mv	s0,s3
    39de:	87d2                	mv	a5,s4
    39e0:	8762                	mv	a4,s8
    39e2:	4689                	li	a3,2
    39e4:	1cd70763          	beq	a4,a3,3bb2 <__muldf3+0x586>
    39e8:	468d                	li	a3,3
    39ea:	1cd70963          	beq	a4,a3,3bbc <__muldf3+0x590>
    39ee:	4685                	li	a3,1
    39f0:	fad718e3          	bne	a4,a3,39a0 <__muldf3+0x374>
    39f4:	4401                	li	s0,0
    39f6:	4781                	li	a5,0
    39f8:	a265                	j	3ba0 <__muldf3+0x574>
    39fa:	85d6                	mv	a1,s5
    39fc:	b7dd                	j	39e2 <__muldf3+0x3b6>
    39fe:	855e                	mv	a0,s7
    3a00:	b745                	j	39a0 <__muldf3+0x374>
    3a02:	e589                	bnez	a1,3a0c <__muldf3+0x3e0>
    3a04:	00878713          	addi	a4,a5,8
    3a08:	b7e1                	j	39d0 <__muldf3+0x3a4>
    3a0a:	fded                	bnez	a1,3a04 <__muldf3+0x3d8>
    3a0c:	01000737          	lui	a4,0x1000
    3a10:	8f61                	and	a4,a4,s0
    3a12:	c719                	beqz	a4,3a20 <__muldf3+0x3f4>
    3a14:	ff000737          	lui	a4,0xff000
    3a18:	177d                	addi	a4,a4,-1
    3a1a:	8c79                	and	s0,s0,a4
    3a1c:	40050813          	addi	a6,a0,1024
    3a20:	7fe00713          	li	a4,2046
    3a24:	01074a63          	blt	a4,a6,3a38 <__muldf3+0x40c>
    3a28:	0037d713          	srli	a4,a5,0x3
    3a2c:	01d41793          	slli	a5,s0,0x1d
    3a30:	8fd9                	or	a5,a5,a4
    3a32:	800d                	srli	s0,s0,0x3
    3a34:	8742                	mv	a4,a6
    3a36:	b3f1                	j	3802 <__muldf3+0x1d6>
    3a38:	4789                	li	a5,2
    3a3a:	02f90363          	beq	s2,a5,3a60 <__muldf3+0x434>
    3a3e:	478d                	li	a5,3
    3a40:	00f90863          	beq	s2,a5,3a50 <__muldf3+0x424>
    3a44:	00091763          	bnez	s2,3a52 <__muldf3+0x426>
    3a48:	4781                	li	a5,0
    3a4a:	7ff00713          	li	a4,2047
    3a4e:	a029                	j	3a58 <__muldf3+0x42c>
    3a50:	dde5                	beqz	a1,3a48 <__muldf3+0x41c>
    3a52:	57fd                	li	a5,-1
    3a54:	7fe00713          	li	a4,2046
    3a58:	0054e493          	ori	s1,s1,5
    3a5c:	843e                	mv	s0,a5
    3a5e:	b355                	j	3802 <__muldf3+0x1d6>
    3a60:	f5e5                	bnez	a1,3a48 <__muldf3+0x41c>
    3a62:	bfc5                	j	3a52 <__muldf3+0x426>
    3a64:	4705                	li	a4,1
    3a66:	04081463          	bnez	a6,3aae <__muldf3+0x482>
    3a6a:	0077f693          	andi	a3,a5,7
    3a6e:	8722                	mv	a4,s0
    3a70:	ca9d                	beqz	a3,3aa6 <__muldf3+0x47a>
    3a72:	4689                	li	a3,2
    3a74:	0014e493          	ori	s1,s1,1
    3a78:	02d90663          	beq	s2,a3,3aa4 <__muldf3+0x478>
    3a7c:	468d                	li	a3,3
    3a7e:	00d90f63          	beq	s2,a3,3a9c <__muldf3+0x470>
    3a82:	02091263          	bnez	s2,3aa6 <__muldf3+0x47a>
    3a86:	00f7f693          	andi	a3,a5,15
    3a8a:	4611                	li	a2,4
    3a8c:	00c68d63          	beq	a3,a2,3aa6 <__muldf3+0x47a>
    3a90:	ffc7b713          	sltiu	a4,a5,-4
    3a94:	00174713          	xori	a4,a4,1
    3a98:	9722                	add	a4,a4,s0
    3a9a:	a031                	j	3aa6 <__muldf3+0x47a>
    3a9c:	e589                	bnez	a1,3aa6 <__muldf3+0x47a>
    3a9e:	ff87b713          	sltiu	a4,a5,-8
    3aa2:	bfcd                	j	3a94 <__muldf3+0x468>
    3aa4:	fded                	bnez	a1,3a9e <__muldf3+0x472>
    3aa6:	8361                	srli	a4,a4,0x18
    3aa8:	00174713          	xori	a4,a4,1
    3aac:	8b05                	andi	a4,a4,1
    3aae:	4685                	li	a3,1
    3ab0:	410686b3          	sub	a3,a3,a6
    3ab4:	03800613          	li	a2,56
    3ab8:	0cd64263          	blt	a2,a3,3b7c <__muldf3+0x550>
    3abc:	467d                	li	a2,31
    3abe:	04d64a63          	blt	a2,a3,3b12 <__muldf3+0x4e6>
    3ac2:	41e50513          	addi	a0,a0,1054
    3ac6:	00a41633          	sll	a2,s0,a0
    3aca:	00d7d833          	srl	a6,a5,a3
    3ace:	00a797b3          	sll	a5,a5,a0
    3ad2:	01066633          	or	a2,a2,a6
    3ad6:	00f037b3          	snez	a5,a5
    3ada:	8fd1                	or	a5,a5,a2
    3adc:	00d45433          	srl	s0,s0,a3
    3ae0:	0077f693          	andi	a3,a5,7
    3ae4:	c2ad                	beqz	a3,3b46 <__muldf3+0x51a>
    3ae6:	4689                	li	a3,2
    3ae8:	0014e493          	ori	s1,s1,1
    3aec:	04d90c63          	beq	s2,a3,3b44 <__muldf3+0x518>
    3af0:	468d                	li	a3,3
    3af2:	04d90563          	beq	s2,a3,3b3c <__muldf3+0x510>
    3af6:	04091863          	bnez	s2,3b46 <__muldf3+0x51a>
    3afa:	00f7f693          	andi	a3,a5,15
    3afe:	4611                	li	a2,4
    3b00:	04c68363          	beq	a3,a2,3b46 <__muldf3+0x51a>
    3b04:	00478693          	addi	a3,a5,4
    3b08:	00f6b7b3          	sltu	a5,a3,a5
    3b0c:	943e                	add	s0,s0,a5
    3b0e:	87b6                	mv	a5,a3
    3b10:	a81d                	j	3b46 <__muldf3+0x51a>
    3b12:	5605                	li	a2,-31
    3b14:	41060633          	sub	a2,a2,a6
    3b18:	02000893          	li	a7,32
    3b1c:	00c45633          	srl	a2,s0,a2
    3b20:	4801                	li	a6,0
    3b22:	01168663          	beq	a3,a7,3b2e <__muldf3+0x502>
    3b26:	43e50513          	addi	a0,a0,1086
    3b2a:	00a41833          	sll	a6,s0,a0
    3b2e:	00f867b3          	or	a5,a6,a5
    3b32:	00f037b3          	snez	a5,a5
    3b36:	8fd1                	or	a5,a5,a2
    3b38:	4401                	li	s0,0
    3b3a:	b75d                	j	3ae0 <__muldf3+0x4b4>
    3b3c:	e589                	bnez	a1,3b46 <__muldf3+0x51a>
    3b3e:	00878693          	addi	a3,a5,8
    3b42:	b7d9                	j	3b08 <__muldf3+0x4dc>
    3b44:	fded                	bnez	a1,3b3e <__muldf3+0x512>
    3b46:	008006b7          	lui	a3,0x800
    3b4a:	8ee1                	and	a3,a3,s0
    3b4c:	ca81                	beqz	a3,3b5c <__muldf3+0x530>
    3b4e:	0014e493          	ori	s1,s1,1
    3b52:	4401                	li	s0,0
    3b54:	4781                	li	a5,0
    3b56:	e305                	bnez	a4,3b76 <__muldf3+0x54a>
    3b58:	4705                	li	a4,1
    3b5a:	b165                	j	3802 <__muldf3+0x1d6>
    3b5c:	0037d693          	srli	a3,a5,0x3
    3b60:	01d41793          	slli	a5,s0,0x1d
    3b64:	8fd5                	or	a5,a5,a3
    3b66:	800d                	srli	s0,s0,0x3
    3b68:	c8070de3          	beqz	a4,3802 <__muldf3+0x1d6>
    3b6c:	0014f713          	andi	a4,s1,1
    3b70:	c80709e3          	beqz	a4,3802 <__muldf3+0x1d6>
    3b74:	4701                	li	a4,0
    3b76:	0024e493          	ori	s1,s1,2
    3b7a:	b161                	j	3802 <__muldf3+0x1d6>
    3b7c:	8fc1                	or	a5,a5,s0
    3b7e:	cf91                	beqz	a5,3b9a <__muldf3+0x56e>
    3b80:	4789                	li	a5,2
    3b82:	0014e493          	ori	s1,s1,1
    3b86:	02f90363          	beq	s2,a5,3bac <__muldf3+0x580>
    3b8a:	478d                	li	a5,3
    3b8c:	00f90c63          	beq	s2,a5,3ba4 <__muldf3+0x578>
    3b90:	4785                	li	a5,1
    3b92:	00091363          	bnez	s2,3b98 <__muldf3+0x56c>
    3b96:	4795                	li	a5,5
    3b98:	838d                	srli	a5,a5,0x3
    3b9a:	0024e493          	ori	s1,s1,2
    3b9e:	4401                	li	s0,0
    3ba0:	4701                	li	a4,0
    3ba2:	b185                	j	3802 <__muldf3+0x1d6>
    3ba4:	47a5                	li	a5,9
    3ba6:	d9ed                	beqz	a1,3b98 <__muldf3+0x56c>
    3ba8:	4785                	li	a5,1
    3baa:	b7fd                	j	3b98 <__muldf3+0x56c>
    3bac:	47a5                	li	a5,9
    3bae:	f5ed                	bnez	a1,3b98 <__muldf3+0x56c>
    3bb0:	bfe5                	j	3ba8 <__muldf3+0x57c>
    3bb2:	4401                	li	s0,0
    3bb4:	4781                	li	a5,0
    3bb6:	7ff00713          	li	a4,2047
    3bba:	b1a1                	j	3802 <__muldf3+0x1d6>
    3bbc:	00080437          	lui	s0,0x80
    3bc0:	4781                	li	a5,0
    3bc2:	7ff00713          	li	a4,2047
    3bc6:	4581                	li	a1,0
    3bc8:	b92d                	j	3802 <__muldf3+0x1d6>

00003bca <__subdf3>:
    3bca:	1101                	addi	sp,sp,-32
    3bcc:	ce06                	sw	ra,28(sp)
    3bce:	cc22                	sw	s0,24(sp)
    3bd0:	ca26                	sw	s1,20(sp)
    3bd2:	c84a                	sw	s2,16(sp)
    3bd4:	c64e                	sw	s3,12(sp)
    3bd6:	c452                	sw	s4,8(sp)
    3bd8:	002029f3          	frrm	s3
    3bdc:	001008b7          	lui	a7,0x100
    3be0:	18fd                	addi	a7,a7,-1
    3be2:	00b8f733          	and	a4,a7,a1
    3be6:	0145d413          	srli	s0,a1,0x14
    3bea:	00d8f8b3          	and	a7,a7,a3
    3bee:	01f5d493          	srli	s1,a1,0x1f
    3bf2:	0146d593          	srli	a1,a3,0x14
    3bf6:	00371793          	slli	a5,a4,0x3
    3bfa:	01f6d313          	srli	t1,a3,0x1f
    3bfe:	01d55713          	srli	a4,a0,0x1d
    3c02:	01d65693          	srli	a3,a2,0x1d
    3c06:	088e                	slli	a7,a7,0x3
    3c08:	00361813          	slli	a6,a2,0x3
    3c0c:	7ff5f593          	andi	a1,a1,2047
    3c10:	7ff00613          	li	a2,2047
    3c14:	8f5d                	or	a4,a4,a5
    3c16:	7ff47413          	andi	s0,s0,2047
    3c1a:	00351793          	slli	a5,a0,0x3
    3c1e:	0116e6b3          	or	a3,a3,a7
    3c22:	00c59563          	bne	a1,a2,3c2c <__subdf3+0x62>
    3c26:	0106e633          	or	a2,a3,a6
    3c2a:	e219                	bnez	a2,3c30 <__subdf3+0x66>
    3c2c:	00134313          	xori	t1,t1,1
    3c30:	40b40633          	sub	a2,s0,a1
    3c34:	3c931c63          	bne	t1,s1,400c <__subdf3+0x442>
    3c38:	12c05163          	blez	a2,3d5a <__subdf3+0x190>
    3c3c:	04059a63          	bnez	a1,3c90 <__subdf3+0xc6>
    3c40:	0106e533          	or	a0,a3,a6
    3c44:	e10d                	bnez	a0,3c66 <__subdf3+0x9c>
    3c46:	7ff00693          	li	a3,2047
    3c4a:	4401                	li	s0,0
    3c4c:	24d61363          	bne	a2,a3,3e92 <__subdf3+0x2c8>
    3c50:	00f766b3          	or	a3,a4,a5
    3c54:	7a068763          	beqz	a3,4402 <__subdf3+0x838>
    3c58:	00400437          	lui	s0,0x400
    3c5c:	8c79                	and	s0,s0,a4
    3c5e:	00143413          	seqz	s0,s0
    3c62:	0412                	slli	s0,s0,0x4
    3c64:	a43d                	j	3e92 <__subdf3+0x2c8>
    3c66:	fff60513          	addi	a0,a2,-1
    3c6a:	e901                	bnez	a0,3c7a <__subdf3+0xb0>
    3c6c:	983e                	add	a6,a6,a5
    3c6e:	96ba                	add	a3,a3,a4
    3c70:	00f837b3          	sltu	a5,a6,a5
    3c74:	96be                	add	a3,a3,a5
    3c76:	4605                	li	a2,1
    3c78:	a041                	j	3cf8 <__subdf3+0x12e>
    3c7a:	7ff00893          	li	a7,2047
    3c7e:	03161f63          	bne	a2,a7,3cbc <__subdf3+0xf2>
    3c82:	00f766b3          	or	a3,a4,a5
    3c86:	fae9                	bnez	a3,3c58 <__subdf3+0x8e>
    3c88:	4701                	li	a4,0
    3c8a:	4781                	li	a5,0
    3c8c:	4401                	li	s0,0
    3c8e:	ac9d                	j	3f04 <__subdf3+0x33a>
    3c90:	7ff00593          	li	a1,2047
    3c94:	02b41063          	bne	s0,a1,3cb4 <__subdf3+0xea>
    3c98:	00f766b3          	or	a3,a4,a5
    3c9c:	76068663          	beqz	a3,4408 <__subdf3+0x83e>
    3ca0:	004006b7          	lui	a3,0x400
    3ca4:	8ef9                	and	a3,a3,a4
    3ca6:	7ff00613          	li	a2,2047
    3caa:	4581                	li	a1,0
    3cac:	2e069263          	bnez	a3,3f90 <__subdf3+0x3c6>
    3cb0:	4441                	li	s0,16
    3cb2:	a2c5                	j	3e92 <__subdf3+0x2c8>
    3cb4:	008005b7          	lui	a1,0x800
    3cb8:	8ecd                	or	a3,a3,a1
    3cba:	8532                	mv	a0,a2
    3cbc:	03800613          	li	a2,56
    3cc0:	08a64863          	blt	a2,a0,3d50 <__subdf3+0x186>
    3cc4:	467d                	li	a2,31
    3cc6:	04a64f63          	blt	a2,a0,3d24 <__subdf3+0x15a>
    3cca:	02000613          	li	a2,32
    3cce:	8e09                	sub	a2,a2,a0
    3cd0:	00c695b3          	sll	a1,a3,a2
    3cd4:	00a858b3          	srl	a7,a6,a0
    3cd8:	00c81833          	sll	a6,a6,a2
    3cdc:	0115e5b3          	or	a1,a1,a7
    3ce0:	01003833          	snez	a6,a6
    3ce4:	0105e833          	or	a6,a1,a6
    3ce8:	00a6d6b3          	srl	a3,a3,a0
    3cec:	983e                	add	a6,a6,a5
    3cee:	96ba                	add	a3,a3,a4
    3cf0:	00f837b3          	sltu	a5,a6,a5
    3cf4:	96be                	add	a3,a3,a5
    3cf6:	8622                	mv	a2,s0
    3cf8:	008007b7          	lui	a5,0x800
    3cfc:	8ff5                	and	a5,a5,a3
    3cfe:	cbad                	beqz	a5,3d70 <__subdf3+0x1a6>
    3d00:	0605                	addi	a2,a2,1
    3d02:	7ff00793          	li	a5,2047
    3d06:	2ef60263          	beq	a2,a5,3fea <__subdf3+0x420>
    3d0a:	ff800737          	lui	a4,0xff800
    3d0e:	177d                	addi	a4,a4,-1
    3d10:	00185793          	srli	a5,a6,0x1
    3d14:	8f75                	and	a4,a4,a3
    3d16:	00187813          	andi	a6,a6,1
    3d1a:	0107e833          	or	a6,a5,a6
    3d1e:	01f71793          	slli	a5,a4,0x1f
    3d22:	a49d                	j	3f88 <__subdf3+0x3be>
    3d24:	fe050593          	addi	a1,a0,-32
    3d28:	02000893          	li	a7,32
    3d2c:	00b6d5b3          	srl	a1,a3,a1
    3d30:	4601                	li	a2,0
    3d32:	01150763          	beq	a0,a7,3d40 <__subdf3+0x176>
    3d36:	04000613          	li	a2,64
    3d3a:	8e09                	sub	a2,a2,a0
    3d3c:	00c69633          	sll	a2,a3,a2
    3d40:	01066833          	or	a6,a2,a6
    3d44:	01003833          	snez	a6,a6
    3d48:	0105e833          	or	a6,a1,a6
    3d4c:	4681                	li	a3,0
    3d4e:	bf79                	j	3cec <__subdf3+0x122>
    3d50:	0106e833          	or	a6,a3,a6
    3d54:	01003833          	snez	a6,a6
    3d58:	bfd5                	j	3d4c <__subdf3+0x182>
    3d5a:	ce65                	beqz	a2,3e52 <__subdf3+0x288>
    3d5c:	40858633          	sub	a2,a1,s0
    3d60:	e829                	bnez	s0,3db2 <__subdf3+0x1e8>
    3d62:	00f76533          	or	a0,a4,a5
    3d66:	e911                	bnez	a0,3d7a <__subdf3+0x1b0>
    3d68:	7ff00793          	li	a5,2047
    3d6c:	02f60663          	beq	a2,a5,3d98 <__subdf3+0x1ce>
    3d70:	8736                	mv	a4,a3
    3d72:	87c2                	mv	a5,a6
    3d74:	48060563          	beqz	a2,41fe <__subdf3+0x634>
    3d78:	ac19                	j	3f8e <__subdf3+0x3c4>
    3d7a:	fff60893          	addi	a7,a2,-1
    3d7e:	00089963          	bnez	a7,3d90 <__subdf3+0x1c6>
    3d82:	97c2                	add	a5,a5,a6
    3d84:	0107b833          	sltu	a6,a5,a6
    3d88:	96ba                	add	a3,a3,a4
    3d8a:	96c2                	add	a3,a3,a6
    3d8c:	883e                	mv	a6,a5
    3d8e:	b5e5                	j	3c76 <__subdf3+0xac>
    3d90:	7ff00513          	li	a0,2047
    3d94:	04a61663          	bne	a2,a0,3de0 <__subdf3+0x216>
    3d98:	0106e7b3          	or	a5,a3,a6
    3d9c:	4701                	li	a4,0
    3d9e:	16078363          	beqz	a5,3f04 <__subdf3+0x33a>
    3da2:	004007b7          	lui	a5,0x400
    3da6:	8ff5                	and	a5,a5,a3
    3da8:	8736                	mv	a4,a3
    3daa:	66079263          	bnez	a5,440e <__subdf3+0x844>
    3dae:	87c2                	mv	a5,a6
    3db0:	a015                	j	3dd4 <__subdf3+0x20a>
    3db2:	7ff00513          	li	a0,2047
    3db6:	02a59163          	bne	a1,a0,3dd8 <__subdf3+0x20e>
    3dba:	0106e7b3          	or	a5,a3,a6
    3dbe:	62078463          	beqz	a5,43e6 <__subdf3+0x81c>
    3dc2:	004007b7          	lui	a5,0x400
    3dc6:	8ff5                	and	a5,a5,a3
    3dc8:	8736                	mv	a4,a3
    3dca:	62079263          	bnez	a5,43ee <__subdf3+0x824>
    3dce:	87c2                	mv	a5,a6
    3dd0:	7ff00613          	li	a2,2047
    3dd4:	4581                	li	a1,0
    3dd6:	bde9                	j	3cb0 <__subdf3+0xe6>
    3dd8:	00800537          	lui	a0,0x800
    3ddc:	8f49                	or	a4,a4,a0
    3dde:	88b2                	mv	a7,a2
    3de0:	03800613          	li	a2,56
    3de4:	07164363          	blt	a2,a7,3e4a <__subdf3+0x280>
    3de8:	467d                	li	a2,31
    3dea:	03164b63          	blt	a2,a7,3e20 <__subdf3+0x256>
    3dee:	02000513          	li	a0,32
    3df2:	41150533          	sub	a0,a0,a7
    3df6:	00a71633          	sll	a2,a4,a0
    3dfa:	0117d333          	srl	t1,a5,a7
    3dfe:	00a797b3          	sll	a5,a5,a0
    3e02:	00666633          	or	a2,a2,t1
    3e06:	00f037b3          	snez	a5,a5
    3e0a:	8fd1                	or	a5,a5,a2
    3e0c:	01175733          	srl	a4,a4,a7
    3e10:	97c2                	add	a5,a5,a6
    3e12:	9736                	add	a4,a4,a3
    3e14:	0107b6b3          	sltu	a3,a5,a6
    3e18:	96ba                	add	a3,a3,a4
    3e1a:	883e                	mv	a6,a5
    3e1c:	862e                	mv	a2,a1
    3e1e:	bde9                	j	3cf8 <__subdf3+0x12e>
    3e20:	fe088613          	addi	a2,a7,-32 # fffe0 <_global_impure_ptr+0xfa820>
    3e24:	02000313          	li	t1,32
    3e28:	00c75633          	srl	a2,a4,a2
    3e2c:	4501                	li	a0,0
    3e2e:	00688863          	beq	a7,t1,3e3e <__subdf3+0x274>
    3e32:	04000513          	li	a0,64
    3e36:	41150533          	sub	a0,a0,a7
    3e3a:	00a71533          	sll	a0,a4,a0
    3e3e:	8fc9                	or	a5,a5,a0
    3e40:	00f037b3          	snez	a5,a5
    3e44:	8fd1                	or	a5,a5,a2
    3e46:	4701                	li	a4,0
    3e48:	b7e1                	j	3e10 <__subdf3+0x246>
    3e4a:	8fd9                	or	a5,a5,a4
    3e4c:	00f037b3          	snez	a5,a5
    3e50:	bfdd                	j	3e46 <__subdf3+0x27c>
    3e52:	00140613          	addi	a2,s0,1 # 400001 <_global_impure_ptr+0x3fa841>
    3e56:	7fe67513          	andi	a0,a2,2046
    3e5a:	10051a63          	bnez	a0,3f6e <__subdf3+0x3a4>
    3e5e:	00f76633          	or	a2,a4,a5
    3e62:	e421                	bnez	s0,3eaa <__subdf3+0x2e0>
    3e64:	54060463          	beqz	a2,43ac <__subdf3+0x7e2>
    3e68:	0106e633          	or	a2,a3,a6
    3e6c:	38060963          	beqz	a2,41fe <__subdf3+0x634>
    3e70:	983e                	add	a6,a6,a5
    3e72:	00f837b3          	sltu	a5,a6,a5
    3e76:	9736                	add	a4,a4,a3
    3e78:	973e                	add	a4,a4,a5
    3e7a:	008007b7          	lui	a5,0x800
    3e7e:	8ff9                	and	a5,a5,a4
    3e80:	52078763          	beqz	a5,43ae <__subdf3+0x7e4>
    3e84:	ff8007b7          	lui	a5,0xff800
    3e88:	17fd                	addi	a5,a5,-1
    3e8a:	8f7d                	and	a4,a4,a5
    3e8c:	4581                	li	a1,0
    3e8e:	87c2                	mv	a5,a6
    3e90:	4605                	li	a2,1
    3e92:	0077f693          	andi	a3,a5,7
    3e96:	12069463          	bnez	a3,3fbe <__subdf3+0x3f4>
    3e9a:	06058563          	beqz	a1,3f04 <__subdf3+0x33a>
    3e9e:	00147693          	andi	a3,s0,1
    3ea2:	c2ad                	beqz	a3,3f04 <__subdf3+0x33a>
    3ea4:	00246413          	ori	s0,s0,2
    3ea8:	a8b1                	j	3f04 <__subdf3+0x33a>
    3eaa:	7ff00513          	li	a0,2047
    3eae:	02a41563          	bne	s0,a0,3ed8 <__subdf3+0x30e>
    3eb2:	5c060e63          	beqz	a2,448e <__subdf3+0x8c4>
    3eb6:	00400437          	lui	s0,0x400
    3eba:	8c79                	and	s0,s0,a4
    3ebc:	00143413          	seqz	s0,s0
    3ec0:	0412                	slli	s0,s0,0x4
    3ec2:	02a59863          	bne	a1,a0,3ef2 <__subdf3+0x328>
    3ec6:	0106e5b3          	or	a1,a3,a6
    3eca:	c991                	beqz	a1,3ede <__subdf3+0x314>
    3ecc:	004005b7          	lui	a1,0x400
    3ed0:	8df5                	and	a1,a1,a3
    3ed2:	e591                	bnez	a1,3ede <__subdf3+0x314>
    3ed4:	4441                	li	s0,16
    3ed6:	a021                	j	3ede <__subdf3+0x314>
    3ed8:	4401                	li	s0,0
    3eda:	fea586e3          	beq	a1,a0,3ec6 <__subdf3+0x2fc>
    3ede:	00061a63          	bnez	a2,3ef2 <__subdf3+0x328>
    3ee2:	8736                	mv	a4,a3
    3ee4:	87c2                	mv	a5,a6
    3ee6:	4581                	li	a1,0
    3ee8:	7ff00613          	li	a2,2047
    3eec:	b75d                	j	3e92 <__subdf3+0x2c8>
    3eee:	4401                	li	s0,0
    3ef0:	bfd9                	j	3ec6 <__subdf3+0x2fc>
    3ef2:	0106e6b3          	or	a3,a3,a6
    3ef6:	dae5                	beqz	a3,3ee6 <__subdf3+0x31c>
    3ef8:	4481                	li	s1,0
    3efa:	00400737          	lui	a4,0x400
    3efe:	4781                	li	a5,0
    3f00:	7ff00613          	li	a2,2047
    3f04:	008006b7          	lui	a3,0x800
    3f08:	8ef9                	and	a3,a3,a4
    3f0a:	ca91                	beqz	a3,3f1e <__subdf3+0x354>
    3f0c:	0605                	addi	a2,a2,1
    3f0e:	7ff00693          	li	a3,2047
    3f12:	54d60563          	beq	a2,a3,445c <__subdf3+0x892>
    3f16:	ff8006b7          	lui	a3,0xff800
    3f1a:	16fd                	addi	a3,a3,-1
    3f1c:	8f75                	and	a4,a4,a3
    3f1e:	0037d513          	srli	a0,a5,0x3
    3f22:	7ff00693          	li	a3,2047
    3f26:	01d71793          	slli	a5,a4,0x1d
    3f2a:	8fc9                	or	a5,a5,a0
    3f2c:	830d                	srli	a4,a4,0x3
    3f2e:	00d61963          	bne	a2,a3,3f40 <__subdf3+0x376>
    3f32:	8fd9                	or	a5,a5,a4
    3f34:	4701                	li	a4,0
    3f36:	c789                	beqz	a5,3f40 <__subdf3+0x376>
    3f38:	00080737          	lui	a4,0x80
    3f3c:	4781                	li	a5,0
    3f3e:	4481                	li	s1,0
    3f40:	7ff006b7          	lui	a3,0x7ff00
    3f44:	0652                	slli	a2,a2,0x14
    3f46:	0732                	slli	a4,a4,0xc
    3f48:	8e75                	and	a2,a2,a3
    3f4a:	8331                	srli	a4,a4,0xc
    3f4c:	8f51                	or	a4,a4,a2
    3f4e:	04fe                	slli	s1,s1,0x1f
    3f50:	009766b3          	or	a3,a4,s1
    3f54:	853e                	mv	a0,a5
    3f56:	85b6                	mv	a1,a3
    3f58:	c019                	beqz	s0,3f5e <__subdf3+0x394>
    3f5a:	00142073          	csrs	fflags,s0
    3f5e:	40f2                	lw	ra,28(sp)
    3f60:	4462                	lw	s0,24(sp)
    3f62:	44d2                	lw	s1,20(sp)
    3f64:	4942                	lw	s2,16(sp)
    3f66:	49b2                	lw	s3,12(sp)
    3f68:	4a22                	lw	s4,8(sp)
    3f6a:	6105                	addi	sp,sp,32
    3f6c:	8082                	ret
    3f6e:	7ff00593          	li	a1,2047
    3f72:	02b60163          	beq	a2,a1,3f94 <__subdf3+0x3ca>
    3f76:	983e                	add	a6,a6,a5
    3f78:	00f837b3          	sltu	a5,a6,a5
    3f7c:	9736                	add	a4,a4,a3
    3f7e:	973e                	add	a4,a4,a5
    3f80:	01f71793          	slli	a5,a4,0x1f
    3f84:	00185813          	srli	a6,a6,0x1
    3f88:	0107e7b3          	or	a5,a5,a6
    3f8c:	8305                	srli	a4,a4,0x1
    3f8e:	4581                	li	a1,0
    3f90:	4401                	li	s0,0
    3f92:	b701                	j	3e92 <__subdf3+0x2c8>
    3f94:	00098763          	beqz	s3,3fa2 <__subdf3+0x3d8>
    3f98:	478d                	li	a5,3
    3f9a:	00f99763          	bne	s3,a5,3fa8 <__subdf3+0x3de>
    3f9e:	00049a63          	bnez	s1,3fb2 <__subdf3+0x3e8>
    3fa2:	7ff00613          	li	a2,2047
    3fa6:	a889                	j	3ff8 <__subdf3+0x42e>
    3fa8:	4789                	li	a5,2
    3faa:	00f99463          	bne	s3,a5,3fb2 <__subdf3+0x3e8>
    3fae:	fe049ae3          	bnez	s1,3fa2 <__subdf3+0x3d8>
    3fb2:	4581                	li	a1,0
    3fb4:	577d                	li	a4,-1
    3fb6:	57fd                	li	a5,-1
    3fb8:	7fe00613          	li	a2,2046
    3fbc:	4415                	li	s0,5
    3fbe:	4689                	li	a3,2
    3fc0:	00146413          	ori	s0,s0,1
    3fc4:	48d98863          	beq	s3,a3,4454 <__subdf3+0x88a>
    3fc8:	468d                	li	a3,3
    3fca:	48d98163          	beq	s3,a3,444c <__subdf3+0x882>
    3fce:	48099463          	bnez	s3,4456 <__subdf3+0x88c>
    3fd2:	00f7f693          	andi	a3,a5,15
    3fd6:	4511                	li	a0,4
    3fd8:	46a68f63          	beq	a3,a0,4456 <__subdf3+0x88c>
    3fdc:	00478693          	addi	a3,a5,4 # ff800004 <__kernel_stack+0xdf74000c>
    3fe0:	00f6b7b3          	sltu	a5,a3,a5
    3fe4:	973e                	add	a4,a4,a5
    3fe6:	87b6                	mv	a5,a3
    3fe8:	a1bd                	j	4456 <__subdf3+0x88c>
    3fea:	00098763          	beqz	s3,3ff8 <__subdf3+0x42e>
    3fee:	478d                	li	a5,3
    3ff0:	00f99863          	bne	s3,a5,4000 <__subdf3+0x436>
    3ff4:	40049163          	bnez	s1,43f6 <__subdf3+0x82c>
    3ff8:	4701                	li	a4,0
    3ffa:	4781                	li	a5,0
    3ffc:	4415                	li	s0,5
    3ffe:	b719                	j	3f04 <__subdf3+0x33a>
    4000:	4789                	li	a5,2
    4002:	3ef99a63          	bne	s3,a5,43f6 <__subdf3+0x82c>
    4006:	fe0499e3          	bnez	s1,3ff8 <__subdf3+0x42e>
    400a:	b765                	j	3fb2 <__subdf3+0x3e8>
    400c:	0cc05863          	blez	a2,40dc <__subdf3+0x512>
    4010:	08059263          	bnez	a1,4094 <__subdf3+0x4ca>
    4014:	0106e533          	or	a0,a3,a6
    4018:	c20507e3          	beqz	a0,3c46 <__subdf3+0x7c>
    401c:	fff60513          	addi	a0,a2,-1
    4020:	e911                	bnez	a0,4034 <__subdf3+0x46a>
    4022:	41078833          	sub	a6,a5,a6
    4026:	40d706b3          	sub	a3,a4,a3
    402a:	0107b7b3          	sltu	a5,a5,a6
    402e:	8e9d                	sub	a3,a3,a5
    4030:	4605                	li	a2,1
    4032:	a0a9                	j	407c <__subdf3+0x4b2>
    4034:	7ff00893          	li	a7,2047
    4038:	c51605e3          	beq	a2,a7,3c82 <__subdf3+0xb8>
    403c:	03800613          	li	a2,56
    4040:	08a64963          	blt	a2,a0,40d2 <__subdf3+0x508>
    4044:	467d                	li	a2,31
    4046:	06a64063          	blt	a2,a0,40a6 <__subdf3+0x4dc>
    404a:	02000613          	li	a2,32
    404e:	8e09                	sub	a2,a2,a0
    4050:	00c695b3          	sll	a1,a3,a2
    4054:	00a858b3          	srl	a7,a6,a0
    4058:	00c81833          	sll	a6,a6,a2
    405c:	0115e5b3          	or	a1,a1,a7
    4060:	01003833          	snez	a6,a6
    4064:	0105e833          	or	a6,a1,a6
    4068:	00a6d6b3          	srl	a3,a3,a0
    406c:	41078833          	sub	a6,a5,a6
    4070:	40d706b3          	sub	a3,a4,a3
    4074:	0107b7b3          	sltu	a5,a5,a6
    4078:	8e9d                	sub	a3,a3,a5
    407a:	8622                	mv	a2,s0
    407c:	00800937          	lui	s2,0x800
    4080:	0126f7b3          	and	a5,a3,s2
    4084:	ce0786e3          	beqz	a5,3d70 <__subdf3+0x1a6>
    4088:	197d                	addi	s2,s2,-1
    408a:	0126f933          	and	s2,a3,s2
    408e:	8a42                	mv	s4,a6
    4090:	8432                	mv	s0,a2
    4092:	ac8d                	j	4304 <__subdf3+0x73a>
    4094:	7ff00593          	li	a1,2047
    4098:	c0b400e3          	beq	s0,a1,3c98 <__subdf3+0xce>
    409c:	008005b7          	lui	a1,0x800
    40a0:	8ecd                	or	a3,a3,a1
    40a2:	8532                	mv	a0,a2
    40a4:	bf61                	j	403c <__subdf3+0x472>
    40a6:	fe050593          	addi	a1,a0,-32 # 7fffe0 <_global_impure_ptr+0x7fa820>
    40aa:	02000893          	li	a7,32
    40ae:	00b6d5b3          	srl	a1,a3,a1
    40b2:	4601                	li	a2,0
    40b4:	01150763          	beq	a0,a7,40c2 <__subdf3+0x4f8>
    40b8:	04000613          	li	a2,64
    40bc:	8e09                	sub	a2,a2,a0
    40be:	00c69633          	sll	a2,a3,a2
    40c2:	01066833          	or	a6,a2,a6
    40c6:	01003833          	snez	a6,a6
    40ca:	0105e833          	or	a6,a1,a6
    40ce:	4681                	li	a3,0
    40d0:	bf71                	j	406c <__subdf3+0x4a2>
    40d2:	0106e833          	or	a6,a3,a6
    40d6:	01003833          	snez	a6,a6
    40da:	bfd5                	j	40ce <__subdf3+0x504>
    40dc:	ce6d                	beqz	a2,41d6 <__subdf3+0x60c>
    40de:	40858633          	sub	a2,a1,s0
    40e2:	e439                	bnez	s0,4130 <__subdf3+0x566>
    40e4:	00f76533          	or	a0,a4,a5
    40e8:	e509                	bnez	a0,40f2 <__subdf3+0x528>
    40ea:	7ff00793          	li	a5,2047
    40ee:	849a                	mv	s1,t1
    40f0:	b9b5                	j	3d6c <__subdf3+0x1a2>
    40f2:	fff60893          	addi	a7,a2,-1
    40f6:	00089c63          	bnez	a7,410e <__subdf3+0x544>
    40fa:	40f807b3          	sub	a5,a6,a5
    40fe:	00f83833          	sltu	a6,a6,a5
    4102:	8e99                	sub	a3,a3,a4
    4104:	410686b3          	sub	a3,a3,a6
    4108:	849a                	mv	s1,t1
    410a:	883e                	mv	a6,a5
    410c:	b715                	j	4030 <__subdf3+0x466>
    410e:	7ff00513          	li	a0,2047
    4112:	04a61563          	bne	a2,a0,415c <__subdf3+0x592>
    4116:	0106e7b3          	or	a5,a3,a6
    411a:	2e078d63          	beqz	a5,4414 <__subdf3+0x84a>
    411e:	004007b7          	lui	a5,0x400
    4122:	8ff5                	and	a5,a5,a3
    4124:	8736                	mv	a4,a3
    4126:	2e079a63          	bnez	a5,441a <__subdf3+0x850>
    412a:	87c2                	mv	a5,a6
    412c:	849a                	mv	s1,t1
    412e:	b15d                	j	3dd4 <__subdf3+0x20a>
    4130:	7ff00513          	li	a0,2047
    4134:	02a59063          	bne	a1,a0,4154 <__subdf3+0x58a>
    4138:	0106e7b3          	or	a5,a3,a6
    413c:	2e078263          	beqz	a5,4420 <__subdf3+0x856>
    4140:	004007b7          	lui	a5,0x400
    4144:	8ff5                	and	a5,a5,a3
    4146:	8736                	mv	a4,a3
    4148:	2e079163          	bnez	a5,442a <__subdf3+0x860>
    414c:	87c2                	mv	a5,a6
    414e:	7ff00613          	li	a2,2047
    4152:	bfe9                	j	412c <__subdf3+0x562>
    4154:	00800537          	lui	a0,0x800
    4158:	8f49                	or	a4,a4,a0
    415a:	88b2                	mv	a7,a2
    415c:	03800613          	li	a2,56
    4160:	07164763          	blt	a2,a7,41ce <__subdf3+0x604>
    4164:	467d                	li	a2,31
    4166:	03164f63          	blt	a2,a7,41a4 <__subdf3+0x5da>
    416a:	02000513          	li	a0,32
    416e:	41150533          	sub	a0,a0,a7
    4172:	00a71633          	sll	a2,a4,a0
    4176:	0117de33          	srl	t3,a5,a7
    417a:	00a797b3          	sll	a5,a5,a0
    417e:	01c66633          	or	a2,a2,t3
    4182:	00f037b3          	snez	a5,a5
    4186:	8fd1                	or	a5,a5,a2
    4188:	01175733          	srl	a4,a4,a7
    418c:	40f807b3          	sub	a5,a6,a5
    4190:	40e68733          	sub	a4,a3,a4
    4194:	00f836b3          	sltu	a3,a6,a5
    4198:	40d706b3          	sub	a3,a4,a3
    419c:	883e                	mv	a6,a5
    419e:	862e                	mv	a2,a1
    41a0:	849a                	mv	s1,t1
    41a2:	bde9                	j	407c <__subdf3+0x4b2>
    41a4:	fe088613          	addi	a2,a7,-32
    41a8:	02000e13          	li	t3,32
    41ac:	00c75633          	srl	a2,a4,a2
    41b0:	4501                	li	a0,0
    41b2:	01c88863          	beq	a7,t3,41c2 <__subdf3+0x5f8>
    41b6:	04000513          	li	a0,64
    41ba:	41150533          	sub	a0,a0,a7
    41be:	00a71533          	sll	a0,a4,a0
    41c2:	8fc9                	or	a5,a5,a0
    41c4:	00f037b3          	snez	a5,a5
    41c8:	8fd1                	or	a5,a5,a2
    41ca:	4701                	li	a4,0
    41cc:	b7c1                	j	418c <__subdf3+0x5c2>
    41ce:	8fd9                	or	a5,a5,a4
    41d0:	00f037b3          	snez	a5,a5
    41d4:	bfdd                	j	41ca <__subdf3+0x600>
    41d6:	00140613          	addi	a2,s0,1 # 400001 <_global_impure_ptr+0x3fa841>
    41da:	7fe67613          	andi	a2,a2,2046
    41de:	ee75                	bnez	a2,42da <__subdf3+0x710>
    41e0:	00f76533          	or	a0,a4,a5
    41e4:	0106e633          	or	a2,a3,a6
    41e8:	e05d                	bnez	s0,428e <__subdf3+0x6c4>
    41ea:	06051263          	bnez	a0,424e <__subdf3+0x684>
    41ee:	1c061263          	bnez	a2,43b2 <__subdf3+0x7e8>
    41f2:	ffe98493          	addi	s1,s3,-2
    41f6:	0014b493          	seqz	s1,s1
    41fa:	4701                	li	a4,0
    41fc:	4781                	li	a5,0
    41fe:	00e7e6b3          	or	a3,a5,a4
    4202:	24068163          	beqz	a3,4444 <__subdf3+0x87a>
    4206:	01f7d693          	srli	a3,a5,0x1f
    420a:	00171593          	slli	a1,a4,0x1
    420e:	95b6                	add	a1,a1,a3
    4210:	00179693          	slli	a3,a5,0x1
    4214:	0076f613          	andi	a2,a3,7
    4218:	4401                	li	s0,0
    421a:	c605                	beqz	a2,4242 <__subdf3+0x678>
    421c:	4609                	li	a2,2
    421e:	1ac98a63          	beq	s3,a2,43d2 <__subdf3+0x808>
    4222:	460d                	li	a2,3
    4224:	18c98d63          	beq	s3,a2,43be <__subdf3+0x7f4>
    4228:	4405                	li	s0,1
    422a:	00099c63          	bnez	s3,4242 <__subdf3+0x678>
    422e:	00f6f613          	andi	a2,a3,15
    4232:	4511                	li	a0,4
    4234:	00a60763          	beq	a2,a0,4242 <__subdf3+0x678>
    4238:	ffc6b693          	sltiu	a3,a3,-4
    423c:	0016c693          	xori	a3,a3,1
    4240:	95b6                	add	a1,a1,a3
    4242:	81e1                	srli	a1,a1,0x18
    4244:	0015c593          	xori	a1,a1,1
    4248:	8985                	andi	a1,a1,1
    424a:	4601                	li	a2,0
    424c:	b199                	j	3e92 <__subdf3+0x2c8>
    424e:	da45                	beqz	a2,41fe <__subdf3+0x634>
    4250:	410785b3          	sub	a1,a5,a6
    4254:	00b7b533          	sltu	a0,a5,a1
    4258:	40d70633          	sub	a2,a4,a3
    425c:	8e09                	sub	a2,a2,a0
    425e:	00800537          	lui	a0,0x800
    4262:	8d71                	and	a0,a0,a2
    4264:	c919                	beqz	a0,427a <__subdf3+0x6b0>
    4266:	40f807b3          	sub	a5,a6,a5
    426a:	40e68733          	sub	a4,a3,a4
    426e:	00f83833          	sltu	a6,a6,a5
    4272:	41070733          	sub	a4,a4,a6
    4276:	849a                	mv	s1,t1
    4278:	b759                	j	41fe <__subdf3+0x634>
    427a:	00c5e7b3          	or	a5,a1,a2
    427e:	12079d63          	bnez	a5,43b8 <__subdf3+0x7ee>
    4282:	ffe98493          	addi	s1,s3,-2
    4286:	0014b493          	seqz	s1,s1
    428a:	4701                	li	a4,0
    428c:	bf8d                	j	41fe <__subdf3+0x634>
    428e:	7ff00893          	li	a7,2047
    4292:	03141463          	bne	s0,a7,42ba <__subdf3+0x6f0>
    4296:	1e050863          	beqz	a0,4486 <__subdf3+0x8bc>
    429a:	00400437          	lui	s0,0x400
    429e:	8c79                	and	s0,s0,a4
    42a0:	00143413          	seqz	s0,s0
    42a4:	0412                	slli	s0,s0,0x4
    42a6:	03159763          	bne	a1,a7,42d4 <__subdf3+0x70a>
    42aa:	00060b63          	beqz	a2,42c0 <__subdf3+0x6f6>
    42ae:	004005b7          	lui	a1,0x400
    42b2:	8df5                	and	a1,a1,a3
    42b4:	e591                	bnez	a1,42c0 <__subdf3+0x6f6>
    42b6:	4441                	li	s0,16
    42b8:	a021                	j	42c0 <__subdf3+0x6f6>
    42ba:	4401                	li	s0,0
    42bc:	ff1587e3          	beq	a1,a7,42aa <__subdf3+0x6e0>
    42c0:	00051a63          	bnez	a0,42d4 <__subdf3+0x70a>
    42c4:	16060863          	beqz	a2,4434 <__subdf3+0x86a>
    42c8:	8736                	mv	a4,a3
    42ca:	87c2                	mv	a5,a6
    42cc:	849a                	mv	s1,t1
    42ce:	b921                	j	3ee6 <__subdf3+0x31c>
    42d0:	4401                	li	s0,0
    42d2:	bfe1                	j	42aa <__subdf3+0x6e0>
    42d4:	c00609e3          	beqz	a2,3ee6 <__subdf3+0x31c>
    42d8:	b105                	j	3ef8 <__subdf3+0x32e>
    42da:	41078a33          	sub	s4,a5,a6
    42de:	0147b633          	sltu	a2,a5,s4
    42e2:	40d70933          	sub	s2,a4,a3
    42e6:	40c90933          	sub	s2,s2,a2
    42ea:	00800637          	lui	a2,0x800
    42ee:	00c97633          	and	a2,s2,a2
    42f2:	c625                	beqz	a2,435a <__subdf3+0x790>
    42f4:	40f80a33          	sub	s4,a6,a5
    42f8:	8e99                	sub	a3,a3,a4
    42fa:	01483833          	sltu	a6,a6,s4
    42fe:	41068933          	sub	s2,a3,a6
    4302:	849a                	mv	s1,t1
    4304:	04090f63          	beqz	s2,4362 <__subdf3+0x798>
    4308:	854a                	mv	a0,s2
    430a:	2645                	jal	46aa <__clzsi2>
    430c:	ff850613          	addi	a2,a0,-8 # 7ffff8 <_global_impure_ptr+0x7fa838>
    4310:	47fd                	li	a5,31
    4312:	04c7cd63          	blt	a5,a2,436c <__subdf3+0x7a2>
    4316:	02000693          	li	a3,32
    431a:	8e91                	sub	a3,a3,a2
    431c:	00c91733          	sll	a4,s2,a2
    4320:	00da56b3          	srl	a3,s4,a3
    4324:	8ed9                	or	a3,a3,a4
    4326:	00ca1833          	sll	a6,s4,a2
    432a:	06864a63          	blt	a2,s0,439e <__subdf3+0x7d4>
    432e:	8e01                	sub	a2,a2,s0
    4330:	00160713          	addi	a4,a2,1 # 800001 <_global_impure_ptr+0x7fa841>
    4334:	47fd                	li	a5,31
    4336:	04e7c163          	blt	a5,a4,4378 <__subdf3+0x7ae>
    433a:	02000613          	li	a2,32
    433e:	8e19                	sub	a2,a2,a4
    4340:	00c697b3          	sll	a5,a3,a2
    4344:	00e85533          	srl	a0,a6,a4
    4348:	00c81633          	sll	a2,a6,a2
    434c:	8fc9                	or	a5,a5,a0
    434e:	00c03633          	snez	a2,a2
    4352:	8fd1                	or	a5,a5,a2
    4354:	00e6d733          	srl	a4,a3,a4
    4358:	b55d                	j	41fe <__subdf3+0x634>
    435a:	012a67b3          	or	a5,s4,s2
    435e:	f3dd                	bnez	a5,4304 <__subdf3+0x73a>
    4360:	b70d                	j	4282 <__subdf3+0x6b8>
    4362:	8552                	mv	a0,s4
    4364:	2699                	jal	46aa <__clzsi2>
    4366:	02050513          	addi	a0,a0,32
    436a:	b74d                	j	430c <__subdf3+0x742>
    436c:	fd850693          	addi	a3,a0,-40
    4370:	00da16b3          	sll	a3,s4,a3
    4374:	4801                	li	a6,0
    4376:	bf55                	j	432a <__subdf3+0x760>
    4378:	1605                	addi	a2,a2,-31
    437a:	02000593          	li	a1,32
    437e:	00c6d633          	srl	a2,a3,a2
    4382:	4781                	li	a5,0
    4384:	00b70763          	beq	a4,a1,4392 <__subdf3+0x7c8>
    4388:	04000793          	li	a5,64
    438c:	8f99                	sub	a5,a5,a4
    438e:	00f697b3          	sll	a5,a3,a5
    4392:	00f867b3          	or	a5,a6,a5
    4396:	00f037b3          	snez	a5,a5
    439a:	8fd1                	or	a5,a5,a2
    439c:	b5fd                	j	428a <__subdf3+0x6c0>
    439e:	ff8007b7          	lui	a5,0xff800
    43a2:	17fd                	addi	a5,a5,-1
    43a4:	40c40633          	sub	a2,s0,a2
    43a8:	8efd                	and	a3,a3,a5
    43aa:	b2d9                	j	3d70 <__subdf3+0x1a6>
    43ac:	8736                	mv	a4,a3
    43ae:	87c2                	mv	a5,a6
    43b0:	b5b9                	j	41fe <__subdf3+0x634>
    43b2:	8736                	mv	a4,a3
    43b4:	87c2                	mv	a5,a6
    43b6:	b5c1                	j	4276 <__subdf3+0x6ac>
    43b8:	8732                	mv	a4,a2
    43ba:	87ae                	mv	a5,a1
    43bc:	b589                	j	41fe <__subdf3+0x634>
    43be:	8426                	mv	s0,s1
    43c0:	e80491e3          	bnez	s1,4242 <__subdf3+0x678>
    43c4:	ff86b693          	sltiu	a3,a3,-8
    43c8:	0016c693          	xori	a3,a3,1
    43cc:	95b6                	add	a1,a1,a3
    43ce:	4405                	li	s0,1
    43d0:	bd8d                	j	4242 <__subdf3+0x678>
    43d2:	4405                	li	s0,1
    43d4:	e60487e3          	beqz	s1,4242 <__subdf3+0x678>
    43d8:	ff86b693          	sltiu	a3,a3,-8
    43dc:	0016c693          	xori	a3,a3,1
    43e0:	95b6                	add	a1,a1,a3
    43e2:	8426                	mv	s0,s1
    43e4:	bdb9                	j	4242 <__subdf3+0x678>
    43e6:	4701                	li	a4,0
    43e8:	7ff00613          	li	a2,2047
    43ec:	b045                	j	3c8c <__subdf3+0xc2>
    43ee:	87c2                	mv	a5,a6
    43f0:	7ff00613          	li	a2,2047
    43f4:	be69                	j	3f8e <__subdf3+0x3c4>
    43f6:	577d                	li	a4,-1
    43f8:	57fd                	li	a5,-1
    43fa:	7fe00613          	li	a2,2046
    43fe:	4581                	li	a1,0
    4400:	be75                	j	3fbc <__subdf3+0x3f2>
    4402:	4701                	li	a4,0
    4404:	4781                	li	a5,0
    4406:	bcfd                	j	3f04 <__subdf3+0x33a>
    4408:	4701                	li	a4,0
    440a:	4781                	li	a5,0
    440c:	bff1                	j	43e8 <__subdf3+0x81e>
    440e:	87c2                	mv	a5,a6
    4410:	4581                	li	a1,0
    4412:	b441                	j	3e92 <__subdf3+0x2c8>
    4414:	4701                	li	a4,0
    4416:	849a                	mv	s1,t1
    4418:	b4f5                	j	3f04 <__subdf3+0x33a>
    441a:	87c2                	mv	a5,a6
    441c:	849a                	mv	s1,t1
    441e:	bfcd                	j	4410 <__subdf3+0x846>
    4420:	4701                	li	a4,0
    4422:	7ff00613          	li	a2,2047
    4426:	849a                	mv	s1,t1
    4428:	b095                	j	3c8c <__subdf3+0xc2>
    442a:	87c2                	mv	a5,a6
    442c:	7ff00613          	li	a2,2047
    4430:	849a                	mv	s1,t1
    4432:	beb1                	j	3f8e <__subdf3+0x3c4>
    4434:	4781                	li	a5,0
    4436:	4481                	li	s1,0
    4438:	00400737          	lui	a4,0x400
    443c:	7ff00613          	li	a2,2047
    4440:	4441                	li	s0,16
    4442:	b4c9                	j	3f04 <__subdf3+0x33a>
    4444:	4701                	li	a4,0
    4446:	4781                	li	a5,0
    4448:	4601                	li	a2,0
    444a:	b089                	j	3c8c <__subdf3+0xc2>
    444c:	e489                	bnez	s1,4456 <__subdf3+0x88c>
    444e:	00878693          	addi	a3,a5,8 # ff800008 <__kernel_stack+0xdf740010>
    4452:	b679                	j	3fe0 <__subdf3+0x416>
    4454:	fced                	bnez	s1,444e <__subdf3+0x884>
    4456:	a40597e3          	bnez	a1,3ea4 <__subdf3+0x2da>
    445a:	b46d                	j	3f04 <__subdf3+0x33a>
    445c:	4781                	li	a5,0
    445e:	02098063          	beqz	s3,447e <__subdf3+0x8b4>
    4462:	470d                	li	a4,3
    4464:	00e99863          	bne	s3,a4,4474 <__subdf3+0x8aa>
    4468:	00048b63          	beqz	s1,447e <__subdf3+0x8b4>
    446c:	57fd                	li	a5,-1
    446e:	7fe00613          	li	a2,2046
    4472:	a031                	j	447e <__subdf3+0x8b4>
    4474:	4709                	li	a4,2
    4476:	fee99be3          	bne	s3,a4,446c <__subdf3+0x8a2>
    447a:	fe0489e3          	beqz	s1,446c <__subdf3+0x8a2>
    447e:	00546413          	ori	s0,s0,5
    4482:	873e                	mv	a4,a5
    4484:	bc69                	j	3f1e <__subdf3+0x354>
    4486:	e48585e3          	beq	a1,s0,42d0 <__subdf3+0x706>
    448a:	4401                	li	s0,0
    448c:	bd25                	j	42c4 <__subdf3+0x6fa>
    448e:	a68580e3          	beq	a1,s0,3eee <__subdf3+0x324>
    4492:	4401                	li	s0,0
    4494:	b4b9                	j	3ee2 <__subdf3+0x318>

00004496 <__fixdfsi>:
    4496:	882a                	mv	a6,a0
    4498:	002027f3          	frrm	a5
    449c:	001007b7          	lui	a5,0x100
    44a0:	0145d693          	srli	a3,a1,0x14
    44a4:	fff78613          	addi	a2,a5,-1 # fffff <_global_impure_ptr+0xfa83f>
    44a8:	7ff6f693          	andi	a3,a3,2047
    44ac:	3fe00713          	li	a4,1022
    44b0:	8e6d                	and	a2,a2,a1
    44b2:	81fd                	srli	a1,a1,0x1f
    44b4:	00d74763          	blt	a4,a3,44c2 <__fixdfsi+0x2c>
    44b8:	08069b63          	bnez	a3,454e <__fixdfsi+0xb8>
    44bc:	8d51                	or	a0,a0,a2
    44be:	e941                	bnez	a0,454e <__fixdfsi+0xb8>
    44c0:	8082                	ret
    44c2:	41d00713          	li	a4,1053
    44c6:	02d75863          	bge	a4,a3,44f6 <__fixdfsi+0x60>
    44ca:	80000737          	lui	a4,0x80000
    44ce:	fff74713          	not	a4,a4
    44d2:	00e58533          	add	a0,a1,a4
    44d6:	cdbd                	beqz	a1,4554 <__fixdfsi+0xbe>
    44d8:	41e00793          	li	a5,1054
    44dc:	4741                	li	a4,16
    44de:	04f69263          	bne	a3,a5,4522 <__fixdfsi+0x8c>
    44e2:	00b61793          	slli	a5,a2,0xb
    44e6:	01585613          	srli	a2,a6,0x15
    44ea:	8fd1                	or	a5,a5,a2
    44ec:	eb9d                	bnez	a5,4522 <__fixdfsi+0x8c>
    44ee:	00b81713          	slli	a4,a6,0xb
    44f2:	e33d                	bnez	a4,4558 <__fixdfsi+0xc2>
    44f4:	8082                	ret
    44f6:	43300513          	li	a0,1075
    44fa:	8d15                	sub	a0,a0,a3
    44fc:	477d                	li	a4,31
    44fe:	8fd1                	or	a5,a5,a2
    4500:	02a74463          	blt	a4,a0,4528 <__fixdfsi+0x92>
    4504:	bed68613          	addi	a2,a3,-1043 # 7feffbed <__kernel_stack+0x5fe3fbf5>
    4508:	00c816b3          	sll	a3,a6,a2
    450c:	00c797b3          	sll	a5,a5,a2
    4510:	00a85533          	srl	a0,a6,a0
    4514:	00d03733          	snez	a4,a3
    4518:	8d5d                	or	a0,a0,a5
    451a:	c199                	beqz	a1,4520 <__fixdfsi+0x8a>
    451c:	40a00533          	neg	a0,a0
    4520:	c319                	beqz	a4,4526 <__fixdfsi+0x90>
    4522:	00172073          	csrs	fflags,a4
    4526:	8082                	ret
    4528:	02000613          	li	a2,32
    452c:	4701                	li	a4,0
    452e:	00c50663          	beq	a0,a2,453a <__fixdfsi+0xa4>
    4532:	c0d68713          	addi	a4,a3,-1011
    4536:	00e79733          	sll	a4,a5,a4
    453a:	41300513          	li	a0,1043
    453e:	01076733          	or	a4,a4,a6
    4542:	8d15                	sub	a0,a0,a3
    4544:	00e03733          	snez	a4,a4
    4548:	00a7d533          	srl	a0,a5,a0
    454c:	b7f9                	j	451a <__fixdfsi+0x84>
    454e:	4501                	li	a0,0
    4550:	4705                	li	a4,1
    4552:	bfc1                	j	4522 <__fixdfsi+0x8c>
    4554:	4741                	li	a4,16
    4556:	b7f1                	j	4522 <__fixdfsi+0x8c>
    4558:	872e                	mv	a4,a1
    455a:	b7e1                	j	4522 <__fixdfsi+0x8c>

0000455c <__fixunsdfsi>:
    455c:	86aa                	mv	a3,a0
    455e:	002027f3          	frrm	a5
    4562:	00100837          	lui	a6,0x100
    4566:	0145d793          	srli	a5,a1,0x14
    456a:	fff80513          	addi	a0,a6,-1 # fffff <_global_impure_ptr+0xfa83f>
    456e:	7ff7f793          	andi	a5,a5,2047
    4572:	3fe00613          	li	a2,1022
    4576:	8d6d                	and	a0,a0,a1
    4578:	01f5d713          	srli	a4,a1,0x1f
    457c:	00f64763          	blt	a2,a5,458a <__fixunsdfsi+0x2e>
    4580:	06079763          	bnez	a5,45ee <__fixunsdfsi+0x92>
    4584:	8d55                	or	a0,a0,a3
    4586:	e525                	bnez	a0,45ee <__fixunsdfsi+0x92>
    4588:	8082                	ret
    458a:	41f00613          	li	a2,1055
    458e:	8e19                	sub	a2,a2,a4
    4590:	02c7d863          	bge	a5,a2,45c0 <__fixunsdfsi+0x64>
    4594:	04071f63          	bnez	a4,45f2 <__fixunsdfsi+0x96>
    4598:	010565b3          	or	a1,a0,a6
    459c:	43300513          	li	a0,1075
    45a0:	8d1d                	sub	a0,a0,a5
    45a2:	477d                	li	a4,31
    45a4:	02a74463          	blt	a4,a0,45cc <__fixunsdfsi+0x70>
    45a8:	bed78793          	addi	a5,a5,-1043
    45ac:	00f595b3          	sll	a1,a1,a5
    45b0:	00a6d533          	srl	a0,a3,a0
    45b4:	00f697b3          	sll	a5,a3,a5
    45b8:	8d4d                	or	a0,a0,a1
    45ba:	cb8d                	beqz	a5,45ec <__fixunsdfsi+0x90>
    45bc:	4785                	li	a5,1
    45be:	a021                	j	45c6 <__fixunsdfsi+0x6a>
    45c0:	fff70513          	addi	a0,a4,-1 # 7fffffff <__kernel_stack+0x5ff40007>
    45c4:	47c1                	li	a5,16
    45c6:	0017a073          	csrs	fflags,a5
    45ca:	a00d                	j	45ec <__fixunsdfsi+0x90>
    45cc:	02000613          	li	a2,32
    45d0:	4701                	li	a4,0
    45d2:	00c50663          	beq	a0,a2,45de <__fixunsdfsi+0x82>
    45d6:	c0d78713          	addi	a4,a5,-1011
    45da:	00e59733          	sll	a4,a1,a4
    45de:	41300513          	li	a0,1043
    45e2:	8d1d                	sub	a0,a0,a5
    45e4:	8f55                	or	a4,a4,a3
    45e6:	00a5d533          	srl	a0,a1,a0
    45ea:	fb69                	bnez	a4,45bc <__fixunsdfsi+0x60>
    45ec:	8082                	ret
    45ee:	4501                	li	a0,0
    45f0:	b7f1                	j	45bc <__fixunsdfsi+0x60>
    45f2:	4501                	li	a0,0
    45f4:	bfc1                	j	45c4 <__fixunsdfsi+0x68>

000045f6 <__floatsidf>:
    45f6:	1141                	addi	sp,sp,-16
    45f8:	c606                	sw	ra,12(sp)
    45fa:	c422                	sw	s0,8(sp)
    45fc:	c226                	sw	s1,4(sp)
    45fe:	cd21                	beqz	a0,4656 <__floatsidf+0x60>
    4600:	41f55793          	srai	a5,a0,0x1f
    4604:	00a7c433          	xor	s0,a5,a0
    4608:	8c1d                	sub	s0,s0,a5
    460a:	01f55493          	srli	s1,a0,0x1f
    460e:	8522                	mv	a0,s0
    4610:	2869                	jal	46aa <__clzsi2>
    4612:	41e00713          	li	a4,1054
    4616:	47a9                	li	a5,10
    4618:	8f09                	sub	a4,a4,a0
    461a:	02a7c863          	blt	a5,a0,464a <__floatsidf+0x54>
    461e:	47ad                	li	a5,11
    4620:	8f89                	sub	a5,a5,a0
    4622:	0555                	addi	a0,a0,21
    4624:	00f457b3          	srl	a5,s0,a5
    4628:	00a41433          	sll	s0,s0,a0
    462c:	8526                	mv	a0,s1
    462e:	07b2                	slli	a5,a5,0xc
    4630:	0752                	slli	a4,a4,0x14
    4632:	83b1                	srli	a5,a5,0xc
    4634:	057e                	slli	a0,a0,0x1f
    4636:	8fd9                	or	a5,a5,a4
    4638:	40b2                	lw	ra,12(sp)
    463a:	00a7e733          	or	a4,a5,a0
    463e:	8522                	mv	a0,s0
    4640:	4422                	lw	s0,8(sp)
    4642:	4492                	lw	s1,4(sp)
    4644:	85ba                	mv	a1,a4
    4646:	0141                	addi	sp,sp,16
    4648:	8082                	ret
    464a:	1555                	addi	a0,a0,-11
    464c:	00a417b3          	sll	a5,s0,a0
    4650:	8526                	mv	a0,s1
    4652:	4401                	li	s0,0
    4654:	bfe9                	j	462e <__floatsidf+0x38>
    4656:	4701                	li	a4,0
    4658:	4781                	li	a5,0
    465a:	bfe5                	j	4652 <__floatsidf+0x5c>

0000465c <__floatunsidf>:
    465c:	1141                	addi	sp,sp,-16
    465e:	c422                	sw	s0,8(sp)
    4660:	c606                	sw	ra,12(sp)
    4662:	842a                	mv	s0,a0
    4664:	c121                	beqz	a0,46a4 <__floatunsidf+0x48>
    4666:	2091                	jal	46aa <__clzsi2>
    4668:	41e00713          	li	a4,1054
    466c:	47a9                	li	a5,10
    466e:	8f09                	sub	a4,a4,a0
    4670:	02a7c463          	blt	a5,a0,4698 <__floatunsidf+0x3c>
    4674:	47ad                	li	a5,11
    4676:	8f89                	sub	a5,a5,a0
    4678:	0555                	addi	a0,a0,21
    467a:	00f457b3          	srl	a5,s0,a5
    467e:	00a41433          	sll	s0,s0,a0
    4682:	40b2                	lw	ra,12(sp)
    4684:	8522                	mv	a0,s0
    4686:	07b2                	slli	a5,a5,0xc
    4688:	4422                	lw	s0,8(sp)
    468a:	0752                	slli	a4,a4,0x14
    468c:	83b1                	srli	a5,a5,0xc
    468e:	00f766b3          	or	a3,a4,a5
    4692:	85b6                	mv	a1,a3
    4694:	0141                	addi	sp,sp,16
    4696:	8082                	ret
    4698:	ff550793          	addi	a5,a0,-11
    469c:	00f417b3          	sll	a5,s0,a5
    46a0:	4401                	li	s0,0
    46a2:	b7c5                	j	4682 <__floatunsidf+0x26>
    46a4:	4781                	li	a5,0
    46a6:	4701                	li	a4,0
    46a8:	bfe9                	j	4682 <__floatunsidf+0x26>

000046aa <__clzsi2>:
    46aa:	67c1                	lui	a5,0x10
    46ac:	02f57663          	bgeu	a0,a5,46d8 <__clzsi2+0x2e>
    46b0:	0ff00793          	li	a5,255
    46b4:	00a7b7b3          	sltu	a5,a5,a0
    46b8:	078e                	slli	a5,a5,0x3
    46ba:	02000713          	li	a4,32
    46be:	8f1d                	sub	a4,a4,a5
    46c0:	00f55533          	srl	a0,a0,a5
    46c4:	00001797          	auipc	a5,0x1
    46c8:	f6478793          	addi	a5,a5,-156 # 5628 <__clz_tab>
    46cc:	953e                	add	a0,a0,a5
    46ce:	00054503          	lbu	a0,0(a0)
    46d2:	40a70533          	sub	a0,a4,a0
    46d6:	8082                	ret
    46d8:	01000737          	lui	a4,0x1000
    46dc:	47c1                	li	a5,16
    46de:	fce56ee3          	bltu	a0,a4,46ba <__clzsi2+0x10>
    46e2:	47e1                	li	a5,24
    46e4:	bfd9                	j	46ba <__clzsi2+0x10>

000046e6 <malloc>:
    46e6:	85aa                	mv	a1,a0
    46e8:	1fffc517          	auipc	a0,0x1fffc
    46ec:	1c852503          	lw	a0,456(a0) # 200008b0 <_impure_ptr>
    46f0:	a801                	j	4700 <_malloc_r>

000046f2 <free>:
    46f2:	85aa                	mv	a1,a0
    46f4:	1fffc517          	auipc	a0,0x1fffc
    46f8:	1bc52503          	lw	a0,444(a0) # 200008b0 <_impure_ptr>
    46fc:	78c0006f          	j	4e88 <_free_r>

00004700 <_malloc_r>:
    4700:	7179                	addi	sp,sp,-48
    4702:	d04a                	sw	s2,32(sp)
    4704:	d606                	sw	ra,44(sp)
    4706:	d422                	sw	s0,40(sp)
    4708:	d226                	sw	s1,36(sp)
    470a:	ce4e                	sw	s3,28(sp)
    470c:	cc52                	sw	s4,24(sp)
    470e:	ca56                	sw	s5,20(sp)
    4710:	c85a                	sw	s6,16(sp)
    4712:	c65e                	sw	s7,12(sp)
    4714:	c462                	sw	s8,8(sp)
    4716:	c266                	sw	s9,4(sp)
    4718:	00b58793          	addi	a5,a1,11 # 40000b <_global_impure_ptr+0x3fa84b>
    471c:	4759                	li	a4,22
    471e:	892a                	mv	s2,a0
    4720:	04f76363          	bltu	a4,a5,4766 <_malloc_r+0x66>
    4724:	47c1                	li	a5,16
    4726:	16b7e363          	bltu	a5,a1,488c <_malloc_r+0x18c>
    472a:	2b79                	jal	4cc8 <__malloc_lock>
    472c:	44c1                	li	s1,16
    472e:	47e1                	li	a5,24
    4730:	4609                	li	a2,2
    4732:	1fffc997          	auipc	s3,0x1fffc
    4736:	8f298993          	addi	s3,s3,-1806 # 20000024 <__malloc_av_>
    473a:	97ce                	add	a5,a5,s3
    473c:	43c0                	lw	s0,4(a5)
    473e:	ff878713          	addi	a4,a5,-8
    4742:	16e40d63          	beq	s0,a4,48bc <_malloc_r+0x1bc>
    4746:	405c                	lw	a5,4(s0)
    4748:	4454                	lw	a3,12(s0)
    474a:	4410                	lw	a2,8(s0)
    474c:	9bf1                	andi	a5,a5,-4
    474e:	97a2                	add	a5,a5,s0
    4750:	43d8                	lw	a4,4(a5)
    4752:	c654                	sw	a3,12(a2)
    4754:	c690                	sw	a2,8(a3)
    4756:	00176713          	ori	a4,a4,1
    475a:	854a                	mv	a0,s2
    475c:	c3d8                	sw	a4,4(a5)
    475e:	2b95                	jal	4cd2 <__malloc_unlock>
    4760:	00840513          	addi	a0,s0,8 # 400008 <_global_impure_ptr+0x3fa848>
    4764:	aa05                	j	4894 <_malloc_r+0x194>
    4766:	ff87f493          	andi	s1,a5,-8
    476a:	1207c163          	bltz	a5,488c <_malloc_r+0x18c>
    476e:	10b4ef63          	bltu	s1,a1,488c <_malloc_r+0x18c>
    4772:	2b99                	jal	4cc8 <__malloc_lock>
    4774:	1f700793          	li	a5,503
    4778:	3497f963          	bgeu	a5,s1,4aca <_malloc_r+0x3ca>
    477c:	0094d793          	srli	a5,s1,0x9
    4780:	12078763          	beqz	a5,48ae <_malloc_r+0x1ae>
    4784:	4711                	li	a4,4
    4786:	2ef76263          	bltu	a4,a5,4a6a <_malloc_r+0x36a>
    478a:	0064d793          	srli	a5,s1,0x6
    478e:	03978613          	addi	a2,a5,57
    4792:	03878513          	addi	a0,a5,56
    4796:	00361693          	slli	a3,a2,0x3
    479a:	1fffc997          	auipc	s3,0x1fffc
    479e:	88a98993          	addi	s3,s3,-1910 # 20000024 <__malloc_av_>
    47a2:	96ce                	add	a3,a3,s3
    47a4:	42c0                	lw	s0,4(a3)
    47a6:	16e1                	addi	a3,a3,-8
    47a8:	02868063          	beq	a3,s0,47c8 <_malloc_r+0xc8>
    47ac:	45bd                	li	a1,15
    47ae:	a031                	j	47ba <_malloc_r+0xba>
    47b0:	26075963          	bgez	a4,4a22 <_malloc_r+0x322>
    47b4:	4440                	lw	s0,12(s0)
    47b6:	00868963          	beq	a3,s0,47c8 <_malloc_r+0xc8>
    47ba:	405c                	lw	a5,4(s0)
    47bc:	9bf1                	andi	a5,a5,-4
    47be:	40978733          	sub	a4,a5,s1
    47c2:	fee5d7e3          	bge	a1,a4,47b0 <_malloc_r+0xb0>
    47c6:	862a                	mv	a2,a0
    47c8:	0109a403          	lw	s0,16(s3)
    47cc:	1fffc897          	auipc	a7,0x1fffc
    47d0:	86088893          	addi	a7,a7,-1952 # 2000002c <__malloc_av_+0x8>
    47d4:	11140063          	beq	s0,a7,48d4 <_malloc_r+0x1d4>
    47d8:	4048                	lw	a0,4(s0)
    47da:	46bd                	li	a3,15
    47dc:	9971                	andi	a0,a0,-4
    47de:	409507b3          	sub	a5,a0,s1
    47e2:	30f6c463          	blt	a3,a5,4aea <_malloc_r+0x3ea>
    47e6:	0119aa23          	sw	a7,20(s3)
    47ea:	0119a823          	sw	a7,16(s3)
    47ee:	2e07d363          	bgez	a5,4ad4 <_malloc_r+0x3d4>
    47f2:	1ff00793          	li	a5,511
    47f6:	22a7e963          	bltu	a5,a0,4a28 <_malloc_r+0x328>
    47fa:	ff857793          	andi	a5,a0,-8
    47fe:	07a1                	addi	a5,a5,8
    4800:	0049a583          	lw	a1,4(s3)
    4804:	97ce                	add	a5,a5,s3
    4806:	4394                	lw	a3,0(a5)
    4808:	8115                	srli	a0,a0,0x5
    480a:	4705                	li	a4,1
    480c:	00a71733          	sll	a4,a4,a0
    4810:	8f4d                	or	a4,a4,a1
    4812:	ff878593          	addi	a1,a5,-8
    4816:	c44c                	sw	a1,12(s0)
    4818:	c414                	sw	a3,8(s0)
    481a:	00e9a223          	sw	a4,4(s3)
    481e:	c380                	sw	s0,0(a5)
    4820:	c6c0                	sw	s0,12(a3)
    4822:	40265793          	srai	a5,a2,0x2
    4826:	4585                	li	a1,1
    4828:	00f595b3          	sll	a1,a1,a5
    482c:	0ab76d63          	bltu	a4,a1,48e6 <_malloc_r+0x1e6>
    4830:	00e5f7b3          	and	a5,a1,a4
    4834:	ef81                	bnez	a5,484c <_malloc_r+0x14c>
    4836:	0586                	slli	a1,a1,0x1
    4838:	9a71                	andi	a2,a2,-4
    483a:	00e5f7b3          	and	a5,a1,a4
    483e:	0611                	addi	a2,a2,4
    4840:	e791                	bnez	a5,484c <_malloc_r+0x14c>
    4842:	0586                	slli	a1,a1,0x1
    4844:	00e5f7b3          	and	a5,a1,a4
    4848:	0611                	addi	a2,a2,4
    484a:	dfe5                	beqz	a5,4842 <_malloc_r+0x142>
    484c:	483d                	li	a6,15
    484e:	00361313          	slli	t1,a2,0x3
    4852:	934e                	add	t1,t1,s3
    4854:	851a                	mv	a0,t1
    4856:	455c                	lw	a5,12(a0)
    4858:	8e32                	mv	t3,a2
    485a:	22f50863          	beq	a0,a5,4a8a <_malloc_r+0x38a>
    485e:	43d8                	lw	a4,4(a5)
    4860:	843e                	mv	s0,a5
    4862:	47dc                	lw	a5,12(a5)
    4864:	9b71                	andi	a4,a4,-4
    4866:	409706b3          	sub	a3,a4,s1
    486a:	22d84763          	blt	a6,a3,4a98 <_malloc_r+0x398>
    486e:	fe06c6e3          	bltz	a3,485a <_malloc_r+0x15a>
    4872:	9722                	add	a4,a4,s0
    4874:	4354                	lw	a3,4(a4)
    4876:	4410                	lw	a2,8(s0)
    4878:	854a                	mv	a0,s2
    487a:	0016e693          	ori	a3,a3,1
    487e:	c354                	sw	a3,4(a4)
    4880:	c65c                	sw	a5,12(a2)
    4882:	c790                	sw	a2,8(a5)
    4884:	21b9                	jal	4cd2 <__malloc_unlock>
    4886:	00840513          	addi	a0,s0,8
    488a:	a029                	j	4894 <_malloc_r+0x194>
    488c:	47b1                	li	a5,12
    488e:	00f92023          	sw	a5,0(s2) # 800000 <_global_impure_ptr+0x7fa840>
    4892:	4501                	li	a0,0
    4894:	50b2                	lw	ra,44(sp)
    4896:	5422                	lw	s0,40(sp)
    4898:	5492                	lw	s1,36(sp)
    489a:	5902                	lw	s2,32(sp)
    489c:	49f2                	lw	s3,28(sp)
    489e:	4a62                	lw	s4,24(sp)
    48a0:	4ad2                	lw	s5,20(sp)
    48a2:	4b42                	lw	s6,16(sp)
    48a4:	4bb2                	lw	s7,12(sp)
    48a6:	4c22                	lw	s8,8(sp)
    48a8:	4c92                	lw	s9,4(sp)
    48aa:	6145                	addi	sp,sp,48
    48ac:	8082                	ret
    48ae:	20000693          	li	a3,512
    48b2:	04000613          	li	a2,64
    48b6:	03f00513          	li	a0,63
    48ba:	b5c5                	j	479a <_malloc_r+0x9a>
    48bc:	47c0                	lw	s0,12(a5)
    48be:	0609                	addi	a2,a2,2
    48c0:	e88793e3          	bne	a5,s0,4746 <_malloc_r+0x46>
    48c4:	0109a403          	lw	s0,16(s3)
    48c8:	1fffb897          	auipc	a7,0x1fffb
    48cc:	76488893          	addi	a7,a7,1892 # 2000002c <__malloc_av_+0x8>
    48d0:	f11414e3          	bne	s0,a7,47d8 <_malloc_r+0xd8>
    48d4:	0049a703          	lw	a4,4(s3)
    48d8:	40265793          	srai	a5,a2,0x2
    48dc:	4585                	li	a1,1
    48de:	00f595b3          	sll	a1,a1,a5
    48e2:	f4b777e3          	bgeu	a4,a1,4830 <_malloc_r+0x130>
    48e6:	0089a403          	lw	s0,8(s3)
    48ea:	00442a83          	lw	s5,4(s0)
    48ee:	ffcafb13          	andi	s6,s5,-4
    48f2:	009b6763          	bltu	s6,s1,4900 <_malloc_r+0x200>
    48f6:	409b07b3          	sub	a5,s6,s1
    48fa:	473d                	li	a4,15
    48fc:	10f74563          	blt	a4,a5,4a06 <_malloc_r+0x306>
    4900:	1fffcc97          	auipc	s9,0x1fffc
    4904:	fa8c8c93          	addi	s9,s9,-88 # 200008a8 <__malloc_sbrk_base>
    4908:	1fffca97          	auipc	s5,0x1fffc
    490c:	008aaa83          	lw	s5,8(s5) # 20000910 <__malloc_top_pad>
    4910:	000ca703          	lw	a4,0(s9)
    4914:	57fd                	li	a5,-1
    4916:	01640a33          	add	s4,s0,s6
    491a:	9aa6                	add	s5,s5,s1
    491c:	26f70e63          	beq	a4,a5,4b98 <_malloc_r+0x498>
    4920:	6785                	lui	a5,0x1
    4922:	07bd                	addi	a5,a5,15
    4924:	9abe                	add	s5,s5,a5
    4926:	77fd                	lui	a5,0xfffff
    4928:	00fafab3          	and	s5,s5,a5
    492c:	85d6                	mv	a1,s5
    492e:	854a                	mv	a0,s2
    4930:	2675                	jal	4cdc <_sbrk_r>
    4932:	57fd                	li	a5,-1
    4934:	8baa                	mv	s7,a0
    4936:	1ef50a63          	beq	a0,a5,4b2a <_malloc_r+0x42a>
    493a:	1f456663          	bltu	a0,s4,4b26 <_malloc_r+0x426>
    493e:	1fffcc17          	auipc	s8,0x1fffc
    4942:	fa2c0c13          	addi	s8,s8,-94 # 200008e0 <__malloc_current_mallinfo>
    4946:	000c2583          	lw	a1,0(s8)
    494a:	95d6                	add	a1,a1,s5
    494c:	00bc2023          	sw	a1,0(s8)
    4950:	87ae                	mv	a5,a1
    4952:	2caa0163          	beq	s4,a0,4c14 <_malloc_r+0x514>
    4956:	000ca683          	lw	a3,0(s9)
    495a:	577d                	li	a4,-1
    495c:	2ce68863          	beq	a3,a4,4c2c <_malloc_r+0x52c>
    4960:	414b8a33          	sub	s4,s7,s4
    4964:	97d2                	add	a5,a5,s4
    4966:	00fc2023          	sw	a5,0(s8)
    496a:	007bfc93          	andi	s9,s7,7
    496e:	240c8163          	beqz	s9,4bb0 <_malloc_r+0x4b0>
    4972:	6785                	lui	a5,0x1
    4974:	419b8bb3          	sub	s7,s7,s9
    4978:	00878593          	addi	a1,a5,8 # 1008 <_ftoa+0x94>
    497c:	0ba1                	addi	s7,s7,8
    497e:	419585b3          	sub	a1,a1,s9
    4982:	9ade                	add	s5,s5,s7
    4984:	17fd                	addi	a5,a5,-1
    4986:	415585b3          	sub	a1,a1,s5
    498a:	00f5fa33          	and	s4,a1,a5
    498e:	85d2                	mv	a1,s4
    4990:	854a                	mv	a0,s2
    4992:	26a9                	jal	4cdc <_sbrk_r>
    4994:	57fd                	li	a5,-1
    4996:	2cf50d63          	beq	a0,a5,4c70 <_malloc_r+0x570>
    499a:	41750533          	sub	a0,a0,s7
    499e:	01450ab3          	add	s5,a0,s4
    49a2:	000c2583          	lw	a1,0(s8)
    49a6:	0179a423          	sw	s7,8(s3)
    49aa:	001aea93          	ori	s5,s5,1
    49ae:	95d2                	add	a1,a1,s4
    49b0:	00bc2023          	sw	a1,0(s8)
    49b4:	015ba223          	sw	s5,4(s7)
    49b8:	27340d63          	beq	s0,s3,4c32 <_malloc_r+0x532>
    49bc:	46bd                	li	a3,15
    49be:	2766fc63          	bgeu	a3,s6,4c36 <_malloc_r+0x536>
    49c2:	4058                	lw	a4,4(s0)
    49c4:	ff4b0793          	addi	a5,s6,-12
    49c8:	9be1                	andi	a5,a5,-8
    49ca:	8b05                	andi	a4,a4,1
    49cc:	8f5d                	or	a4,a4,a5
    49ce:	c058                	sw	a4,4(s0)
    49d0:	4615                	li	a2,5
    49d2:	00f40733          	add	a4,s0,a5
    49d6:	c350                	sw	a2,4(a4)
    49d8:	c710                	sw	a2,8(a4)
    49da:	2af6e163          	bltu	a3,a5,4c7c <_malloc_r+0x57c>
    49de:	004baa83          	lw	s5,4(s7)
    49e2:	845e                	mv	s0,s7
    49e4:	1fffc797          	auipc	a5,0x1fffc
    49e8:	f2878793          	addi	a5,a5,-216 # 2000090c <__malloc_max_sbrked_mem>
    49ec:	4398                	lw	a4,0(a5)
    49ee:	00b77363          	bgeu	a4,a1,49f4 <_malloc_r+0x2f4>
    49f2:	c38c                	sw	a1,0(a5)
    49f4:	1fffc797          	auipc	a5,0x1fffc
    49f8:	f1478793          	addi	a5,a5,-236 # 20000908 <__malloc_max_total_mem>
    49fc:	4398                	lw	a4,0(a5)
    49fe:	12b77a63          	bgeu	a4,a1,4b32 <_malloc_r+0x432>
    4a02:	c38c                	sw	a1,0(a5)
    4a04:	a23d                	j	4b32 <_malloc_r+0x432>
    4a06:	0014e713          	ori	a4,s1,1
    4a0a:	c058                	sw	a4,4(s0)
    4a0c:	94a2                	add	s1,s1,s0
    4a0e:	0099a423          	sw	s1,8(s3)
    4a12:	0017e793          	ori	a5,a5,1
    4a16:	854a                	mv	a0,s2
    4a18:	c0dc                	sw	a5,4(s1)
    4a1a:	2c65                	jal	4cd2 <__malloc_unlock>
    4a1c:	00840513          	addi	a0,s0,8
    4a20:	bd95                	j	4894 <_malloc_r+0x194>
    4a22:	4454                	lw	a3,12(s0)
    4a24:	4410                	lw	a2,8(s0)
    4a26:	b325                	j	474e <_malloc_r+0x4e>
    4a28:	00955793          	srli	a5,a0,0x9
    4a2c:	4711                	li	a4,4
    4a2e:	0ef77463          	bgeu	a4,a5,4b16 <_malloc_r+0x416>
    4a32:	4751                	li	a4,20
    4a34:	18f76d63          	bltu	a4,a5,4bce <_malloc_r+0x4ce>
    4a38:	05c78693          	addi	a3,a5,92
    4a3c:	05b78593          	addi	a1,a5,91
    4a40:	068e                	slli	a3,a3,0x3
    4a42:	96ce                	add	a3,a3,s3
    4a44:	429c                	lw	a5,0(a3)
    4a46:	16e1                	addi	a3,a3,-8
    4a48:	14f68a63          	beq	a3,a5,4b9c <_malloc_r+0x49c>
    4a4c:	43d8                	lw	a4,4(a5)
    4a4e:	9b71                	andi	a4,a4,-4
    4a50:	00e57563          	bgeu	a0,a4,4a5a <_malloc_r+0x35a>
    4a54:	479c                	lw	a5,8(a5)
    4a56:	fef69be3          	bne	a3,a5,4a4c <_malloc_r+0x34c>
    4a5a:	47d4                	lw	a3,12(a5)
    4a5c:	0049a703          	lw	a4,4(s3)
    4a60:	c454                	sw	a3,12(s0)
    4a62:	c41c                	sw	a5,8(s0)
    4a64:	c680                	sw	s0,8(a3)
    4a66:	c7c0                	sw	s0,12(a5)
    4a68:	bb6d                	j	4822 <_malloc_r+0x122>
    4a6a:	4751                	li	a4,20
    4a6c:	0ef77063          	bgeu	a4,a5,4b4c <_malloc_r+0x44c>
    4a70:	05400713          	li	a4,84
    4a74:	16f76963          	bltu	a4,a5,4be6 <_malloc_r+0x4e6>
    4a78:	00c4d793          	srli	a5,s1,0xc
    4a7c:	06f78613          	addi	a2,a5,111
    4a80:	06e78513          	addi	a0,a5,110
    4a84:	00361693          	slli	a3,a2,0x3
    4a88:	bb09                	j	479a <_malloc_r+0x9a>
    4a8a:	0e05                	addi	t3,t3,1
    4a8c:	003e7793          	andi	a5,t3,3
    4a90:	0521                	addi	a0,a0,8
    4a92:	cbe9                	beqz	a5,4b64 <_malloc_r+0x464>
    4a94:	455c                	lw	a5,12(a0)
    4a96:	b3d1                	j	485a <_malloc_r+0x15a>
    4a98:	4410                	lw	a2,8(s0)
    4a9a:	0014e593          	ori	a1,s1,1
    4a9e:	c04c                	sw	a1,4(s0)
    4aa0:	c65c                	sw	a5,12(a2)
    4aa2:	c790                	sw	a2,8(a5)
    4aa4:	94a2                	add	s1,s1,s0
    4aa6:	0099aa23          	sw	s1,20(s3)
    4aaa:	0099a823          	sw	s1,16(s3)
    4aae:	0016e793          	ori	a5,a3,1
    4ab2:	0114a623          	sw	a7,12(s1)
    4ab6:	0114a423          	sw	a7,8(s1)
    4aba:	c0dc                	sw	a5,4(s1)
    4abc:	9722                	add	a4,a4,s0
    4abe:	854a                	mv	a0,s2
    4ac0:	c314                	sw	a3,0(a4)
    4ac2:	2c01                	jal	4cd2 <__malloc_unlock>
    4ac4:	00840513          	addi	a0,s0,8
    4ac8:	b3f1                	j	4894 <_malloc_r+0x194>
    4aca:	0034d613          	srli	a2,s1,0x3
    4ace:	00848793          	addi	a5,s1,8
    4ad2:	b185                	j	4732 <_malloc_r+0x32>
    4ad4:	00a40733          	add	a4,s0,a0
    4ad8:	435c                	lw	a5,4(a4)
    4ada:	854a                	mv	a0,s2
    4adc:	0017e793          	ori	a5,a5,1
    4ae0:	c35c                	sw	a5,4(a4)
    4ae2:	2ac5                	jal	4cd2 <__malloc_unlock>
    4ae4:	00840513          	addi	a0,s0,8
    4ae8:	b375                	j	4894 <_malloc_r+0x194>
    4aea:	0014e713          	ori	a4,s1,1
    4aee:	c058                	sw	a4,4(s0)
    4af0:	94a2                	add	s1,s1,s0
    4af2:	0099aa23          	sw	s1,20(s3)
    4af6:	0099a823          	sw	s1,16(s3)
    4afa:	0017e713          	ori	a4,a5,1
    4afe:	0114a623          	sw	a7,12(s1)
    4b02:	0114a423          	sw	a7,8(s1)
    4b06:	c0d8                	sw	a4,4(s1)
    4b08:	9522                	add	a0,a0,s0
    4b0a:	c11c                	sw	a5,0(a0)
    4b0c:	854a                	mv	a0,s2
    4b0e:	22d1                	jal	4cd2 <__malloc_unlock>
    4b10:	00840513          	addi	a0,s0,8
    4b14:	b341                	j	4894 <_malloc_r+0x194>
    4b16:	00655793          	srli	a5,a0,0x6
    4b1a:	03978693          	addi	a3,a5,57
    4b1e:	03878593          	addi	a1,a5,56
    4b22:	068e                	slli	a3,a3,0x3
    4b24:	bf39                	j	4a42 <_malloc_r+0x342>
    4b26:	0d340d63          	beq	s0,s3,4c00 <_malloc_r+0x500>
    4b2a:	0089a403          	lw	s0,8(s3)
    4b2e:	00442a83          	lw	s5,4(s0)
    4b32:	ffcafa93          	andi	s5,s5,-4
    4b36:	409a87b3          	sub	a5,s5,s1
    4b3a:	009ae563          	bltu	s5,s1,4b44 <_malloc_r+0x444>
    4b3e:	473d                	li	a4,15
    4b40:	ecf743e3          	blt	a4,a5,4a06 <_malloc_r+0x306>
    4b44:	854a                	mv	a0,s2
    4b46:	2271                	jal	4cd2 <__malloc_unlock>
    4b48:	4501                	li	a0,0
    4b4a:	b3a9                	j	4894 <_malloc_r+0x194>
    4b4c:	05c78613          	addi	a2,a5,92
    4b50:	05b78513          	addi	a0,a5,91
    4b54:	00361693          	slli	a3,a2,0x3
    4b58:	b189                	j	479a <_malloc_r+0x9a>
    4b5a:	00832783          	lw	a5,8(t1) # 10008 <_global_impure_ptr+0xa848>
    4b5e:	167d                	addi	a2,a2,-1
    4b60:	16679163          	bne	a5,t1,4cc2 <_malloc_r+0x5c2>
    4b64:	00367793          	andi	a5,a2,3
    4b68:	1361                	addi	t1,t1,-8
    4b6a:	fbe5                	bnez	a5,4b5a <_malloc_r+0x45a>
    4b6c:	0049a703          	lw	a4,4(s3)
    4b70:	fff5c793          	not	a5,a1
    4b74:	8ff9                	and	a5,a5,a4
    4b76:	00f9a223          	sw	a5,4(s3)
    4b7a:	0586                	slli	a1,a1,0x1
    4b7c:	d6b7e5e3          	bltu	a5,a1,48e6 <_malloc_r+0x1e6>
    4b80:	d60583e3          	beqz	a1,48e6 <_malloc_r+0x1e6>
    4b84:	00f5f733          	and	a4,a1,a5
    4b88:	e711                	bnez	a4,4b94 <_malloc_r+0x494>
    4b8a:	0586                	slli	a1,a1,0x1
    4b8c:	00f5f733          	and	a4,a1,a5
    4b90:	0e11                	addi	t3,t3,4
    4b92:	df65                	beqz	a4,4b8a <_malloc_r+0x48a>
    4b94:	8672                	mv	a2,t3
    4b96:	b965                	j	484e <_malloc_r+0x14e>
    4b98:	0ac1                	addi	s5,s5,16
    4b9a:	bb49                	j	492c <_malloc_r+0x22c>
    4b9c:	0049a503          	lw	a0,4(s3)
    4ba0:	8589                	srai	a1,a1,0x2
    4ba2:	4705                	li	a4,1
    4ba4:	00b71733          	sll	a4,a4,a1
    4ba8:	8f49                	or	a4,a4,a0
    4baa:	00e9a223          	sw	a4,4(s3)
    4bae:	bd4d                	j	4a60 <_malloc_r+0x360>
    4bb0:	015b85b3          	add	a1,s7,s5
    4bb4:	40b005b3          	neg	a1,a1
    4bb8:	05d2                	slli	a1,a1,0x14
    4bba:	0145da13          	srli	s4,a1,0x14
    4bbe:	85d2                	mv	a1,s4
    4bc0:	854a                	mv	a0,s2
    4bc2:	2a29                	jal	4cdc <_sbrk_r>
    4bc4:	57fd                	li	a5,-1
    4bc6:	dcf51ae3          	bne	a0,a5,499a <_malloc_r+0x29a>
    4bca:	4a01                	li	s4,0
    4bcc:	bbd9                	j	49a2 <_malloc_r+0x2a2>
    4bce:	05400713          	li	a4,84
    4bd2:	06f76663          	bltu	a4,a5,4c3e <_malloc_r+0x53e>
    4bd6:	00c55793          	srli	a5,a0,0xc
    4bda:	06f78693          	addi	a3,a5,111
    4bde:	06e78593          	addi	a1,a5,110
    4be2:	068e                	slli	a3,a3,0x3
    4be4:	bdb9                	j	4a42 <_malloc_r+0x342>
    4be6:	15400713          	li	a4,340
    4bea:	06f76663          	bltu	a4,a5,4c56 <_malloc_r+0x556>
    4bee:	00f4d793          	srli	a5,s1,0xf
    4bf2:	07878613          	addi	a2,a5,120
    4bf6:	07778513          	addi	a0,a5,119
    4bfa:	00361693          	slli	a3,a2,0x3
    4bfe:	be71                	j	479a <_malloc_r+0x9a>
    4c00:	1fffcc17          	auipc	s8,0x1fffc
    4c04:	ce0c0c13          	addi	s8,s8,-800 # 200008e0 <__malloc_current_mallinfo>
    4c08:	000c2783          	lw	a5,0(s8)
    4c0c:	97d6                	add	a5,a5,s5
    4c0e:	00fc2023          	sw	a5,0(s8)
    4c12:	b391                	j	4956 <_malloc_r+0x256>
    4c14:	014a1713          	slli	a4,s4,0x14
    4c18:	d2071fe3          	bnez	a4,4956 <_malloc_r+0x256>
    4c1c:	0089a403          	lw	s0,8(s3)
    4c20:	9ada                	add	s5,s5,s6
    4c22:	001aea93          	ori	s5,s5,1
    4c26:	01542223          	sw	s5,4(s0)
    4c2a:	bb6d                	j	49e4 <_malloc_r+0x2e4>
    4c2c:	017ca023          	sw	s7,0(s9)
    4c30:	bb2d                	j	496a <_malloc_r+0x26a>
    4c32:	845e                	mv	s0,s7
    4c34:	bb45                	j	49e4 <_malloc_r+0x2e4>
    4c36:	4785                	li	a5,1
    4c38:	00fba223          	sw	a5,4(s7)
    4c3c:	b721                	j	4b44 <_malloc_r+0x444>
    4c3e:	15400713          	li	a4,340
    4c42:	04f76863          	bltu	a4,a5,4c92 <_malloc_r+0x592>
    4c46:	00f55793          	srli	a5,a0,0xf
    4c4a:	07878693          	addi	a3,a5,120
    4c4e:	07778593          	addi	a1,a5,119
    4c52:	068e                	slli	a3,a3,0x3
    4c54:	b3fd                	j	4a42 <_malloc_r+0x342>
    4c56:	55400713          	li	a4,1364
    4c5a:	04f76863          	bltu	a4,a5,4caa <_malloc_r+0x5aa>
    4c5e:	0124d793          	srli	a5,s1,0x12
    4c62:	07d78613          	addi	a2,a5,125
    4c66:	07c78513          	addi	a0,a5,124
    4c6a:	00361693          	slli	a3,a2,0x3
    4c6e:	b635                	j	479a <_malloc_r+0x9a>
    4c70:	1ce1                	addi	s9,s9,-8
    4c72:	9ae6                	add	s5,s5,s9
    4c74:	417a8ab3          	sub	s5,s5,s7
    4c78:	4a01                	li	s4,0
    4c7a:	b325                	j	49a2 <_malloc_r+0x2a2>
    4c7c:	00840593          	addi	a1,s0,8
    4c80:	854a                	mv	a0,s2
    4c82:	2419                	jal	4e88 <_free_r>
    4c84:	0089a403          	lw	s0,8(s3)
    4c88:	000c2583          	lw	a1,0(s8)
    4c8c:	00442a83          	lw	s5,4(s0)
    4c90:	bb91                	j	49e4 <_malloc_r+0x2e4>
    4c92:	55400713          	li	a4,1364
    4c96:	02f76163          	bltu	a4,a5,4cb8 <_malloc_r+0x5b8>
    4c9a:	01255793          	srli	a5,a0,0x12
    4c9e:	07d78693          	addi	a3,a5,125
    4ca2:	07c78593          	addi	a1,a5,124
    4ca6:	068e                	slli	a3,a3,0x3
    4ca8:	bb69                	j	4a42 <_malloc_r+0x342>
    4caa:	3f800693          	li	a3,1016
    4cae:	07f00613          	li	a2,127
    4cb2:	07e00513          	li	a0,126
    4cb6:	b4d5                	j	479a <_malloc_r+0x9a>
    4cb8:	3f800693          	li	a3,1016
    4cbc:	07e00593          	li	a1,126
    4cc0:	b349                	j	4a42 <_malloc_r+0x342>
    4cc2:	0049a783          	lw	a5,4(s3)
    4cc6:	bd55                	j	4b7a <_malloc_r+0x47a>

00004cc8 <__malloc_lock>:
    4cc8:	1fffc517          	auipc	a0,0x1fffc
    4ccc:	c5c50513          	addi	a0,a0,-932 # 20000924 <__lock___malloc_recursive_mutex>
    4cd0:	a6fd                	j	50be <__retarget_lock_acquire_recursive>

00004cd2 <__malloc_unlock>:
    4cd2:	1fffc517          	auipc	a0,0x1fffc
    4cd6:	c5250513          	addi	a0,a0,-942 # 20000924 <__lock___malloc_recursive_mutex>
    4cda:	aec5                	j	50ca <__retarget_lock_release_recursive>

00004cdc <_sbrk_r>:
    4cdc:	1141                	addi	sp,sp,-16
    4cde:	c422                	sw	s0,8(sp)
    4ce0:	842a                	mv	s0,a0
    4ce2:	852e                	mv	a0,a1
    4ce4:	1fffc797          	auipc	a5,0x1fffc
    4ce8:	c407aa23          	sw	zero,-940(a5) # 20000938 <errno>
    4cec:	c606                	sw	ra,12(sp)
    4cee:	2b61                	jal	5286 <_sbrk>
    4cf0:	57fd                	li	a5,-1
    4cf2:	00f50663          	beq	a0,a5,4cfe <_sbrk_r+0x22>
    4cf6:	40b2                	lw	ra,12(sp)
    4cf8:	4422                	lw	s0,8(sp)
    4cfa:	0141                	addi	sp,sp,16
    4cfc:	8082                	ret
    4cfe:	1fffc797          	auipc	a5,0x1fffc
    4d02:	c3a7a783          	lw	a5,-966(a5) # 20000938 <errno>
    4d06:	dbe5                	beqz	a5,4cf6 <_sbrk_r+0x1a>
    4d08:	40b2                	lw	ra,12(sp)
    4d0a:	c01c                	sw	a5,0(s0)
    4d0c:	4422                	lw	s0,8(sp)
    4d0e:	0141                	addi	sp,sp,16
    4d10:	8082                	ret

00004d12 <strdup>:
    4d12:	85aa                	mv	a1,a0
    4d14:	1fffc517          	auipc	a0,0x1fffc
    4d18:	b9c52503          	lw	a0,-1124(a0) # 200008b0 <_impure_ptr>
    4d1c:	a009                	j	4d1e <_strdup_r>

00004d1e <_strdup_r>:
    4d1e:	1141                	addi	sp,sp,-16
    4d20:	c422                	sw	s0,8(sp)
    4d22:	842a                	mv	s0,a0
    4d24:	852e                	mv	a0,a1
    4d26:	c606                	sw	ra,12(sp)
    4d28:	c226                	sw	s1,4(sp)
    4d2a:	c04a                	sw	s2,0(sp)
    4d2c:	84ae                	mv	s1,a1
    4d2e:	201d                	jal	4d54 <strlen>
    4d30:	00150913          	addi	s2,a0,1
    4d34:	85ca                	mv	a1,s2
    4d36:	8522                	mv	a0,s0
    4d38:	9c9ff0ef          	jal	ra,4700 <_malloc_r>
    4d3c:	842a                	mv	s0,a0
    4d3e:	c501                	beqz	a0,4d46 <_strdup_r+0x28>
    4d40:	864a                	mv	a2,s2
    4d42:	85a6                	mv	a1,s1
    4d44:	2661                	jal	50cc <memcpy>
    4d46:	40b2                	lw	ra,12(sp)
    4d48:	8522                	mv	a0,s0
    4d4a:	4422                	lw	s0,8(sp)
    4d4c:	4492                	lw	s1,4(sp)
    4d4e:	4902                	lw	s2,0(sp)
    4d50:	0141                	addi	sp,sp,16
    4d52:	8082                	ret

00004d54 <strlen>:
    4d54:	00357793          	andi	a5,a0,3
    4d58:	872a                	mv	a4,a0
    4d5a:	ef9d                	bnez	a5,4d98 <strlen+0x44>
    4d5c:	7f7f86b7          	lui	a3,0x7f7f8
    4d60:	f7f68693          	addi	a3,a3,-129 # 7f7f7f7f <__kernel_stack+0x5f737f87>
    4d64:	55fd                	li	a1,-1
    4d66:	4310                	lw	a2,0(a4)
    4d68:	0711                	addi	a4,a4,4
    4d6a:	00d677b3          	and	a5,a2,a3
    4d6e:	97b6                	add	a5,a5,a3
    4d70:	8fd1                	or	a5,a5,a2
    4d72:	8fd5                	or	a5,a5,a3
    4d74:	feb789e3          	beq	a5,a1,4d66 <strlen+0x12>
    4d78:	ffc74683          	lbu	a3,-4(a4) # fffffc <_global_impure_ptr+0xffa83c>
    4d7c:	ffd74603          	lbu	a2,-3(a4)
    4d80:	ffe74783          	lbu	a5,-2(a4)
    4d84:	8f09                	sub	a4,a4,a0
    4d86:	c695                	beqz	a3,4db2 <strlen+0x5e>
    4d88:	02060263          	beqz	a2,4dac <strlen+0x58>
    4d8c:	00f03533          	snez	a0,a5
    4d90:	953a                	add	a0,a0,a4
    4d92:	1579                	addi	a0,a0,-2
    4d94:	8082                	ret
    4d96:	d2f9                	beqz	a3,4d5c <strlen+0x8>
    4d98:	00074783          	lbu	a5,0(a4)
    4d9c:	0705                	addi	a4,a4,1
    4d9e:	00377693          	andi	a3,a4,3
    4da2:	fbf5                	bnez	a5,4d96 <strlen+0x42>
    4da4:	8f09                	sub	a4,a4,a0
    4da6:	fff70513          	addi	a0,a4,-1
    4daa:	8082                	ret
    4dac:	ffd70513          	addi	a0,a4,-3
    4db0:	8082                	ret
    4db2:	ffc70513          	addi	a0,a4,-4
    4db6:	8082                	ret
	...

00004dba <_malloc_trim_r>:
    4dba:	1101                	addi	sp,sp,-32
    4dbc:	cc22                	sw	s0,24(sp)
    4dbe:	ca26                	sw	s1,20(sp)
    4dc0:	c84a                	sw	s2,16(sp)
    4dc2:	c64e                	sw	s3,12(sp)
    4dc4:	c452                	sw	s4,8(sp)
    4dc6:	89ae                	mv	s3,a1
    4dc8:	ce06                	sw	ra,28(sp)
    4dca:	1fffba17          	auipc	s4,0x1fffb
    4dce:	25aa0a13          	addi	s4,s4,602 # 20000024 <__malloc_av_>
    4dd2:	892a                	mv	s2,a0
    4dd4:	3dd5                	jal	4cc8 <__malloc_lock>
    4dd6:	008a2703          	lw	a4,8(s4)
    4dda:	6785                	lui	a5,0x1
    4ddc:	fef78413          	addi	s0,a5,-17 # fef <_ftoa+0x7b>
    4de0:	4344                	lw	s1,4(a4)
    4de2:	41340433          	sub	s0,s0,s3
    4de6:	98f1                	andi	s1,s1,-4
    4de8:	9426                	add	s0,s0,s1
    4dea:	8031                	srli	s0,s0,0xc
    4dec:	147d                	addi	s0,s0,-1
    4dee:	0432                	slli	s0,s0,0xc
    4df0:	00f44a63          	blt	s0,a5,4e04 <_malloc_trim_r+0x4a>
    4df4:	4581                	li	a1,0
    4df6:	854a                	mv	a0,s2
    4df8:	35d5                	jal	4cdc <_sbrk_r>
    4dfa:	008a2783          	lw	a5,8(s4)
    4dfe:	97a6                	add	a5,a5,s1
    4e00:	00f50d63          	beq	a0,a5,4e1a <_malloc_trim_r+0x60>
    4e04:	854a                	mv	a0,s2
    4e06:	35f1                	jal	4cd2 <__malloc_unlock>
    4e08:	40f2                	lw	ra,28(sp)
    4e0a:	4462                	lw	s0,24(sp)
    4e0c:	44d2                	lw	s1,20(sp)
    4e0e:	4942                	lw	s2,16(sp)
    4e10:	49b2                	lw	s3,12(sp)
    4e12:	4a22                	lw	s4,8(sp)
    4e14:	4501                	li	a0,0
    4e16:	6105                	addi	sp,sp,32
    4e18:	8082                	ret
    4e1a:	408005b3          	neg	a1,s0
    4e1e:	854a                	mv	a0,s2
    4e20:	3d75                	jal	4cdc <_sbrk_r>
    4e22:	57fd                	li	a5,-1
    4e24:	02f50b63          	beq	a0,a5,4e5a <_malloc_trim_r+0xa0>
    4e28:	1fffc717          	auipc	a4,0x1fffc
    4e2c:	ab870713          	addi	a4,a4,-1352 # 200008e0 <__malloc_current_mallinfo>
    4e30:	431c                	lw	a5,0(a4)
    4e32:	008a2683          	lw	a3,8(s4)
    4e36:	8c81                	sub	s1,s1,s0
    4e38:	0014e493          	ori	s1,s1,1
    4e3c:	40878433          	sub	s0,a5,s0
    4e40:	854a                	mv	a0,s2
    4e42:	c2c4                	sw	s1,4(a3)
    4e44:	c300                	sw	s0,0(a4)
    4e46:	3571                	jal	4cd2 <__malloc_unlock>
    4e48:	40f2                	lw	ra,28(sp)
    4e4a:	4462                	lw	s0,24(sp)
    4e4c:	44d2                	lw	s1,20(sp)
    4e4e:	4942                	lw	s2,16(sp)
    4e50:	49b2                	lw	s3,12(sp)
    4e52:	4a22                	lw	s4,8(sp)
    4e54:	4505                	li	a0,1
    4e56:	6105                	addi	sp,sp,32
    4e58:	8082                	ret
    4e5a:	4581                	li	a1,0
    4e5c:	854a                	mv	a0,s2
    4e5e:	3dbd                	jal	4cdc <_sbrk_r>
    4e60:	008a2703          	lw	a4,8(s4)
    4e64:	46bd                	li	a3,15
    4e66:	40e507b3          	sub	a5,a0,a4
    4e6a:	f8f6dde3          	bge	a3,a5,4e04 <_malloc_trim_r+0x4a>
    4e6e:	0017e793          	ori	a5,a5,1
    4e72:	c35c                	sw	a5,4(a4)
    4e74:	1fffc797          	auipc	a5,0x1fffc
    4e78:	a347a783          	lw	a5,-1484(a5) # 200008a8 <__malloc_sbrk_base>
    4e7c:	8d1d                	sub	a0,a0,a5
    4e7e:	1fffc797          	auipc	a5,0x1fffc
    4e82:	a6a7a123          	sw	a0,-1438(a5) # 200008e0 <__malloc_current_mallinfo>
    4e86:	bfbd                	j	4e04 <_malloc_trim_r+0x4a>

00004e88 <_free_r>:
    4e88:	cde9                	beqz	a1,4f62 <_free_r+0xda>
    4e8a:	1141                	addi	sp,sp,-16
    4e8c:	c422                	sw	s0,8(sp)
    4e8e:	c226                	sw	s1,4(sp)
    4e90:	842e                	mv	s0,a1
    4e92:	84aa                	mv	s1,a0
    4e94:	c606                	sw	ra,12(sp)
    4e96:	3d0d                	jal	4cc8 <__malloc_lock>
    4e98:	ffc42583          	lw	a1,-4(s0)
    4e9c:	ff840713          	addi	a4,s0,-8
    4ea0:	1fffb817          	auipc	a6,0x1fffb
    4ea4:	18480813          	addi	a6,a6,388 # 20000024 <__malloc_av_>
    4ea8:	ffe5f793          	andi	a5,a1,-2
    4eac:	00f70633          	add	a2,a4,a5
    4eb0:	4254                	lw	a3,4(a2)
    4eb2:	00882503          	lw	a0,8(a6)
    4eb6:	9af1                	andi	a3,a3,-4
    4eb8:	12c50363          	beq	a0,a2,4fde <_free_r+0x156>
    4ebc:	c254                	sw	a3,4(a2)
    4ebe:	8985                	andi	a1,a1,1
    4ec0:	00d60533          	add	a0,a2,a3
    4ec4:	e9b5                	bnez	a1,4f38 <_free_r+0xb0>
    4ec6:	ff842303          	lw	t1,-8(s0)
    4eca:	414c                	lw	a1,4(a0)
    4ecc:	1fffb897          	auipc	a7,0x1fffb
    4ed0:	16088893          	addi	a7,a7,352 # 2000002c <__malloc_av_+0x8>
    4ed4:	40670733          	sub	a4,a4,t1
    4ed8:	4708                	lw	a0,8(a4)
    4eda:	979a                	add	a5,a5,t1
    4edc:	8985                	andi	a1,a1,1
    4ede:	0d150f63          	beq	a0,a7,4fbc <_free_r+0x134>
    4ee2:	00c72303          	lw	t1,12(a4)
    4ee6:	00652623          	sw	t1,12(a0)
    4eea:	00a32423          	sw	a0,8(t1)
    4eee:	14058463          	beqz	a1,5036 <_free_r+0x1ae>
    4ef2:	0017e693          	ori	a3,a5,1
    4ef6:	c354                	sw	a3,4(a4)
    4ef8:	c21c                	sw	a5,0(a2)
    4efa:	1ff00693          	li	a3,511
    4efe:	06f6ec63          	bltu	a3,a5,4f76 <_free_r+0xee>
    4f02:	ff87f693          	andi	a3,a5,-8
    4f06:	06a1                	addi	a3,a3,8
    4f08:	00482583          	lw	a1,4(a6)
    4f0c:	96c2                	add	a3,a3,a6
    4f0e:	4290                	lw	a2,0(a3)
    4f10:	0057d513          	srli	a0,a5,0x5
    4f14:	4785                	li	a5,1
    4f16:	00a797b3          	sll	a5,a5,a0
    4f1a:	8fcd                	or	a5,a5,a1
    4f1c:	ff868593          	addi	a1,a3,-8
    4f20:	c74c                	sw	a1,12(a4)
    4f22:	c710                	sw	a2,8(a4)
    4f24:	00f82223          	sw	a5,4(a6)
    4f28:	c298                	sw	a4,0(a3)
    4f2a:	c658                	sw	a4,12(a2)
    4f2c:	4422                	lw	s0,8(sp)
    4f2e:	40b2                	lw	ra,12(sp)
    4f30:	8526                	mv	a0,s1
    4f32:	4492                	lw	s1,4(sp)
    4f34:	0141                	addi	sp,sp,16
    4f36:	bb71                	j	4cd2 <__malloc_unlock>
    4f38:	414c                	lw	a1,4(a0)
    4f3a:	8985                	andi	a1,a1,1
    4f3c:	e585                	bnez	a1,4f64 <_free_r+0xdc>
    4f3e:	97b6                	add	a5,a5,a3
    4f40:	1fffb897          	auipc	a7,0x1fffb
    4f44:	0ec88893          	addi	a7,a7,236 # 2000002c <__malloc_av_+0x8>
    4f48:	4614                	lw	a3,8(a2)
    4f4a:	0017e513          	ori	a0,a5,1
    4f4e:	00f705b3          	add	a1,a4,a5
    4f52:	0f168a63          	beq	a3,a7,5046 <_free_r+0x1be>
    4f56:	4650                	lw	a2,12(a2)
    4f58:	c6d0                	sw	a2,12(a3)
    4f5a:	c614                	sw	a3,8(a2)
    4f5c:	c348                	sw	a0,4(a4)
    4f5e:	c19c                	sw	a5,0(a1)
    4f60:	bf69                	j	4efa <_free_r+0x72>
    4f62:	8082                	ret
    4f64:	0017e693          	ori	a3,a5,1
    4f68:	fed42e23          	sw	a3,-4(s0)
    4f6c:	c21c                	sw	a5,0(a2)
    4f6e:	1ff00693          	li	a3,511
    4f72:	f8f6f8e3          	bgeu	a3,a5,4f02 <_free_r+0x7a>
    4f76:	0097d693          	srli	a3,a5,0x9
    4f7a:	4611                	li	a2,4
    4f7c:	08d66e63          	bltu	a2,a3,5018 <_free_r+0x190>
    4f80:	0067d693          	srli	a3,a5,0x6
    4f84:	03968593          	addi	a1,a3,57
    4f88:	03868613          	addi	a2,a3,56
    4f8c:	058e                	slli	a1,a1,0x3
    4f8e:	95c2                	add	a1,a1,a6
    4f90:	4194                	lw	a3,0(a1)
    4f92:	15e1                	addi	a1,a1,-8
    4f94:	0cd58463          	beq	a1,a3,505c <_free_r+0x1d4>
    4f98:	42d0                	lw	a2,4(a3)
    4f9a:	9a71                	andi	a2,a2,-4
    4f9c:	00c7f563          	bgeu	a5,a2,4fa6 <_free_r+0x11e>
    4fa0:	4694                	lw	a3,8(a3)
    4fa2:	fed59be3          	bne	a1,a3,4f98 <_free_r+0x110>
    4fa6:	46cc                	lw	a1,12(a3)
    4fa8:	c74c                	sw	a1,12(a4)
    4faa:	c714                	sw	a3,8(a4)
    4fac:	4422                	lw	s0,8(sp)
    4fae:	40b2                	lw	ra,12(sp)
    4fb0:	c598                	sw	a4,8(a1)
    4fb2:	8526                	mv	a0,s1
    4fb4:	4492                	lw	s1,4(sp)
    4fb6:	c6d8                	sw	a4,12(a3)
    4fb8:	0141                	addi	sp,sp,16
    4fba:	bb21                	j	4cd2 <__malloc_unlock>
    4fbc:	e5fd                	bnez	a1,50aa <_free_r+0x222>
    4fbe:	464c                	lw	a1,12(a2)
    4fc0:	4610                	lw	a2,8(a2)
    4fc2:	97b6                	add	a5,a5,a3
    4fc4:	4422                	lw	s0,8(sp)
    4fc6:	c64c                	sw	a1,12(a2)
    4fc8:	c590                	sw	a2,8(a1)
    4fca:	0017e693          	ori	a3,a5,1
    4fce:	40b2                	lw	ra,12(sp)
    4fd0:	c354                	sw	a3,4(a4)
    4fd2:	8526                	mv	a0,s1
    4fd4:	973e                	add	a4,a4,a5
    4fd6:	4492                	lw	s1,4(sp)
    4fd8:	c31c                	sw	a5,0(a4)
    4fda:	0141                	addi	sp,sp,16
    4fdc:	b9dd                	j	4cd2 <__malloc_unlock>
    4fde:	8985                	andi	a1,a1,1
    4fe0:	97b6                	add	a5,a5,a3
    4fe2:	e989                	bnez	a1,4ff4 <_free_r+0x16c>
    4fe4:	ff842583          	lw	a1,-8(s0)
    4fe8:	8f0d                	sub	a4,a4,a1
    4fea:	4754                	lw	a3,12(a4)
    4fec:	4710                	lw	a2,8(a4)
    4fee:	97ae                	add	a5,a5,a1
    4ff0:	c654                	sw	a3,12(a2)
    4ff2:	c690                	sw	a2,8(a3)
    4ff4:	0017e613          	ori	a2,a5,1
    4ff8:	1fffc697          	auipc	a3,0x1fffc
    4ffc:	8b46a683          	lw	a3,-1868(a3) # 200008ac <__malloc_trim_threshold>
    5000:	c350                	sw	a2,4(a4)
    5002:	00e82423          	sw	a4,8(a6)
    5006:	f2d7e3e3          	bltu	a5,a3,4f2c <_free_r+0xa4>
    500a:	1fffc597          	auipc	a1,0x1fffc
    500e:	9065a583          	lw	a1,-1786(a1) # 20000910 <__malloc_top_pad>
    5012:	8526                	mv	a0,s1
    5014:	335d                	jal	4dba <_malloc_trim_r>
    5016:	bf19                	j	4f2c <_free_r+0xa4>
    5018:	4651                	li	a2,20
    501a:	02d67063          	bgeu	a2,a3,503a <_free_r+0x1b2>
    501e:	05400613          	li	a2,84
    5022:	04d66763          	bltu	a2,a3,5070 <_free_r+0x1e8>
    5026:	00c7d693          	srli	a3,a5,0xc
    502a:	06f68593          	addi	a1,a3,111
    502e:	06e68613          	addi	a2,a3,110
    5032:	058e                	slli	a1,a1,0x3
    5034:	bfa9                	j	4f8e <_free_r+0x106>
    5036:	97b6                	add	a5,a5,a3
    5038:	bf01                	j	4f48 <_free_r+0xc0>
    503a:	05c68593          	addi	a1,a3,92
    503e:	05b68613          	addi	a2,a3,91
    5042:	058e                	slli	a1,a1,0x3
    5044:	b7a9                	j	4f8e <_free_r+0x106>
    5046:	00e82a23          	sw	a4,20(a6)
    504a:	00e82823          	sw	a4,16(a6)
    504e:	01172623          	sw	a7,12(a4)
    5052:	01172423          	sw	a7,8(a4)
    5056:	c348                	sw	a0,4(a4)
    5058:	c19c                	sw	a5,0(a1)
    505a:	bdc9                	j	4f2c <_free_r+0xa4>
    505c:	00482503          	lw	a0,4(a6)
    5060:	8609                	srai	a2,a2,0x2
    5062:	4785                	li	a5,1
    5064:	00c79633          	sll	a2,a5,a2
    5068:	8e49                	or	a2,a2,a0
    506a:	00c82223          	sw	a2,4(a6)
    506e:	bf2d                	j	4fa8 <_free_r+0x120>
    5070:	15400613          	li	a2,340
    5074:	00d66a63          	bltu	a2,a3,5088 <_free_r+0x200>
    5078:	00f7d693          	srli	a3,a5,0xf
    507c:	07868593          	addi	a1,a3,120
    5080:	07768613          	addi	a2,a3,119
    5084:	058e                	slli	a1,a1,0x3
    5086:	b721                	j	4f8e <_free_r+0x106>
    5088:	55400613          	li	a2,1364
    508c:	00d66a63          	bltu	a2,a3,50a0 <_free_r+0x218>
    5090:	0127d693          	srli	a3,a5,0x12
    5094:	07d68593          	addi	a1,a3,125
    5098:	07c68613          	addi	a2,a3,124
    509c:	058e                	slli	a1,a1,0x3
    509e:	bdc5                	j	4f8e <_free_r+0x106>
    50a0:	3f800593          	li	a1,1016
    50a4:	07e00613          	li	a2,126
    50a8:	b5dd                	j	4f8e <_free_r+0x106>
    50aa:	0017e693          	ori	a3,a5,1
    50ae:	c354                	sw	a3,4(a4)
    50b0:	c21c                	sw	a5,0(a2)
    50b2:	bdad                	j	4f2c <_free_r+0xa4>

000050b4 <__retarget_lock_init>:
    50b4:	8082                	ret

000050b6 <__retarget_lock_init_recursive>:
    50b6:	8082                	ret

000050b8 <__retarget_lock_close>:
    50b8:	8082                	ret

000050ba <__retarget_lock_close_recursive>:
    50ba:	8082                	ret

000050bc <__retarget_lock_acquire>:
    50bc:	8082                	ret

000050be <__retarget_lock_acquire_recursive>:
    50be:	8082                	ret

000050c0 <__retarget_lock_try_acquire>:
    50c0:	4505                	li	a0,1
    50c2:	8082                	ret

000050c4 <__retarget_lock_try_acquire_recursive>:
    50c4:	4505                	li	a0,1
    50c6:	8082                	ret

000050c8 <__retarget_lock_release>:
    50c8:	8082                	ret

000050ca <__retarget_lock_release_recursive>:
    50ca:	8082                	ret

000050cc <memcpy>:
    50cc:	00463693          	sltiu	a3,a2,4
    50d0:	82aa                	mv	t0,a0
    50d2:	00c50333          	add	t1,a0,a2
    50d6:	eea5                	bnez	a3,514e <memcpy+0x82>
    50d8:	00b546b3          	xor	a3,a0,a1
    50dc:	8a8d                	andi	a3,a3,3
    50de:	eaa5                	bnez	a3,514e <memcpy+0x82>
    50e0:	00357693          	andi	a3,a0,3
    50e4:	4391                	li	t2,4
    50e6:	eebd                	bnez	a3,5164 <memcpy+0x98>
    50e8:	ffc37393          	andi	t2,t1,-4
    50ec:	fe038313          	addi	t1,t2,-32 # ffe0 <_global_impure_ptr+0xa820>
    50f0:	04a36263          	bltu	t1,a0,5134 <memcpy+0x68>
    50f4:	8a7d                	andi	a2,a2,31
    50f6:	0001                	nop
    50f8:	4198                	lw	a4,0(a1)
    50fa:	c118                	sw	a4,0(a0)
    50fc:	41dc                	lw	a5,4(a1)
    50fe:	c15c                	sw	a5,4(a0)
    5100:	0085a803          	lw	a6,8(a1)
    5104:	01052423          	sw	a6,8(a0)
    5108:	00c5a883          	lw	a7,12(a1)
    510c:	01152623          	sw	a7,12(a0)
    5110:	4998                	lw	a4,16(a1)
    5112:	c918                	sw	a4,16(a0)
    5114:	49dc                	lw	a5,20(a1)
    5116:	c95c                	sw	a5,20(a0)
    5118:	0185a803          	lw	a6,24(a1)
    511c:	01052c23          	sw	a6,24(a0)
    5120:	01c5a883          	lw	a7,28(a1)
    5124:	02058593          	addi	a1,a1,32
    5128:	01152e23          	sw	a7,28(a0)
    512c:	02050513          	addi	a0,a0,32
    5130:	fca374e3          	bgeu	t1,a0,50f8 <memcpy+0x2c>
    5134:	ffc38313          	addi	t1,t2,-4
    5138:	00a36963          	bltu	t1,a0,514a <memcpy+0x7e>
    513c:	8a0d                	andi	a2,a2,3
    513e:	4198                	lw	a4,0(a1)
    5140:	0591                	addi	a1,a1,4
    5142:	c118                	sw	a4,0(a0)
    5144:	0511                	addi	a0,a0,4
    5146:	fea37ce3          	bgeu	t1,a0,513e <memcpy+0x72>
    514a:	00c50333          	add	t1,a0,a2
    514e:	ca09                	beqz	a2,5160 <memcpy+0x94>
    5150:	00058703          	lb	a4,0(a1)
    5154:	0585                	addi	a1,a1,1
    5156:	00e50023          	sb	a4,0(a0)
    515a:	0505                	addi	a0,a0,1
    515c:	fe656ae3          	bltu	a0,t1,5150 <memcpy+0x84>
    5160:	8516                	mv	a0,t0
    5162:	8082                	ret
    5164:	40d386b3          	sub	a3,t2,a3
    5168:	83b6                	mv	t2,a3
    516a:	00058703          	lb	a4,0(a1)
    516e:	0585                	addi	a1,a1,1
    5170:	16fd                	addi	a3,a3,-1
    5172:	00e50023          	sb	a4,0(a0)
    5176:	0505                	addi	a0,a0,1
    5178:	faed                	bnez	a3,516a <memcpy+0x9e>
    517a:	40760633          	sub	a2,a2,t2
    517e:	00263693          	sltiu	a3,a2,2
    5182:	f6f1                	bnez	a3,514e <memcpy+0x82>
    5184:	b795                	j	50e8 <memcpy+0x1c>
	...

00005188 <cleanup_glue>:
    5188:	1101                	addi	sp,sp,-32
    518a:	c84a                	sw	s2,16(sp)
    518c:	0005a903          	lw	s2,0(a1)
    5190:	cc22                	sw	s0,24(sp)
    5192:	ca26                	sw	s1,20(sp)
    5194:	ce06                	sw	ra,28(sp)
    5196:	c64e                	sw	s3,12(sp)
    5198:	c452                	sw	s4,8(sp)
    519a:	842e                	mv	s0,a1
    519c:	84aa                	mv	s1,a0
    519e:	02090763          	beqz	s2,51cc <cleanup_glue+0x44>
    51a2:	00092983          	lw	s3,0(s2)
    51a6:	02098063          	beqz	s3,51c6 <cleanup_glue+0x3e>
    51aa:	0009aa03          	lw	s4,0(s3)
    51ae:	000a0963          	beqz	s4,51c0 <cleanup_glue+0x38>
    51b2:	000a2583          	lw	a1,0(s4)
    51b6:	c191                	beqz	a1,51ba <cleanup_glue+0x32>
    51b8:	3fc1                	jal	5188 <cleanup_glue>
    51ba:	85d2                	mv	a1,s4
    51bc:	8526                	mv	a0,s1
    51be:	31e9                	jal	4e88 <_free_r>
    51c0:	85ce                	mv	a1,s3
    51c2:	8526                	mv	a0,s1
    51c4:	31d1                	jal	4e88 <_free_r>
    51c6:	85ca                	mv	a1,s2
    51c8:	8526                	mv	a0,s1
    51ca:	397d                	jal	4e88 <_free_r>
    51cc:	85a2                	mv	a1,s0
    51ce:	4462                	lw	s0,24(sp)
    51d0:	40f2                	lw	ra,28(sp)
    51d2:	4942                	lw	s2,16(sp)
    51d4:	49b2                	lw	s3,12(sp)
    51d6:	4a22                	lw	s4,8(sp)
    51d8:	8526                	mv	a0,s1
    51da:	44d2                	lw	s1,20(sp)
    51dc:	6105                	addi	sp,sp,32
    51de:	b16d                	j	4e88 <_free_r>

000051e0 <_reclaim_reent>:
    51e0:	1fffb797          	auipc	a5,0x1fffb
    51e4:	6d07a783          	lw	a5,1744(a5) # 200008b0 <_impure_ptr>
    51e8:	08a78e63          	beq	a5,a0,5284 <_reclaim_reent+0xa4>
    51ec:	456c                	lw	a1,76(a0)
    51ee:	1101                	addi	sp,sp,-32
    51f0:	ca26                	sw	s1,20(sp)
    51f2:	ce06                	sw	ra,28(sp)
    51f4:	cc22                	sw	s0,24(sp)
    51f6:	c84a                	sw	s2,16(sp)
    51f8:	c64e                	sw	s3,12(sp)
    51fa:	84aa                	mv	s1,a0
    51fc:	c19d                	beqz	a1,5222 <_reclaim_reent+0x42>
    51fe:	4901                	li	s2,0
    5200:	08000993          	li	s3,128
    5204:	012587b3          	add	a5,a1,s2
    5208:	4380                	lw	s0,0(a5)
    520a:	c419                	beqz	s0,5218 <_reclaim_reent+0x38>
    520c:	85a2                	mv	a1,s0
    520e:	4000                	lw	s0,0(s0)
    5210:	8526                	mv	a0,s1
    5212:	399d                	jal	4e88 <_free_r>
    5214:	fc65                	bnez	s0,520c <_reclaim_reent+0x2c>
    5216:	44ec                	lw	a1,76(s1)
    5218:	0911                	addi	s2,s2,4
    521a:	ff3915e3          	bne	s2,s3,5204 <_reclaim_reent+0x24>
    521e:	8526                	mv	a0,s1
    5220:	31a5                	jal	4e88 <_free_r>
    5222:	40ac                	lw	a1,64(s1)
    5224:	c199                	beqz	a1,522a <_reclaim_reent+0x4a>
    5226:	8526                	mv	a0,s1
    5228:	3185                	jal	4e88 <_free_r>
    522a:	1484a403          	lw	s0,328(s1)
    522e:	c819                	beqz	s0,5244 <_reclaim_reent+0x64>
    5230:	14c48913          	addi	s2,s1,332
    5234:	01240863          	beq	s0,s2,5244 <_reclaim_reent+0x64>
    5238:	85a2                	mv	a1,s0
    523a:	4000                	lw	s0,0(s0)
    523c:	8526                	mv	a0,s1
    523e:	31a9                	jal	4e88 <_free_r>
    5240:	fe891ce3          	bne	s2,s0,5238 <_reclaim_reent+0x58>
    5244:	48ec                	lw	a1,84(s1)
    5246:	c199                	beqz	a1,524c <_reclaim_reent+0x6c>
    5248:	8526                	mv	a0,s1
    524a:	393d                	jal	4e88 <_free_r>
    524c:	5c9c                	lw	a5,56(s1)
    524e:	c785                	beqz	a5,5276 <_reclaim_reent+0x96>
    5250:	5cdc                	lw	a5,60(s1)
    5252:	8526                	mv	a0,s1
    5254:	9782                	jalr	a5
    5256:	2e04a403          	lw	s0,736(s1)
    525a:	cc11                	beqz	s0,5276 <_reclaim_reent+0x96>
    525c:	400c                	lw	a1,0(s0)
    525e:	c199                	beqz	a1,5264 <_reclaim_reent+0x84>
    5260:	8526                	mv	a0,s1
    5262:	371d                	jal	5188 <cleanup_glue>
    5264:	85a2                	mv	a1,s0
    5266:	4462                	lw	s0,24(sp)
    5268:	40f2                	lw	ra,28(sp)
    526a:	4942                	lw	s2,16(sp)
    526c:	49b2                	lw	s3,12(sp)
    526e:	8526                	mv	a0,s1
    5270:	44d2                	lw	s1,20(sp)
    5272:	6105                	addi	sp,sp,32
    5274:	b911                	j	4e88 <_free_r>
    5276:	40f2                	lw	ra,28(sp)
    5278:	4462                	lw	s0,24(sp)
    527a:	44d2                	lw	s1,20(sp)
    527c:	4942                	lw	s2,16(sp)
    527e:	49b2                	lw	s3,12(sp)
    5280:	6105                	addi	sp,sp,32
    5282:	8082                	ret
    5284:	8082                	ret

00005286 <_sbrk>:
    5286:	1fffb317          	auipc	t1,0x1fffb
    528a:	6b630313          	addi	t1,t1,1718 # 2000093c <heap_end.0>
    528e:	00032783          	lw	a5,0(t1)
    5292:	1141                	addi	sp,sp,-16
    5294:	c606                	sw	ra,12(sp)
    5296:	882a                	mv	a6,a0
    5298:	e385                	bnez	a5,52b8 <_sbrk+0x32>
    529a:	4501                	li	a0,0
    529c:	4581                	li	a1,0
    529e:	4601                	li	a2,0
    52a0:	4681                	li	a3,0
    52a2:	4701                	li	a4,0
    52a4:	0d600893          	li	a7,214
    52a8:	00000073          	ecall
    52ac:	577d                	li	a4,-1
    52ae:	87aa                	mv	a5,a0
    52b0:	02e50a63          	beq	a0,a4,52e4 <_sbrk+0x5e>
    52b4:	00a32023          	sw	a0,0(t1)
    52b8:	00f80533          	add	a0,a6,a5
    52bc:	4581                	li	a1,0
    52be:	4601                	li	a2,0
    52c0:	4681                	li	a3,0
    52c2:	4701                	li	a4,0
    52c4:	4781                	li	a5,0
    52c6:	0d600893          	li	a7,214
    52ca:	00000073          	ecall
    52ce:	00032783          	lw	a5,0(t1)
    52d2:	983e                	add	a6,a6,a5
    52d4:	01051863          	bne	a0,a6,52e4 <_sbrk+0x5e>
    52d8:	40b2                	lw	ra,12(sp)
    52da:	00a32023          	sw	a0,0(t1)
    52de:	853e                	mv	a0,a5
    52e0:	0141                	addi	sp,sp,16
    52e2:	8082                	ret
    52e4:	2039                	jal	52f2 <__errno>
    52e6:	40b2                	lw	ra,12(sp)
    52e8:	47b1                	li	a5,12
    52ea:	c11c                	sw	a5,0(a0)
    52ec:	557d                	li	a0,-1
    52ee:	0141                	addi	sp,sp,16
    52f0:	8082                	ret

000052f2 <__errno>:
    52f2:	1fffb517          	auipc	a0,0x1fffb
    52f6:	5be52503          	lw	a0,1470(a0) # 200008b0 <_impure_ptr>
    52fa:	8082                	ret
    52fc:	0000                	unimp
	...
