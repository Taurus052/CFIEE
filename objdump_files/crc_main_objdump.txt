
crc_main.elf:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <__start>:
#
#  li x3, 0x1000
#  csrrs x0, mhcr, x3

#la x3, 0x20000
  la  x2, __kernel_stack
       0:	200c0117          	auipc	sp,0x200c0
       4:	ff810113          	addi	sp,sp,-8 # 200bfff8 <__kernel_stack>
#  sw x0, 0(x2)
#  addi x2, x2, -4
#  addi x3, x3, -4
#  bnez x3, Init_Stack

  la x3, __erodata
       8:	00006197          	auipc	gp,0x6
       c:	48418193          	addi	gp,gp,1156 # 648c <__erodata>
  la x4, __data_start__
      10:	20000217          	auipc	tp,0x20000
      14:	ff020213          	addi	tp,tp,-16 # 20000000 <__data_start__>
  la x5, __data_end__
      18:	20001297          	auipc	t0,0x20001
      1c:	89028293          	addi	t0,t0,-1904 # 200008a8 <__malloc_sbrk_base>

  sub x5, x5, x4
      20:	404282b3          	sub	t0,t0,tp
  beqz x5, L_loop0_done
      24:	00028e63          	beqz	t0,40 <L_loop0_done>

00000028 <L_loop0>:

L_loop0:
   lw x6, 0(x3)
      28:	0001a303          	lw	t1,0(gp)
   sw x6, 0(x4)
      2c:	00622023          	sw	t1,0(tp) # 0 <__start>
   addi x3, x3, 0x4
      30:	00418193          	addi	gp,gp,4
   addi x4, x4, 0x4
      34:	00420213          	addi	tp,tp,4 # 4 <__start+0x4>
   addi x5, x5, -4
      38:	ffc28293          	addi	t0,t0,-4
   bnez x5, L_loop0
      3c:	fe0296e3          	bnez	t0,28 <L_loop0>

00000040 <L_loop0_done>:

L_loop0_done:
   la x3, __data_end__
      40:	20001197          	auipc	gp,0x20001
      44:	86818193          	addi	gp,gp,-1944 # 200008a8 <__malloc_sbrk_base>
   la x4, __bss_end__
      48:	20001217          	auipc	tp,0x20001
      4c:	b9420213          	addi	tp,tp,-1132 # 20000bdc <init.3>

   li x5, 0
      50:	00000293          	li	t0,0
   sub x4, x4, x3
      54:	40320233          	sub	tp,tp,gp
   beqz x4, L_loop1_done
      58:	00020a63          	beqz	tp,6c <L_loop1_done>

0000005c <L_loop1>:

L_loop1:
   sw x5, 0(x3)
      5c:	0051a023          	sw	t0,0(gp)
   addi x3, x3, 0x4
      60:	00418193          	addi	gp,gp,4
   addi x4, x4, -4
      64:	ffc20213          	addi	tp,tp,-4 # fffffffc <__kernel_stack+0xdff40004>
   bnez x4, L_loop1  
      68:	fe021ae3          	bnez	tp,5c <L_loop1>

0000006c <L_loop1_done>:


L_loop1_done:
  
  la x3, trap_handler
      6c:	00000197          	auipc	gp,0x0
      70:	0d418193          	addi	gp,gp,212 # 140 <trap_handler>
  csrw mtvec, x3
      74:	30519073          	csrw	mtvec,gp

  la x3, vector_table
      78:	00000197          	auipc	gp,0x0
      7c:	14818193          	addi	gp,gp,328 # 1c0 <vector_table>
  addi x3, x3, 64
      80:	04018193          	addi	gp,gp,64
  csrw mtvt, x3
      84:	30719073          	csrw	mtvt,gp


  li a5, 0xeffff000
      88:	effff7b7          	lui	a5,0xeffff
  li a6, 0x20000
      8c:	00020837          	lui	a6,0x20
  sw a6, 0(a5)
      90:	0107a023          	sw	a6,0(a5) # effff000 <__kernel_stack+0xcff3f008>
  li a7, 0xc
      94:	00c00893          	li	a7,12
  sw a7, 4(a5)
      98:	0117a223          	sw	a7,4(a5)

  li a6, 0x40000
      9c:	00040837          	lui	a6,0x40
  li a7, 0xc
      a0:	00c00893          	li	a7,12
  sw a6, 8(a5)
      a4:	0107a423          	sw	a6,8(a5)
  sw a7, 12(a5)
      a8:	0117a623          	sw	a7,12(a5)
  
  li a6, 0x50000
      ac:	00050837          	lui	a6,0x50
  li a7, 0x10
      b0:	01000893          	li	a7,16
  sw a6, 16(a5)
      b4:	0107a823          	sw	a6,16(a5)
  sw a7, 20(a5)
      b8:	0117aa23          	sw	a7,20(a5)

  li a5, 0x40011000
      bc:	400117b7          	lui	a5,0x40011
  li a6, 0xff
      c0:	0ff00813          	li	a6,255
  sw a6, 0(a5)
      c4:	0107a023          	sw	a6,0(a5) # 40011000 <__kernel_stack+0x1ff51008>
  li a6, 0x3
      c8:	00300813          	li	a6,3
  sw a6, 8(a5)
      cc:	0107a423          	sw	a6,8(a5)
  lw a6, 4(a5)
      d0:	0047a803          	lw	a6,4(a5)


# enable mie
  li   x3,0x88 
      d4:	08800193          	li	gp,136
  csrw mstatus,x3
      d8:	30019073          	csrw	mstatus,gp

# enable fpu
  li x3, 0x2000
      dc:	000021b7          	lui	gp,0x2
  csrs mstatus,x3
      e0:	3001a073          	csrs	mstatus,gp

  li   x3,0x103f
      e4:	000011b7          	lui	gp,0x1
      e8:	03f18193          	addi	gp,gp,63 # 103f <_etoa+0x41f>
  csrw mhcr,x3
      ec:	7c119073          	csrw	mhcr,gp
  li   x3,0x400c
      f0:	000041b7          	lui	gp,0x4
      f4:	00c18193          	addi	gp,gp,12 # 400c <__divdf3+0x5e0>
  csrw mhint,x3
      f8:	7c519073          	csrw	mhint,gp

000000fc <__to_main>:
  
__to_main:
  jal main
      fc:	169020ef          	jal	ra,2a64 <main>

00000100 <__exit>:


  .global __exit
__exit:
  fence.i
     100:	0000100f          	fence.i
  fence
     104:	0ff0000f          	fence
  li    x4, 0x6000fff8
     108:	60010237          	lui	tp,0x60010
     10c:	ff820213          	addi	tp,tp,-8 # 6000fff8 <__kernel_stack+0x3ff50000>
  addi  x3, x0,0xFF
     110:	0ff00193          	li	gp,255
  slli  x3, x3,0x4
     114:	00419193          	slli	gp,gp,0x4
  addi  x3, x3, 0xf #0xFFF
     118:	00f18193          	addi	gp,gp,15
  sw	x3, 0(x4)
     11c:	00322023          	sw	gp,0(tp) # 0 <__start>

00000120 <__fail>:

  .global __fail
__fail:
  fence.i
     120:	0000100f          	fence.i
  fence
     124:	0ff0000f          	fence
  li    x4, 0x6000fff8
     128:	60010237          	lui	tp,0x60010
     12c:	ff820213          	addi	tp,tp,-8 # 6000fff8 <__kernel_stack+0x3ff50000>
  addi  x3, x0,0xEE
     130:	0ee00193          	li	gp,238
  slli  x3, x3,0x4
     134:	00419193          	slli	gp,gp,0x4
  addi  x3, x3,0xe #0xEEE
     138:	00e18193          	addi	gp,gp,14
  sw	x3, 0(x4)
     13c:	00322023          	sw	gp,0(tp) # 0 <__start>

00000140 <trap_handler>:

  .align 6  
  .global trap_handler
trap_handler:
  j __synchronous_exception
     140:	0080006f          	j	148 <__synchronous_exception>
  .align 2  
  j __fail
     144:	fddff06f          	j	120 <__fail>

00000148 <__synchronous_exception>:
 
__synchronous_exception:
  sw   x13,-4(x2)
     148:	fed12e23          	sw	a3,-4(sp)
  sw   x14,-8(x2)
     14c:	fee12c23          	sw	a4,-8(sp)
  sw   x15,-12(x2)
     150:	fef12a23          	sw	a5,-12(sp)
  csrr x14,mcause
     154:	34202773          	csrr	a4,mcause
  andi x15,x14,0xff  #cause
     158:	0ff77793          	andi	a5,a4,255
  srli x14,x14,0x1b   #int
     15c:	01b75713          	srli	a4,a4,0x1b
  andi x14,x14,0x10   #mask bit
     160:	01077713          	andi	a4,a4,16
  add  x14,x14,x15    #{int,cause}
     164:	00f70733          	add	a4,a4,a5

  slli x14,x14,0x2  #offset
     168:	00271713          	slli	a4,a4,0x2
  la   x15,vector_table
     16c:	00000797          	auipc	a5,0x0
     170:	05478793          	addi	a5,a5,84 # 1c0 <vector_table>
  add  x15,x14,x15  #target pc
     174:	00f707b3          	add	a5,a4,a5
  lw   x14, 0(x15)  #get exception addr
     178:	0007a703          	lw	a4,0(a5)
  lw   x13, -4(x2)  #recover x16
     17c:	ffc12683          	lw	a3,-4(sp)
  lw   x15, -12(x2) #recover x15
     180:	ff412783          	lw	a5,-12(sp)
#addi x14,x14,-4
  jr   x14
     184:	00070067          	jr	a4
     188:	00000013          	nop
     18c:	00000013          	nop
     190:	00000013          	nop
     194:	00000013          	nop
     198:	00000013          	nop
     19c:	00000013          	nop
     1a0:	00000013          	nop
     1a4:	00000013          	nop
     1a8:	00000013          	nop
     1ac:	00000013          	nop
     1b0:	00000013          	nop
     1b4:	00000013          	nop
     1b8:	00000013          	nop
     1bc:	00000013          	nop

000001c0 <vector_table>:
     1c0:	05c0                	addi	s0,sp,708
     1c2:	0000                	unimp
     1c4:	05c0                	addi	s0,sp,708
     1c6:	0000                	unimp
     1c8:	05c0                	addi	s0,sp,708
     1ca:	0000                	unimp
     1cc:	05c0                	addi	s0,sp,708
     1ce:	0000                	unimp
     1d0:	05c0                	addi	s0,sp,708
     1d2:	0000                	unimp
     1d4:	05c0                	addi	s0,sp,708
     1d6:	0000                	unimp
     1d8:	05c0                	addi	s0,sp,708
     1da:	0000                	unimp
     1dc:	05c0                	addi	s0,sp,708
     1de:	0000                	unimp
     1e0:	05c0                	addi	s0,sp,708
     1e2:	0000                	unimp
     1e4:	05c0                	addi	s0,sp,708
     1e6:	0000                	unimp
     1e8:	05c0                	addi	s0,sp,708
     1ea:	0000                	unimp
     1ec:	05c0                	addi	s0,sp,708
     1ee:	0000                	unimp
     1f0:	05c0                	addi	s0,sp,708
     1f2:	0000                	unimp
     1f4:	05c0                	addi	s0,sp,708
     1f6:	0000                	unimp
     1f8:	05c0                	addi	s0,sp,708
     1fa:	0000                	unimp
     1fc:	05c0                	addi	s0,sp,708
     1fe:	0000                	unimp
     200:	05c0                	addi	s0,sp,708
     202:	0000                	unimp
     204:	05c0                	addi	s0,sp,708
     206:	0000                	unimp
     208:	05c0                	addi	s0,sp,708
     20a:	0000                	unimp
     20c:	05c0                	addi	s0,sp,708
     20e:	0000                	unimp
     210:	05c0                	addi	s0,sp,708
     212:	0000                	unimp
     214:	05c0                	addi	s0,sp,708
     216:	0000                	unimp
     218:	05c0                	addi	s0,sp,708
     21a:	0000                	unimp
     21c:	05c0                	addi	s0,sp,708
     21e:	0000                	unimp
     220:	05c0                	addi	s0,sp,708
     222:	0000                	unimp
     224:	05c0                	addi	s0,sp,708
     226:	0000                	unimp
     228:	05c0                	addi	s0,sp,708
     22a:	0000                	unimp
     22c:	05c0                	addi	s0,sp,708
     22e:	0000                	unimp
     230:	05c0                	addi	s0,sp,708
     232:	0000                	unimp
     234:	05c0                	addi	s0,sp,708
     236:	0000                	unimp
     238:	05c0                	addi	s0,sp,708
     23a:	0000                	unimp
     23c:	05c0                	addi	s0,sp,708
     23e:	0000                	unimp
     240:	05c0                	addi	s0,sp,708
     242:	0000                	unimp
     244:	05c0                	addi	s0,sp,708
     246:	0000                	unimp
     248:	05c0                	addi	s0,sp,708
     24a:	0000                	unimp
     24c:	05c0                	addi	s0,sp,708
     24e:	0000                	unimp
     250:	05c0                	addi	s0,sp,708
     252:	0000                	unimp
     254:	05c0                	addi	s0,sp,708
     256:	0000                	unimp
     258:	05c0                	addi	s0,sp,708
     25a:	0000                	unimp
     25c:	05c0                	addi	s0,sp,708
     25e:	0000                	unimp
     260:	05c0                	addi	s0,sp,708
     262:	0000                	unimp
     264:	05c0                	addi	s0,sp,708
     266:	0000                	unimp
     268:	05c0                	addi	s0,sp,708
     26a:	0000                	unimp
     26c:	05c0                	addi	s0,sp,708
     26e:	0000                	unimp
     270:	05c0                	addi	s0,sp,708
     272:	0000                	unimp
     274:	05c0                	addi	s0,sp,708
     276:	0000                	unimp
     278:	05c0                	addi	s0,sp,708
     27a:	0000                	unimp
     27c:	05c0                	addi	s0,sp,708
     27e:	0000                	unimp
     280:	05c0                	addi	s0,sp,708
     282:	0000                	unimp
     284:	05c0                	addi	s0,sp,708
     286:	0000                	unimp
     288:	05c0                	addi	s0,sp,708
     28a:	0000                	unimp
     28c:	05c0                	addi	s0,sp,708
     28e:	0000                	unimp
     290:	05c0                	addi	s0,sp,708
     292:	0000                	unimp
     294:	05c0                	addi	s0,sp,708
     296:	0000                	unimp
     298:	05c0                	addi	s0,sp,708
     29a:	0000                	unimp
     29c:	05c0                	addi	s0,sp,708
     29e:	0000                	unimp
     2a0:	05c0                	addi	s0,sp,708
     2a2:	0000                	unimp
     2a4:	05c0                	addi	s0,sp,708
     2a6:	0000                	unimp
     2a8:	05c0                	addi	s0,sp,708
     2aa:	0000                	unimp
     2ac:	05c0                	addi	s0,sp,708
     2ae:	0000                	unimp
     2b0:	05c0                	addi	s0,sp,708
     2b2:	0000                	unimp
     2b4:	05c0                	addi	s0,sp,708
     2b6:	0000                	unimp
     2b8:	05c0                	addi	s0,sp,708
     2ba:	0000                	unimp
     2bc:	05c0                	addi	s0,sp,708
     2be:	0000                	unimp
     2c0:	05c0                	addi	s0,sp,708
     2c2:	0000                	unimp
     2c4:	05c0                	addi	s0,sp,708
     2c6:	0000                	unimp
     2c8:	05c0                	addi	s0,sp,708
     2ca:	0000                	unimp
     2cc:	05c0                	addi	s0,sp,708
     2ce:	0000                	unimp
     2d0:	05c0                	addi	s0,sp,708
     2d2:	0000                	unimp
     2d4:	05c0                	addi	s0,sp,708
     2d6:	0000                	unimp
     2d8:	05c0                	addi	s0,sp,708
     2da:	0000                	unimp
     2dc:	05c0                	addi	s0,sp,708
     2de:	0000                	unimp
     2e0:	05c0                	addi	s0,sp,708
     2e2:	0000                	unimp
     2e4:	05c0                	addi	s0,sp,708
     2e6:	0000                	unimp
     2e8:	05c0                	addi	s0,sp,708
     2ea:	0000                	unimp
     2ec:	05c0                	addi	s0,sp,708
     2ee:	0000                	unimp
     2f0:	05c0                	addi	s0,sp,708
     2f2:	0000                	unimp
     2f4:	05c0                	addi	s0,sp,708
     2f6:	0000                	unimp
     2f8:	05c0                	addi	s0,sp,708
     2fa:	0000                	unimp
     2fc:	05c0                	addi	s0,sp,708
     2fe:	0000                	unimp
     300:	05c0                	addi	s0,sp,708
     302:	0000                	unimp
     304:	05c0                	addi	s0,sp,708
     306:	0000                	unimp
     308:	05c0                	addi	s0,sp,708
     30a:	0000                	unimp
     30c:	05c0                	addi	s0,sp,708
     30e:	0000                	unimp
     310:	05c0                	addi	s0,sp,708
     312:	0000                	unimp
     314:	05c0                	addi	s0,sp,708
     316:	0000                	unimp
     318:	05c0                	addi	s0,sp,708
     31a:	0000                	unimp
     31c:	05c0                	addi	s0,sp,708
     31e:	0000                	unimp
     320:	05c0                	addi	s0,sp,708
     322:	0000                	unimp
     324:	05c0                	addi	s0,sp,708
     326:	0000                	unimp
     328:	05c0                	addi	s0,sp,708
     32a:	0000                	unimp
     32c:	05c0                	addi	s0,sp,708
     32e:	0000                	unimp
     330:	05c0                	addi	s0,sp,708
     332:	0000                	unimp
     334:	05c0                	addi	s0,sp,708
     336:	0000                	unimp
     338:	05c0                	addi	s0,sp,708
     33a:	0000                	unimp
     33c:	05c0                	addi	s0,sp,708
     33e:	0000                	unimp
     340:	05c0                	addi	s0,sp,708
     342:	0000                	unimp
     344:	05c0                	addi	s0,sp,708
     346:	0000                	unimp
     348:	05c0                	addi	s0,sp,708
     34a:	0000                	unimp
     34c:	05c0                	addi	s0,sp,708
     34e:	0000                	unimp
     350:	05c0                	addi	s0,sp,708
     352:	0000                	unimp
     354:	05c0                	addi	s0,sp,708
     356:	0000                	unimp
     358:	05c0                	addi	s0,sp,708
     35a:	0000                	unimp
     35c:	05c0                	addi	s0,sp,708
     35e:	0000                	unimp
     360:	05c0                	addi	s0,sp,708
     362:	0000                	unimp
     364:	05c0                	addi	s0,sp,708
     366:	0000                	unimp
     368:	05c0                	addi	s0,sp,708
     36a:	0000                	unimp
     36c:	05c0                	addi	s0,sp,708
     36e:	0000                	unimp
     370:	05c0                	addi	s0,sp,708
     372:	0000                	unimp
     374:	05c0                	addi	s0,sp,708
     376:	0000                	unimp
     378:	05c0                	addi	s0,sp,708
     37a:	0000                	unimp
     37c:	05c0                	addi	s0,sp,708
     37e:	0000                	unimp
     380:	05c0                	addi	s0,sp,708
     382:	0000                	unimp
     384:	05c0                	addi	s0,sp,708
     386:	0000                	unimp
     388:	05c0                	addi	s0,sp,708
     38a:	0000                	unimp
     38c:	05c0                	addi	s0,sp,708
     38e:	0000                	unimp
     390:	05c0                	addi	s0,sp,708
     392:	0000                	unimp
     394:	05c0                	addi	s0,sp,708
     396:	0000                	unimp
     398:	05c0                	addi	s0,sp,708
     39a:	0000                	unimp
     39c:	05c0                	addi	s0,sp,708
     39e:	0000                	unimp
     3a0:	05c0                	addi	s0,sp,708
     3a2:	0000                	unimp
     3a4:	05c0                	addi	s0,sp,708
     3a6:	0000                	unimp
     3a8:	05c0                	addi	s0,sp,708
     3aa:	0000                	unimp
     3ac:	05c0                	addi	s0,sp,708
     3ae:	0000                	unimp
     3b0:	05c0                	addi	s0,sp,708
     3b2:	0000                	unimp
     3b4:	05c0                	addi	s0,sp,708
     3b6:	0000                	unimp
     3b8:	05c0                	addi	s0,sp,708
     3ba:	0000                	unimp
     3bc:	05c0                	addi	s0,sp,708
     3be:	0000                	unimp
     3c0:	05c0                	addi	s0,sp,708
     3c2:	0000                	unimp
     3c4:	05c0                	addi	s0,sp,708
     3c6:	0000                	unimp
     3c8:	05c0                	addi	s0,sp,708
     3ca:	0000                	unimp
     3cc:	05c0                	addi	s0,sp,708
     3ce:	0000                	unimp
     3d0:	05c0                	addi	s0,sp,708
     3d2:	0000                	unimp
     3d4:	05c0                	addi	s0,sp,708
     3d6:	0000                	unimp
     3d8:	05c0                	addi	s0,sp,708
     3da:	0000                	unimp
     3dc:	05c0                	addi	s0,sp,708
     3de:	0000                	unimp
     3e0:	05c0                	addi	s0,sp,708
     3e2:	0000                	unimp
     3e4:	05c0                	addi	s0,sp,708
     3e6:	0000                	unimp
     3e8:	05c0                	addi	s0,sp,708
     3ea:	0000                	unimp
     3ec:	05c0                	addi	s0,sp,708
     3ee:	0000                	unimp
     3f0:	05c0                	addi	s0,sp,708
     3f2:	0000                	unimp
     3f4:	05c0                	addi	s0,sp,708
     3f6:	0000                	unimp
     3f8:	05c0                	addi	s0,sp,708
     3fa:	0000                	unimp
     3fc:	05c0                	addi	s0,sp,708
     3fe:	0000                	unimp
     400:	05c0                	addi	s0,sp,708
     402:	0000                	unimp
     404:	05c0                	addi	s0,sp,708
     406:	0000                	unimp
     408:	05c0                	addi	s0,sp,708
     40a:	0000                	unimp
     40c:	05c0                	addi	s0,sp,708
     40e:	0000                	unimp
     410:	05c0                	addi	s0,sp,708
     412:	0000                	unimp
     414:	05c0                	addi	s0,sp,708
     416:	0000                	unimp
     418:	05c0                	addi	s0,sp,708
     41a:	0000                	unimp
     41c:	05c0                	addi	s0,sp,708
     41e:	0000                	unimp
     420:	05c0                	addi	s0,sp,708
     422:	0000                	unimp
     424:	05c0                	addi	s0,sp,708
     426:	0000                	unimp
     428:	05c0                	addi	s0,sp,708
     42a:	0000                	unimp
     42c:	05c0                	addi	s0,sp,708
     42e:	0000                	unimp
     430:	05c0                	addi	s0,sp,708
     432:	0000                	unimp
     434:	05c0                	addi	s0,sp,708
     436:	0000                	unimp
     438:	05c0                	addi	s0,sp,708
     43a:	0000                	unimp
     43c:	05c0                	addi	s0,sp,708
     43e:	0000                	unimp
     440:	05c0                	addi	s0,sp,708
     442:	0000                	unimp
     444:	05c0                	addi	s0,sp,708
     446:	0000                	unimp
     448:	05c0                	addi	s0,sp,708
     44a:	0000                	unimp
     44c:	05c0                	addi	s0,sp,708
     44e:	0000                	unimp
     450:	05c0                	addi	s0,sp,708
     452:	0000                	unimp
     454:	05c0                	addi	s0,sp,708
     456:	0000                	unimp
     458:	05c0                	addi	s0,sp,708
     45a:	0000                	unimp
     45c:	05c0                	addi	s0,sp,708
     45e:	0000                	unimp
     460:	05c0                	addi	s0,sp,708
     462:	0000                	unimp
     464:	05c0                	addi	s0,sp,708
     466:	0000                	unimp
     468:	05c0                	addi	s0,sp,708
     46a:	0000                	unimp
     46c:	05c0                	addi	s0,sp,708
     46e:	0000                	unimp
     470:	05c0                	addi	s0,sp,708
     472:	0000                	unimp
     474:	05c0                	addi	s0,sp,708
     476:	0000                	unimp
     478:	05c0                	addi	s0,sp,708
     47a:	0000                	unimp
     47c:	05c0                	addi	s0,sp,708
     47e:	0000                	unimp
     480:	05c0                	addi	s0,sp,708
     482:	0000                	unimp
     484:	05c0                	addi	s0,sp,708
     486:	0000                	unimp
     488:	05c0                	addi	s0,sp,708
     48a:	0000                	unimp
     48c:	05c0                	addi	s0,sp,708
     48e:	0000                	unimp
     490:	05c0                	addi	s0,sp,708
     492:	0000                	unimp
     494:	05c0                	addi	s0,sp,708
     496:	0000                	unimp
     498:	05c0                	addi	s0,sp,708
     49a:	0000                	unimp
     49c:	05c0                	addi	s0,sp,708
     49e:	0000                	unimp
     4a0:	05c0                	addi	s0,sp,708
     4a2:	0000                	unimp
     4a4:	05c0                	addi	s0,sp,708
     4a6:	0000                	unimp
     4a8:	05c0                	addi	s0,sp,708
     4aa:	0000                	unimp
     4ac:	05c0                	addi	s0,sp,708
     4ae:	0000                	unimp
     4b0:	05c0                	addi	s0,sp,708
     4b2:	0000                	unimp
     4b4:	05c0                	addi	s0,sp,708
     4b6:	0000                	unimp
     4b8:	05c0                	addi	s0,sp,708
     4ba:	0000                	unimp
     4bc:	05c0                	addi	s0,sp,708
     4be:	0000                	unimp
     4c0:	05c0                	addi	s0,sp,708
     4c2:	0000                	unimp
     4c4:	05c0                	addi	s0,sp,708
     4c6:	0000                	unimp
     4c8:	05c0                	addi	s0,sp,708
     4ca:	0000                	unimp
     4cc:	05c0                	addi	s0,sp,708
     4ce:	0000                	unimp
     4d0:	05c0                	addi	s0,sp,708
     4d2:	0000                	unimp
     4d4:	05c0                	addi	s0,sp,708
     4d6:	0000                	unimp
     4d8:	05c0                	addi	s0,sp,708
     4da:	0000                	unimp
     4dc:	05c0                	addi	s0,sp,708
     4de:	0000                	unimp
     4e0:	05c0                	addi	s0,sp,708
     4e2:	0000                	unimp
     4e4:	05c0                	addi	s0,sp,708
     4e6:	0000                	unimp
     4e8:	05c0                	addi	s0,sp,708
     4ea:	0000                	unimp
     4ec:	05c0                	addi	s0,sp,708
     4ee:	0000                	unimp
     4f0:	05c0                	addi	s0,sp,708
     4f2:	0000                	unimp
     4f4:	05c0                	addi	s0,sp,708
     4f6:	0000                	unimp
     4f8:	05c0                	addi	s0,sp,708
     4fa:	0000                	unimp
     4fc:	05c0                	addi	s0,sp,708
     4fe:	0000                	unimp
     500:	05c0                	addi	s0,sp,708
     502:	0000                	unimp
     504:	05c0                	addi	s0,sp,708
     506:	0000                	unimp
     508:	05c0                	addi	s0,sp,708
     50a:	0000                	unimp
     50c:	05c0                	addi	s0,sp,708
     50e:	0000                	unimp
     510:	05c0                	addi	s0,sp,708
     512:	0000                	unimp
     514:	05c0                	addi	s0,sp,708
     516:	0000                	unimp
     518:	05c0                	addi	s0,sp,708
     51a:	0000                	unimp
     51c:	05c0                	addi	s0,sp,708
     51e:	0000                	unimp
     520:	05c0                	addi	s0,sp,708
     522:	0000                	unimp
     524:	05c0                	addi	s0,sp,708
     526:	0000                	unimp
     528:	05c0                	addi	s0,sp,708
     52a:	0000                	unimp
     52c:	05c0                	addi	s0,sp,708
     52e:	0000                	unimp
     530:	05c0                	addi	s0,sp,708
     532:	0000                	unimp
     534:	05c0                	addi	s0,sp,708
     536:	0000                	unimp
     538:	05c0                	addi	s0,sp,708
     53a:	0000                	unimp
     53c:	05c0                	addi	s0,sp,708
     53e:	0000                	unimp
     540:	05c0                	addi	s0,sp,708
     542:	0000                	unimp
     544:	05c0                	addi	s0,sp,708
     546:	0000                	unimp
     548:	05c0                	addi	s0,sp,708
     54a:	0000                	unimp
     54c:	05c0                	addi	s0,sp,708
     54e:	0000                	unimp
     550:	05c0                	addi	s0,sp,708
     552:	0000                	unimp
     554:	05c0                	addi	s0,sp,708
     556:	0000                	unimp
     558:	05c0                	addi	s0,sp,708
     55a:	0000                	unimp
     55c:	05c0                	addi	s0,sp,708
     55e:	0000                	unimp
     560:	05c0                	addi	s0,sp,708
     562:	0000                	unimp
     564:	05c0                	addi	s0,sp,708
     566:	0000                	unimp
     568:	05c0                	addi	s0,sp,708
     56a:	0000                	unimp
     56c:	05c0                	addi	s0,sp,708
     56e:	0000                	unimp
     570:	05c0                	addi	s0,sp,708
     572:	0000                	unimp
     574:	05c0                	addi	s0,sp,708
     576:	0000                	unimp
     578:	05c0                	addi	s0,sp,708
     57a:	0000                	unimp
     57c:	05c0                	addi	s0,sp,708
     57e:	0000                	unimp
     580:	05c0                	addi	s0,sp,708
     582:	0000                	unimp
     584:	05c0                	addi	s0,sp,708
     586:	0000                	unimp
     588:	05c0                	addi	s0,sp,708
     58a:	0000                	unimp
     58c:	05c0                	addi	s0,sp,708
     58e:	0000                	unimp
     590:	05c0                	addi	s0,sp,708
     592:	0000                	unimp
     594:	05c0                	addi	s0,sp,708
     596:	0000                	unimp
     598:	05c0                	addi	s0,sp,708
     59a:	0000                	unimp
     59c:	05c0                	addi	s0,sp,708
     59e:	0000                	unimp
     5a0:	05c0                	addi	s0,sp,708
     5a2:	0000                	unimp
     5a4:	05c0                	addi	s0,sp,708
     5a6:	0000                	unimp
     5a8:	05c0                	addi	s0,sp,708
     5aa:	0000                	unimp
     5ac:	05c0                	addi	s0,sp,708
     5ae:	0000                	unimp
     5b0:	05c0                	addi	s0,sp,708
     5b2:	0000                	unimp
     5b4:	05c0                	addi	s0,sp,708
     5b6:	0000                	unimp
     5b8:	05c0                	addi	s0,sp,708
     5ba:	0000                	unimp
     5bc:	05c0                	addi	s0,sp,708
	...

000005c0 <__dummy>:
	.long   __dummy
	.endr

  .global __dummy
__dummy:  
  j __fail
     5c0:	b61ff06f          	j	120 <__fail>
	...

00000600 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
     600:	00d67663          	bgeu	a2,a3,60c <_out_buffer+0xc>
    ((char*)buffer)[idx] = character;
     604:	00c585b3          	add	a1,a1,a2
     608:	00a58023          	sb	a0,0(a1)
  }
}
     60c:	00008067          	ret

00000610 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
     610:	00008067          	ret

00000614 <_out_rev>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
     614:	fd010113          	addi	sp,sp,-48
     618:	02912223          	sw	s1,36(sp)
     61c:	03212023          	sw	s2,32(sp)
     620:	01312e23          	sw	s3,28(sp)
     624:	01412c23          	sw	s4,24(sp)
     628:	01512a23          	sw	s5,20(sp)
     62c:	01612823          	sw	s6,16(sp)
     630:	00060a93          	mv	s5,a2
     634:	01812423          	sw	s8,8(sp)
     638:	01912223          	sw	s9,4(sp)
     63c:	01a12023          	sw	s10,0(sp)
     640:	02112623          	sw	ra,44(sp)
     644:	02812423          	sw	s0,40(sp)
     648:	01712623          	sw	s7,12(sp)
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
     64c:	0038f613          	andi	a2,a7,3
{
     650:	00088c93          	mv	s9,a7
     654:	00050913          	mv	s2,a0
     658:	00058993          	mv	s3,a1
     65c:	00068a13          	mv	s4,a3
     660:	00070b13          	mv	s6,a4
     664:	00078d13          	mv	s10,a5
     668:	00080c13          	mv	s8,a6
     66c:	000a8493          	mv	s1,s5
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
     670:	02061863          	bnez	a2,6a0 <_out_rev+0x8c>
    for (size_t i = len; i < width; i++) {
     674:	0307f663          	bgeu	a5,a6,6a0 <_out_rev+0x8c>
     678:	40f804b3          	sub	s1,a6,a5
     67c:	015484b3          	add	s1,s1,s5
     680:	000a8413          	mv	s0,s5
      out(' ', buffer, idx++, maxlen);
     684:	00040613          	mv	a2,s0
     688:	000a0693          	mv	a3,s4
     68c:	00140413          	addi	s0,s0,1
     690:	00098593          	mv	a1,s3
     694:	02000513          	li	a0,32
     698:	000900e7          	jalr	s2
    for (size_t i = len; i < width; i++) {
     69c:	fe9414e3          	bne	s0,s1,684 <_out_rev+0x70>
    }
  }

  // reverse string
  while (len) {
     6a0:	020d0663          	beqz	s10,6cc <_out_rev+0xb8>
     6a4:	01ab0433          	add	s0,s6,s10
     6a8:	00940bb3          	add	s7,s0,s1
    out(buf[--len], buffer, idx++, maxlen);
     6ac:	fff44503          	lbu	a0,-1(s0)
     6b0:	408b8633          	sub	a2,s7,s0
     6b4:	000a0693          	mv	a3,s4
  while (len) {
     6b8:	fff40413          	addi	s0,s0,-1
    out(buf[--len], buffer, idx++, maxlen);
     6bc:	00098593          	mv	a1,s3
     6c0:	000900e7          	jalr	s2
  while (len) {
     6c4:	fe8b14e3          	bne	s6,s0,6ac <_out_rev+0x98>
    out(buf[--len], buffer, idx++, maxlen);
     6c8:	01a484b3          	add	s1,s1,s10
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
     6cc:	002cfc93          	andi	s9,s9,2
     6d0:	020c8663          	beqz	s9,6fc <_out_rev+0xe8>
    while (idx - start_idx < width) {
     6d4:	41548ab3          	sub	s5,s1,s5
     6d8:	038af263          	bgeu	s5,s8,6fc <_out_rev+0xe8>
      out(' ', buffer, idx++, maxlen);
     6dc:	00048613          	mv	a2,s1
    while (idx - start_idx < width) {
     6e0:	001a8a93          	addi	s5,s5,1
      out(' ', buffer, idx++, maxlen);
     6e4:	000a0693          	mv	a3,s4
     6e8:	00098593          	mv	a1,s3
     6ec:	02000513          	li	a0,32
     6f0:	00148493          	addi	s1,s1,1
     6f4:	000900e7          	jalr	s2
    while (idx - start_idx < width) {
     6f8:	ff8ae2e3          	bltu	s5,s8,6dc <_out_rev+0xc8>
    }
  }

  return idx;
}
     6fc:	02c12083          	lw	ra,44(sp)
     700:	02812403          	lw	s0,40(sp)
     704:	02012903          	lw	s2,32(sp)
     708:	01c12983          	lw	s3,28(sp)
     70c:	01812a03          	lw	s4,24(sp)
     710:	01412a83          	lw	s5,20(sp)
     714:	01012b03          	lw	s6,16(sp)
     718:	00c12b83          	lw	s7,12(sp)
     71c:	00812c03          	lw	s8,8(sp)
     720:	00412c83          	lw	s9,4(sp)
     724:	00012d03          	lw	s10,0(sp)
     728:	00048513          	mv	a0,s1
     72c:	02412483          	lw	s1,36(sp)
     730:	03010113          	addi	sp,sp,48
     734:	00008067          	ret

00000738 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
     738:	00812383          	lw	t2,8(sp)
     73c:	00012283          	lw	t0,0(sp)
     740:	00412f83          	lw	t6,4(sp)
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
     744:	0023f313          	andi	t1,t2,2
{
     748:	00080f13          	mv	t5,a6
  if (!(flags & FLAGS_LEFT)) {
     74c:	06031463          	bnez	t1,7b4 <_ntoa_format+0x7c>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
     750:	0013f813          	andi	a6,t2,1
     754:	100f9e63          	bnez	t6,870 <_ntoa_format+0x138>
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     758:	0257f663          	bgeu	a5,t0,784 <_ntoa_format+0x4c>
     75c:	01f00313          	li	t1,31
     760:	22f36863          	bltu	t1,a5,990 <_ntoa_format+0x258>
      buf[len++] = '0';
     764:	03000e13          	li	t3,48
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     768:	02000e93          	li	t4,32
     76c:	0080006f          	j	774 <_ntoa_format+0x3c>
     770:	01d78a63          	beq	a5,t4,784 <_ntoa_format+0x4c>
      buf[len++] = '0';
     774:	00178793          	addi	a5,a5,1
     778:	00f70333          	add	t1,a4,a5
     77c:	ffc30fa3          	sb	t3,-1(t1)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     780:	fe57e8e3          	bltu	a5,t0,770 <_ntoa_format+0x38>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     784:	02080863          	beqz	a6,7b4 <_ntoa_format+0x7c>
     788:	03f7f663          	bgeu	a5,t6,7b4 <_ntoa_format+0x7c>
     78c:	02000813          	li	a6,32
     790:	11078263          	beq	a5,a6,894 <_ntoa_format+0x15c>
      buf[len++] = '0';
     794:	03000e13          	li	t3,48
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     798:	02000e93          	li	t4,32
     79c:	0080006f          	j	7a4 <_ntoa_format+0x6c>
     7a0:	0fd78a63          	beq	a5,t4,894 <_ntoa_format+0x15c>
      buf[len++] = '0';
     7a4:	00178793          	addi	a5,a5,1
     7a8:	00f70333          	add	t1,a4,a5
     7ac:	ffc30fa3          	sb	t3,-1(t1)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     7b0:	fff798e3          	bne	a5,t6,7a0 <_ntoa_format+0x68>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
     7b4:	0103f813          	andi	a6,t2,16
     7b8:	08080463          	beqz	a6,840 <_ntoa_format+0x108>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
     7bc:	4003f813          	andi	a6,t2,1024
     7c0:	04081c63          	bnez	a6,818 <_ntoa_format+0xe0>
     7c4:	04079663          	bnez	a5,810 <_ntoa_format+0xd8>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     7c8:	01000793          	li	a5,16
     7cc:	16f88463          	beq	a7,a5,934 <_ntoa_format+0x1fc>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     7d0:	00200793          	li	a5,2
     7d4:	1af88663          	beq	a7,a5,980 <_ntoa_format+0x248>
      buf[len++] = 'b';
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
      buf[len++] = '0';
     7d8:	03000793          	li	a5,48
     7dc:	00f70023          	sb	a5,0(a4)
     7e0:	00100793          	li	a5,1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    if (negative) {
     7e4:	060f0463          	beqz	t5,84c <_ntoa_format+0x114>
      buf[len++] = '-';
     7e8:	00f70833          	add	a6,a4,a5
     7ec:	02d00893          	li	a7,45
     7f0:	01180023          	sb	a7,0(a6) # 50000 <_global_impure_ptr+0x49ad8>
     7f4:	00178793          	addi	a5,a5,1
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
     7f8:	00038893          	mv	a7,t2
     7fc:	000f8813          	mv	a6,t6
     800:	e15ff06f          	j	614 <_out_rev>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
     804:	4003f793          	andi	a5,t2,1024
     808:	16079063          	bnez	a5,968 <_ntoa_format+0x230>
     80c:	02000793          	li	a5,32
     810:	0ef28063          	beq	t0,a5,8f0 <_ntoa_format+0x1b8>
     814:	0cff8e63          	beq	t6,a5,8f0 <_ntoa_format+0x1b8>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     818:	01000813          	li	a6,16
     81c:	0f088a63          	beq	a7,a6,910 <_ntoa_format+0x1d8>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     820:	00200813          	li	a6,2
     824:	0b088863          	beq	a7,a6,8d4 <_ntoa_format+0x19c>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
     828:	02000813          	li	a6,32
     82c:	fd0786e3          	beq	a5,a6,7f8 <_ntoa_format+0xc0>
      buf[len++] = '0';
     830:	00f70833          	add	a6,a4,a5
     834:	03000893          	li	a7,48
     838:	01180023          	sb	a7,0(a6)
     83c:	00178793          	addi	a5,a5,1
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
     840:	02000813          	li	a6,32
     844:	fb078ae3          	beq	a5,a6,7f8 <_ntoa_format+0xc0>
    if (negative) {
     848:	fa0f10e3          	bnez	t5,7e8 <_ntoa_format+0xb0>
    else if (flags & FLAGS_PLUS) {
     84c:	0043f813          	andi	a6,t2,4
     850:	06081463          	bnez	a6,8b8 <_ntoa_format+0x180>
    else if (flags & FLAGS_SPACE) {
     854:	0083f813          	andi	a6,t2,8
     858:	fa0800e3          	beqz	a6,7f8 <_ntoa_format+0xc0>
      buf[len++] = ' ';
     85c:	00f70833          	add	a6,a4,a5
     860:	02000893          	li	a7,32
     864:	01180023          	sb	a7,0(a6)
     868:	00178793          	addi	a5,a5,1
     86c:	f8dff06f          	j	7f8 <_ntoa_format+0xc0>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
     870:	02080a63          	beqz	a6,8a4 <_ntoa_format+0x16c>
     874:	060f1a63          	bnez	t5,8e8 <_ntoa_format+0x1b0>
     878:	00c3f313          	andi	t1,t2,12
     87c:	06031663          	bnez	t1,8e8 <_ntoa_format+0x1b0>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     880:	f057f4e3          	bgeu	a5,t0,788 <_ntoa_format+0x50>
     884:	01f00313          	li	t1,31
     888:	ecf37ee3          	bgeu	t1,a5,764 <_ntoa_format+0x2c>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     88c:	02000793          	li	a5,32
     890:	f3f7f2e3          	bgeu	a5,t6,7b4 <_ntoa_format+0x7c>
  if (flags & FLAGS_HASH) {
     894:	0103f793          	andi	a5,t2,16
     898:	f60796e3          	bnez	a5,804 <_ntoa_format+0xcc>
     89c:	02000793          	li	a5,32
     8a0:	f59ff06f          	j	7f8 <_ntoa_format+0xc0>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     8a4:	f057f8e3          	bgeu	a5,t0,7b4 <_ntoa_format+0x7c>
     8a8:	01f00313          	li	t1,31
     8ac:	eaf37ce3          	bgeu	t1,a5,764 <_ntoa_format+0x2c>
     8b0:	02000793          	li	a5,32
     8b4:	f01ff06f          	j	7b4 <_ntoa_format+0x7c>
      buf[len++] = '+';  // ignore the space if the '+' exists
     8b8:	00f70833          	add	a6,a4,a5
     8bc:	02b00893          	li	a7,43
     8c0:	01180023          	sb	a7,0(a6)
     8c4:	00178793          	addi	a5,a5,1
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
     8c8:	00038893          	mv	a7,t2
     8cc:	000f8813          	mv	a6,t6
     8d0:	d45ff06f          	j	614 <_out_rev>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     8d4:	02000813          	li	a6,32
     8d8:	f30780e3          	beq	a5,a6,7f8 <_ntoa_format+0xc0>
      buf[len++] = 'b';
     8dc:	00f70833          	add	a6,a4,a5
     8e0:	00178793          	addi	a5,a5,1
     8e4:	0d40006f          	j	9b8 <_ntoa_format+0x280>
      width--;
     8e8:	ffff8f93          	addi	t6,t6,-1
     8ec:	f95ff06f          	j	880 <_ntoa_format+0x148>
      len--;
     8f0:	fff78813          	addi	a6,a5,-1
      if (len && (base == 16U)) {
     8f4:	ec080ae3          	beqz	a6,7c8 <_ntoa_format+0x90>
     8f8:	01000313          	li	t1,16
     8fc:	0a688063          	beq	a7,t1,99c <_ntoa_format+0x264>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     900:	00200313          	li	t1,2
     904:	0a688863          	beq	a7,t1,9b4 <_ntoa_format+0x27c>
     908:	00080793          	mv	a5,a6
     90c:	f25ff06f          	j	830 <_ntoa_format+0xf8>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     910:	0203f813          	andi	a6,t2,32
     914:	02081c63          	bnez	a6,94c <_ntoa_format+0x214>
     918:	02000813          	li	a6,32
     91c:	ed078ee3          	beq	a5,a6,7f8 <_ntoa_format+0xc0>
      buf[len++] = 'x';
     920:	00f708b3          	add	a7,a4,a5
     924:	00178793          	addi	a5,a5,1
     928:	07800813          	li	a6,120
     92c:	01088023          	sb	a6,0(a7)
     930:	ef9ff06f          	j	828 <_ntoa_format+0xf0>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     934:	0203f793          	andi	a5,t2,32
     938:	02079c63          	bnez	a5,970 <_ntoa_format+0x238>
      buf[len++] = 'x';
     93c:	07800793          	li	a5,120
     940:	00f70023          	sb	a5,0(a4)
     944:	00100793          	li	a5,1
     948:	ee9ff06f          	j	830 <_ntoa_format+0xf8>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     94c:	02000813          	li	a6,32
     950:	eb0784e3          	beq	a5,a6,7f8 <_ntoa_format+0xc0>
      buf[len++] = 'X';
     954:	00f70833          	add	a6,a4,a5
     958:	05800893          	li	a7,88
     95c:	01180023          	sb	a7,0(a6)
     960:	00178793          	addi	a5,a5,1
     964:	ec5ff06f          	j	828 <_ntoa_format+0xf0>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
     968:	02000793          	li	a5,32
     96c:	eadff06f          	j	818 <_ntoa_format+0xe0>
      buf[len++] = 'X';
     970:	05800793          	li	a5,88
     974:	00f70023          	sb	a5,0(a4)
     978:	00100793          	li	a5,1
     97c:	eb5ff06f          	j	830 <_ntoa_format+0xf8>
      buf[len++] = 'b';
     980:	06200793          	li	a5,98
     984:	00f70023          	sb	a5,0(a4)
     988:	00100793          	li	a5,1
     98c:	ea5ff06f          	j	830 <_ntoa_format+0xf8>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     990:	02000793          	li	a5,32
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     994:	de081ae3          	bnez	a6,788 <_ntoa_format+0x50>
     998:	e1dff06f          	j	7b4 <_ntoa_format+0x7c>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     99c:	0203f893          	andi	a7,t2,32
        len--;
     9a0:	ffe78793          	addi	a5,a5,-2
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     9a4:	fa0898e3          	bnez	a7,954 <_ntoa_format+0x21c>
      buf[len++] = 'x';
     9a8:	00f708b3          	add	a7,a4,a5
     9ac:	00080793          	mv	a5,a6
     9b0:	f79ff06f          	j	928 <_ntoa_format+0x1f0>
      buf[len++] = 'b';
     9b4:	01070833          	add	a6,a4,a6
     9b8:	06200893          	li	a7,98
     9bc:	01180023          	sb	a7,0(a6)
     9c0:	e69ff06f          	j	828 <_ntoa_format+0xf0>

000009c4 <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
     9c4:	fc010113          	addi	sp,sp,-64
     9c8:	02812c23          	sw	s0,56(sp)
     9cc:	02112e23          	sw	ra,60(sp)
     9d0:	00080e93          	mv	t4,a6
     9d4:	04412403          	lw	s0,68(sp)
     9d8:	00070e13          	mv	t3,a4
     9dc:	00078813          	mv	a6,a5
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
     9e0:	00071863          	bnez	a4,9f0 <_ntoa_long+0x2c>
    flags &= ~FLAGS_HASH;
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
     9e4:	40047793          	andi	a5,s0,1024
    flags &= ~FLAGS_HASH;
     9e8:	fef47413          	andi	s0,s0,-17
  if (!(flags & FLAGS_PRECISION) || value) {
     9ec:	08079863          	bnez	a5,a7c <_ntoa_long+0xb8>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     9f0:	02047713          	andi	a4,s0,32
     9f4:	06100293          	li	t0,97
     9f8:	06071e63          	bnez	a4,a74 <_ntoa_long+0xb0>
     9fc:	00000793          	li	a5,0
     a00:	01010713          	addi	a4,sp,16
     a04:	00900393          	li	t2,9
     a08:	ff628293          	addi	t0,t0,-10
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     a0c:	02000093          	li	ra,32
     a10:	00c0006f          	j	a1c <_ntoa_long+0x58>
     a14:	02178c63          	beq	a5,ra,a4c <_ntoa_long+0x88>
      value /= base;
     a18:	00030e13          	mv	t3,t1
      const char digit = (char)(value % base);
     a1c:	03de7f33          	remu	t5,t3,t4
     a20:	0fff7313          	andi	t1,t5,255
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     a24:	03030f93          	addi	t6,t1,48
     a28:	00530333          	add	t1,t1,t0
     a2c:	0ff37313          	andi	t1,t1,255
     a30:	01e3e463          	bltu	t2,t5,a38 <_ntoa_long+0x74>
     a34:	0ffff313          	andi	t1,t6,255
     a38:	00178793          	addi	a5,a5,1
     a3c:	00f70f33          	add	t5,a4,a5
     a40:	fe6f0fa3          	sb	t1,-1(t5)
      value /= base;
     a44:	03de5333          	divu	t1,t3,t4
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     a48:	fdde76e3          	bgeu	t3,t4,a14 <_ntoa_long+0x50>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
     a4c:	04012303          	lw	t1,64(sp)
     a50:	00812423          	sw	s0,8(sp)
     a54:	01112023          	sw	a7,0(sp)
     a58:	00612223          	sw	t1,4(sp)
     a5c:	000e8893          	mv	a7,t4
     a60:	cd9ff0ef          	jal	ra,738 <_ntoa_format>
}
     a64:	03c12083          	lw	ra,60(sp)
     a68:	03812403          	lw	s0,56(sp)
     a6c:	04010113          	addi	sp,sp,64
     a70:	00008067          	ret
     a74:	04100293          	li	t0,65
     a78:	f85ff06f          	j	9fc <_ntoa_long+0x38>
  size_t len = 0U;
     a7c:	00000793          	li	a5,0
     a80:	01010713          	addi	a4,sp,16
     a84:	fc9ff06f          	j	a4c <_ntoa_long+0x88>

00000a88 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
     a88:	f7010113          	addi	sp,sp,-144
     a8c:	07512223          	sw	s5,100(sp)
     a90:	07612023          	sw	s6,96(sp)
     a94:	05712e23          	sw	s7,92(sp)
     a98:	05812c23          	sw	s8,88(sp)
     a9c:	05912a23          	sw	s9,84(sp)
     aa0:	05a12823          	sw	s10,80(sp)
     aa4:	05b12623          	sw	s11,76(sp)
     aa8:	06112e23          	sw	ra,124(sp)
     aac:	00078d93          	mv	s11,a5
     ab0:	06812c23          	sw	s0,120(sp)
     ab4:	06912a23          	sw	s1,116(sp)
     ab8:	07212823          	sw	s2,112(sp)
     abc:	07312623          	sw	s3,108(sp)
     ac0:	07412423          	sw	s4,104(sp)
     ac4:	09112623          	sw	a7,140(sp)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
     ac8:	00f767b3          	or	a5,a4,a5
{
     acc:	00a12c23          	sw	a0,24(sp)
     ad0:	00b12e23          	sw	a1,28(sp)
     ad4:	09012b03          	lw	s6,144(sp)
     ad8:	00070a93          	mv	s5,a4
     adc:	00060b93          	mv	s7,a2
     ae0:	00068c13          	mv	s8,a3
     ae4:	00080c93          	mv	s9,a6
     ae8:	00088d13          	mv	s10,a7
  if (!value) {
     aec:	00079e63          	bnez	a5,b08 <_ntoa_long_long+0x80>
    flags &= ~FLAGS_HASH;
     af0:	09c12703          	lw	a4,156(sp)
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
     af4:	09c12783          	lw	a5,156(sp)
    flags &= ~FLAGS_HASH;
     af8:	fef77a13          	andi	s4,a4,-17
  if (!(flags & FLAGS_PRECISION) || value) {
     afc:	4007f793          	andi	a5,a5,1024
    flags &= ~FLAGS_HASH;
     b00:	09412e23          	sw	s4,156(sp)
  if (!(flags & FLAGS_PRECISION) || value) {
     b04:	08079663          	bnez	a5,b90 <_ntoa_long_long+0x108>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     b08:	09c12783          	lw	a5,156(sp)
     b0c:	06100413          	li	s0,97
     b10:	0207f793          	andi	a5,a5,32
     b14:	10079263          	bnez	a5,c18 <_ntoa_long_long+0x190>
     b18:	00000a13          	li	s4,0
     b1c:	02010493          	addi	s1,sp,32
     b20:	00900913          	li	s2,9
     b24:	ff640413          	addi	s0,s0,-10
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     b28:	02000993          	li	s3,32
      const char digit = (char)(value % base);
     b2c:	000d0613          	mv	a2,s10
     b30:	000b0693          	mv	a3,s6
     b34:	000a8513          	mv	a0,s5
     b38:	000d8593          	mv	a1,s11
     b3c:	2f8020ef          	jal	ra,2e34 <__umoddi3>
     b40:	0ff57513          	andi	a0,a0,255
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     b44:	00850833          	add	a6,a0,s0
     b48:	03050613          	addi	a2,a0,48
     b4c:	0ff87813          	andi	a6,a6,255
     b50:	00a96463          	bltu	s2,a0,b58 <_ntoa_long_long+0xd0>
     b54:	0ff67813          	andi	a6,a2,255
     b58:	001a0a13          	addi	s4,s4,1
     b5c:	014488b3          	add	a7,s1,s4
      value /= base;
     b60:	000a8513          	mv	a0,s5
     b64:	000d8593          	mv	a1,s11
     b68:	000d0613          	mv	a2,s10
     b6c:	000b0693          	mv	a3,s6
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     b70:	ff088fa3          	sb	a6,-1(a7)
      value /= base;
     b74:	761010ef          	jal	ra,2ad4 <__udivdi3>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     b78:	036de063          	bltu	s11,s6,b98 <_ntoa_long_long+0x110>
     b7c:	09bb0a63          	beq	s6,s11,c10 <_ntoa_long_long+0x188>
     b80:	013a0c63          	beq	s4,s3,b98 <_ntoa_long_long+0x110>
      value /= base;
     b84:	00050a93          	mv	s5,a0
     b88:	00058d93          	mv	s11,a1
     b8c:	fa1ff06f          	j	b2c <_ntoa_long_long+0xa4>
  size_t len = 0U;
     b90:	00000a13          	li	s4,0
     b94:	02010493          	addi	s1,sp,32
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
     b98:	09812703          	lw	a4,152(sp)
     b9c:	09c12783          	lw	a5,156(sp)
     ba0:	01c12583          	lw	a1,28(sp)
     ba4:	00e12223          	sw	a4,4(sp)
     ba8:	09412703          	lw	a4,148(sp)
     bac:	01812503          	lw	a0,24(sp)
     bb0:	00f12423          	sw	a5,8(sp)
     bb4:	00e12023          	sw	a4,0(sp)
     bb8:	000d0893          	mv	a7,s10
     bbc:	000c8813          	mv	a6,s9
     bc0:	000a0793          	mv	a5,s4
     bc4:	00048713          	mv	a4,s1
     bc8:	000c0693          	mv	a3,s8
     bcc:	000b8613          	mv	a2,s7
     bd0:	b69ff0ef          	jal	ra,738 <_ntoa_format>
}
     bd4:	07c12083          	lw	ra,124(sp)
     bd8:	07812403          	lw	s0,120(sp)
     bdc:	07412483          	lw	s1,116(sp)
     be0:	07012903          	lw	s2,112(sp)
     be4:	06c12983          	lw	s3,108(sp)
     be8:	06812a03          	lw	s4,104(sp)
     bec:	06412a83          	lw	s5,100(sp)
     bf0:	06012b03          	lw	s6,96(sp)
     bf4:	05c12b83          	lw	s7,92(sp)
     bf8:	05812c03          	lw	s8,88(sp)
     bfc:	05412c83          	lw	s9,84(sp)
     c00:	05012d03          	lw	s10,80(sp)
     c04:	04c12d83          	lw	s11,76(sp)
     c08:	09010113          	addi	sp,sp,144
     c0c:	00008067          	ret
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     c10:	f7aaf8e3          	bgeu	s5,s10,b80 <_ntoa_long_long+0xf8>
     c14:	f85ff06f          	j	b98 <_ntoa_long_long+0x110>
     c18:	04100413          	li	s0,65
     c1c:	efdff06f          	j	b18 <_ntoa_long_long+0x90>

00000c20 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
     c20:	f8010113          	addi	sp,sp,-128
     c24:	07212823          	sw	s2,112(sp)
     c28:	07312623          	sw	s3,108(sp)
     c2c:	07412423          	sw	s4,104(sp)
     c30:	07512223          	sw	s5,100(sp)
     c34:	00050993          	mv	s3,a0
     c38:	00058a13          	mv	s4,a1
     c3c:	00060913          	mv	s2,a2
     c40:	00068a93          	mv	s5,a3
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
     c44:	00070613          	mv	a2,a4
     c48:	00078693          	mv	a3,a5
     c4c:	00070513          	mv	a0,a4
     c50:	00078593          	mv	a1,a5
{
     c54:	06812c23          	sw	s0,120(sp)
     c58:	06912a23          	sw	s1,116(sp)
     c5c:	07612023          	sw	s6,96(sp)
     c60:	05812c23          	sw	s8,88(sp)
     c64:	05912a23          	sw	s9,84(sp)
     c68:	06112e23          	sw	ra,124(sp)
     c6c:	05712e23          	sw	s7,92(sp)
     c70:	05a12823          	sw	s10,80(sp)
     c74:	05b12623          	sw	s11,76(sp)
     c78:	00070413          	mv	s0,a4
     c7c:	00078493          	mv	s1,a5
     c80:	00080c13          	mv	s8,a6
     c84:	00088b13          	mv	s6,a7
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
     c88:	430030ef          	jal	ra,40b8 <__eqdf2>
{
     c8c:	08012c83          	lw	s9,128(sp)
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
     c90:	4e051663          	bnez	a0,117c <_etoa+0x55c>
     c94:	000067b7          	lui	a5,0x6
     c98:	4907a603          	lw	a2,1168(a5) # 6490 <__erodata+0x4>
     c9c:	4947a683          	lw	a3,1172(a5)
     ca0:	00040513          	mv	a0,s0
     ca4:	00048593          	mv	a1,s1
     ca8:	4b4030ef          	jal	ra,415c <__gedf2>
     cac:	4ca04863          	bgtz	a0,117c <_etoa+0x55c>
     cb0:	000067b7          	lui	a5,0x6
     cb4:	4987a603          	lw	a2,1176(a5) # 6498 <__erodata+0xc>
     cb8:	49c7a683          	lw	a3,1180(a5)
     cbc:	00040513          	mv	a0,s0
     cc0:	00048593          	mv	a1,s1
     cc4:	54e030ef          	jal	ra,4212 <__ledf2>
     cc8:	4a054a63          	bltz	a0,117c <_etoa+0x55c>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
  }

  // determine the sign
  const bool negative = value < 0;
  if (negative) {
     ccc:	00040513          	mv	a0,s0
     cd0:	00048593          	mv	a1,s1
     cd4:	00000613          	li	a2,0
     cd8:	00000693          	li	a3,0
     cdc:	536030ef          	jal	ra,4212 <__ledf2>
    value = -value;
     ce0:	80000bb7          	lui	s7,0x80000
     ce4:	02812223          	sw	s0,36(sp)
     ce8:	009bcbb3          	xor	s7,s7,s1
  if (negative) {
     cec:	00054463          	bltz	a0,cf4 <_etoa+0xd4>
     cf0:	00048b93          	mv	s7,s1
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
     cf4:	400cf793          	andi	a5,s9,1024
     cf8:	02f12e23          	sw	a5,60(sp)
     cfc:	00079463          	bnez	a5,d04 <_etoa+0xe4>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
     d00:	00600c13          	li	s8,6
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
     d04:	014bd513          	srli	a0,s7,0x14
     d08:	7ff57513          	andi	a0,a0,2047
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
     d0c:	c0150513          	addi	a0,a0,-1023
     d10:	582040ef          	jal	ra,5292 <__floatsidf>
     d14:	000067b7          	lui	a5,0x6
     d18:	4a07a603          	lw	a2,1184(a5) # 64a0 <__erodata+0x14>
     d1c:	4a47a683          	lw	a3,1188(a5)
     d20:	5a8030ef          	jal	ra,42c8 <__muldf3>
     d24:	000067b7          	lui	a5,0x6
     d28:	4a87a603          	lw	a2,1192(a5) # 64a8 <__erodata+0x1c>
     d2c:	4ac7a683          	lw	a3,1196(a5)
     d30:	444020ef          	jal	ra,3174 <__adddf3>
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
     d34:	00cb9793          	slli	a5,s7,0xc
     d38:	00c7d713          	srli	a4,a5,0xc
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
     d3c:	000067b7          	lui	a5,0x6
     d40:	4b07a603          	lw	a2,1200(a5) # 64b0 <__erodata+0x24>
     d44:	4b47a683          	lw	a3,1204(a5)
     d48:	3ff007b7          	lui	a5,0x3ff00
     d4c:	00e7e7b3          	or	a5,a5,a4
     d50:	00050d93          	mv	s11,a0
     d54:	00058d13          	mv	s10,a1
     d58:	00040513          	mv	a0,s0
     d5c:	00078593          	mv	a1,a5
     d60:	307030ef          	jal	ra,4866 <__subdf3>
     d64:	000067b7          	lui	a5,0x6
     d68:	4b87a603          	lw	a2,1208(a5) # 64b8 <__erodata+0x2c>
     d6c:	4bc7a683          	lw	a3,1212(a5)
     d70:	558030ef          	jal	ra,42c8 <__muldf3>
     d74:	00050613          	mv	a2,a0
     d78:	00058693          	mv	a3,a1
     d7c:	000d8513          	mv	a0,s11
     d80:	000d0593          	mv	a1,s10
     d84:	3f0020ef          	jal	ra,3174 <__adddf3>
     d88:	3aa040ef          	jal	ra,5132 <__fixdfsi>
     d8c:	00050d13          	mv	s10,a0
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
     d90:	502040ef          	jal	ra,5292 <__floatsidf>
     d94:	000067b7          	lui	a5,0x6
     d98:	4c07a603          	lw	a2,1216(a5) # 64c0 <__erodata+0x34>
     d9c:	4c47a683          	lw	a3,1220(a5)
     da0:	00058d93          	mv	s11,a1
     da4:	00a12c23          	sw	a0,24(sp)
     da8:	520030ef          	jal	ra,42c8 <__muldf3>
     dac:	00006737          	lui	a4,0x6
     db0:	4c872603          	lw	a2,1224(a4) # 64c8 <__erodata+0x3c>
     db4:	4cc72683          	lw	a3,1228(a4)
     db8:	3bc020ef          	jal	ra,3174 <__adddf3>
     dbc:	376040ef          	jal	ra,5132 <__fixdfsi>
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
     dc0:	01812783          	lw	a5,24(sp)
     dc4:	000066b7          	lui	a3,0x6
     dc8:	4d06a603          	lw	a2,1232(a3) # 64d0 <__erodata+0x44>
     dcc:	4d46a683          	lw	a3,1236(a3)
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
     dd0:	00050713          	mv	a4,a0
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
     dd4:	000d8593          	mv	a1,s11
     dd8:	00078513          	mv	a0,a5
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
     ddc:	00070d93          	mv	s11,a4
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
     de0:	4e8030ef          	jal	ra,42c8 <__muldf3>
     de4:	00050793          	mv	a5,a0
     de8:	000d8513          	mv	a0,s11
     dec:	00f12c23          	sw	a5,24(sp)
     df0:	03b12423          	sw	s11,40(sp)
     df4:	00058d93          	mv	s11,a1
     df8:	49a040ef          	jal	ra,5292 <__floatsidf>
     dfc:	00006737          	lui	a4,0x6
     e00:	4d872603          	lw	a2,1240(a4) # 64d8 <__erodata+0x4c>
     e04:	4dc72683          	lw	a3,1244(a4)
     e08:	4c0030ef          	jal	ra,42c8 <__muldf3>
     e0c:	01812783          	lw	a5,24(sp)
     e10:	00050613          	mv	a2,a0
     e14:	00058693          	mv	a3,a1
     e18:	00078513          	mv	a0,a5
     e1c:	000d8593          	mv	a1,s11
     e20:	247030ef          	jal	ra,4866 <__subdf3>
  const double z2 = z * z;
     e24:	00050613          	mv	a2,a0
     e28:	00058693          	mv	a3,a1
     e2c:	02a12623          	sw	a0,44(sp)
     e30:	00b12c23          	sw	a1,24(sp)
     e34:	494030ef          	jal	ra,42c8 <__muldf3>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     e38:	01812783          	lw	a5,24(sp)
     e3c:	02c12703          	lw	a4,44(sp)
  const double z2 = z * z;
     e40:	00050d93          	mv	s11,a0
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     e44:	00078693          	mv	a3,a5
  const double z2 = z * z;
     e48:	00058813          	mv	a6,a1
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     e4c:	00070613          	mv	a2,a4
     e50:	00078593          	mv	a1,a5
     e54:	00070513          	mv	a0,a4
     e58:	02f12a23          	sw	a5,52(sp)
     e5c:	02e12c23          	sw	a4,56(sp)
  const double z2 = z * z;
     e60:	01012c23          	sw	a6,24(sp)
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     e64:	310020ef          	jal	ra,3174 <__adddf3>
     e68:	000066b7          	lui	a3,0x6
     e6c:	00058813          	mv	a6,a1
     e70:	4e06a603          	lw	a2,1248(a3) # 64e0 <__erodata+0x54>
     e74:	01812583          	lw	a1,24(sp)
     e78:	4e46a683          	lw	a3,1252(a3)
     e7c:	00050893          	mv	a7,a0
     e80:	000d8513          	mv	a0,s11
     e84:	03112823          	sw	a7,48(sp)
     e88:	03012623          	sw	a6,44(sp)
     e8c:	3a1020ef          	jal	ra,3a2c <__divdf3>
     e90:	00006737          	lui	a4,0x6
     e94:	4e872603          	lw	a2,1256(a4) # 64e8 <__erodata+0x5c>
     e98:	4ec72683          	lw	a3,1260(a4)
     e9c:	2d8020ef          	jal	ra,3174 <__adddf3>
     ea0:	00058693          	mv	a3,a1
     ea4:	01812583          	lw	a1,24(sp)
     ea8:	00050613          	mv	a2,a0
     eac:	000d8513          	mv	a0,s11
     eb0:	37d020ef          	jal	ra,3a2c <__divdf3>
     eb4:	000066b7          	lui	a3,0x6
     eb8:	4f06a603          	lw	a2,1264(a3) # 64f0 <__erodata+0x64>
     ebc:	4f46a683          	lw	a3,1268(a3)
     ec0:	2b4020ef          	jal	ra,3174 <__adddf3>
     ec4:	00058693          	mv	a3,a1
     ec8:	01812583          	lw	a1,24(sp)
     ecc:	00050613          	mv	a2,a0
     ed0:	000d8513          	mv	a0,s11
     ed4:	359020ef          	jal	ra,3a2c <__divdf3>
     ed8:	03812703          	lw	a4,56(sp)
     edc:	03412783          	lw	a5,52(sp)
     ee0:	000066b7          	lui	a3,0x6
     ee4:	00050313          	mv	t1,a0
     ee8:	00058d93          	mv	s11,a1
     eec:	4f86a503          	lw	a0,1272(a3) # 64f8 <__erodata+0x6c>
     ef0:	4fc6a583          	lw	a1,1276(a3)
     ef4:	00070613          	mv	a2,a4
     ef8:	00078693          	mv	a3,a5
     efc:	00612c23          	sw	t1,24(sp)
     f00:	167030ef          	jal	ra,4866 <__subdf3>
     f04:	01812303          	lw	t1,24(sp)
     f08:	00050613          	mv	a2,a0
     f0c:	00058693          	mv	a3,a1
     f10:	00030513          	mv	a0,t1
     f14:	000d8593          	mv	a1,s11
     f18:	25c020ef          	jal	ra,3174 <__adddf3>
     f1c:	03012883          	lw	a7,48(sp)
     f20:	02c12803          	lw	a6,44(sp)
     f24:	00050613          	mv	a2,a0
     f28:	00058693          	mv	a3,a1
     f2c:	00088513          	mv	a0,a7
     f30:	00080593          	mv	a1,a6
     f34:	2f9020ef          	jal	ra,3a2c <__divdf3>
     f38:	000067b7          	lui	a5,0x6
     f3c:	5007a603          	lw	a2,1280(a5) # 6500 <__erodata+0x74>
     f40:	5047a683          	lw	a3,1284(a5)
     f44:	230020ef          	jal	ra,3174 <__adddf3>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
     f48:	02812783          	lw	a5,40(sp)
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     f4c:	00000613          	li	a2,0
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
     f50:	3ff78793          	addi	a5,a5,1023
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     f54:	01479793          	slli	a5,a5,0x14
     f58:	00078693          	mv	a3,a5
     f5c:	36c030ef          	jal	ra,42c8 <__muldf3>
  // correct for rounding errors
  if (value < conv.F) {
     f60:	00040613          	mv	a2,s0
     f64:	000b8693          	mv	a3,s7
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     f68:	00050d93          	mv	s11,a0
     f6c:	00b12c23          	sw	a1,24(sp)
  if (value < conv.F) {
     f70:	1ec030ef          	jal	ra,415c <__gedf2>
     f74:	26a04463          	bgtz	a0,11dc <_etoa+0x5bc>
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     f78:	01812383          	lw	t2,24(sp)
     f7c:	000d8313          	mv	t1,s11
    expval--;
    conv.F /= 10;
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
     f80:	063d0d93          	addi	s11,s10,99

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
     f84:	00bcd793          	srli	a5,s9,0xb
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
     f88:	0c600713          	li	a4,198
     f8c:	01b73db3          	sltu	s11,a4,s11
  if (flags & FLAGS_ADAPT_EXP) {
     f90:	0017f793          	andi	a5,a5,1
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
     f94:	004d8d93          	addi	s11,s11,4
  if (flags & FLAGS_ADAPT_EXP) {
     f98:	06078263          	beqz	a5,ffc <_etoa+0x3dc>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
     f9c:	000067b7          	lui	a5,0x6
     fa0:	5087a603          	lw	a2,1288(a5) # 6508 <__erodata+0x7c>
     fa4:	50c7a683          	lw	a3,1292(a5)
     fa8:	00040513          	mv	a0,s0
     fac:	000b8593          	mv	a1,s7
     fb0:	00612c23          	sw	t1,24(sp)
     fb4:	00712e23          	sw	t2,28(sp)
     fb8:	1a4030ef          	jal	ra,415c <__gedf2>
     fbc:	01812303          	lw	t1,24(sp)
     fc0:	01c12383          	lw	t2,28(sp)
     fc4:	02054463          	bltz	a0,fec <_etoa+0x3cc>
     fc8:	000067b7          	lui	a5,0x6
     fcc:	5107a603          	lw	a2,1296(a5) # 6510 <__erodata+0x84>
     fd0:	5147a683          	lw	a3,1300(a5)
     fd4:	00040513          	mv	a0,s0
     fd8:	000b8593          	mv	a1,s7
     fdc:	236030ef          	jal	ra,4212 <__ledf2>
     fe0:	01812303          	lw	t1,24(sp)
     fe4:	01c12383          	lw	t2,28(sp)
     fe8:	20054e63          	bltz	a0,1204 <_etoa+0x5e4>
      minwidth = 0U;
      expval   = 0;
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
     fec:	000c0863          	beqz	s8,ffc <_etoa+0x3dc>
        --prec;
     ff0:	03c12783          	lw	a5,60(sp)
     ff4:	00f037b3          	snez	a5,a5
     ff8:	40fc0c33          	sub	s8,s8,a5
  if (width > minwidth) {
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
     ffc:	00000893          	li	a7,0
  if (width > minwidth) {
    1000:	016df463          	bgeu	s11,s6,1008 <_etoa+0x3e8>
    fwidth -= minwidth;
    1004:	41bb08b3          	sub	a7,s6,s11
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
    1008:	002cf793          	andi	a5,s9,2
    100c:	02f12423          	sw	a5,40(sp)
    1010:	00078863          	beqz	a5,1020 <_etoa+0x400>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
    1014:	001db793          	seqz	a5,s11
    1018:	40f007b3          	neg	a5,a5
    101c:	00f8f8b3          	and	a7,a7,a5
  }

  // rescale the float value
  if (expval) {
    1020:	020d0463          	beqz	s10,1048 <_etoa+0x428>
    value /= conv.F;
    1024:	000b8593          	mv	a1,s7
    1028:	00040513          	mv	a0,s0
    102c:	00030613          	mv	a2,t1
    1030:	00038693          	mv	a3,t2
    1034:	01112c23          	sw	a7,24(sp)
    1038:	1f5020ef          	jal	ra,3a2c <__divdf3>
    103c:	01812883          	lw	a7,24(sp)
    1040:	02a12223          	sw	a0,36(sp)
    1044:	00058b93          	mv	s7,a1
  }

  // output the floating part
  const size_t start_idx = idx;
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
    1048:	00040513          	mv	a0,s0
    104c:	00048593          	mv	a1,s1
    1050:	00000613          	li	a2,0
    1054:	00000693          	li	a3,0
    1058:	01112c23          	sw	a7,24(sp)
    105c:	1b6030ef          	jal	ra,4212 <__ledf2>
    1060:	01812883          	lw	a7,24(sp)
    1064:	00055663          	bgez	a0,1070 <_etoa+0x450>
    1068:	800007b7          	lui	a5,0x80000
    106c:	0177cbb3          	xor	s7,a5,s7
    1070:	02412503          	lw	a0,36(sp)
    1074:	fffff7b7          	lui	a5,0xfffff
    1078:	7ff78793          	addi	a5,a5,2047 # fffff7ff <__kernel_stack+0xdff3f807>
    107c:	00fcf7b3          	and	a5,s9,a5
    1080:	00f12023          	sw	a5,0(sp)
    1084:	00050713          	mv	a4,a0
    1088:	000c0813          	mv	a6,s8
    108c:	000b8793          	mv	a5,s7
    1090:	000a8693          	mv	a3,s5
    1094:	00090613          	mv	a2,s2
    1098:	000a0593          	mv	a1,s4
    109c:	00098513          	mv	a0,s3
    10a0:	188000ef          	jal	ra,1228 <_ftoa>
    10a4:	00050413          	mv	s0,a0

  // output the exponent part
  if (minwidth) {
    10a8:	080d8a63          	beqz	s11,113c <_etoa+0x51c>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
    10ac:	01ac9513          	slli	a0,s9,0x1a
    10b0:	41f55513          	srai	a0,a0,0x1f
    10b4:	fe057513          	andi	a0,a0,-32
    10b8:	00040613          	mv	a2,s0
    10bc:	000a8693          	mv	a3,s5
    10c0:	000a0593          	mv	a1,s4
    10c4:	06550513          	addi	a0,a0,101
    10c8:	000980e7          	jalr	s3
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
    10cc:	41fd5713          	srai	a4,s10,0x1f
    10d0:	01a746b3          	xor	a3,a4,s10
    10d4:	00500793          	li	a5,5
    10d8:	fffd8d93          	addi	s11,s11,-1
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
    10dc:	00140613          	addi	a2,s0,1
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
    10e0:	00f12223          	sw	a5,4(sp)
    10e4:	40e68733          	sub	a4,a3,a4
    10e8:	01fd5793          	srli	a5,s10,0x1f
    10ec:	01b12023          	sw	s11,0(sp)
    10f0:	00000893          	li	a7,0
    10f4:	00a00813          	li	a6,10
    10f8:	000a8693          	mv	a3,s5
    10fc:	000a0593          	mv	a1,s4
    1100:	00098513          	mv	a0,s3
    1104:	8c1ff0ef          	jal	ra,9c4 <_ntoa_long>
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
    1108:	02812783          	lw	a5,40(sp)
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
    110c:	00050413          	mv	s0,a0
    if (flags & FLAGS_LEFT) {
    1110:	02078663          	beqz	a5,113c <_etoa+0x51c>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    1114:	41250933          	sub	s2,a0,s2
    1118:	03697263          	bgeu	s2,s6,113c <_etoa+0x51c>
    111c:	00040613          	mv	a2,s0
    1120:	00190913          	addi	s2,s2,1
    1124:	000a8693          	mv	a3,s5
    1128:	000a0593          	mv	a1,s4
    112c:	02000513          	li	a0,32
    1130:	00140413          	addi	s0,s0,1
    1134:	000980e7          	jalr	s3
    1138:	ff6962e3          	bltu	s2,s6,111c <_etoa+0x4fc>
    }
  }
  return idx;
}
    113c:	07c12083          	lw	ra,124(sp)
    1140:	00040513          	mv	a0,s0
    1144:	07812403          	lw	s0,120(sp)
    1148:	07412483          	lw	s1,116(sp)
    114c:	07012903          	lw	s2,112(sp)
    1150:	06c12983          	lw	s3,108(sp)
    1154:	06812a03          	lw	s4,104(sp)
    1158:	06412a83          	lw	s5,100(sp)
    115c:	06012b03          	lw	s6,96(sp)
    1160:	05c12b83          	lw	s7,92(sp)
    1164:	05812c03          	lw	s8,88(sp)
    1168:	05412c83          	lw	s9,84(sp)
    116c:	05012d03          	lw	s10,80(sp)
    1170:	04c12d83          	lw	s11,76(sp)
    1174:	08010113          	addi	sp,sp,128
    1178:	00008067          	ret
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    117c:	00040713          	mv	a4,s0
}
    1180:	07812403          	lw	s0,120(sp)
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    1184:	09912023          	sw	s9,128(sp)
}
    1188:	07c12083          	lw	ra,124(sp)
    118c:	05c12b83          	lw	s7,92(sp)
    1190:	05412c83          	lw	s9,84(sp)
    1194:	05012d03          	lw	s10,80(sp)
    1198:	04c12d83          	lw	s11,76(sp)
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    119c:	00048793          	mv	a5,s1
    11a0:	000b0893          	mv	a7,s6
}
    11a4:	07412483          	lw	s1,116(sp)
    11a8:	06012b03          	lw	s6,96(sp)
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    11ac:	000c0813          	mv	a6,s8
    11b0:	000a8693          	mv	a3,s5
}
    11b4:	05812c03          	lw	s8,88(sp)
    11b8:	06412a83          	lw	s5,100(sp)
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    11bc:	00090613          	mv	a2,s2
    11c0:	000a0593          	mv	a1,s4
}
    11c4:	07012903          	lw	s2,112(sp)
    11c8:	06812a03          	lw	s4,104(sp)
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    11cc:	00098513          	mv	a0,s3
}
    11d0:	06c12983          	lw	s3,108(sp)
    11d4:	08010113          	addi	sp,sp,128
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    11d8:	0500006f          	j	1228 <_ftoa>
    conv.F /= 10;
    11dc:	000067b7          	lui	a5,0x6
    11e0:	4e87a603          	lw	a2,1256(a5) # 64e8 <__erodata+0x5c>
    11e4:	4ec7a683          	lw	a3,1260(a5)
    11e8:	01812583          	lw	a1,24(sp)
    11ec:	000d8513          	mv	a0,s11
    expval--;
    11f0:	fffd0d13          	addi	s10,s10,-1
    conv.F /= 10;
    11f4:	039020ef          	jal	ra,3a2c <__divdf3>
    11f8:	00050313          	mv	t1,a0
    11fc:	00058393          	mv	t2,a1
    1200:	d81ff06f          	j	f80 <_etoa+0x360>
      if ((int)prec > expval) {
    1204:	018d5e63          	bge	s10,s8,1220 <_etoa+0x600>
        prec = (unsigned)((int)prec - expval - 1);
    1208:	41ac0c33          	sub	s8,s8,s10
    120c:	fffc0c13          	addi	s8,s8,-1
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
    1210:	400cec93          	ori	s9,s9,1024
      minwidth = 0U;
    1214:	00000d93          	li	s11,0
      expval   = 0;
    1218:	00000d13          	li	s10,0
    121c:	de1ff06f          	j	ffc <_etoa+0x3dc>
        prec = 0;
    1220:	00000c13          	li	s8,0
    1224:	fedff06f          	j	1210 <_etoa+0x5f0>

00001228 <_ftoa>:
{
    1228:	f8010113          	addi	sp,sp,-128
    122c:	07312623          	sw	s3,108(sp)
    1230:	07412423          	sw	s4,104(sp)
    1234:	07512223          	sw	s5,100(sp)
    1238:	05812c23          	sw	s8,88(sp)
    123c:	00050993          	mv	s3,a0
    1240:	00058a13          	mv	s4,a1
    1244:	00060a93          	mv	s5,a2
    1248:	00068c13          	mv	s8,a3
  if (value != value)
    124c:	00070613          	mv	a2,a4
    1250:	00078693          	mv	a3,a5
    1254:	00070513          	mv	a0,a4
    1258:	00078593          	mv	a1,a5
{
    125c:	06812c23          	sw	s0,120(sp)
    1260:	06912a23          	sw	s1,116(sp)
    1264:	07212823          	sw	s2,112(sp)
    1268:	07612023          	sw	s6,96(sp)
    126c:	05912a23          	sw	s9,84(sp)
    1270:	06112e23          	sw	ra,124(sp)
    1274:	05712e23          	sw	s7,92(sp)
    1278:	05a12823          	sw	s10,80(sp)
    127c:	05b12623          	sw	s11,76(sp)
    1280:	00070493          	mv	s1,a4
    1284:	00078413          	mv	s0,a5
    1288:	00080b13          	mv	s6,a6
    128c:	00088913          	mv	s2,a7
  if (value != value)
    1290:	629020ef          	jal	ra,40b8 <__eqdf2>
{
    1294:	08012c83          	lw	s9,128(sp)
  if (value != value)
    1298:	20051863          	bnez	a0,14a8 <_ftoa+0x280>
  if (value < -DBL_MAX)
    129c:	000067b7          	lui	a5,0x6
    12a0:	4987a603          	lw	a2,1176(a5) # 6498 <__erodata+0xc>
    12a4:	49c7a683          	lw	a3,1180(a5)
    12a8:	00048513          	mv	a0,s1
    12ac:	00040593          	mv	a1,s0
    12b0:	763020ef          	jal	ra,4212 <__ledf2>
    12b4:	2e054663          	bltz	a0,15a0 <_ftoa+0x378>
  if (value > DBL_MAX)
    12b8:	000067b7          	lui	a5,0x6
    12bc:	4907a603          	lw	a2,1168(a5) # 6490 <__erodata+0x4>
    12c0:	4947a683          	lw	a3,1172(a5)
    12c4:	00048513          	mv	a0,s1
    12c8:	00040593          	mv	a1,s0
    12cc:	691020ef          	jal	ra,415c <__gedf2>
    12d0:	1aa04c63          	bgtz	a0,1488 <_ftoa+0x260>
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
    12d4:	000067b7          	lui	a5,0x6
    12d8:	5187a603          	lw	a2,1304(a5) # 6518 <__erodata+0x8c>
    12dc:	51c7a683          	lw	a3,1308(a5)
    12e0:	00048513          	mv	a0,s1
    12e4:	00040593          	mv	a1,s0
    12e8:	675020ef          	jal	ra,415c <__gedf2>
    12ec:	24a04a63          	bgtz	a0,1540 <_ftoa+0x318>
    12f0:	000067b7          	lui	a5,0x6
    12f4:	5207a603          	lw	a2,1312(a5) # 6520 <__erodata+0x94>
    12f8:	5247a683          	lw	a3,1316(a5)
    12fc:	00048513          	mv	a0,s1
    1300:	00040593          	mv	a1,s0
    1304:	70f020ef          	jal	ra,4212 <__ledf2>
    1308:	22054c63          	bltz	a0,1540 <_ftoa+0x318>
  if (value < 0) {
    130c:	00048513          	mv	a0,s1
    1310:	00040593          	mv	a1,s0
    1314:	00000613          	li	a2,0
    1318:	00000693          	li	a3,0
    131c:	6f7020ef          	jal	ra,4212 <__ledf2>
    1320:	1e054c63          	bltz	a0,1518 <_ftoa+0x2f0>
  bool negative = false;
    1324:	00012e23          	sw	zero,28(sp)
  if (!(flags & FLAGS_PRECISION)) {
    1328:	400cf793          	andi	a5,s9,1024
    132c:	00079463          	bnez	a5,1334 <_ftoa+0x10c>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    1330:	00600b13          	li	s6,6
    1334:	02010693          	addi	a3,sp,32
    1338:	fe0b0513          	addi	a0,s6,-32
    133c:	000b0b93          	mv	s7,s6
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    1340:	00900613          	li	a2,9
    buf[len++] = '0';
    1344:	03000593          	li	a1,48
    1348:	0140006f          	j	135c <_ftoa+0x134>
    134c:	00b68023          	sb	a1,0(a3)
    prec--;
    1350:	fffb8b93          	addi	s7,s7,-1 # 7fffffff <__kernel_stack+0x5ff40007>
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    1354:	00168693          	addi	a3,a3,1
    1358:	3aab8863          	beq	s7,a0,1708 <_ftoa+0x4e0>
    buf[len++] = '0';
    135c:	417b0db3          	sub	s11,s6,s7
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    1360:	ff7666e3          	bltu	a2,s7,134c <_ftoa+0x124>
  int whole = (int)value;
    1364:	00040593          	mv	a1,s0
    1368:	00048513          	mv	a0,s1
    136c:	5c7030ef          	jal	ra,5132 <__fixdfsi>
  double tmp = (value - whole) * pow10[prec];
    1370:	00006637          	lui	a2,0x6
    1374:	19860613          	addi	a2,a2,408 # 6198 <pow10.0>
    1378:	003b9693          	slli	a3,s7,0x3
    137c:	00d606b3          	add	a3,a2,a3
    1380:	0046a803          	lw	a6,4(a3)
    1384:	0006a783          	lw	a5,0(a3)
  int whole = (int)value;
    1388:	00050d13          	mv	s10,a0
  double tmp = (value - whole) * pow10[prec];
    138c:	01012623          	sw	a6,12(sp)
    1390:	00f12423          	sw	a5,8(sp)
    1394:	6ff030ef          	jal	ra,5292 <__floatsidf>
    1398:	00050613          	mv	a2,a0
    139c:	00058693          	mv	a3,a1
    13a0:	00048513          	mv	a0,s1
    13a4:	00040593          	mv	a1,s0
    13a8:	4be030ef          	jal	ra,4866 <__subdf3>
    13ac:	00812603          	lw	a2,8(sp)
    13b0:	00c12683          	lw	a3,12(sp)
    13b4:	715020ef          	jal	ra,42c8 <__muldf3>
    13b8:	00b12a23          	sw	a1,20(sp)
    13bc:	00a12c23          	sw	a0,24(sp)
  unsigned long frac = (unsigned long)tmp;
    13c0:	639030ef          	jal	ra,51f8 <__fixunsdfsi>
    13c4:	00050b13          	mv	s6,a0
  diff = tmp - frac;
    13c8:	731030ef          	jal	ra,52f8 <__floatunsidf>
    13cc:	01412783          	lw	a5,20(sp)
    13d0:	01812303          	lw	t1,24(sp)
    13d4:	00050613          	mv	a2,a0
    13d8:	00058693          	mv	a3,a1
    13dc:	00030513          	mv	a0,t1
    13e0:	00078593          	mv	a1,a5
    13e4:	482030ef          	jal	ra,4866 <__subdf3>
  if (diff > 0.5) {
    13e8:	00006737          	lui	a4,0x6
    13ec:	4c872303          	lw	t1,1224(a4) # 64c8 <__erodata+0x3c>
    13f0:	4cc72383          	lw	t2,1228(a4)
  diff = tmp - frac;
    13f4:	00a12a23          	sw	a0,20(sp)
  if (diff > 0.5) {
    13f8:	00030613          	mv	a2,t1
    13fc:	00038693          	mv	a3,t2
  diff = tmp - frac;
    1400:	00b12c23          	sw	a1,24(sp)
  if (diff > 0.5) {
    1404:	559020ef          	jal	ra,415c <__gedf2>
    1408:	000067b7          	lui	a5,0x6
    140c:	4c87a303          	lw	t1,1224(a5) # 64c8 <__erodata+0x3c>
    1410:	4cc7a383          	lw	t2,1228(a5)
    1414:	2ca05863          	blez	a0,16e4 <_ftoa+0x4bc>
    ++frac;
    1418:	001b0b13          	addi	s6,s6,1
    if (frac >= pow10[prec]) {
    141c:	000b0513          	mv	a0,s6
    1420:	6d9030ef          	jal	ra,52f8 <__floatunsidf>
    1424:	00050613          	mv	a2,a0
    1428:	00058693          	mv	a3,a1
    142c:	00812503          	lw	a0,8(sp)
    1430:	00c12583          	lw	a1,12(sp)
    1434:	5df020ef          	jal	ra,4212 <__ledf2>
    1438:	00a04663          	bgtz	a0,1444 <_ftoa+0x21c>
      ++whole;
    143c:	001d0d13          	addi	s10,s10,1
      frac = 0;
    1440:	00000b13          	li	s6,0
  if (prec == 0U) {
    1444:	1e0b8063          	beqz	s7,1624 <_ftoa+0x3fc>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    1448:	02000313          	li	t1,32
      buf[len++] = (char)(48U + (frac % 10U));
    144c:	00a00613          	li	a2,10
      if (!(frac /= 10U)) {
    1450:	00900e13          	li	t3,9
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    1454:	166d8263          	beq	s11,t1,15b8 <_ftoa+0x390>
      buf[len++] = (char)(48U + (frac % 10U));
    1458:	02cb76b3          	remu	a3,s6,a2
    145c:	001d8d93          	addi	s11,s11,1
    1460:	02010793          	addi	a5,sp,32
    1464:	01b78533          	add	a0,a5,s11
      --count;
    1468:	fffb8593          	addi	a1,s7,-1
      buf[len++] = (char)(48U + (frac % 10U));
    146c:	03068693          	addi	a3,a3,48
    1470:	fed50fa3          	sb	a3,-1(a0)
      if (!(frac /= 10U)) {
    1474:	02cb56b3          	divu	a3,s6,a2
    1478:	316e7463          	bgeu	t3,s6,1780 <_ftoa+0x558>
      --count;
    147c:	00058b93          	mv	s7,a1
      if (!(frac /= 10U)) {
    1480:	00068b13          	mv	s6,a3
    1484:	fd1ff06f          	j	1454 <_ftoa+0x22c>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
    1488:	004cf793          	andi	a5,s9,4
    148c:	06079e63          	bnez	a5,1508 <_ftoa+0x2e0>
    1490:	00006737          	lui	a4,0x6
    1494:	fa070713          	addi	a4,a4,-96 # 5fa0 <__errno+0x12>
    1498:	00300793          	li	a5,3
    149c:	000c8893          	mv	a7,s9
    14a0:	00090813          	mv	a6,s2
    14a4:	0180006f          	j	14bc <_ftoa+0x294>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
    14a8:	00006737          	lui	a4,0x6
    14ac:	000c8893          	mv	a7,s9
    14b0:	00090813          	mv	a6,s2
    14b4:	00300793          	li	a5,3
    14b8:	fac70713          	addi	a4,a4,-84 # 5fac <__errno+0x1e>
}
    14bc:	07812403          	lw	s0,120(sp)
    14c0:	07c12083          	lw	ra,124(sp)
    14c4:	07412483          	lw	s1,116(sp)
    14c8:	07012903          	lw	s2,112(sp)
    14cc:	06012b03          	lw	s6,96(sp)
    14d0:	05c12b83          	lw	s7,92(sp)
    14d4:	05412c83          	lw	s9,84(sp)
    14d8:	05012d03          	lw	s10,80(sp)
    14dc:	04c12d83          	lw	s11,76(sp)
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    14e0:	000c0693          	mv	a3,s8
    14e4:	000a8613          	mv	a2,s5
}
    14e8:	05812c03          	lw	s8,88(sp)
    14ec:	06412a83          	lw	s5,100(sp)
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    14f0:	000a0593          	mv	a1,s4
    14f4:	00098513          	mv	a0,s3
}
    14f8:	06812a03          	lw	s4,104(sp)
    14fc:	06c12983          	lw	s3,108(sp)
    1500:	08010113          	addi	sp,sp,128
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    1504:	910ff06f          	j	614 <_out_rev>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
    1508:	00006737          	lui	a4,0x6
    150c:	fa470713          	addi	a4,a4,-92 # 5fa4 <__errno+0x16>
    1510:	00400793          	li	a5,4
    1514:	f89ff06f          	j	149c <_ftoa+0x274>
    value = 0 - value;
    1518:	00048613          	mv	a2,s1
    151c:	00040693          	mv	a3,s0
    1520:	00000513          	li	a0,0
    1524:	00000593          	li	a1,0
    1528:	33e030ef          	jal	ra,4866 <__subdf3>
    negative = true;
    152c:	00100793          	li	a5,1
    value = 0 - value;
    1530:	00050493          	mv	s1,a0
    1534:	00058413          	mv	s0,a1
    negative = true;
    1538:	00f12e23          	sw	a5,28(sp)
    153c:	dedff06f          	j	1328 <_ftoa+0x100>
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    1540:	00040793          	mv	a5,s0
}
    1544:	07812403          	lw	s0,120(sp)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    1548:	09912023          	sw	s9,128(sp)
}
    154c:	07c12083          	lw	ra,124(sp)
    1550:	05c12b83          	lw	s7,92(sp)
    1554:	05412c83          	lw	s9,84(sp)
    1558:	05012d03          	lw	s10,80(sp)
    155c:	04c12d83          	lw	s11,76(sp)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    1560:	00048713          	mv	a4,s1
    1564:	00090893          	mv	a7,s2
}
    1568:	07412483          	lw	s1,116(sp)
    156c:	07012903          	lw	s2,112(sp)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    1570:	000b0813          	mv	a6,s6
    1574:	000c0693          	mv	a3,s8
}
    1578:	06012b03          	lw	s6,96(sp)
    157c:	05812c03          	lw	s8,88(sp)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    1580:	000a8613          	mv	a2,s5
    1584:	000a0593          	mv	a1,s4
}
    1588:	06412a83          	lw	s5,100(sp)
    158c:	06812a03          	lw	s4,104(sp)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    1590:	00098513          	mv	a0,s3
}
    1594:	06c12983          	lw	s3,108(sp)
    1598:	08010113          	addi	sp,sp,128
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    159c:	e84ff06f          	j	c20 <_etoa>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    15a0:	00006737          	lui	a4,0x6
    15a4:	000c8893          	mv	a7,s9
    15a8:	00090813          	mv	a6,s2
    15ac:	00400793          	li	a5,4
    15b0:	fb070713          	addi	a4,a4,-80 # 5fb0 <__errno+0x22>
    15b4:	f09ff06f          	j	14bc <_ftoa+0x294>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    15b8:	003cf793          	andi	a5,s9,3
    15bc:	00100713          	li	a4,1
    15c0:	14e78863          	beq	a5,a4,1710 <_ftoa+0x4e8>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    15c4:	02000793          	li	a5,32
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    15c8:	000c8893          	mv	a7,s9
    15cc:	00090813          	mv	a6,s2
    15d0:	02010713          	addi	a4,sp,32
    15d4:	000c0693          	mv	a3,s8
    15d8:	000a8613          	mv	a2,s5
    15dc:	000a0593          	mv	a1,s4
    15e0:	00098513          	mv	a0,s3
    15e4:	830ff0ef          	jal	ra,614 <_out_rev>
}
    15e8:	07c12083          	lw	ra,124(sp)
    15ec:	07812403          	lw	s0,120(sp)
    15f0:	07412483          	lw	s1,116(sp)
    15f4:	07012903          	lw	s2,112(sp)
    15f8:	06c12983          	lw	s3,108(sp)
    15fc:	06812a03          	lw	s4,104(sp)
    1600:	06412a83          	lw	s5,100(sp)
    1604:	06012b03          	lw	s6,96(sp)
    1608:	05c12b83          	lw	s7,92(sp)
    160c:	05812c03          	lw	s8,88(sp)
    1610:	05412c83          	lw	s9,84(sp)
    1614:	05012d03          	lw	s10,80(sp)
    1618:	04c12d83          	lw	s11,76(sp)
    161c:	08010113          	addi	sp,sp,128
    1620:	00008067          	ret
    diff = value - (double)whole;
    1624:	000d0513          	mv	a0,s10
    1628:	46b030ef          	jal	ra,5292 <__floatsidf>
    162c:	00050613          	mv	a2,a0
    1630:	00058693          	mv	a3,a1
    1634:	00048513          	mv	a0,s1
    1638:	00040593          	mv	a1,s0
    163c:	22a030ef          	jal	ra,4866 <__subdf3>
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    1640:	000067b7          	lui	a5,0x6
    1644:	4c87ab03          	lw	s6,1224(a5) # 64c8 <__erodata+0x3c>
    1648:	4cc7ab83          	lw	s7,1228(a5)
    diff = value - (double)whole;
    164c:	00050493          	mv	s1,a0
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    1650:	000b0613          	mv	a2,s6
    1654:	000b8693          	mv	a3,s7
    diff = value - (double)whole;
    1658:	00058413          	mv	s0,a1
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    165c:	3b7020ef          	jal	ra,4212 <__ledf2>
    1660:	00055e63          	bgez	a0,167c <_ftoa+0x454>
    1664:	00048513          	mv	a0,s1
    1668:	00040593          	mv	a1,s0
    166c:	000b0613          	mv	a2,s6
    1670:	000b8693          	mv	a3,s7
    1674:	2e9020ef          	jal	ra,415c <__gedf2>
    1678:	00a05663          	blez	a0,1684 <_ftoa+0x45c>
      ++whole;
    167c:	001d7793          	andi	a5,s10,1
    1680:	00fd0d33          	add	s10,s10,a5
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    1684:	02000593          	li	a1,32
    buf[len++] = (char)(48 + (whole % 10));
    1688:	00a00693          	li	a3,10
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    168c:	f2bd86e3          	beq	s11,a1,15b8 <_ftoa+0x390>
    buf[len++] = (char)(48 + (whole % 10));
    1690:	02dd67b3          	rem	a5,s10,a3
    1694:	001d8d93          	addi	s11,s11,1
    1698:	02010713          	addi	a4,sp,32
    169c:	01b70633          	add	a2,a4,s11
    if (!(whole /= 10)) {
    16a0:	02dd4d33          	div	s10,s10,a3
    buf[len++] = (char)(48 + (whole % 10));
    16a4:	03078793          	addi	a5,a5,48
    16a8:	fef60fa3          	sb	a5,-1(a2)
    if (!(whole /= 10)) {
    16ac:	fe0d10e3          	bnez	s10,168c <_ftoa+0x464>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    16b0:	003cf793          	andi	a5,s9,3
    16b4:	00100693          	li	a3,1
    16b8:	04d78e63          	beq	a5,a3,1714 <_ftoa+0x4ec>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    16bc:	02000693          	li	a3,32
    16c0:	f0dd82e3          	beq	s11,a3,15c4 <_ftoa+0x39c>
    if (negative) {
    16c4:	01c12783          	lw	a5,28(sp)
    16c8:	08078863          	beqz	a5,1758 <_ftoa+0x530>
      buf[len++] = '-';
    16cc:	04010793          	addi	a5,sp,64
    16d0:	01b786b3          	add	a3,a5,s11
    16d4:	02d00713          	li	a4,45
    16d8:	001d8793          	addi	a5,s11,1
    16dc:	fee68023          	sb	a4,-32(a3)
    16e0:	ee9ff06f          	j	15c8 <_ftoa+0x3a0>
  else if (diff < 0.5) {
    16e4:	01412503          	lw	a0,20(sp)
    16e8:	01812583          	lw	a1,24(sp)
    16ec:	00030613          	mv	a2,t1
    16f0:	00038693          	mv	a3,t2
    16f4:	31f020ef          	jal	ra,4212 <__ledf2>
    16f8:	d40546e3          	bltz	a0,1444 <_ftoa+0x21c>
  else if ((frac == 0U) || (frac & 1U)) {
    16fc:	0c0b1a63          	bnez	s6,17d0 <_ftoa+0x5a8>
    ++frac;
    1700:	001b0b13          	addi	s6,s6,1
    1704:	d41ff06f          	j	1444 <_ftoa+0x21c>
    1708:	02000d93          	li	s11,32
    170c:	c59ff06f          	j	1364 <_ftoa+0x13c>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    1710:	02000d93          	li	s11,32
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    1714:	fa0904e3          	beqz	s2,16bc <_ftoa+0x494>
    1718:	01c12783          	lw	a5,28(sp)
    171c:	0c079e63          	bnez	a5,17f8 <_ftoa+0x5d0>
    1720:	00ccf793          	andi	a5,s9,12
    1724:	0c079a63          	bnez	a5,17f8 <_ftoa+0x5d0>
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    1728:	f92dfae3          	bgeu	s11,s2,16bc <_ftoa+0x494>
    172c:	02000793          	li	a5,32
      buf[len++] = '0';
    1730:	03000613          	li	a2,48
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    1734:	02000693          	li	a3,32
    1738:	e8fd86e3          	beq	s11,a5,15c4 <_ftoa+0x39c>
      buf[len++] = '0';
    173c:	001d8d93          	addi	s11,s11,1
    1740:	02010793          	addi	a5,sp,32
    1744:	01b787b3          	add	a5,a5,s11
    1748:	fec78fa3          	sb	a2,-1(a5)
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    174c:	f72d88e3          	beq	s11,s2,16bc <_ftoa+0x494>
    1750:	fedd96e3          	bne	s11,a3,173c <_ftoa+0x514>
    1754:	e71ff06f          	j	15c4 <_ftoa+0x39c>
    else if (flags & FLAGS_PLUS) {
    1758:	004cf793          	andi	a5,s9,4
    175c:	08079263          	bnez	a5,17e0 <_ftoa+0x5b8>
    else if (flags & FLAGS_SPACE) {
    1760:	008cf613          	andi	a2,s9,8
    1764:	000d8793          	mv	a5,s11
    1768:	e60600e3          	beqz	a2,15c8 <_ftoa+0x3a0>
      buf[len++] = ' ';
    176c:	04010713          	addi	a4,sp,64
    1770:	01b70733          	add	a4,a4,s11
    1774:	001d8793          	addi	a5,s11,1
    1778:	fed70023          	sb	a3,-32(a4)
    177c:	e4dff06f          	j	15c8 <_ftoa+0x3a0>
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    1780:	e26d8ce3          	beq	s11,t1,15b8 <_ftoa+0x390>
    1784:	000d8613          	mv	a2,s11
      buf[len++] = '0';
    1788:	03000893          	li	a7,48
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    178c:	02000513          	li	a0,32
    1790:	02058463          	beqz	a1,17b8 <_ftoa+0x590>
      buf[len++] = '0';
    1794:	00160613          	addi	a2,a2,1
    1798:	02010793          	addi	a5,sp,32
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    179c:	fff64693          	not	a3,a2
      buf[len++] = '0';
    17a0:	00c785b3          	add	a1,a5,a2
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    17a4:	01b686b3          	add	a3,a3,s11
      buf[len++] = '0';
    17a8:	ff158fa3          	sb	a7,-1(a1)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    17ac:	017686b3          	add	a3,a3,s7
    17b0:	e0a604e3          	beq	a2,a0,15b8 <_ftoa+0x390>
    17b4:	fe0690e3          	bnez	a3,1794 <_ftoa+0x56c>
      buf[len++] = '.';
    17b8:	04010793          	addi	a5,sp,64
    17bc:	00c787b3          	add	a5,a5,a2
    17c0:	02e00693          	li	a3,46
    17c4:	00160d93          	addi	s11,a2,1
    17c8:	fed78023          	sb	a3,-32(a5)
    17cc:	eb9ff06f          	j	1684 <_ftoa+0x45c>
  else if ((frac == 0U) || (frac & 1U)) {
    17d0:	001b7693          	andi	a3,s6,1
    17d4:	c60688e3          	beqz	a3,1444 <_ftoa+0x21c>
    ++frac;
    17d8:	001b0b13          	addi	s6,s6,1
    17dc:	c69ff06f          	j	1444 <_ftoa+0x21c>
      buf[len++] = '+';  // ignore the space if the '+' exists
    17e0:	04010793          	addi	a5,sp,64
    17e4:	01b786b3          	add	a3,a5,s11
    17e8:	02b00713          	li	a4,43
    17ec:	001d8793          	addi	a5,s11,1
    17f0:	fee68023          	sb	a4,-32(a3)
    17f4:	dd5ff06f          	j	15c8 <_ftoa+0x3a0>
      width--;
    17f8:	fff90913          	addi	s2,s2,-1
    17fc:	f2dff06f          	j	1728 <_ftoa+0x500>

00001800 <_out_char>:
  if (character) {
    1800:	00051463          	bnez	a0,1808 <_out_char+0x8>
}
    1804:	00008067          	ret
    fputc(character, (void *)-1);
    1808:	fff00593          	li	a1,-1
    180c:	2480106f          	j	2a54 <fputc>

00001810 <_out_fct>:
  if (character) {
    1810:	00050863          	beqz	a0,1820 <_out_fct+0x10>
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
    1814:	0005a783          	lw	a5,0(a1)
    1818:	0045a583          	lw	a1,4(a1)
    181c:	00078067          	jr	a5
}
    1820:	00008067          	ret

00001824 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    1824:	f9010113          	addi	sp,sp,-112
    1828:	06812423          	sw	s0,104(sp)
    182c:	06912223          	sw	s1,100(sp)
    1830:	07212023          	sw	s2,96(sp)
    1834:	05312e23          	sw	s3,92(sp)
    1838:	05712623          	sw	s7,76(sp)
    183c:	06112623          	sw	ra,108(sp)
    1840:	05412c23          	sw	s4,88(sp)
    1844:	05512a23          	sw	s5,84(sp)
    1848:	05612823          	sw	s6,80(sp)
    184c:	05812423          	sw	s8,72(sp)
    1850:	05912223          	sw	s9,68(sp)
    1854:	05a12023          	sw	s10,64(sp)
    1858:	03b12e23          	sw	s11,60(sp)
    185c:	00058913          	mv	s2,a1
    1860:	00060493          	mv	s1,a2
    1864:	00068b93          	mv	s7,a3
    1868:	00070413          	mv	s0,a4
    186c:	00050993          	mv	s3,a0
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    1870:	50058e63          	beqz	a1,1d8c <_vsnprintf+0x568>
    // use null output function
    out = _out_null;
  }

  while (*format)
    1874:	000bc503          	lbu	a0,0(s7)
    1878:	00000d93          	li	s11,0
    187c:	52050063          	beqz	a0,1d9c <_vsnprintf+0x578>
    1880:	000067b7          	lui	a5,0x6
    1884:	04878793          	addi	a5,a5,72 # 6048 <__errno+0xba>
    1888:	00006b37          	lui	s6,0x6
    188c:	00006a37          	lui	s4,0x6
    1890:	02f12223          	sw	a5,36(sp)
    1894:	ffcb0793          	addi	a5,s6,-4 # 5ffc <__errno+0x6e>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    1898:	02500a93          	li	s5,37
    189c:	fb8a0a13          	addi	s4,s4,-72 # 5fb8 <__errno+0x2a>
    18a0:	02f12023          	sw	a5,32(sp)
    18a4:	0200006f          	j	18c4 <_vsnprintf+0xa0>
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    18a8:	000d8613          	mv	a2,s11
    18ac:	00048693          	mv	a3,s1
    18b0:	00090593          	mv	a1,s2
    18b4:	001d8d93          	addi	s11,s11,1
    18b8:	000980e7          	jalr	s3
  while (*format)
    18bc:	000bc503          	lbu	a0,0(s7)
    18c0:	0e050e63          	beqz	a0,19bc <_vsnprintf+0x198>
      format++;
    18c4:	001b8b93          	addi	s7,s7,1
    if (*format != '%') {
    18c8:	ff5510e3          	bne	a0,s5,18a8 <_vsnprintf+0x84>
    flags = 0U;
    18cc:	00000693          	li	a3,0
    18d0:	01000593          	li	a1,16
      switch (*format) {
    18d4:	000bc503          	lbu	a0,0(s7)
      format++;
    18d8:	001b8713          	addi	a4,s7,1
    18dc:	00070613          	mv	a2,a4
    18e0:	fe050793          	addi	a5,a0,-32
    18e4:	0ff7f793          	andi	a5,a5,255
    18e8:	00f5ea63          	bltu	a1,a5,18fc <_vsnprintf+0xd8>
    18ec:	00279793          	slli	a5,a5,0x2
    18f0:	014787b3          	add	a5,a5,s4
    18f4:	0007a783          	lw	a5,0(a5)
    18f8:	00078067          	jr	a5
  return (ch >= '0') && (ch <= '9');
    18fc:	fd050793          	addi	a5,a0,-48
    if (_is_digit(*format)) {
    1900:	0ff7f793          	andi	a5,a5,255
    1904:	00900593          	li	a1,9
    1908:	16f5fc63          	bgeu	a1,a5,1a80 <_vsnprintf+0x25c>
    else if (*format == '*') {
    190c:	02a00793          	li	a5,42
    1910:	1af50c63          	beq	a0,a5,1ac8 <_vsnprintf+0x2a4>
    1914:	000b8613          	mv	a2,s7
    width = 0U;
    1918:	00000c13          	li	s8,0
      format++;
    191c:	00070b93          	mv	s7,a4
    if (*format == '.') {
    1920:	02e00793          	li	a5,46
    precision = 0U;
    1924:	00000b13          	li	s6,0
    if (*format == '.') {
    1928:	0ef50a63          	beq	a0,a5,1a1c <_vsnprintf+0x1f8>
    switch (*format) {
    192c:	f9850793          	addi	a5,a0,-104
    1930:	0ff7f793          	andi	a5,a5,255
    1934:	01200713          	li	a4,18
    1938:	02f76263          	bltu	a4,a5,195c <_vsnprintf+0x138>
    193c:	02012703          	lw	a4,32(sp)
    1940:	00279793          	slli	a5,a5,0x2
    1944:	00e787b3          	add	a5,a5,a4
    1948:	0007a783          	lw	a5,0(a5)
    194c:	00078067          	jr	a5
    switch (*format) {
    1950:	00164503          	lbu	a0,1(a2)
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    1954:	1006e693          	ori	a3,a3,256
        format++;
    1958:	001b8b93          	addi	s7,s7,1
    switch (*format) {
    195c:	fdb50793          	addi	a5,a0,-37
    1960:	0ff7f793          	andi	a5,a5,255
    1964:	05300713          	li	a4,83
    1968:	f4f760e3          	bltu	a4,a5,18a8 <_vsnprintf+0x84>
    196c:	02412703          	lw	a4,36(sp)
    1970:	00279793          	slli	a5,a5,0x2
    1974:	00e787b3          	add	a5,a5,a4
    1978:	0007a783          	lw	a5,0(a5)
    197c:	00078067          	jr	a5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    1980:	0016e693          	ori	a3,a3,1
      format++;
    1984:	00070b93          	mv	s7,a4
    1988:	f4dff06f          	j	18d4 <_vsnprintf+0xb0>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    198c:	0026e693          	ori	a3,a3,2
      format++;
    1990:	00070b93          	mv	s7,a4
    1994:	f41ff06f          	j	18d4 <_vsnprintf+0xb0>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    1998:	0046e693          	ori	a3,a3,4
      format++;
    199c:	00070b93          	mv	s7,a4
    19a0:	f35ff06f          	j	18d4 <_vsnprintf+0xb0>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    19a4:	0106e693          	ori	a3,a3,16
      format++;
    19a8:	00070b93          	mv	s7,a4
    19ac:	f29ff06f          	j	18d4 <_vsnprintf+0xb0>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    19b0:	0086e693          	ori	a3,a3,8
      format++;
    19b4:	00070b93          	mv	s7,a4
    19b8:	f1dff06f          	j	18d4 <_vsnprintf+0xb0>

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

  // return written chars without terminating \0
  return (int)idx;
    19bc:	000d8413          	mv	s0,s11
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    19c0:	009de463          	bltu	s11,s1,19c8 <_vsnprintf+0x1a4>
    19c4:	fff48d93          	addi	s11,s1,-1
    19c8:	00048693          	mv	a3,s1
    19cc:	000d8613          	mv	a2,s11
    19d0:	00090593          	mv	a1,s2
    19d4:	00000513          	li	a0,0
    19d8:	000980e7          	jalr	s3
}
    19dc:	06c12083          	lw	ra,108(sp)
    19e0:	00040513          	mv	a0,s0
    19e4:	06812403          	lw	s0,104(sp)
    19e8:	06412483          	lw	s1,100(sp)
    19ec:	06012903          	lw	s2,96(sp)
    19f0:	05c12983          	lw	s3,92(sp)
    19f4:	05812a03          	lw	s4,88(sp)
    19f8:	05412a83          	lw	s5,84(sp)
    19fc:	05012b03          	lw	s6,80(sp)
    1a00:	04c12b83          	lw	s7,76(sp)
    1a04:	04812c03          	lw	s8,72(sp)
    1a08:	04412c83          	lw	s9,68(sp)
    1a0c:	04012d03          	lw	s10,64(sp)
    1a10:	03c12d83          	lw	s11,60(sp)
    1a14:	07010113          	addi	sp,sp,112
    1a18:	00008067          	ret
      if (_is_digit(*format)) {
    1a1c:	00164503          	lbu	a0,1(a2)
    1a20:	00900713          	li	a4,9
      flags |= FLAGS_PRECISION;
    1a24:	4006e693          	ori	a3,a3,1024
  return (ch >= '0') && (ch <= '9');
    1a28:	fd050793          	addi	a5,a0,-48
      if (_is_digit(*format)) {
    1a2c:	0ff7f793          	andi	a5,a5,255
    1a30:	00f77c63          	bgeu	a4,a5,1a48 <_vsnprintf+0x224>
      else if (*format == '*') {
    1a34:	02a00793          	li	a5,42
    1a38:	36f50863          	beq	a0,a5,1da8 <_vsnprintf+0x584>
      format++;
    1a3c:	000b8613          	mv	a2,s7
        format++;
    1a40:	001b8b93          	addi	s7,s7,1
    1a44:	ee9ff06f          	j	192c <_vsnprintf+0x108>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1a48:	002b1793          	slli	a5,s6,0x2
    1a4c:	01678833          	add	a6,a5,s6
    1a50:	000b8593          	mv	a1,s7
    1a54:	00181813          	slli	a6,a6,0x1
    1a58:	001b8b93          	addi	s7,s7,1
    1a5c:	00a80833          	add	a6,a6,a0
  while (_is_digit(**str)) {
    1a60:	000bc503          	lbu	a0,0(s7)
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1a64:	fd080b13          	addi	s6,a6,-48
  return (ch >= '0') && (ch <= '9');
    1a68:	fd050793          	addi	a5,a0,-48
  while (_is_digit(**str)) {
    1a6c:	0ff7f793          	andi	a5,a5,255
    1a70:	fcf77ce3          	bgeu	a4,a5,1a48 <_vsnprintf+0x224>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1a74:	000b8613          	mv	a2,s7
        format++;
    1a78:	00258b93          	addi	s7,a1,2
    1a7c:	eb1ff06f          	j	192c <_vsnprintf+0x108>
  unsigned int i = 0U;
    1a80:	00000c13          	li	s8,0
  while (_is_digit(**str)) {
    1a84:	00900613          	li	a2,9
    1a88:	0080006f          	j	1a90 <_vsnprintf+0x26c>
    1a8c:	00170713          	addi	a4,a4,1
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1a90:	002c1793          	slli	a5,s8,0x2
    1a94:	018788b3          	add	a7,a5,s8
    1a98:	00189893          	slli	a7,a7,0x1
    1a9c:	00a888b3          	add	a7,a7,a0
  while (_is_digit(**str)) {
    1aa0:	00074503          	lbu	a0,0(a4)
    1aa4:	000b8593          	mv	a1,s7
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1aa8:	fd088c13          	addi	s8,a7,-48
  return (ch >= '0') && (ch <= '9');
    1aac:	fd050793          	addi	a5,a0,-48
  while (_is_digit(**str)) {
    1ab0:	0ff7f793          	andi	a5,a5,255
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1ab4:	00070b93          	mv	s7,a4
  while (_is_digit(**str)) {
    1ab8:	fcf67ae3          	bgeu	a2,a5,1a8c <_vsnprintf+0x268>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1abc:	00070613          	mv	a2,a4
      format++;
    1ac0:	00258b93          	addi	s7,a1,2
    1ac4:	e5dff06f          	j	1920 <_vsnprintf+0xfc>
      const int w = va_arg(va, int);
    1ac8:	00042c03          	lw	s8,0(s0)
    1acc:	00440413          	addi	s0,s0,4
      if (w < 0) {
    1ad0:	000c4863          	bltz	s8,1ae0 <_vsnprintf+0x2bc>
    if (*format == '.') {
    1ad4:	001bc503          	lbu	a0,1(s7)
      format++;
    1ad8:	002b8b93          	addi	s7,s7,2
    1adc:	e45ff06f          	j	1920 <_vsnprintf+0xfc>
    if (*format == '.') {
    1ae0:	001bc503          	lbu	a0,1(s7)
        flags |= FLAGS_LEFT;    // reverse padding
    1ae4:	0026e693          	ori	a3,a3,2
        width = (unsigned int)-w;
    1ae8:	41800c33          	neg	s8,s8
      format++;
    1aec:	002b8b93          	addi	s7,s7,2
    1af0:	e31ff06f          	j	1920 <_vsnprintf+0xfc>
        if (*format == 'x' || *format == 'X') {
    1af4:	07800793          	li	a5,120
    1af8:	50f50c63          	beq	a0,a5,2010 <_vsnprintf+0x7ec>
    1afc:	05800793          	li	a5,88
    1b00:	3af50063          	beq	a0,a5,1ea0 <_vsnprintf+0x67c>
        else if (*format == 'o') {
    1b04:	06f00793          	li	a5,111
    1b08:	54f50663          	beq	a0,a5,2054 <_vsnprintf+0x830>
        else if (*format == 'b') {
    1b0c:	06200793          	li	a5,98
    1b10:	5cf50263          	beq	a0,a5,20d4 <_vsnprintf+0x8b0>
        if ((*format != 'i') && (*format != 'd')) {
    1b14:	06900713          	li	a4,105
          flags &= ~FLAGS_HASH;   // no hash for dec format
    1b18:	fef6f593          	andi	a1,a3,-17
        if (flags & FLAGS_PRECISION) {
    1b1c:	4006f793          	andi	a5,a3,1024
        if ((*format != 'i') && (*format != 'd')) {
    1b20:	5ee51c63          	bne	a0,a4,2118 <_vsnprintf+0x8f4>
        if (flags & FLAGS_PRECISION) {
    1b24:	50079063          	bnez	a5,2024 <_vsnprintf+0x800>
          if (flags & FLAGS_LONG_LONG) {
    1b28:	2006f693          	andi	a3,a3,512
          base = 10U;
    1b2c:	00a00813          	li	a6,10
          if (flags & FLAGS_LONG_LONG) {
    1b30:	46069e63          	bnez	a3,1fac <_vsnprintf+0x788>
          else if (flags & FLAGS_LONG) {
    1b34:	1005f793          	andi	a5,a1,256
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    1b38:	00440c93          	addi	s9,s0,4
          else if (flags & FLAGS_LONG) {
    1b3c:	56079863          	bnez	a5,20ac <_vsnprintf+0x888>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    1b40:	0405f793          	andi	a5,a1,64
    1b44:	4e079863          	bnez	a5,2034 <_vsnprintf+0x810>
    1b48:	0805f793          	andi	a5,a1,128
    1b4c:	58078863          	beqz	a5,20dc <_vsnprintf+0x8b8>
    1b50:	00041783          	lh	a5,0(s0)
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    1b54:	40f7d693          	srai	a3,a5,0xf
    1b58:	00d7c733          	xor	a4,a5,a3
    1b5c:	40d70733          	sub	a4,a4,a3
    1b60:	01071713          	slli	a4,a4,0x10
    1b64:	01075713          	srli	a4,a4,0x10
    1b68:	000d8613          	mv	a2,s11
    1b6c:	00b12223          	sw	a1,4(sp)
    1b70:	01812023          	sw	s8,0(sp)
    1b74:	000b0893          	mv	a7,s6
    1b78:	01f7d793          	srli	a5,a5,0x1f
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    1b7c:	00048693          	mv	a3,s1
    1b80:	00090593          	mv	a1,s2
    1b84:	00098513          	mv	a0,s3
    1b88:	e3dfe0ef          	jal	ra,9c4 <_ntoa_long>
    1b8c:	00050d93          	mv	s11,a0
    1b90:	000c8413          	mv	s0,s9
        break;
    1b94:	d29ff06f          	j	18bc <_vsnprintf+0x98>
    switch (*format) {
    1b98:	00164503          	lbu	a0,1(a2)
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    1b9c:	2006e693          	ori	a3,a3,512
        format++;
    1ba0:	001b8b93          	addi	s7,s7,1
        break;
    1ba4:	db9ff06f          	j	195c <_vsnprintf+0x138>
        if (*format == 'h') {
    1ba8:	00164503          	lbu	a0,1(a2)
    1bac:	06800793          	li	a5,104
    1bb0:	2cf50a63          	beq	a0,a5,1e84 <_vsnprintf+0x660>
        flags |= FLAGS_SHORT;
    1bb4:	0806e693          	ori	a3,a3,128
        format++;
    1bb8:	001b8b93          	addi	s7,s7,1
    1bbc:	da1ff06f          	j	195c <_vsnprintf+0x138>
        if (*format == 'l') {
    1bc0:	00164503          	lbu	a0,1(a2)
    1bc4:	06c00793          	li	a5,108
    1bc8:	d8f516e3          	bne	a0,a5,1954 <_vsnprintf+0x130>
    switch (*format) {
    1bcc:	00264503          	lbu	a0,2(a2)
          flags |= FLAGS_LONG_LONG;
    1bd0:	3006e693          	ori	a3,a3,768
        format++;
    1bd4:	00360b93          	addi	s7,a2,3
    1bd8:	d85ff06f          	j	195c <_vsnprintf+0x138>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
    1bdc:	04600793          	li	a5,70
    1be0:	24f50463          	beq	a0,a5,1e28 <_vsnprintf+0x604>
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    1be4:	00740413          	addi	s0,s0,7
    1be8:	ff847413          	andi	s0,s0,-8
    1bec:	00042703          	lw	a4,0(s0)
    1bf0:	00442783          	lw	a5,4(s0)
    1bf4:	000d8613          	mv	a2,s11
    1bf8:	00d12023          	sw	a3,0(sp)
    1bfc:	000c0893          	mv	a7,s8
    1c00:	000b0813          	mv	a6,s6
    1c04:	00048693          	mv	a3,s1
    1c08:	00090593          	mv	a1,s2
    1c0c:	00098513          	mv	a0,s3
    1c10:	e18ff0ef          	jal	ra,1228 <_ftoa>
    1c14:	00840413          	addi	s0,s0,8
    1c18:	00050d93          	mv	s11,a0
        break;
    1c1c:	ca1ff06f          	j	18bc <_vsnprintf+0x98>
      out(*format, buffer, idx++, maxlen);
    1c20:	001d8d13          	addi	s10,s11,1
        if (!(flags & FLAGS_LEFT)) {
    1c24:	0026f693          	andi	a3,a3,2
      out(*format, buffer, idx++, maxlen);
    1c28:	000d0c93          	mv	s9,s10
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    1c2c:	00440b13          	addi	s6,s0,4
        if (!(flags & FLAGS_LEFT)) {
    1c30:	2e068063          	beqz	a3,1f10 <_vsnprintf+0x6ec>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    1c34:	00044503          	lbu	a0,0(s0)
    1c38:	000d8613          	mv	a2,s11
    1c3c:	00048693          	mv	a3,s1
    1c40:	00090593          	mv	a1,s2
    1c44:	000980e7          	jalr	s3
          while (l++ < width) {
    1c48:	00100793          	li	a5,1
    1c4c:	018d8db3          	add	s11,s11,s8
    1c50:	3f87fc63          	bgeu	a5,s8,2048 <_vsnprintf+0x824>
            out(' ', buffer, idx++, maxlen);
    1c54:	000c8613          	mv	a2,s9
    1c58:	00048693          	mv	a3,s1
    1c5c:	001c8c93          	addi	s9,s9,1
    1c60:	00090593          	mv	a1,s2
    1c64:	02000513          	li	a0,32
    1c68:	000980e7          	jalr	s3
          while (l++ < width) {
    1c6c:	ff9d94e3          	bne	s11,s9,1c54 <_vsnprintf+0x430>
        break;
    1c70:	000b0413          	mv	s0,s6
    1c74:	c49ff06f          	j	18bc <_vsnprintf+0x98>
        out('%', buffer, idx++, maxlen);
    1c78:	000d8613          	mv	a2,s11
    1c7c:	00048693          	mv	a3,s1
    1c80:	00090593          	mv	a1,s2
    1c84:	02500513          	li	a0,37
    1c88:	001d8d93          	addi	s11,s11,1
    1c8c:	000980e7          	jalr	s3
        break;
    1c90:	c2dff06f          	j	18bc <_vsnprintf+0x98>
        const char* p = va_arg(va, char*);
    1c94:	00042d03          	lw	s10,0(s0)
    1c98:	00440793          	addi	a5,s0,4
    1c9c:	02f12623          	sw	a5,44(sp)
  for (s = str; *s && maxsize--; ++s);
    1ca0:	000d4503          	lbu	a0,0(s10)
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    1ca4:	120b1463          	bnez	s6,1dcc <_vsnprintf+0x5a8>
  for (s = str; *s && maxsize--; ++s);
    1ca8:	ffe00c93          	li	s9,-2
    1cac:	44050263          	beqz	a0,20f0 <_vsnprintf+0x8cc>
    1cb0:	001c8c93          	addi	s9,s9,1
    1cb4:	019d0cb3          	add	s9,s10,s9
    1cb8:	000d0793          	mv	a5,s10
    1cbc:	0080006f          	j	1cc4 <_vsnprintf+0x4a0>
    1cc0:	1cfc8a63          	beq	s9,a5,1e94 <_vsnprintf+0x670>
    1cc4:	0017c703          	lbu	a4,1(a5)
    1cc8:	00178793          	addi	a5,a5,1
    1ccc:	fe071ae3          	bnez	a4,1cc0 <_vsnprintf+0x49c>
  return (unsigned int)(s - str);
    1cd0:	41a787b3          	sub	a5,a5,s10
    1cd4:	02f12423          	sw	a5,40(sp)
        if (flags & FLAGS_PRECISION) {
    1cd8:	4006f793          	andi	a5,a3,1024
    1cdc:	00f12e23          	sw	a5,28(sp)
    1ce0:	00078863          	beqz	a5,1cf0 <_vsnprintf+0x4cc>
          l = (l < precision ? l : precision);
    1ce4:	02812783          	lw	a5,40(sp)
    1ce8:	00fb7463          	bgeu	s6,a5,1cf0 <_vsnprintf+0x4cc>
    1cec:	03612423          	sw	s6,40(sp)
        if (!(flags & FLAGS_LEFT)) {
    1cf0:	0026f413          	andi	s0,a3,2
    1cf4:	26040863          	beqz	s0,1f64 <_vsnprintf+0x740>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1cf8:	12050e63          	beqz	a0,1e34 <_vsnprintf+0x610>
    1cfc:	000d8613          	mv	a2,s11
    1d00:	0080006f          	j	1d08 <_vsnprintf+0x4e4>
          out(*(p++), buffer, idx++, maxlen);
    1d04:	000c8613          	mv	a2,s9
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1d08:	01c12783          	lw	a5,28(sp)
    1d0c:	00078863          	beqz	a5,1d1c <_vsnprintf+0x4f8>
    1d10:	fffb0793          	addi	a5,s6,-1
    1d14:	1e0b0a63          	beqz	s6,1f08 <_vsnprintf+0x6e4>
    1d18:	00078b13          	mv	s6,a5
          out(*(p++), buffer, idx++, maxlen);
    1d1c:	00048693          	mv	a3,s1
    1d20:	00090593          	mv	a1,s2
    1d24:	00160c93          	addi	s9,a2,1
    1d28:	000980e7          	jalr	s3
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1d2c:	41bc87b3          	sub	a5,s9,s11
    1d30:	00fd07b3          	add	a5,s10,a5
    1d34:	0007c503          	lbu	a0,0(a5)
    1d38:	fc0516e3          	bnez	a0,1d04 <_vsnprintf+0x4e0>
        if (flags & FLAGS_LEFT) {
    1d3c:	0e041a63          	bnez	s0,1e30 <_vsnprintf+0x60c>
        const char* p = va_arg(va, char*);
    1d40:	02c12403          	lw	s0,44(sp)
        break;
    1d44:	000c8d93          	mv	s11,s9
    1d48:	b75ff06f          	j	18bc <_vsnprintf+0x98>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    1d4c:	00042703          	lw	a4,0(s0)
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    1d50:	0216e693          	ori	a3,a3,33
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    1d54:	00800793          	li	a5,8
    1d58:	000d8613          	mv	a2,s11
    1d5c:	00d12223          	sw	a3,4(sp)
    1d60:	00f12023          	sw	a5,0(sp)
    1d64:	000b0893          	mv	a7,s6
    1d68:	01000813          	li	a6,16
    1d6c:	00000793          	li	a5,0
    1d70:	00048693          	mv	a3,s1
    1d74:	00090593          	mv	a1,s2
    1d78:	00098513          	mv	a0,s3
    1d7c:	c49fe0ef          	jal	ra,9c4 <_ntoa_long>
    1d80:	00440413          	addi	s0,s0,4
    1d84:	00050d93          	mv	s11,a0
        break;
    1d88:	b35ff06f          	j	18bc <_vsnprintf+0x98>
  while (*format)
    1d8c:	000bc503          	lbu	a0,0(s7)
    out = _out_null;
    1d90:	61000993          	li	s3,1552
  while (*format)
    1d94:	00000d93          	li	s11,0
    1d98:	ae0514e3          	bnez	a0,1880 <_vsnprintf+0x5c>
    1d9c:	00000413          	li	s0,0
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    1da0:	c29de4e3          	bltu	s11,s1,19c8 <_vsnprintf+0x1a4>
    1da4:	c21ff06f          	j	19c4 <_vsnprintf+0x1a0>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    1da8:	00042b03          	lw	s6,0(s0)
    switch (*format) {
    1dac:	00264503          	lbu	a0,2(a2)
        format++;
    1db0:	00360b93          	addi	s7,a2,3
        precision = prec > 0 ? (unsigned int)prec : 0U;
    1db4:	fffb4793          	not	a5,s6
    1db8:	41f7d793          	srai	a5,a5,0x1f
    1dbc:	00fb7b33          	and	s6,s6,a5
        const int prec = (int)va_arg(va, int);
    1dc0:	00440413          	addi	s0,s0,4
        format++;
    1dc4:	00260613          	addi	a2,a2,2
    1dc8:	b65ff06f          	j	192c <_vsnprintf+0x108>
  for (s = str; *s && maxsize--; ++s);
    1dcc:	32050263          	beqz	a0,20f0 <_vsnprintf+0x8cc>
    1dd0:	fffb0c93          	addi	s9,s6,-1
    1dd4:	eddff06f          	j	1cb0 <_vsnprintf+0x48c>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    1dd8:	0df57793          	andi	a5,a0,223
    1ddc:	04700713          	li	a4,71
    1de0:	08e78263          	beq	a5,a4,1e64 <_vsnprintf+0x640>
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    1de4:	04500793          	li	a5,69
    1de8:	08f50a63          	beq	a0,a5,1e7c <_vsnprintf+0x658>
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    1dec:	00740413          	addi	s0,s0,7
    1df0:	ff847413          	andi	s0,s0,-8
    1df4:	00042703          	lw	a4,0(s0)
    1df8:	00442783          	lw	a5,4(s0)
    1dfc:	000d8613          	mv	a2,s11
    1e00:	00d12023          	sw	a3,0(sp)
    1e04:	000c0893          	mv	a7,s8
    1e08:	000b0813          	mv	a6,s6
    1e0c:	00048693          	mv	a3,s1
    1e10:	00090593          	mv	a1,s2
    1e14:	00098513          	mv	a0,s3
    1e18:	e09fe0ef          	jal	ra,c20 <_etoa>
    1e1c:	00840413          	addi	s0,s0,8
    1e20:	00050d93          	mv	s11,a0
        break;
    1e24:	a99ff06f          	j	18bc <_vsnprintf+0x98>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
    1e28:	0206e693          	ori	a3,a3,32
    1e2c:	db9ff06f          	j	1be4 <_vsnprintf+0x3c0>
    1e30:	000c8d93          	mv	s11,s9
          while (l++ < width) {
    1e34:	02812783          	lw	a5,40(sp)
    1e38:	1787f663          	bgeu	a5,s8,1fa4 <_vsnprintf+0x780>
    1e3c:	01bc0733          	add	a4,s8,s11
    1e40:	40f70cb3          	sub	s9,a4,a5
            out(' ', buffer, idx++, maxlen);
    1e44:	000d8613          	mv	a2,s11
    1e48:	00048693          	mv	a3,s1
    1e4c:	001d8d93          	addi	s11,s11,1
    1e50:	00090593          	mv	a1,s2
    1e54:	02000513          	li	a0,32
    1e58:	000980e7          	jalr	s3
          while (l++ < width) {
    1e5c:	ffbc94e3          	bne	s9,s11,1e44 <_vsnprintf+0x620>
    1e60:	ee1ff06f          	j	1d40 <_vsnprintf+0x51c>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    1e64:	000017b7          	lui	a5,0x1
    1e68:	80078793          	addi	a5,a5,-2048 # 800 <_ntoa_format+0xc8>
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    1e6c:	0fd57513          	andi	a0,a0,253
    1e70:	04500713          	li	a4,69
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    1e74:	00f6e6b3          	or	a3,a3,a5
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    1e78:	f6e51ae3          	bne	a0,a4,1dec <_vsnprintf+0x5c8>
    1e7c:	0206e693          	ori	a3,a3,32
    1e80:	f6dff06f          	j	1dec <_vsnprintf+0x5c8>
    switch (*format) {
    1e84:	00264503          	lbu	a0,2(a2)
          flags |= FLAGS_CHAR;
    1e88:	0c06e693          	ori	a3,a3,192
        format++;
    1e8c:	00360b93          	addi	s7,a2,3
    1e90:	acdff06f          	j	195c <_vsnprintf+0x138>
  return (unsigned int)(s - str);
    1e94:	41ac87b3          	sub	a5,s9,s10
    1e98:	02f12423          	sw	a5,40(sp)
    1e9c:	e3dff06f          	j	1cd8 <_vsnprintf+0x4b4>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    1ea0:	ff36f593          	andi	a1,a3,-13
        if (flags & FLAGS_PRECISION) {
    1ea4:	4006f793          	andi	a5,a3,1024
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    1ea8:	0205e593          	ori	a1,a1,32
          base = 16U;
    1eac:	01000813          	li	a6,16
        if (flags & FLAGS_PRECISION) {
    1eb0:	16078e63          	beqz	a5,202c <_vsnprintf+0x808>
          flags &= ~FLAGS_ZEROPAD;
    1eb4:	ffe5f593          	andi	a1,a1,-2
        if ((*format == 'i') || (*format == 'd')) {
    1eb8:	06900793          	li	a5,105
          if (flags & FLAGS_LONG_LONG) {
    1ebc:	2005f693          	andi	a3,a1,512
        if ((*format == 'i') || (*format == 'd')) {
    1ec0:	c6f508e3          	beq	a0,a5,1b30 <_vsnprintf+0x30c>
    1ec4:	06400793          	li	a5,100
    1ec8:	c6f504e3          	beq	a0,a5,1b30 <_vsnprintf+0x30c>
          if (flags & FLAGS_LONG_LONG) {
    1ecc:	1a069863          	bnez	a3,207c <_vsnprintf+0x858>
          else if (flags & FLAGS_LONG) {
    1ed0:	1005f793          	andi	a5,a1,256
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    1ed4:	00440c93          	addi	s9,s0,4
          else if (flags & FLAGS_LONG) {
    1ed8:	18079e63          	bnez	a5,2074 <_vsnprintf+0x850>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    1edc:	0405f793          	andi	a5,a1,64
    1ee0:	16079063          	bnez	a5,2040 <_vsnprintf+0x81c>
    1ee4:	0805f793          	andi	a5,a1,128
    1ee8:	18078663          	beqz	a5,2074 <_vsnprintf+0x850>
    1eec:	00045703          	lhu	a4,0(s0)
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    1ef0:	000d8613          	mv	a2,s11
    1ef4:	00b12223          	sw	a1,4(sp)
    1ef8:	01812023          	sw	s8,0(sp)
    1efc:	000b0893          	mv	a7,s6
    1f00:	00000793          	li	a5,0
    1f04:	c79ff06f          	j	1b7c <_vsnprintf+0x358>
    1f08:	00060c93          	mv	s9,a2
    1f0c:	e31ff06f          	j	1d3c <_vsnprintf+0x518>
          while (l++ < width) {
    1f10:	00100793          	li	a5,1
    1f14:	1f87f863          	bgeu	a5,s8,2104 <_vsnprintf+0x8e0>
    1f18:	fffd8c93          	addi	s9,s11,-1
    1f1c:	018c8cb3          	add	s9,s9,s8
    1f20:	0080006f          	j	1f28 <_vsnprintf+0x704>
    1f24:	001d0d13          	addi	s10,s10,1
            out(' ', buffer, idx++, maxlen);
    1f28:	000d8613          	mv	a2,s11
    1f2c:	00048693          	mv	a3,s1
    1f30:	00090593          	mv	a1,s2
    1f34:	02000513          	li	a0,32
    1f38:	000d0d93          	mv	s11,s10
    1f3c:	000980e7          	jalr	s3
          while (l++ < width) {
    1f40:	ff9d12e3          	bne	s10,s9,1f24 <_vsnprintf+0x700>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    1f44:	001d0d93          	addi	s11,s10,1
    1f48:	00044503          	lbu	a0,0(s0)
    1f4c:	00048693          	mv	a3,s1
    1f50:	000c8613          	mv	a2,s9
    1f54:	00090593          	mv	a1,s2
    1f58:	000980e7          	jalr	s3
        break;
    1f5c:	000b0413          	mv	s0,s6
    1f60:	95dff06f          	j	18bc <_vsnprintf+0x98>
          while (l++ < width) {
    1f64:	02812703          	lw	a4,40(sp)
    1f68:	00170793          	addi	a5,a4,1
    1f6c:	19877663          	bgeu	a4,s8,20f8 <_vsnprintf+0x8d4>
    1f70:	01bc07b3          	add	a5,s8,s11
    1f74:	40e78cb3          	sub	s9,a5,a4
            out(' ', buffer, idx++, maxlen);
    1f78:	000d8613          	mv	a2,s11
    1f7c:	00048693          	mv	a3,s1
    1f80:	001d8d93          	addi	s11,s11,1
    1f84:	00090593          	mv	a1,s2
    1f88:	02000513          	li	a0,32
    1f8c:	000980e7          	jalr	s3
          while (l++ < width) {
    1f90:	ffbc94e3          	bne	s9,s11,1f78 <_vsnprintf+0x754>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1f94:	000d4503          	lbu	a0,0(s10)
          while (l++ < width) {
    1f98:	001c0793          	addi	a5,s8,1
    1f9c:	02f12423          	sw	a5,40(sp)
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1fa0:	d4051ee3          	bnez	a0,1cfc <_vsnprintf+0x4d8>
          while (l++ < width) {
    1fa4:	000d8c93          	mv	s9,s11
    1fa8:	d99ff06f          	j	1d40 <_vsnprintf+0x51c>
            const long long value = va_arg(va, long long);
    1fac:	00740413          	addi	s0,s0,7
    1fb0:	ff847413          	andi	s0,s0,-8
    1fb4:	00442f03          	lw	t5,4(s0)
    1fb8:	00042783          	lw	a5,0(s0)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    1fbc:	00080893          	mv	a7,a6
    1fc0:	41ff5693          	srai	a3,t5,0x1f
    1fc4:	00f6c7b3          	xor	a5,a3,a5
    1fc8:	40d78733          	sub	a4,a5,a3
    1fcc:	01e6c533          	xor	a0,a3,t5
    1fd0:	00e7b7b3          	sltu	a5,a5,a4
    1fd4:	40d506b3          	sub	a3,a0,a3
    1fd8:	000d8613          	mv	a2,s11
    1fdc:	00b12623          	sw	a1,12(sp)
    1fe0:	01812423          	sw	s8,8(sp)
    1fe4:	01612223          	sw	s6,4(sp)
    1fe8:	00012023          	sw	zero,0(sp)
    1fec:	01ff5813          	srli	a6,t5,0x1f
    1ff0:	40f687b3          	sub	a5,a3,a5
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    1ff4:	00048693          	mv	a3,s1
    1ff8:	00090593          	mv	a1,s2
    1ffc:	00098513          	mv	a0,s3
    2000:	a89fe0ef          	jal	ra,a88 <_ntoa_long_long>
    2004:	00840413          	addi	s0,s0,8
    2008:	00050d93          	mv	s11,a0
    200c:	8b1ff06f          	j	18bc <_vsnprintf+0x98>
        if (flags & FLAGS_PRECISION) {
    2010:	4006f793          	andi	a5,a3,1024
          base = 16U;
    2014:	01000813          	li	a6,16
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    2018:	ff36f593          	andi	a1,a3,-13
        if (flags & FLAGS_PRECISION) {
    201c:	e8078ee3          	beqz	a5,1eb8 <_vsnprintf+0x694>
    2020:	e95ff06f          	j	1eb4 <_vsnprintf+0x690>
          base = 10U;
    2024:	00a00813          	li	a6,10
    2028:	e8dff06f          	j	1eb4 <_vsnprintf+0x690>
        if ((*format == 'i') || (*format == 'd')) {
    202c:	2006f693          	andi	a3,a3,512
    2030:	e9dff06f          	j	1ecc <_vsnprintf+0x6a8>
    2034:	00044783          	lbu	a5,0(s0)
    2038:	00078713          	mv	a4,a5
    203c:	b2dff06f          	j	1b68 <_vsnprintf+0x344>
    2040:	00044703          	lbu	a4,0(s0)
    2044:	eadff06f          	j	1ef0 <_vsnprintf+0x6cc>
          while (l++ < width) {
    2048:	000d0d93          	mv	s11,s10
        break;
    204c:	000b0413          	mv	s0,s6
    2050:	86dff06f          	j	18bc <_vsnprintf+0x98>
          base =  8U;
    2054:	00800813          	li	a6,8
    precision = 0U;
    2058:	00068593          	mv	a1,a3
        if ((*format != 'i') && (*format != 'd')) {
    205c:	06400713          	li	a4,100
        if (flags & FLAGS_PRECISION) {
    2060:	4005f793          	andi	a5,a1,1024
        if ((*format != 'i') && (*format != 'd')) {
    2064:	0ae51663          	bne	a0,a4,2110 <_vsnprintf+0x8ec>
          if (flags & FLAGS_LONG_LONG) {
    2068:	2005f693          	andi	a3,a1,512
        if (flags & FLAGS_PRECISION) {
    206c:	ac0782e3          	beqz	a5,1b30 <_vsnprintf+0x30c>
    2070:	e45ff06f          	j	1eb4 <_vsnprintf+0x690>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    2074:	00042703          	lw	a4,0(s0)
    2078:	e79ff06f          	j	1ef0 <_vsnprintf+0x6cc>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    207c:	00740413          	addi	s0,s0,7
    2080:	ff847413          	andi	s0,s0,-8
    2084:	00042703          	lw	a4,0(s0)
    2088:	00442783          	lw	a5,4(s0)
    208c:	00080893          	mv	a7,a6
    2090:	000d8613          	mv	a2,s11
    2094:	00b12623          	sw	a1,12(sp)
    2098:	01812423          	sw	s8,8(sp)
    209c:	01612223          	sw	s6,4(sp)
    20a0:	00012023          	sw	zero,0(sp)
    20a4:	00000813          	li	a6,0
    20a8:	f4dff06f          	j	1ff4 <_vsnprintf+0x7d0>
            const long value = va_arg(va, long);
    20ac:	00042783          	lw	a5,0(s0)
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    20b0:	000d8613          	mv	a2,s11
    20b4:	00b12223          	sw	a1,4(sp)
    20b8:	41f7d713          	srai	a4,a5,0x1f
    20bc:	00f746b3          	xor	a3,a4,a5
    20c0:	01812023          	sw	s8,0(sp)
    20c4:	000b0893          	mv	a7,s6
    20c8:	01f7d793          	srli	a5,a5,0x1f
    20cc:	40e68733          	sub	a4,a3,a4
    20d0:	aadff06f          	j	1b7c <_vsnprintf+0x358>
          base =  2U;
    20d4:	00200813          	li	a6,2
    20d8:	f81ff06f          	j	2058 <_vsnprintf+0x834>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    20dc:	00042783          	lw	a5,0(s0)
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    20e0:	41f7d693          	srai	a3,a5,0x1f
    20e4:	00f6c733          	xor	a4,a3,a5
    20e8:	40d70733          	sub	a4,a4,a3
    20ec:	a7dff06f          	j	1b68 <_vsnprintf+0x344>
  for (s = str; *s && maxsize--; ++s);
    20f0:	02012423          	sw	zero,40(sp)
    20f4:	be5ff06f          	j	1cd8 <_vsnprintf+0x4b4>
          while (l++ < width) {
    20f8:	02f12423          	sw	a5,40(sp)
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    20fc:	c00510e3          	bnez	a0,1cfc <_vsnprintf+0x4d8>
    2100:	ea5ff06f          	j	1fa4 <_vsnprintf+0x780>
          while (l++ < width) {
    2104:	000d8c93          	mv	s9,s11
    2108:	000d0d93          	mv	s11,s10
    210c:	e3dff06f          	j	1f48 <_vsnprintf+0x724>
    2110:	00058693          	mv	a3,a1
    2114:	f05ff06f          	j	2018 <_vsnprintf+0x7f4>
          base = 10U;
    2118:	00a00813          	li	a6,10
    211c:	f41ff06f          	j	205c <_vsnprintf+0x838>

00002120 <puts>:
{
    2120:	ff010113          	addi	sp,sp,-16
    2124:	00812423          	sw	s0,8(sp)
    2128:	00112623          	sw	ra,12(sp)
    212c:	00050413          	mv	s0,a0
   while(*s !='\0')
    2130:	00054503          	lbu	a0,0(a0)
    2134:	00050c63          	beqz	a0,214c <puts+0x2c>
       fputc(*s, (void *)-1);
    2138:	fff00593          	li	a1,-1
       s++;
    213c:	00140413          	addi	s0,s0,1
       fputc(*s, (void *)-1);
    2140:	115000ef          	jal	ra,2a54 <fputc>
   while(*s !='\0')
    2144:	00044503          	lbu	a0,0(s0)
    2148:	fe0518e3          	bnez	a0,2138 <puts+0x18>
   fputc('\n', (void *)-1);
    214c:	fff00593          	li	a1,-1
    2150:	00a00513          	li	a0,10
    2154:	101000ef          	jal	ra,2a54 <fputc>
}
    2158:	00c12083          	lw	ra,12(sp)
    215c:	00812403          	lw	s0,8(sp)
    2160:	00000513          	li	a0,0
    2164:	01010113          	addi	sp,sp,16
    2168:	00008067          	ret

0000216c <_putchar>:
    fputc(character, (void *)-1);
    216c:	fff00593          	li	a1,-1
    2170:	0e50006f          	j	2a54 <fputc>

00002174 <putchar>:
{
    2174:	ff010113          	addi	sp,sp,-16
    fputc(character, (void *)-1);
    2178:	fff00593          	li	a1,-1
    217c:	0ff57513          	andi	a0,a0,255
{
    2180:	00112623          	sw	ra,12(sp)
    fputc(character, (void *)-1);
    2184:	0d1000ef          	jal	ra,2a54 <fputc>
}
    2188:	00c12083          	lw	ra,12(sp)
    218c:	00000513          	li	a0,0
    2190:	01010113          	addi	sp,sp,16
    2194:	00008067          	ret

00002198 <printf>:


///////////////////////////////////////////////////////////////////////////////

int printf(const char* format, ...)
{
    2198:	fc010113          	addi	sp,sp,-64
  va_list va;
  va_start(va, format);
    219c:	02410313          	addi	t1,sp,36
{
    21a0:	02d12623          	sw	a3,44(sp)
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    21a4:	00050693          	mv	a3,a0
    21a8:	00002537          	lui	a0,0x2
{
    21ac:	02b12223          	sw	a1,36(sp)
    21b0:	02c12423          	sw	a2,40(sp)
    21b4:	02e12823          	sw	a4,48(sp)
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    21b8:	00810593          	addi	a1,sp,8
    21bc:	00030713          	mv	a4,t1
    21c0:	fff00613          	li	a2,-1
    21c4:	80050513          	addi	a0,a0,-2048 # 1800 <_out_char>
{
    21c8:	00112e23          	sw	ra,28(sp)
    21cc:	02f12a23          	sw	a5,52(sp)
    21d0:	03012c23          	sw	a6,56(sp)
    21d4:	03112e23          	sw	a7,60(sp)
  va_start(va, format);
    21d8:	00612623          	sw	t1,12(sp)
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    21dc:	e48ff0ef          	jal	ra,1824 <_vsnprintf>
  va_end(va);
  return ret;
}
    21e0:	01c12083          	lw	ra,28(sp)
    21e4:	04010113          	addi	sp,sp,64
    21e8:	00008067          	ret

000021ec <sprintf>:


int sprintf(char* buffer, const char* format, ...)
{
    21ec:	fc010113          	addi	sp,sp,-64
  va_list va;
  va_start(va, format);
    21f0:	02810313          	addi	t1,sp,40
{
    21f4:	02d12623          	sw	a3,44(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    21f8:	00058693          	mv	a3,a1
    21fc:	00050593          	mv	a1,a0
{
    2200:	02c12423          	sw	a2,40(sp)
    2204:	02e12823          	sw	a4,48(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    2208:	fff00613          	li	a2,-1
    220c:	00030713          	mv	a4,t1
    2210:	60000513          	li	a0,1536
{
    2214:	00112e23          	sw	ra,28(sp)
    2218:	02f12a23          	sw	a5,52(sp)
    221c:	03012c23          	sw	a6,56(sp)
    2220:	03112e23          	sw	a7,60(sp)
  va_start(va, format);
    2224:	00612623          	sw	t1,12(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    2228:	dfcff0ef          	jal	ra,1824 <_vsnprintf>
  va_end(va);
  return ret;
}
    222c:	01c12083          	lw	ra,28(sp)
    2230:	04010113          	addi	sp,sp,64
    2234:	00008067          	ret

00002238 <snprintf>:


int snprintf(char* buffer, size_t count, const char* format, ...)
{
    2238:	fc010113          	addi	sp,sp,-64
  va_list va;
  va_start(va, format);
    223c:	02c10313          	addi	t1,sp,44
{
    2240:	02d12623          	sw	a3,44(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    2244:	00060693          	mv	a3,a2
    2248:	00058613          	mv	a2,a1
    224c:	00050593          	mv	a1,a0
{
    2250:	02e12823          	sw	a4,48(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    2254:	60000513          	li	a0,1536
    2258:	00030713          	mv	a4,t1
{
    225c:	00112e23          	sw	ra,28(sp)
    2260:	02f12a23          	sw	a5,52(sp)
    2264:	03012c23          	sw	a6,56(sp)
    2268:	03112e23          	sw	a7,60(sp)
  va_start(va, format);
    226c:	00612623          	sw	t1,12(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    2270:	db4ff0ef          	jal	ra,1824 <_vsnprintf>
  va_end(va);
  return ret;
}
    2274:	01c12083          	lw	ra,28(sp)
    2278:	04010113          	addi	sp,sp,64
    227c:	00008067          	ret

00002280 <vprintf>:


int vprintf(const char* format, va_list va)
{
    2280:	fe010113          	addi	sp,sp,-32
    2284:	00050693          	mv	a3,a0
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    2288:	00002537          	lui	a0,0x2
{
    228c:	00058713          	mv	a4,a1
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    2290:	fff00613          	li	a2,-1
    2294:	00c10593          	addi	a1,sp,12
    2298:	80050513          	addi	a0,a0,-2048 # 1800 <_out_char>
{
    229c:	00112e23          	sw	ra,28(sp)
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    22a0:	d84ff0ef          	jal	ra,1824 <_vsnprintf>
}
    22a4:	01c12083          	lw	ra,28(sp)
    22a8:	02010113          	addi	sp,sp,32
    22ac:	00008067          	ret

000022b0 <vsnprintf>:


int vsnprintf(char* buffer, size_t count, const char* format, va_list va)
{
    22b0:	00068713          	mv	a4,a3
  return _vsnprintf(_out_buffer, buffer, count, format, va);
    22b4:	00060693          	mv	a3,a2
    22b8:	00058613          	mv	a2,a1
    22bc:	00050593          	mv	a1,a0
    22c0:	60000513          	li	a0,1536
    22c4:	d60ff06f          	j	1824 <_vsnprintf>

000022c8 <fctprintf>:
}


int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
    22c8:	fc010113          	addi	sp,sp,-64
  va_list va;
  va_start(va, format);
    22cc:	02c10313          	addi	t1,sp,44
{
    22d0:	00050e93          	mv	t4,a0
  const out_fct_wrap_type out_fct_wrap = { out, arg };
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    22d4:	00002537          	lui	a0,0x2
{
    22d8:	00058e13          	mv	t3,a1
    22dc:	02d12623          	sw	a3,44(sp)
    22e0:	02e12823          	sw	a4,48(sp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    22e4:	00060693          	mv	a3,a2
    22e8:	00810593          	addi	a1,sp,8
    22ec:	00030713          	mv	a4,t1
    22f0:	fff00613          	li	a2,-1
    22f4:	81050513          	addi	a0,a0,-2032 # 1810 <_out_fct>
{
    22f8:	00112e23          	sw	ra,28(sp)
    22fc:	02f12a23          	sw	a5,52(sp)
    2300:	03012c23          	sw	a6,56(sp)
    2304:	03112e23          	sw	a7,60(sp)
  va_start(va, format);
    2308:	00612223          	sw	t1,4(sp)
  const out_fct_wrap_type out_fct_wrap = { out, arg };
    230c:	01d12423          	sw	t4,8(sp)
    2310:	01c12623          	sw	t3,12(sp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    2314:	d10ff0ef          	jal	ra,1824 <_vsnprintf>
  va_end(va);
  return ret;
}
    2318:	01c12083          	lw	ra,28(sp)
    231c:	04010113          	addi	sp,sp,64
    2320:	00008067          	ret

00002324 <get_vtimer>:
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
int get_vtimer()
{
    2324:	ff010113          	addi	sp,sp,-16
  volatile unsigned int   LoadCount;
  asm ("csrr %[LoadCount], time\n"
    2328:	c01027f3          	rdtime	a5
    232c:	00f12623          	sw	a5,12(sp)
      :[LoadCount]"=r"(LoadCount)
      :
      :
      );
  //LoadCount = *TIMER_ADDR;
  return LoadCount;
    2330:	00c12503          	lw	a0,12(sp)
  //int *TIMER_ADDR;
  //TIMER_ADDR = 0xE0013000;
  //volatile unsigned int   LoadCount;
  //LoadCount = *TIMER_ADDR;
  //return LoadCount;
}
    2334:	01010113          	addi	sp,sp,16
    2338:	00008067          	ret

0000233c <sim_end>:
{
  int *END_ADDR;
  END_ADDR = 0x6000FFF8;
  unsigned int END_DATA;
  END_DATA= 0xffff0000;
  *END_ADDR = END_DATA;
    233c:	600107b7          	lui	a5,0x60010
    2340:	ffff0737          	lui	a4,0xffff0
    2344:	fee7ac23          	sw	a4,-8(a5) # 6000fff8 <__kernel_stack+0x3ff50000>
}
    2348:	00008067          	ret

0000234c <ck_uart_set_baudrate>:

void ck_uart_set_baudrate(p_ck_uart_device uart_device, uint32_t baudrate)
{ /* {{{ ck_uart_set_baudrate */
    uint32_t baud_div;
    uint32_t *addr = uart_device->register_map;
    baud_div = (APB_FREQ/baudrate) >> 4;
    234c:	05f5e7b7          	lui	a5,0x5f5e
    2350:	10078793          	addi	a5,a5,256 # 5f5e100 <_global_impure_ptr+0x5f57bd8>
    2354:	02b7d7b3          	divu	a5,a5,a1
    uint32_t *addr = uart_device->register_map;
    2358:	00452703          	lw	a4,4(a0)
    uart_device->baudrate = baudrate;
    235c:	00b52423          	sw	a1,8(a0)
    *(reg8_t*)(addr+CK_UART_LCR) |= LCR_SET_DLAB;
    2360:	00c74683          	lbu	a3,12(a4) # ffff000c <__kernel_stack+0xdff30014>
    2364:	f806e693          	ori	a3,a3,-128
    2368:	0ff6f693          	andi	a3,a3,255
    236c:	00d70623          	sb	a3,12(a4)
    baud_div = (APB_FREQ/baudrate) >> 4;
    2370:	0047d693          	srli	a3,a5,0x4
    *(reg8_t*)(addr+CK_UART_DLL) = (baud_div & 0xFF);
    2374:	0ff6f693          	andi	a3,a3,255
    *(reg8_t*)(addr+CK_UART_DLH) = ((baud_div >> 8) & 0xFF);
    2378:	00c7d793          	srli	a5,a5,0xc
    *(reg8_t*)(addr+CK_UART_DLL) = (baud_div & 0xFF);
    237c:	00d70023          	sb	a3,0(a4)
    *(reg8_t*)(addr+CK_UART_DLH) = ((baud_div >> 8) & 0xFF);
    2380:	0ff7f793          	andi	a5,a5,255
    2384:	00f70223          	sb	a5,4(a4)
    *(reg8_t*)(addr+CK_UART_LCR) &= (~LCR_SET_DLAB);
    2388:	00c74783          	lbu	a5,12(a4)
    238c:	07f7f793          	andi	a5,a5,127
    2390:	00f70623          	sb	a5,12(a4)
} /* }}} */
    2394:	00008067          	ret

00002398 <ck_uart_set_parity>:

void ck_uart_set_parity(p_ck_uart_device uart_device, t_ck_uart_parity parity)
{ /* {{{ ck_uart_set_parity */
    uart_device->parity = parity;
    2398:	00b52623          	sw	a1,12(a0)
    switch (parity)
    239c:	00100793          	li	a5,1
    23a0:	04f58a63          	beq	a1,a5,23f4 <ck_uart_set_parity+0x5c>
    23a4:	00200793          	li	a5,2
    23a8:	02f58063          	beq	a1,a5,23c8 <ck_uart_set_parity+0x30>
    23ac:	00058463          	beqz	a1,23b4 <ck_uart_set_parity+0x1c>
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_PARITY_EVEN;
            break;
        default:
            break;
    }
} /* }}} */
    23b0:	00008067          	ret
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= (~LCR_PARITY_ENABLE);
    23b4:	00452703          	lw	a4,4(a0)
    23b8:	00c74783          	lbu	a5,12(a4)
    23bc:	0f77f793          	andi	a5,a5,247
    23c0:	00f70623          	sb	a5,12(a4)
            break;
    23c4:	00008067          	ret
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_PARITY_ENABLE;
    23c8:	00452703          	lw	a4,4(a0)
    23cc:	00c74783          	lbu	a5,12(a4)
    23d0:	0ff7f793          	andi	a5,a5,255
    23d4:	0087e793          	ori	a5,a5,8
    23d8:	00f70623          	sb	a5,12(a4)
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_PARITY_EVEN;
    23dc:	00452703          	lw	a4,4(a0)
    23e0:	00c74783          	lbu	a5,12(a4)
    23e4:	0ff7f793          	andi	a5,a5,255
    23e8:	0107e793          	ori	a5,a5,16
    23ec:	00f70623          	sb	a5,12(a4)
} /* }}} */
    23f0:	00008067          	ret
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_PARITY_ENABLE;
    23f4:	00452703          	lw	a4,4(a0)
    23f8:	00c74783          	lbu	a5,12(a4)
    23fc:	0ff7f793          	andi	a5,a5,255
    2400:	0087e793          	ori	a5,a5,8
    2404:	00f70623          	sb	a5,12(a4)
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= LCR_PARITY_ODD;
    2408:	00452703          	lw	a4,4(a0)
    240c:	00c74783          	lbu	a5,12(a4)
    2410:	0ef7f793          	andi	a5,a5,239
    2414:	00f70623          	sb	a5,12(a4)
            break;
    2418:	00008067          	ret

0000241c <ck_uart_set_wordsize>:

void ck_uart_set_wordsize(p_ck_uart_device uart_device, t_ck_uart_wordsize wordsize)
{ /* {{{ ck_uart_set_wordsize */
    uart_device->wordsize = wordsize;
    241c:	00b52a23          	sw	a1,20(a0)
    switch (wordsize)
    2420:	00200793          	li	a5,2
    2424:	06f58663          	beq	a1,a5,2490 <ck_uart_set_wordsize+0x74>
    2428:	02b7e863          	bltu	a5,a1,2458 <ck_uart_set_wordsize+0x3c>
    242c:	04058863          	beqz	a1,247c <ck_uart_set_wordsize+0x60>
    {
        case WORDSIZE_5:
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= LCR_WORD_SIZE_5;
            break;
        case WORDSIZE_6:
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= 0xfd;
    2430:	00452703          	lw	a4,4(a0)
    2434:	00c74783          	lbu	a5,12(a4)
    2438:	0fd7f793          	andi	a5,a5,253
    243c:	00f70623          	sb	a5,12(a4)
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_WORD_SIZE_6;
    2440:	00452703          	lw	a4,4(a0)
    2444:	00c74783          	lbu	a5,12(a4)
    2448:	0ff7f793          	andi	a5,a5,255
    244c:	0017e793          	ori	a5,a5,1
    2450:	00f70623          	sb	a5,12(a4)
            break;
    2454:	00008067          	ret
    switch (wordsize)
    2458:	00300793          	li	a5,3
    245c:	00f59e63          	bne	a1,a5,2478 <ck_uart_set_wordsize+0x5c>
        case WORDSIZE_7:
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= 0xfe;
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_WORD_SIZE_7;
            break;
        case WORDSIZE_8:
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_WORD_SIZE_8;
    2460:	00452703          	lw	a4,4(a0)
    2464:	00c74783          	lbu	a5,12(a4)
    2468:	0ff7f793          	andi	a5,a5,255
    246c:	0037e793          	ori	a5,a5,3
    2470:	00f70623          	sb	a5,12(a4)
            break;
        default:
            break;
    }			
} /* }}} */
    2474:	00008067          	ret
    2478:	00008067          	ret
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= LCR_WORD_SIZE_5;
    247c:	00452703          	lw	a4,4(a0)
    2480:	00c74783          	lbu	a5,12(a4)
    2484:	0fc7f793          	andi	a5,a5,252
    2488:	00f70623          	sb	a5,12(a4)
            break;
    248c:	00008067          	ret
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= 0xfe;
    2490:	00452703          	lw	a4,4(a0)
    2494:	00c74783          	lbu	a5,12(a4)
    2498:	0fe7f793          	andi	a5,a5,254
    249c:	00f70623          	sb	a5,12(a4)
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_WORD_SIZE_7;
    24a0:	00452703          	lw	a4,4(a0)
    24a4:	00c74783          	lbu	a5,12(a4)
    24a8:	0ff7f793          	andi	a5,a5,255
    24ac:	0027e793          	ori	a5,a5,2
    24b0:	00f70623          	sb	a5,12(a4)
            break;
    24b4:	00008067          	ret

000024b8 <ck_uart_set_stopbit>:

void ck_uart_set_stopbit(p_ck_uart_device uart_device, t_ck_uart_stopbit stopbit)
{ /* {{{ ck_uart_set_stopbit */
    uart_device->stopbit = stopbit;
    24b8:	00b52823          	sw	a1,16(a0)
    switch(stopbit)
    24bc:	02058463          	beqz	a1,24e4 <ck_uart_set_stopbit+0x2c>
    24c0:	00100793          	li	a5,1
    24c4:	00f59e63          	bne	a1,a5,24e0 <ck_uart_set_stopbit+0x28>
    {
        case STOPBIT_1:
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= LCR_STOP_BIT1;
            break;
        case STOPBIT_2:
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_STOP_BIT2;
    24c8:	00452703          	lw	a4,4(a0)
    24cc:	00c74783          	lbu	a5,12(a4)
    24d0:	0ff7f793          	andi	a5,a5,255
    24d4:	0047e793          	ori	a5,a5,4
    24d8:	00f70623          	sb	a5,12(a4)
            break;
        default:
            break;
    }
} /* }}} */
    24dc:	00008067          	ret
    24e0:	00008067          	ret
    24e4:	00452703          	lw	a4,4(a0)
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= LCR_STOP_BIT1;
    24e8:	00c74783          	lbu	a5,12(a4)
    24ec:	0fb7f793          	andi	a5,a5,251
    24f0:	00f70623          	sb	a5,12(a4)
            break;
    24f4:	00008067          	ret

000024f8 <ck_uart_set_rxmode>:


void ck_uart_set_rxmode(p_ck_uart_device uart_device, t_ck_uart_mode rxmode)
{ /* {{{ ck_uart_set_rxmode */
    uart_device->rxmode = rxmode;
    24f8:	00b52c23          	sw	a1,24(a0)

} /* }}} */
    24fc:	00008067          	ret

00002500 <ck_uart_set_txmode>:

void ck_uart_set_txmode(p_ck_uart_device uart_device, t_ck_uart_mode txmode)
{ /* {{{ ck_uart_set_txmode */
    uart_device->txmode = txmode;
    2500:	00b52e23          	sw	a1,28(a0)
} /* }}} */
    2504:	00008067          	ret

00002508 <ck_uart_open>:
 * @param  id: UART device ID
 * @retval 0 if success, 1 if fail
 */
uint32_t ck_uart_open(p_ck_uart_device uart_device, uint32_t id)
{
    if (id == 0)
    2508:	00059c63          	bnez	a1,2520 <ck_uart_open+0x18>
    {
        uart_device->uart_id = 0;
        uart_device->register_map = (uint32_t*)UART0_BASE_ADDR;
    250c:	400157b7          	lui	a5,0x40015
        uart_device->uart_id = 0;
    2510:	00052023          	sw	zero,0(a0)
        uart_device->register_map = (uint32_t*)UART0_BASE_ADDR;
    2514:	00f52223          	sw	a5,4(a0)
        return 0;
    2518:	00000513          	li	a0,0
    251c:	00008067          	ret
    }
    else
    {
        return 1;
    2520:	00100513          	li	a0,1
    }
}
    2524:	00008067          	ret

00002528 <ck_uart_init>:
 * @param  uart_cfig: uart configurations collection, a structure datatype
 * @retval 0 if success, 1 if fail
 */
uint32_t ck_uart_init(p_ck_uart_device uart_device, p_ck_uart_cfig uart_cfig)
{
    if (uart_device->uart_id == 0xFFFF)
    2528:	00052703          	lw	a4,0(a0)
    252c:	000107b7          	lui	a5,0x10
    2530:	fff78793          	addi	a5,a5,-1 # ffff <_global_impure_ptr+0x9ad7>
    2534:	0ef70263          	beq	a4,a5,2618 <ck_uart_init+0xf0>
        return 1;
    ck_uart_set_baudrate(uart_device, uart_cfig->baudrate);
    2538:	0005a683          	lw	a3,0(a1)
    baud_div = (APB_FREQ/baudrate) >> 4;
    253c:	05f5e7b7          	lui	a5,0x5f5e
    2540:	10078793          	addi	a5,a5,256 # 5f5e100 <_global_impure_ptr+0x5f57bd8>
    2544:	02d7d7b3          	divu	a5,a5,a3
    uint32_t *addr = uart_device->register_map;
    2548:	00452703          	lw	a4,4(a0)
{
    254c:	ff010113          	addi	sp,sp,-16
    2550:	00112623          	sw	ra,12(sp)
    2554:	00812423          	sw	s0,8(sp)
    2558:	00912223          	sw	s1,4(sp)
    uart_device->baudrate = baudrate;
    255c:	00d52423          	sw	a3,8(a0)
    *(reg8_t*)(addr+CK_UART_LCR) |= LCR_SET_DLAB;
    2560:	00c74683          	lbu	a3,12(a4)
    2564:	00058493          	mv	s1,a1
    2568:	00050413          	mv	s0,a0
    256c:	f806e693          	ori	a3,a3,-128
    2570:	0ff6f693          	andi	a3,a3,255
    2574:	00d70623          	sb	a3,12(a4)
    baud_div = (APB_FREQ/baudrate) >> 4;
    2578:	0047d693          	srli	a3,a5,0x4
    *(reg8_t*)(addr+CK_UART_DLL) = (baud_div & 0xFF);
    257c:	0ff6f693          	andi	a3,a3,255
    *(reg8_t*)(addr+CK_UART_DLH) = ((baud_div >> 8) & 0xFF);
    2580:	00c7d793          	srli	a5,a5,0xc
    *(reg8_t*)(addr+CK_UART_DLL) = (baud_div & 0xFF);
    2584:	00d70023          	sb	a3,0(a4)
    *(reg8_t*)(addr+CK_UART_DLH) = ((baud_div >> 8) & 0xFF);
    2588:	0ff7f793          	andi	a5,a5,255
    258c:	00f70223          	sb	a5,4(a4)
    *(reg8_t*)(addr+CK_UART_LCR) &= (~LCR_SET_DLAB);
    2590:	00c74783          	lbu	a5,12(a4)
    2594:	07f7f793          	andi	a5,a5,127
    2598:	00f70623          	sb	a5,12(a4)
    ck_uart_set_parity(uart_device, uart_cfig->parity);
    259c:	0085a583          	lw	a1,8(a1)
    25a0:	df9ff0ef          	jal	ra,2398 <ck_uart_set_parity>
    ck_uart_set_wordsize(uart_device, uart_cfig->wordsize);
    25a4:	00c4a583          	lw	a1,12(s1)
    25a8:	00040513          	mv	a0,s0
    25ac:	e71ff0ef          	jal	ra,241c <ck_uart_set_wordsize>
    ck_uart_set_stopbit(uart_device, uart_cfig->stopbit);
    25b0:	0044a783          	lw	a5,4(s1)
    uart_device->stopbit = stopbit;
    25b4:	00f42823          	sw	a5,16(s0)
    switch(stopbit)
    25b8:	04078663          	beqz	a5,2604 <ck_uart_init+0xdc>
    25bc:	00100713          	li	a4,1
    25c0:	02e78663          	beq	a5,a4,25ec <ck_uart_init+0xc4>
    uart_device->rxmode = rxmode;
    25c4:	0104a703          	lw	a4,16(s1)
    uart_device->txmode = txmode;
    25c8:	0144a783          	lw	a5,20(s1)
    ck_uart_set_rxmode(uart_device, uart_cfig->rxmode);
    ck_uart_set_txmode(uart_device, uart_cfig->txmode);
    return 0;
}
    25cc:	00c12083          	lw	ra,12(sp)
    uart_device->rxmode = rxmode;
    25d0:	00e42c23          	sw	a4,24(s0)
    uart_device->txmode = txmode;
    25d4:	00f42e23          	sw	a5,28(s0)
}
    25d8:	00812403          	lw	s0,8(sp)
    25dc:	00412483          	lw	s1,4(sp)
    return 0;
    25e0:	00000513          	li	a0,0
}
    25e4:	01010113          	addi	sp,sp,16
    25e8:	00008067          	ret
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_STOP_BIT2;
    25ec:	00442703          	lw	a4,4(s0)
    25f0:	00c74783          	lbu	a5,12(a4)
    25f4:	0ff7f793          	andi	a5,a5,255
    25f8:	0047e793          	ori	a5,a5,4
    25fc:	00f70623          	sb	a5,12(a4)
            break;
    2600:	fc5ff06f          	j	25c4 <ck_uart_init+0x9c>
    2604:	00442703          	lw	a4,4(s0)
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= LCR_STOP_BIT1;
    2608:	00c74783          	lbu	a5,12(a4)
    260c:	0fb7f793          	andi	a5,a5,251
    2610:	00f70623          	sb	a5,12(a4)
            break;
    2614:	fb1ff06f          	j	25c4 <ck_uart_init+0x9c>
        return 1;
    2618:	00100513          	li	a0,1
}
    261c:	00008067          	ret

00002620 <ck_uart_close>:
 */
uint32_t ck_uart_close(p_ck_uart_device uart_device)
{
    ck_uart_set_rxmode(uart_device, DISABLE);
    ck_uart_set_txmode(uart_device, DISABLE);
    uart_device->uart_id = 0xFFFF;
    2620:	000107b7          	lui	a5,0x10
    2624:	fff78793          	addi	a5,a5,-1 # ffff <_global_impure_ptr+0x9ad7>
    uart_device->rxmode = rxmode;
    2628:	00052c23          	sw	zero,24(a0)
    uart_device->txmode = txmode;
    262c:	00052e23          	sw	zero,28(a0)
    uart_device->uart_id = 0xFFFF;
    2630:	00f52023          	sw	a5,0(a0)
    return 0;
}
    2634:	00000513          	li	a0,0
    2638:	00008067          	ret

0000263c <ck_uart_putc>:
 * @param  c: character needs to transmit
 * @retval 0 if success, 1 if fail
 */
uint32_t ck_uart_putc(p_ck_uart_device uart_device, uint8_t c)
{
    if (uart_device->txmode == DISABLE)
    263c:	01c52783          	lw	a5,28(a0)
    2640:	02078063          	beqz	a5,2660 <ck_uart_putc+0x24>
        return 1;
    // wait until uart transmit buffer is empty
    while (!((*(reg8_t*)(uart_device->register_map+CK_UART_LSR)) & CK_LSR_TRANS_EMPTY));
    2644:	00452703          	lw	a4,4(a0)
    2648:	01474783          	lbu	a5,20(a4)
    264c:	0207f793          	andi	a5,a5,32
    2650:	fe078ce3          	beqz	a5,2648 <ck_uart_putc+0xc>

    *(reg8_t*)(uart_device->register_map+CK_UART_THR) = c;
    2654:	00b70023          	sb	a1,0(a4)
    return 0;
    2658:	00000513          	li	a0,0
    265c:	00008067          	ret
        return 1;
    2660:	00100513          	li	a0,1
}
    2664:	00008067          	ret

00002668 <ck_uart_status>:
    //uart_lsr = *(reg8_t*)(uart_device->register_map+CK_UART_LSR);
    if (uart_lsr & CK_LSR_TEMT)
        return 0;
    else
        return 1;
}
    2668:	00000513          	li	a0,0
    266c:	00008067          	ret

00002670 <vasprintf>:


#define CHUNKSIZE (256)

int vasprintf(char **ret, const char *fmt, va_list ap)
{
    2670:	fe010113          	addi	sp,sp,-32
    2674:	01612023          	sw	s6,0(sp)
    2678:	00050b13          	mv	s6,a0
    size_t chunks;
    size_t buflen;
    char * buf;
    int    len;

    chunks = ((strlen(fmt) + 1) / CHUNKSIZE) + 1;
    267c:	00058513          	mv	a0,a1
{
    2680:	00912a23          	sw	s1,20(sp)
    2684:	01312623          	sw	s3,12(sp)
    2688:	01412423          	sw	s4,8(sp)
    268c:	01512223          	sw	s5,4(sp)
    2690:	00112e23          	sw	ra,28(sp)
    2694:	00812c23          	sw	s0,24(sp)
    2698:	01212823          	sw	s2,16(sp)
    269c:	00058a13          	mv	s4,a1
    26a0:	00060a93          	mv	s5,a2
    chunks = ((strlen(fmt) + 1) / CHUNKSIZE) + 1;
    26a4:	34c030ef          	jal	ra,59f0 <strlen>
    26a8:	00150993          	addi	s3,a0,1
    26ac:	f009f993          	andi	s3,s3,-256
    buflen = chunks * CHUNKSIZE;
    26b0:	10098493          	addi	s1,s3,256

    *ret = NULL;
    26b4:	000b2023          	sw	zero,0(s6)
    26b8:	20098993          	addi	s3,s3,512
    for (;;) {
        buf = malloc(buflen);
    26bc:	00048513          	mv	a0,s1
    26c0:	4c3020ef          	jal	ra,5382 <malloc>
        if (buf == NULL) {
            return -ENOMEM;
        }
        len = vsnprintf(buf, buflen, fmt, ap);
    26c4:	00048593          	mv	a1,s1
    26c8:	000a8693          	mv	a3,s5
    26cc:	000a0613          	mv	a2,s4
        buf = malloc(buflen);
    26d0:	00050913          	mv	s2,a0
        if (buf == NULL) {
    26d4:	08050463          	beqz	a0,275c <vasprintf+0xec>
        len = vsnprintf(buf, buflen, fmt, ap);
    26d8:	bd9ff0ef          	jal	ra,22b0 <vsnprintf>
    26dc:	00050413          	mv	s0,a0

        if (len >= 0 && (size_t)len < buflen - 1) {
    26e0:	fff48493          	addi	s1,s1,-1
            break;
        }
        free(buf);
    26e4:	00090513          	mv	a0,s2
        if (len >= 0 && (size_t)len < buflen - 1) {
    26e8:	00044e63          	bltz	s0,2704 <vasprintf+0x94>
    26ec:	02946463          	bltu	s0,s1,2714 <vasprintf+0xa4>
        * len >= 0 is required for vsnprintf implementations that
        * return -1 for insufficient buffer
        */

        if (len >= 0 && buflen <= (size_t)len) {
            buflen = len + 1;
    26f0:	00140493          	addi	s1,s0,1
        free(buf);
    26f4:	49b020ef          	jal	ra,538e <free>
        if (len >= 0 && buflen <= (size_t)len) {
    26f8:	01346863          	bltu	s0,s3,2708 <vasprintf+0x98>
    26fc:	10098993          	addi	s3,s3,256
    2700:	fbdff06f          	j	26bc <vasprintf+0x4c>
        free(buf);
    2704:	48b020ef          	jal	ra,538e <free>
    2708:	00098493          	mv	s1,s3
    270c:	10098993          	addi	s3,s3,256
    2710:	fadff06f          	j	26bc <vasprintf+0x4c>
        }
    }

    if (len > 0 && buf != NULL) {
    2714:	02041863          	bnez	s0,2744 <vasprintf+0xd4>
        else
            *ret = buf;
    }

    return len;
}
    2718:	01c12083          	lw	ra,28(sp)
    271c:	00040513          	mv	a0,s0
    2720:	01812403          	lw	s0,24(sp)
    2724:	01412483          	lw	s1,20(sp)
    2728:	01012903          	lw	s2,16(sp)
    272c:	00c12983          	lw	s3,12(sp)
    2730:	00812a03          	lw	s4,8(sp)
    2734:	00412a83          	lw	s5,4(sp)
    2738:	00012b03          	lw	s6,0(sp)
    273c:	02010113          	addi	sp,sp,32
    2740:	00008067          	ret
        *ret = strdup(buf);
    2744:	26a030ef          	jal	ra,59ae <strdup>
    2748:	00ab2023          	sw	a0,0(s6)
        if (*ret != NULL)
    274c:	00050c63          	beqz	a0,2764 <vasprintf+0xf4>
            free(buf);
    2750:	00090513          	mv	a0,s2
    2754:	43b020ef          	jal	ra,538e <free>
    2758:	fc1ff06f          	j	2718 <vasprintf+0xa8>
            return -ENOMEM;
    275c:	ff400413          	li	s0,-12
    2760:	fb9ff06f          	j	2718 <vasprintf+0xa8>
            *ret = buf;
    2764:	012b2023          	sw	s2,0(s6)
    2768:	fb1ff06f          	j	2718 <vasprintf+0xa8>

0000276c <asprintf>:

int asprintf(char **buf, const char *fmt, ...)
{
    276c:	fc010113          	addi	sp,sp,-64
    va_list args;
    int     i;

    va_start(args, fmt);
    2770:	02810313          	addi	t1,sp,40
{
    2774:	02c12423          	sw	a2,40(sp)
    i = vasprintf(buf, fmt, args);
    2778:	00030613          	mv	a2,t1
{
    277c:	00112e23          	sw	ra,28(sp)
    2780:	02d12623          	sw	a3,44(sp)
    2784:	02e12823          	sw	a4,48(sp)
    2788:	02f12a23          	sw	a5,52(sp)
    278c:	03012c23          	sw	a6,56(sp)
    2790:	03112e23          	sw	a7,60(sp)
    va_start(args, fmt);
    2794:	00612623          	sw	t1,12(sp)
    i = vasprintf(buf, fmt, args);
    2798:	ed9ff0ef          	jal	ra,2670 <vasprintf>
    va_end(args);
    return i;
}
    279c:	01c12083          	lw	ra,28(sp)
    27a0:	04010113          	addi	sp,sp,64
    27a4:	00008067          	ret

000027a8 <ck_intc_init>:

//config the interrupt controller
void ck_intc_init()
{
	int *picr = TCIP_BASE;
        *picr = 0x0;
    27a8:	e00007b7          	lui	a5,0xe0000
    27ac:	0007a023          	sw	zero,0(a5) # e0000000 <__kernel_stack+0xbff40008>
        
        // Write ISER
        int *piser = CLIC_BASE+INTIE+0x10;
        *piser = 0x810000;
    27b0:	00810737          	lui	a4,0x810
    27b4:	e08007b7          	lui	a5,0xe0800
    27b8:	40e7a823          	sw	a4,1040(a5) # e0800410 <__kernel_stack+0xc0740418>
}
    27bc:	00008067          	ret

000027c0 <__thead_vprintfsprintf>:
#include <stdarg.h>

int __thead_vprintfsprintf(char *str, FILE *stream, const char *format, va_list arg_ptr)
{
    return 0;
}
    27c0:	00000513          	li	a0,0
    27c4:	00008067          	ret

000027c8 <__thead_vprintfprintf>:

int __thead_vprintfprintf(FILE *stream, const char *format, va_list arg_ptr)
{
    return 0;
}
    27c8:	00000513          	li	a0,0
    27cc:	00008067          	ret

000027d0 <stdout>:

#undef stdout
int stdout()
{
    return 0;
}
    27d0:	00000513          	li	a0,0
    27d4:	00008067          	ret

000027d8 <os_critical_enter>:
      : :"r" (ch): "x13" );
}
*/
void os_critical_enter(void)
{
}
    27d8:	00008067          	ret

000027dc <os_critical_exit>:
    27dc:	00008067          	ret

000027e0 <icrc1>:
const unsigned char lin[256] = "asdffeagewaHAFEFaeDsFEawFdsFaefaeerdjgp";

unsigned short icrc1(unsigned short crc, unsigned char onech)
{
	int i;
	unsigned short ans=(crc^onech << 8);
    27e0:	00859593          	slli	a1,a1,0x8

	for (i=0;i<8;i++) {
		if (ans & 0x8000)
		  {
			ans <<= 1;
			ans = ans ^ 4129;
    27e4:	000016b7          	lui	a3,0x1
	unsigned short ans=(crc^onech << 8);
    27e8:	00a5c533          	xor	a0,a1,a0
    27ec:	00800793          	li	a5,8
			ans = ans ^ 4129;
    27f0:	02168693          	addi	a3,a3,33 # 1021 <_etoa+0x401>
		if (ans & 0x8000)
    27f4:	01051713          	slli	a4,a0,0x10
			ans <<= 1;
    27f8:	00151513          	slli	a0,a0,0x1
    27fc:	01051513          	slli	a0,a0,0x10
		if (ans & 0x8000)
    2800:	41075713          	srai	a4,a4,0x10
	for (i=0;i<8;i++) {
    2804:	fff78793          	addi	a5,a5,-1
			ans <<= 1;
    2808:	01055513          	srli	a0,a0,0x10
		if (ans & 0x8000)
    280c:	00074663          	bltz	a4,2818 <icrc1+0x38>
	for (i=0;i<8;i++) {
    2810:	fe0792e3          	bnez	a5,27f4 <icrc1+0x14>
		  }
		else
			ans <<= 1;
	}
	return ans;
}
    2814:	00008067          	ret
			ans = ans ^ 4129;
    2818:	00d54533          	xor	a0,a0,a3
	for (i=0;i<8;i++) {
    281c:	fc079ce3          	bnez	a5,27f4 <icrc1+0x14>
    2820:	ff5ff06f          	j	2814 <icrc1+0x34>

00002824 <icrc>:
  static unsigned short icrctb[256],init=0;
  static uchar rchr[256];
  unsigned short tmp1, tmp2, j,cword=crc;
  static uchar it[16]={0,8,4,12,2,10,6,14,1,9,5,13,3,11,7,15};

  if (!init) {
    2824:	200017b7          	lui	a5,0x20001
    2828:	bdc7d883          	lhu	a7,-1060(a5) # 20000bdc <init.3>
    282c:	0a089a63          	bnez	a7,28e0 <icrc+0xbc>
    init=1;
    2830:	20001e37          	lui	t3,0x20001
    2834:	8b4e0e13          	addi	t3,t3,-1868 # 200008b4 <icrctb.2>
    2838:	00100713          	li	a4,1
			ans = ans ^ 4129;
    283c:	00001eb7          	lui	t4,0x1
    for (j=0;j<=255;j++) {
      icrctb[j]=icrc1(j << 8,(uchar)0);
      rchr[j]=(uchar)(it[j & 0xF] << 4 | it[j >> 4]);
    2840:	00006fb7          	lui	t6,0x6
    init=1;
    2844:	bce79e23          	sh	a4,-1060(a5)
    for (j=0;j<=255;j++) {
    2848:	200e0f13          	addi	t5,t3,512
    init=1;
    284c:	00000293          	li	t0,0
    2850:	00000313          	li	t1,0
			ans = ans ^ 4129;
    2854:	021e8e93          	addi	t4,t4,33 # 1021 <_etoa+0x401>
    for (j=0;j<=255;j++) {
    2858:	10000393          	li	t2,256
      rchr[j]=(uchar)(it[j & 0xF] << 4 | it[j >> 4]);
    285c:	204f8f93          	addi	t6,t6,516 # 6204 <it.1>
      icrctb[j]=icrc1(j << 8,(uchar)0);
    2860:	00889793          	slli	a5,a7,0x8
    2864:	01079793          	slli	a5,a5,0x10
    2868:	0107d793          	srli	a5,a5,0x10
    init=1;
    286c:	00800713          	li	a4,8
		if (ans & 0x8000)
    2870:	01079813          	slli	a6,a5,0x10
			ans <<= 1;
    2874:	00179793          	slli	a5,a5,0x1
    2878:	01079793          	slli	a5,a5,0x10
		if (ans & 0x8000)
    287c:	41085813          	srai	a6,a6,0x10
	for (i=0;i<8;i++) {
    2880:	fff70713          	addi	a4,a4,-1 # 80ffff <_global_impure_ptr+0x809ad7>
			ans <<= 1;
    2884:	0107d793          	srli	a5,a5,0x10
		if (ans & 0x8000)
    2888:	04084663          	bltz	a6,28d4 <icrc+0xb0>
	for (i=0;i<8;i++) {
    288c:	fe0712e3          	bnez	a4,2870 <icrc+0x4c>
      rchr[j]=(uchar)(it[j & 0xF] << 4 | it[j >> 4]);
    2890:	00431313          	slli	t1,t1,0x4
    for (j=0;j<=255;j++) {
    2894:	00188893          	addi	a7,a7,1
      rchr[j]=(uchar)(it[j & 0xF] << 4 | it[j >> 4]);
    2898:	00536333          	or	t1,t1,t0
    for (j=0;j<=255;j++) {
    289c:	01089893          	slli	a7,a7,0x10
      icrctb[j]=icrc1(j << 8,(uchar)0);
    28a0:	00fe1023          	sh	a5,0(t3)
      rchr[j]=(uchar)(it[j & 0xF] << 4 | it[j >> 4]);
    28a4:	006f0023          	sb	t1,0(t5)
    for (j=0;j<=255;j++) {
    28a8:	0108d893          	srli	a7,a7,0x10
    28ac:	002e0e13          	addi	t3,t3,2
    28b0:	001f0f13          	addi	t5,t5,1
    28b4:	02788663          	beq	a7,t2,28e0 <icrc+0xbc>
      rchr[j]=(uchar)(it[j & 0xF] << 4 | it[j >> 4]);
    28b8:	00f8f713          	andi	a4,a7,15
    28bc:	0048d793          	srli	a5,a7,0x4
    28c0:	00ef8733          	add	a4,t6,a4
    28c4:	00ff87b3          	add	a5,t6,a5
    28c8:	00074303          	lbu	t1,0(a4)
    28cc:	0007c283          	lbu	t0,0(a5)
    28d0:	f91ff06f          	j	2860 <icrc+0x3c>
			ans = ans ^ 4129;
    28d4:	01d7c7b3          	xor	a5,a5,t4
	for (i=0;i<8;i++) {
    28d8:	f8071ce3          	bnez	a4,2870 <icrc+0x4c>
    28dc:	fb5ff06f          	j	2890 <icrc+0x6c>
    }
  }
  if (jinit >= 0) cword=((uchar) jinit) | (((uchar) jinit) << 8);
    28e0:	0a064863          	bltz	a2,2990 <icrc+0x16c>
    28e4:	0ff67513          	andi	a0,a2,255
    28e8:	00851513          	slli	a0,a0,0x8
    28ec:	0ff67613          	andi	a2,a2,255
    28f0:	20001e37          	lui	t3,0x20001
    28f4:	00c56533          	or	a0,a0,a2
  else if (jrev < 0)
    cword=rchr[HIBYTE(cword)] | rchr[LOBYTE(cword)] << 8;
#ifdef DEBUG
  printf("len = %d\n", len);
#endif
  for (j=1;j<=len;j++) {
    28f8:	8b4e0e13          	addi	t3,t3,-1868 # 200008b4 <icrctb.2>
    28fc:	06058063          	beqz	a1,295c <icrc+0x138>
    if (jrev < 0) {
      tmp1 = rchr[lin[j]]^ HIBYTE(cword);
    2900:	00006337          	lui	t1,0x6
  unsigned short tmp1, tmp2, j,cword=crc;
    2904:	07300793          	li	a5,115
    2908:	00100713          	li	a4,1
      tmp1 = rchr[lin[j]]^ HIBYTE(cword);
    290c:	20430313          	addi	t1,t1,516 # 6204 <it.1>
    2910:	0080006f          	j	2918 <icrc+0xf4>
    2914:	01084783          	lbu	a5,16(a6)
  for (j=1;j<=len;j++) {
    2918:	00170713          	addi	a4,a4,1
    291c:	01071713          	slli	a4,a4,0x10
    }
    else {
      tmp1 = lin[j]^ HIBYTE(cword);
    }
    cword = icrctb[tmp1] ^ LOBYTE(cword) << 8;
    2920:	0ff57813          	andi	a6,a0,255
      tmp1 = rchr[lin[j]]^ HIBYTE(cword);
    2924:	00855613          	srli	a2,a0,0x8
  for (j=1;j<=len;j++) {
    2928:	01075713          	srli	a4,a4,0x10
      tmp1 = rchr[lin[j]]^ HIBYTE(cword);
    292c:	00fe08b3          	add	a7,t3,a5
    cword = icrctb[tmp1] ^ LOBYTE(cword) << 8;
    2930:	00881513          	slli	a0,a6,0x8
      tmp1 = lin[j]^ HIBYTE(cword);
    2934:	00c7c7b3          	xor	a5,a5,a2
      tmp1 = rchr[lin[j]]^ HIBYTE(cword);
    2938:	00e30833          	add	a6,t1,a4
    if (jrev < 0) {
    293c:	0006d663          	bgez	a3,2948 <icrc+0x124>
      tmp1 = rchr[lin[j]]^ HIBYTE(cword);
    2940:	2008c783          	lbu	a5,512(a7)
    2944:	00f647b3          	xor	a5,a2,a5
    cword = icrctb[tmp1] ^ LOBYTE(cword) << 8;
    2948:	00179793          	slli	a5,a5,0x1
    294c:	00fe07b3          	add	a5,t3,a5
    2950:	0007d783          	lhu	a5,0(a5)
    2954:	00f54533          	xor	a0,a0,a5
  for (j=1;j<=len;j++) {
    2958:	fae5fee3          	bgeu	a1,a4,2914 <icrc+0xf0>
  }
  if (jrev >= 0) {
    295c:	0006c463          	bltz	a3,2964 <icrc+0x140>
  }
  else {
    tmp2 = rchr[HIBYTE(cword)] | rchr[LOBYTE(cword)] << 8;
  }
  return (tmp2 );
}
    2960:	00008067          	ret
    2964:	20001e37          	lui	t3,0x20001
    2968:	8b4e0e13          	addi	t3,t3,-1868 # 200008b4 <icrctb.2>
    tmp2 = rchr[HIBYTE(cword)] | rchr[LOBYTE(cword)] << 8;
    296c:	0ff57793          	andi	a5,a0,255
    2970:	00fe07b3          	add	a5,t3,a5
    2974:	00855513          	srli	a0,a0,0x8
    2978:	2007c783          	lbu	a5,512(a5)
    297c:	00ae0533          	add	a0,t3,a0
    2980:	20054503          	lbu	a0,512(a0)
    2984:	00879793          	slli	a5,a5,0x8
    2988:	00a7e533          	or	a0,a5,a0
    298c:	00008067          	ret
  else if (jrev < 0)
    2990:	0006ca63          	bltz	a3,29a4 <icrc+0x180>
  for (j=1;j<=len;j++) {
    2994:	20001e37          	lui	t3,0x20001
    2998:	8b4e0e13          	addi	t3,t3,-1868 # 200008b4 <icrctb.2>
    299c:	f60592e3          	bnez	a1,2900 <icrc+0xdc>
}
    29a0:	00008067          	ret
    cword=rchr[HIBYTE(cword)] | rchr[LOBYTE(cword)] << 8;
    29a4:	20001e37          	lui	t3,0x20001
    29a8:	8b4e0e13          	addi	t3,t3,-1868 # 200008b4 <icrctb.2>
    29ac:	0ff57713          	andi	a4,a0,255
    29b0:	00855793          	srli	a5,a0,0x8
    29b4:	00ee0733          	add	a4,t3,a4
    29b8:	20074503          	lbu	a0,512(a4)
    29bc:	00fe07b3          	add	a5,t3,a5
    29c0:	2007c783          	lbu	a5,512(a5)
    29c4:	00851513          	slli	a0,a0,0x8
    29c8:	00f56533          	or	a0,a0,a5
  for (j=1;j<=len;j++) {
    29cc:	f2059ae3          	bnez	a1,2900 <icrc+0xdc>
    29d0:	f9dff06f          	j	296c <icrc+0x148>

000029d4 <verify_benchmark>:

int
verify_benchmark (int res __attribute ((unused)) )
{
  return -1;
}
    29d4:	fff00513          	li	a0,-1
    29d8:	00008067          	ret

000029dc <initialise_benchmark>:


void
initialise_benchmark (void)
{
}
    29dc:	00008067          	ret

000029e0 <benchmark>:



int benchmark(void)
{
    29e0:	ff010113          	addi	sp,sp,-16
  unsigned short i1,i2;
  unsigned long n;

  n=40;
  i1=icrc(0,n,(short)0,1);
    29e4:	00100693          	li	a3,1
    29e8:	00000613          	li	a2,0
    29ec:	02800593          	li	a1,40
    29f0:	00000513          	li	a0,0
{
    29f4:	00112623          	sw	ra,12(sp)
    29f8:	00812423          	sw	s0,8(sp)
    29fc:	00912223          	sw	s1,4(sp)
  i1=icrc(0,n,(short)0,1);
    2a00:	e25ff0ef          	jal	ra,2824 <icrc>
  i2=icrc(i1,n+2,(short)0,1);
    2a04:	00100693          	li	a3,1
    2a08:	00000613          	li	a2,0
    2a0c:	02a00593          	li	a1,42
  i1=icrc(0,n,(short)0,1);
    2a10:	00050493          	mv	s1,a0
  i2=icrc(i1,n+2,(short)0,1);
    2a14:	e11ff0ef          	jal	ra,2824 <icrc>
    2a18:	00050413          	mv	s0,a0
  printf("%u\n",i1);
    2a1c:	00006537          	lui	a0,0x6
    2a20:	00048593          	mv	a1,s1
    2a24:	1e850513          	addi	a0,a0,488 # 61e8 <pow10.0+0x50>
    2a28:	f70ff0ef          	jal	ra,2198 <printf>
  printf("%lu\n",i2);
    2a2c:	00006537          	lui	a0,0x6
    2a30:	00040593          	mv	a1,s0
    2a34:	1ec50513          	addi	a0,a0,492 # 61ec <pow10.0+0x54>
    2a38:	f60ff0ef          	jal	ra,2198 <printf>

  /* Silence compiler warning about unused variables.  */
  (void) i2;

  return 0;
}
    2a3c:	00c12083          	lw	ra,12(sp)
    2a40:	00812403          	lw	s0,8(sp)
    2a44:	00412483          	lw	s1,4(sp)
    2a48:	00000513          	li	a0,0
    2a4c:	01010113          	addi	sp,sp,16
    2a50:	00008067          	ret

00002a54 <fputc>:


//重写fputc
int fputc(int ch, FILE *stream)
{ 
	ck_uart_putc(&uart0, (char)ch);
    2a54:	0ff57593          	andi	a1,a0,255
    2a58:	20000537          	lui	a0,0x20000
    2a5c:	00450513          	addi	a0,a0,4 # 20000004 <uart0>
    2a60:	bddff06f          	j	263c <ck_uart_putc>

00002a64 <main>:
{
//--------------------------------------------------------
  // setup uart
  //--------------------------------------------------------
  t_ck_uart_cfig   uart_cfig;
  uart_cfig.baudrate = BAUD;       // any integer value is allowed
    2a64:	000057b7          	lui	a5,0x5
{
    2a68:	fd010113          	addi	sp,sp,-48
  uart_cfig.baudrate = BAUD;       // any integer value is allowed
    2a6c:	b0078793          	addi	a5,a5,-1280 # 4b00 <__subdf3+0x29a>
{
    2a70:	02812423          	sw	s0,40(sp)
  uart_cfig.baudrate = BAUD;       // any integer value is allowed
    2a74:	00f12423          	sw	a5,8(sp)
  uart_cfig.parity = PARITY_NONE;     // PARITY_NONE / PARITY_ODD / PARITY_EVEN
  uart_cfig.stopbit = STOPBIT_1;      // STOPBIT_1 / STOPBIT_2
  uart_cfig.wordsize = WORDSIZE_8;    // from WORDSIZE_5 to WORDSIZE_8
  uart_cfig.txmode = ENABLE;          // ENABLE or DISABLE
  // open UART device with id = 0 (UART0)
  ck_uart_open(&uart0, 0);
    2a78:	20000437          	lui	s0,0x20000
  uart_cfig.wordsize = WORDSIZE_8;    // from WORDSIZE_5 to WORDSIZE_8
    2a7c:	00300793          	li	a5,3
    2a80:	00f12a23          	sw	a5,20(sp)
  ck_uart_open(&uart0, 0);
    2a84:	00000593          	li	a1,0
  uart_cfig.txmode = ENABLE;          // ENABLE or DISABLE
    2a88:	00100793          	li	a5,1
  ck_uart_open(&uart0, 0);
    2a8c:	00440513          	addi	a0,s0,4 # 20000004 <uart0>
{
    2a90:	02112623          	sw	ra,44(sp)
  uart_cfig.txmode = ENABLE;          // ENABLE or DISABLE
    2a94:	00f12e23          	sw	a5,28(sp)
  uart_cfig.parity = PARITY_NONE;     // PARITY_NONE / PARITY_ODD / PARITY_EVEN
    2a98:	00012823          	sw	zero,16(sp)
  uart_cfig.stopbit = STOPBIT_1;      // STOPBIT_1 / STOPBIT_2
    2a9c:	00012623          	sw	zero,12(sp)
  ck_uart_open(&uart0, 0);
    2aa0:	a69ff0ef          	jal	ra,2508 <ck_uart_open>
  // initialize uart using uart_cfig structure
  ck_uart_init(&uart0, &uart_cfig);
    2aa4:	00810593          	addi	a1,sp,8
    2aa8:	00440513          	addi	a0,s0,4
    2aac:	a7dff0ef          	jal	ra,2528 <ck_uart_init>
benchmark();
    2ab0:	f31ff0ef          	jal	ra,29e0 <benchmark>
printf("CRC TEST Finsh!\n");
    2ab4:	00006537          	lui	a0,0x6
    2ab8:	1f450513          	addi	a0,a0,500 # 61f4 <pow10.0+0x5c>
    2abc:	e64ff0ef          	jal	ra,2120 <puts>
return 0;


    }
    2ac0:	02c12083          	lw	ra,44(sp)
    2ac4:	02812403          	lw	s0,40(sp)
    2ac8:	00000513          	li	a0,0
    2acc:	03010113          	addi	sp,sp,48
    2ad0:	00008067          	ret

00002ad4 <__udivdi3>:
    2ad4:	88aa                	mv	a7,a0
    2ad6:	87ae                	mv	a5,a1
    2ad8:	8832                	mv	a6,a2
    2ada:	8536                	mv	a0,a3
    2adc:	8346                	mv	t1,a7
    2ade:	20069663          	bnez	a3,2cea <__udivdi3+0x216>
    2ae2:	00004697          	auipc	a3,0x4
    2ae6:	8aa68693          	addi	a3,a3,-1878 # 638c <__clz_tab>
    2aea:	0ac5ff63          	bgeu	a1,a2,2ba8 <__udivdi3+0xd4>
    2aee:	6741                	lui	a4,0x10
    2af0:	0ae67563          	bgeu	a2,a4,2b9a <__udivdi3+0xc6>
    2af4:	0ff00713          	li	a4,255
    2af8:	00c73733          	sltu	a4,a4,a2
    2afc:	070e                	slli	a4,a4,0x3
    2afe:	00e65533          	srl	a0,a2,a4
    2b02:	96aa                	add	a3,a3,a0
    2b04:	0006c683          	lbu	a3,0(a3)
    2b08:	02000513          	li	a0,32
    2b0c:	9736                	add	a4,a4,a3
    2b0e:	40e506b3          	sub	a3,a0,a4
    2b12:	00e50b63          	beq	a0,a4,2b28 <__udivdi3+0x54>
    2b16:	00d795b3          	sll	a1,a5,a3
    2b1a:	00e8d733          	srl	a4,a7,a4
    2b1e:	00d61833          	sll	a6,a2,a3
    2b22:	8dd9                	or	a1,a1,a4
    2b24:	00d89333          	sll	t1,a7,a3
    2b28:	01085893          	srli	a7,a6,0x10
    2b2c:	0315d6b3          	divu	a3,a1,a7
    2b30:	01081613          	slli	a2,a6,0x10
    2b34:	8241                	srli	a2,a2,0x10
    2b36:	01035793          	srli	a5,t1,0x10
    2b3a:	0315f733          	remu	a4,a1,a7
    2b3e:	8536                	mv	a0,a3
    2b40:	02d605b3          	mul	a1,a2,a3
    2b44:	0742                	slli	a4,a4,0x10
    2b46:	8fd9                	or	a5,a5,a4
    2b48:	00b7fc63          	bgeu	a5,a1,2b60 <__udivdi3+0x8c>
    2b4c:	97c2                	add	a5,a5,a6
    2b4e:	fff68513          	addi	a0,a3,-1
    2b52:	0107e763          	bltu	a5,a6,2b60 <__udivdi3+0x8c>
    2b56:	00b7f563          	bgeu	a5,a1,2b60 <__udivdi3+0x8c>
    2b5a:	ffe68513          	addi	a0,a3,-2
    2b5e:	97c2                	add	a5,a5,a6
    2b60:	8f8d                	sub	a5,a5,a1
    2b62:	0317f733          	remu	a4,a5,a7
    2b66:	0342                	slli	t1,t1,0x10
    2b68:	01035313          	srli	t1,t1,0x10
    2b6c:	0317d7b3          	divu	a5,a5,a7
    2b70:	0742                	slli	a4,a4,0x10
    2b72:	00676333          	or	t1,a4,t1
    2b76:	02f606b3          	mul	a3,a2,a5
    2b7a:	863e                	mv	a2,a5
    2b7c:	00d37b63          	bgeu	t1,a3,2b92 <__udivdi3+0xbe>
    2b80:	9342                	add	t1,t1,a6
    2b82:	fff78613          	addi	a2,a5,-1
    2b86:	01036663          	bltu	t1,a6,2b92 <__udivdi3+0xbe>
    2b8a:	00d37463          	bgeu	t1,a3,2b92 <__udivdi3+0xbe>
    2b8e:	ffe78613          	addi	a2,a5,-2
    2b92:	0542                	slli	a0,a0,0x10
    2b94:	8d51                	or	a0,a0,a2
    2b96:	4581                	li	a1,0
    2b98:	a85d                	j	2c4e <__udivdi3+0x17a>
    2b9a:	01000537          	lui	a0,0x1000
    2b9e:	4741                	li	a4,16
    2ba0:	f4a66fe3          	bltu	a2,a0,2afe <__udivdi3+0x2a>
    2ba4:	4761                	li	a4,24
    2ba6:	bfa1                	j	2afe <__udivdi3+0x2a>
    2ba8:	e601                	bnez	a2,2bb0 <__udivdi3+0xdc>
    2baa:	4705                	li	a4,1
    2bac:	02c75833          	divu	a6,a4,a2
    2bb0:	6741                	lui	a4,0x10
    2bb2:	08e87f63          	bgeu	a6,a4,2c50 <__udivdi3+0x17c>
    2bb6:	0ff00713          	li	a4,255
    2bba:	01077363          	bgeu	a4,a6,2bc0 <__udivdi3+0xec>
    2bbe:	4521                	li	a0,8
    2bc0:	00a85733          	srl	a4,a6,a0
    2bc4:	96ba                	add	a3,a3,a4
    2bc6:	0006c703          	lbu	a4,0(a3)
    2bca:	02000613          	li	a2,32
    2bce:	972a                	add	a4,a4,a0
    2bd0:	40e606b3          	sub	a3,a2,a4
    2bd4:	08e61563          	bne	a2,a4,2c5e <__udivdi3+0x18a>
    2bd8:	410787b3          	sub	a5,a5,a6
    2bdc:	4585                	li	a1,1
    2bde:	01085893          	srli	a7,a6,0x10
    2be2:	01081613          	slli	a2,a6,0x10
    2be6:	8241                	srli	a2,a2,0x10
    2be8:	01035713          	srli	a4,t1,0x10
    2bec:	0317f6b3          	remu	a3,a5,a7
    2bf0:	0317d7b3          	divu	a5,a5,a7
    2bf4:	06c2                	slli	a3,a3,0x10
    2bf6:	8f55                	or	a4,a4,a3
    2bf8:	02f60e33          	mul	t3,a2,a5
    2bfc:	853e                	mv	a0,a5
    2bfe:	01c77c63          	bgeu	a4,t3,2c16 <__udivdi3+0x142>
    2c02:	9742                	add	a4,a4,a6
    2c04:	fff78513          	addi	a0,a5,-1
    2c08:	01076763          	bltu	a4,a6,2c16 <__udivdi3+0x142>
    2c0c:	01c77563          	bgeu	a4,t3,2c16 <__udivdi3+0x142>
    2c10:	ffe78513          	addi	a0,a5,-2
    2c14:	9742                	add	a4,a4,a6
    2c16:	41c70733          	sub	a4,a4,t3
    2c1a:	031777b3          	remu	a5,a4,a7
    2c1e:	0342                	slli	t1,t1,0x10
    2c20:	01035313          	srli	t1,t1,0x10
    2c24:	03175733          	divu	a4,a4,a7
    2c28:	07c2                	slli	a5,a5,0x10
    2c2a:	0067e333          	or	t1,a5,t1
    2c2e:	02e606b3          	mul	a3,a2,a4
    2c32:	863a                	mv	a2,a4
    2c34:	00d37b63          	bgeu	t1,a3,2c4a <__udivdi3+0x176>
    2c38:	9342                	add	t1,t1,a6
    2c3a:	fff70613          	addi	a2,a4,-1 # ffff <_global_impure_ptr+0x9ad7>
    2c3e:	01036663          	bltu	t1,a6,2c4a <__udivdi3+0x176>
    2c42:	00d37463          	bgeu	t1,a3,2c4a <__udivdi3+0x176>
    2c46:	ffe70613          	addi	a2,a4,-2
    2c4a:	0542                	slli	a0,a0,0x10
    2c4c:	8d51                	or	a0,a0,a2
    2c4e:	8082                	ret
    2c50:	01000737          	lui	a4,0x1000
    2c54:	4541                	li	a0,16
    2c56:	f6e865e3          	bltu	a6,a4,2bc0 <__udivdi3+0xec>
    2c5a:	4561                	li	a0,24
    2c5c:	b795                	j	2bc0 <__udivdi3+0xec>
    2c5e:	00d81833          	sll	a6,a6,a3
    2c62:	00e7d533          	srl	a0,a5,a4
    2c66:	00d89333          	sll	t1,a7,a3
    2c6a:	00d797b3          	sll	a5,a5,a3
    2c6e:	00e8d733          	srl	a4,a7,a4
    2c72:	01085893          	srli	a7,a6,0x10
    2c76:	00f76633          	or	a2,a4,a5
    2c7a:	03157733          	remu	a4,a0,a7
    2c7e:	01081793          	slli	a5,a6,0x10
    2c82:	83c1                	srli	a5,a5,0x10
    2c84:	01065593          	srli	a1,a2,0x10
    2c88:	03155533          	divu	a0,a0,a7
    2c8c:	0742                	slli	a4,a4,0x10
    2c8e:	8f4d                	or	a4,a4,a1
    2c90:	02a786b3          	mul	a3,a5,a0
    2c94:	85aa                	mv	a1,a0
    2c96:	00d77c63          	bgeu	a4,a3,2cae <__udivdi3+0x1da>
    2c9a:	9742                	add	a4,a4,a6
    2c9c:	fff50593          	addi	a1,a0,-1 # ffffff <_global_impure_ptr+0xff9ad7>
    2ca0:	01076763          	bltu	a4,a6,2cae <__udivdi3+0x1da>
    2ca4:	00d77563          	bgeu	a4,a3,2cae <__udivdi3+0x1da>
    2ca8:	ffe50593          	addi	a1,a0,-2
    2cac:	9742                	add	a4,a4,a6
    2cae:	40d706b3          	sub	a3,a4,a3
    2cb2:	0316f733          	remu	a4,a3,a7
    2cb6:	0642                	slli	a2,a2,0x10
    2cb8:	8241                	srli	a2,a2,0x10
    2cba:	0316d6b3          	divu	a3,a3,a7
    2cbe:	0742                	slli	a4,a4,0x10
    2cc0:	02d78533          	mul	a0,a5,a3
    2cc4:	00c767b3          	or	a5,a4,a2
    2cc8:	8736                	mv	a4,a3
    2cca:	00a7fc63          	bgeu	a5,a0,2ce2 <__udivdi3+0x20e>
    2cce:	97c2                	add	a5,a5,a6
    2cd0:	fff68713          	addi	a4,a3,-1
    2cd4:	0107e763          	bltu	a5,a6,2ce2 <__udivdi3+0x20e>
    2cd8:	00a7f563          	bgeu	a5,a0,2ce2 <__udivdi3+0x20e>
    2cdc:	ffe68713          	addi	a4,a3,-2
    2ce0:	97c2                	add	a5,a5,a6
    2ce2:	05c2                	slli	a1,a1,0x10
    2ce4:	8f89                	sub	a5,a5,a0
    2ce6:	8dd9                	or	a1,a1,a4
    2ce8:	bddd                	j	2bde <__udivdi3+0x10a>
    2cea:	14d5e263          	bltu	a1,a3,2e2e <__udivdi3+0x35a>
    2cee:	6741                	lui	a4,0x10
    2cf0:	02e6ff63          	bgeu	a3,a4,2d2e <__udivdi3+0x25a>
    2cf4:	0ff00713          	li	a4,255
    2cf8:	00d735b3          	sltu	a1,a4,a3
    2cfc:	058e                	slli	a1,a1,0x3
    2cfe:	00b6d533          	srl	a0,a3,a1
    2d02:	00003717          	auipc	a4,0x3
    2d06:	68a70713          	addi	a4,a4,1674 # 638c <__clz_tab>
    2d0a:	972a                	add	a4,a4,a0
    2d0c:	00074703          	lbu	a4,0(a4)
    2d10:	02000513          	li	a0,32
    2d14:	972e                	add	a4,a4,a1
    2d16:	40e505b3          	sub	a1,a0,a4
    2d1a:	02e51163          	bne	a0,a4,2d3c <__udivdi3+0x268>
    2d1e:	4505                	li	a0,1
    2d20:	f2f6e7e3          	bltu	a3,a5,2c4e <__udivdi3+0x17a>
    2d24:	00c8b533          	sltu	a0,a7,a2
    2d28:	00154513          	xori	a0,a0,1
    2d2c:	b70d                	j	2c4e <__udivdi3+0x17a>
    2d2e:	01000737          	lui	a4,0x1000
    2d32:	45c1                	li	a1,16
    2d34:	fce6e5e3          	bltu	a3,a4,2cfe <__udivdi3+0x22a>
    2d38:	45e1                	li	a1,24
    2d3a:	b7d1                	j	2cfe <__udivdi3+0x22a>
    2d3c:	00e65833          	srl	a6,a2,a4
    2d40:	00b696b3          	sll	a3,a3,a1
    2d44:	00d86833          	or	a6,a6,a3
    2d48:	00e7d333          	srl	t1,a5,a4
    2d4c:	01085e93          	srli	t4,a6,0x10
    2d50:	03d376b3          	remu	a3,t1,t4
    2d54:	00b797b3          	sll	a5,a5,a1
    2d58:	00e8d733          	srl	a4,a7,a4
    2d5c:	00b61e33          	sll	t3,a2,a1
    2d60:	00f76633          	or	a2,a4,a5
    2d64:	01081793          	slli	a5,a6,0x10
    2d68:	83c1                	srli	a5,a5,0x10
    2d6a:	01065713          	srli	a4,a2,0x10
    2d6e:	03d35333          	divu	t1,t1,t4
    2d72:	06c2                	slli	a3,a3,0x10
    2d74:	8f55                	or	a4,a4,a3
    2d76:	02678f33          	mul	t5,a5,t1
    2d7a:	851a                	mv	a0,t1
    2d7c:	01e77c63          	bgeu	a4,t5,2d94 <__udivdi3+0x2c0>
    2d80:	9742                	add	a4,a4,a6
    2d82:	fff30513          	addi	a0,t1,-1
    2d86:	01076763          	bltu	a4,a6,2d94 <__udivdi3+0x2c0>
    2d8a:	01e77563          	bgeu	a4,t5,2d94 <__udivdi3+0x2c0>
    2d8e:	ffe30513          	addi	a0,t1,-2
    2d92:	9742                	add	a4,a4,a6
    2d94:	41e70733          	sub	a4,a4,t5
    2d98:	03d776b3          	remu	a3,a4,t4
    2d9c:	03d75733          	divu	a4,a4,t4
    2da0:	06c2                	slli	a3,a3,0x10
    2da2:	02e78333          	mul	t1,a5,a4
    2da6:	01061793          	slli	a5,a2,0x10
    2daa:	83c1                	srli	a5,a5,0x10
    2dac:	8fd5                	or	a5,a5,a3
    2dae:	863a                	mv	a2,a4
    2db0:	0067fc63          	bgeu	a5,t1,2dc8 <__udivdi3+0x2f4>
    2db4:	97c2                	add	a5,a5,a6
    2db6:	fff70613          	addi	a2,a4,-1 # ffffff <_global_impure_ptr+0xff9ad7>
    2dba:	0107e763          	bltu	a5,a6,2dc8 <__udivdi3+0x2f4>
    2dbe:	0067f563          	bgeu	a5,t1,2dc8 <__udivdi3+0x2f4>
    2dc2:	ffe70613          	addi	a2,a4,-2
    2dc6:	97c2                	add	a5,a5,a6
    2dc8:	0542                	slli	a0,a0,0x10
    2dca:	6ec1                	lui	t4,0x10
    2dcc:	8d51                	or	a0,a0,a2
    2dce:	fffe8693          	addi	a3,t4,-1 # ffff <_global_impure_ptr+0x9ad7>
    2dd2:	010e5613          	srli	a2,t3,0x10
    2dd6:	01055813          	srli	a6,a0,0x10
    2dda:	406787b3          	sub	a5,a5,t1
    2dde:	00d57333          	and	t1,a0,a3
    2de2:	00de76b3          	and	a3,t3,a3
    2de6:	02d30e33          	mul	t3,t1,a3
    2dea:	02d806b3          	mul	a3,a6,a3
    2dee:	010e5713          	srli	a4,t3,0x10
    2df2:	02c30333          	mul	t1,t1,a2
    2df6:	9336                	add	t1,t1,a3
    2df8:	971a                	add	a4,a4,t1
    2dfa:	02c80833          	mul	a6,a6,a2
    2dfe:	00d77363          	bgeu	a4,a3,2e04 <__udivdi3+0x330>
    2e02:	9876                	add	a6,a6,t4
    2e04:	01075693          	srli	a3,a4,0x10
    2e08:	9836                	add	a6,a6,a3
    2e0a:	0307e063          	bltu	a5,a6,2e2a <__udivdi3+0x356>
    2e0e:	d90794e3          	bne	a5,a6,2b96 <__udivdi3+0xc2>
    2e12:	67c1                	lui	a5,0x10
    2e14:	17fd                	addi	a5,a5,-1
    2e16:	8f7d                	and	a4,a4,a5
    2e18:	0742                	slli	a4,a4,0x10
    2e1a:	00fe7e33          	and	t3,t3,a5
    2e1e:	00b898b3          	sll	a7,a7,a1
    2e22:	9772                	add	a4,a4,t3
    2e24:	4581                	li	a1,0
    2e26:	e2e8f4e3          	bgeu	a7,a4,2c4e <__udivdi3+0x17a>
    2e2a:	157d                	addi	a0,a0,-1
    2e2c:	b3ad                	j	2b96 <__udivdi3+0xc2>
    2e2e:	4581                	li	a1,0
    2e30:	4501                	li	a0,0
    2e32:	bd31                	j	2c4e <__udivdi3+0x17a>

00002e34 <__umoddi3>:
    2e34:	832a                	mv	t1,a0
    2e36:	8832                	mv	a6,a2
    2e38:	87b6                	mv	a5,a3
    2e3a:	872e                	mv	a4,a1
    2e3c:	1c069563          	bnez	a3,3006 <__umoddi3+0x1d2>
    2e40:	00003697          	auipc	a3,0x3
    2e44:	54c68693          	addi	a3,a3,1356 # 638c <__clz_tab>
    2e48:	0ac5f663          	bgeu	a1,a2,2ef4 <__umoddi3+0xc0>
    2e4c:	68c1                	lui	a7,0x10
    2e4e:	09167c63          	bgeu	a2,a7,2ee6 <__umoddi3+0xb2>
    2e52:	0ff00893          	li	a7,255
    2e56:	00c8f363          	bgeu	a7,a2,2e5c <__umoddi3+0x28>
    2e5a:	47a1                	li	a5,8
    2e5c:	00f658b3          	srl	a7,a2,a5
    2e60:	96c6                	add	a3,a3,a7
    2e62:	0006c683          	lbu	a3,0(a3)
    2e66:	97b6                	add	a5,a5,a3
    2e68:	02000693          	li	a3,32
    2e6c:	40f688b3          	sub	a7,a3,a5
    2e70:	00f68c63          	beq	a3,a5,2e88 <__umoddi3+0x54>
    2e74:	011595b3          	sll	a1,a1,a7
    2e78:	00f357b3          	srl	a5,t1,a5
    2e7c:	01161833          	sll	a6,a2,a7
    2e80:	00b7e733          	or	a4,a5,a1
    2e84:	01131533          	sll	a0,t1,a7
    2e88:	01085593          	srli	a1,a6,0x10
    2e8c:	02b777b3          	remu	a5,a4,a1
    2e90:	01081613          	slli	a2,a6,0x10
    2e94:	8241                	srli	a2,a2,0x10
    2e96:	01055693          	srli	a3,a0,0x10
    2e9a:	02b75733          	divu	a4,a4,a1
    2e9e:	07c2                	slli	a5,a5,0x10
    2ea0:	8edd                	or	a3,a3,a5
    2ea2:	02e60733          	mul	a4,a2,a4
    2ea6:	00e6f863          	bgeu	a3,a4,2eb6 <__umoddi3+0x82>
    2eaa:	96c2                	add	a3,a3,a6
    2eac:	0106e563          	bltu	a3,a6,2eb6 <__umoddi3+0x82>
    2eb0:	00e6f363          	bgeu	a3,a4,2eb6 <__umoddi3+0x82>
    2eb4:	96c2                	add	a3,a3,a6
    2eb6:	8e99                	sub	a3,a3,a4
    2eb8:	02b6f7b3          	remu	a5,a3,a1
    2ebc:	0542                	slli	a0,a0,0x10
    2ebe:	8141                	srli	a0,a0,0x10
    2ec0:	02b6d6b3          	divu	a3,a3,a1
    2ec4:	07c2                	slli	a5,a5,0x10
    2ec6:	8d5d                	or	a0,a0,a5
    2ec8:	02d606b3          	mul	a3,a2,a3
    2ecc:	00d57863          	bgeu	a0,a3,2edc <__umoddi3+0xa8>
    2ed0:	9542                	add	a0,a0,a6
    2ed2:	01056563          	bltu	a0,a6,2edc <__umoddi3+0xa8>
    2ed6:	00d57363          	bgeu	a0,a3,2edc <__umoddi3+0xa8>
    2eda:	9542                	add	a0,a0,a6
    2edc:	8d15                	sub	a0,a0,a3
    2ede:	01155533          	srl	a0,a0,a7
    2ee2:	4581                	li	a1,0
    2ee4:	8082                	ret
    2ee6:	010008b7          	lui	a7,0x1000
    2eea:	47c1                	li	a5,16
    2eec:	f71668e3          	bltu	a2,a7,2e5c <__umoddi3+0x28>
    2ef0:	47e1                	li	a5,24
    2ef2:	b7ad                	j	2e5c <__umoddi3+0x28>
    2ef4:	e601                	bnez	a2,2efc <__umoddi3+0xc8>
    2ef6:	4705                	li	a4,1
    2ef8:	02c75833          	divu	a6,a4,a2
    2efc:	6741                	lui	a4,0x10
    2efe:	08e87363          	bgeu	a6,a4,2f84 <__umoddi3+0x150>
    2f02:	0ff00713          	li	a4,255
    2f06:	01077363          	bgeu	a4,a6,2f0c <__umoddi3+0xd8>
    2f0a:	47a1                	li	a5,8
    2f0c:	00f85733          	srl	a4,a6,a5
    2f10:	96ba                	add	a3,a3,a4
    2f12:	0006c603          	lbu	a2,0(a3)
    2f16:	963e                	add	a2,a2,a5
    2f18:	02000793          	li	a5,32
    2f1c:	40c788b3          	sub	a7,a5,a2
    2f20:	06c79963          	bne	a5,a2,2f92 <__umoddi3+0x15e>
    2f24:	410585b3          	sub	a1,a1,a6
    2f28:	01085693          	srli	a3,a6,0x10
    2f2c:	01081793          	slli	a5,a6,0x10
    2f30:	83c1                	srli	a5,a5,0x10
    2f32:	01055613          	srli	a2,a0,0x10
    2f36:	02d5f733          	remu	a4,a1,a3
    2f3a:	02d5d5b3          	divu	a1,a1,a3
    2f3e:	0742                	slli	a4,a4,0x10
    2f40:	8f51                	or	a4,a4,a2
    2f42:	02b785b3          	mul	a1,a5,a1
    2f46:	00b77863          	bgeu	a4,a1,2f56 <__umoddi3+0x122>
    2f4a:	9742                	add	a4,a4,a6
    2f4c:	01076563          	bltu	a4,a6,2f56 <__umoddi3+0x122>
    2f50:	00b77363          	bgeu	a4,a1,2f56 <__umoddi3+0x122>
    2f54:	9742                	add	a4,a4,a6
    2f56:	40b705b3          	sub	a1,a4,a1
    2f5a:	02d5f733          	remu	a4,a1,a3
    2f5e:	0542                	slli	a0,a0,0x10
    2f60:	8141                	srli	a0,a0,0x10
    2f62:	02d5d5b3          	divu	a1,a1,a3
    2f66:	02b785b3          	mul	a1,a5,a1
    2f6a:	01071793          	slli	a5,a4,0x10
    2f6e:	8d5d                	or	a0,a0,a5
    2f70:	00b57863          	bgeu	a0,a1,2f80 <__umoddi3+0x14c>
    2f74:	9542                	add	a0,a0,a6
    2f76:	01056563          	bltu	a0,a6,2f80 <__umoddi3+0x14c>
    2f7a:	00b57363          	bgeu	a0,a1,2f80 <__umoddi3+0x14c>
    2f7e:	9542                	add	a0,a0,a6
    2f80:	8d0d                	sub	a0,a0,a1
    2f82:	bfb1                	j	2ede <__umoddi3+0xaa>
    2f84:	01000737          	lui	a4,0x1000
    2f88:	47c1                	li	a5,16
    2f8a:	f8e861e3          	bltu	a6,a4,2f0c <__umoddi3+0xd8>
    2f8e:	47e1                	li	a5,24
    2f90:	bfb5                	j	2f0c <__umoddi3+0xd8>
    2f92:	01181833          	sll	a6,a6,a7
    2f96:	00c5d6b3          	srl	a3,a1,a2
    2f9a:	01085793          	srli	a5,a6,0x10
    2f9e:	02f6f733          	remu	a4,a3,a5
    2fa2:	011595b3          	sll	a1,a1,a7
    2fa6:	00c35633          	srl	a2,t1,a2
    2faa:	8e4d                	or	a2,a2,a1
    2fac:	01081593          	slli	a1,a6,0x10
    2fb0:	81c1                	srli	a1,a1,0x10
    2fb2:	01131533          	sll	a0,t1,a7
    2fb6:	01065313          	srli	t1,a2,0x10
    2fba:	02f6d6b3          	divu	a3,a3,a5
    2fbe:	0742                	slli	a4,a4,0x10
    2fc0:	00676733          	or	a4,a4,t1
    2fc4:	02d586b3          	mul	a3,a1,a3
    2fc8:	00d77863          	bgeu	a4,a3,2fd8 <__umoddi3+0x1a4>
    2fcc:	9742                	add	a4,a4,a6
    2fce:	01076563          	bltu	a4,a6,2fd8 <__umoddi3+0x1a4>
    2fd2:	00d77363          	bgeu	a4,a3,2fd8 <__umoddi3+0x1a4>
    2fd6:	9742                	add	a4,a4,a6
    2fd8:	40d706b3          	sub	a3,a4,a3
    2fdc:	02f6f733          	remu	a4,a3,a5
    2fe0:	0642                	slli	a2,a2,0x10
    2fe2:	8241                	srli	a2,a2,0x10
    2fe4:	02f6d6b3          	divu	a3,a3,a5
    2fe8:	0742                	slli	a4,a4,0x10
    2fea:	02d586b3          	mul	a3,a1,a3
    2fee:	00c765b3          	or	a1,a4,a2
    2ff2:	00d5f863          	bgeu	a1,a3,3002 <__umoddi3+0x1ce>
    2ff6:	95c2                	add	a1,a1,a6
    2ff8:	0105e563          	bltu	a1,a6,3002 <__umoddi3+0x1ce>
    2ffc:	00d5f363          	bgeu	a1,a3,3002 <__umoddi3+0x1ce>
    3000:	95c2                	add	a1,a1,a6
    3002:	8d95                	sub	a1,a1,a3
    3004:	b715                	j	2f28 <__umoddi3+0xf4>
    3006:	ecd5efe3          	bltu	a1,a3,2ee4 <__umoddi3+0xb0>
    300a:	67c1                	lui	a5,0x10
    300c:	04f6f463          	bgeu	a3,a5,3054 <__umoddi3+0x220>
    3010:	0ff00893          	li	a7,255
    3014:	00d8b7b3          	sltu	a5,a7,a3
    3018:	078e                	slli	a5,a5,0x3
    301a:	00f6d8b3          	srl	a7,a3,a5
    301e:	00003817          	auipc	a6,0x3
    3022:	36e80813          	addi	a6,a6,878 # 638c <__clz_tab>
    3026:	9846                	add	a6,a6,a7
    3028:	00084883          	lbu	a7,0(a6)
    302c:	98be                	add	a7,a7,a5
    302e:	02000793          	li	a5,32
    3032:	41178833          	sub	a6,a5,a7
    3036:	03179663          	bne	a5,a7,3062 <__umoddi3+0x22e>
    303a:	00b6e463          	bltu	a3,a1,3042 <__umoddi3+0x20e>
    303e:	00c36963          	bltu	t1,a2,3050 <__umoddi3+0x21c>
    3042:	40c30533          	sub	a0,t1,a2
    3046:	8d95                	sub	a1,a1,a3
    3048:	00a33733          	sltu	a4,t1,a0
    304c:	40e58733          	sub	a4,a1,a4
    3050:	85ba                	mv	a1,a4
    3052:	bd49                	j	2ee4 <__umoddi3+0xb0>
    3054:	01000837          	lui	a6,0x1000
    3058:	47c1                	li	a5,16
    305a:	fd06e0e3          	bltu	a3,a6,301a <__umoddi3+0x1e6>
    305e:	47e1                	li	a5,24
    3060:	bf6d                	j	301a <__umoddi3+0x1e6>
    3062:	011657b3          	srl	a5,a2,a7
    3066:	010696b3          	sll	a3,a3,a6
    306a:	00d7ee33          	or	t3,a5,a3
    306e:	0115d733          	srl	a4,a1,a7
    3072:	010e5f13          	srli	t5,t3,0x10
    3076:	01061eb3          	sll	t4,a2,a6
    307a:	03e77633          	remu	a2,a4,t5
    307e:	010595b3          	sll	a1,a1,a6
    3082:	011357b3          	srl	a5,t1,a7
    3086:	8fcd                	or	a5,a5,a1
    3088:	010e1593          	slli	a1,t3,0x10
    308c:	81c1                	srli	a1,a1,0x10
    308e:	01031533          	sll	a0,t1,a6
    3092:	0107d693          	srli	a3,a5,0x10
    3096:	03e75733          	divu	a4,a4,t5
    309a:	0642                	slli	a2,a2,0x10
    309c:	8ed1                	or	a3,a3,a2
    309e:	02e58333          	mul	t1,a1,a4
    30a2:	863a                	mv	a2,a4
    30a4:	0066fc63          	bgeu	a3,t1,30bc <__umoddi3+0x288>
    30a8:	96f2                	add	a3,a3,t3
    30aa:	fff70613          	addi	a2,a4,-1 # ffffff <_global_impure_ptr+0xff9ad7>
    30ae:	01c6e763          	bltu	a3,t3,30bc <__umoddi3+0x288>
    30b2:	0066f563          	bgeu	a3,t1,30bc <__umoddi3+0x288>
    30b6:	ffe70613          	addi	a2,a4,-2
    30ba:	96f2                	add	a3,a3,t3
    30bc:	406686b3          	sub	a3,a3,t1
    30c0:	03e6f333          	remu	t1,a3,t5
    30c4:	03e6d6b3          	divu	a3,a3,t5
    30c8:	0342                	slli	t1,t1,0x10
    30ca:	02d58733          	mul	a4,a1,a3
    30ce:	01079593          	slli	a1,a5,0x10
    30d2:	81c1                	srli	a1,a1,0x10
    30d4:	00b365b3          	or	a1,t1,a1
    30d8:	87b6                	mv	a5,a3
    30da:	00e5fc63          	bgeu	a1,a4,30f2 <__umoddi3+0x2be>
    30de:	95f2                	add	a1,a1,t3
    30e0:	fff68793          	addi	a5,a3,-1
    30e4:	01c5e763          	bltu	a1,t3,30f2 <__umoddi3+0x2be>
    30e8:	00e5f563          	bgeu	a1,a4,30f2 <__umoddi3+0x2be>
    30ec:	ffe68793          	addi	a5,a3,-2
    30f0:	95f2                	add	a1,a1,t3
    30f2:	0642                	slli	a2,a2,0x10
    30f4:	6f41                	lui	t5,0x10
    30f6:	8e5d                	or	a2,a2,a5
    30f8:	ffff0693          	addi	a3,t5,-1 # ffff <_global_impure_ptr+0x9ad7>
    30fc:	00d67333          	and	t1,a2,a3
    3100:	8d99                	sub	a1,a1,a4
    3102:	8241                	srli	a2,a2,0x10
    3104:	010ed713          	srli	a4,t4,0x10
    3108:	00def6b3          	and	a3,t4,a3
    310c:	02d307b3          	mul	a5,t1,a3
    3110:	02d606b3          	mul	a3,a2,a3
    3114:	02e30333          	mul	t1,t1,a4
    3118:	02e60633          	mul	a2,a2,a4
    311c:	9336                	add	t1,t1,a3
    311e:	0107d713          	srli	a4,a5,0x10
    3122:	971a                	add	a4,a4,t1
    3124:	00d77363          	bgeu	a4,a3,312a <__umoddi3+0x2f6>
    3128:	967a                	add	a2,a2,t5
    312a:	01075693          	srli	a3,a4,0x10
    312e:	96b2                	add	a3,a3,a2
    3130:	6641                	lui	a2,0x10
    3132:	167d                	addi	a2,a2,-1
    3134:	8f71                	and	a4,a4,a2
    3136:	0742                	slli	a4,a4,0x10
    3138:	8ff1                	and	a5,a5,a2
    313a:	97ba                	add	a5,a5,a4
    313c:	00d5e663          	bltu	a1,a3,3148 <__umoddi3+0x314>
    3140:	00d59b63          	bne	a1,a3,3156 <__umoddi3+0x322>
    3144:	00f57963          	bgeu	a0,a5,3156 <__umoddi3+0x322>
    3148:	41d78633          	sub	a2,a5,t4
    314c:	00c7b7b3          	sltu	a5,a5,a2
    3150:	97f2                	add	a5,a5,t3
    3152:	8e9d                	sub	a3,a3,a5
    3154:	87b2                	mv	a5,a2
    3156:	40f507b3          	sub	a5,a0,a5
    315a:	00f53533          	sltu	a0,a0,a5
    315e:	8d95                	sub	a1,a1,a3
    3160:	8d89                	sub	a1,a1,a0
    3162:	011598b3          	sll	a7,a1,a7
    3166:	0107d533          	srl	a0,a5,a6
    316a:	00a8e533          	or	a0,a7,a0
    316e:	0105d5b3          	srl	a1,a1,a6
    3172:	bb8d                	j	2ee4 <__umoddi3+0xb0>

00003174 <__adddf3>:
    3174:	1101                	addi	sp,sp,-32
    3176:	ce06                	sw	ra,28(sp)
    3178:	cc22                	sw	s0,24(sp)
    317a:	ca26                	sw	s1,20(sp)
    317c:	c84a                	sw	s2,16(sp)
    317e:	c64e                	sw	s3,12(sp)
    3180:	c452                	sw	s4,8(sp)
    3182:	002029f3          	frrm	s3
    3186:	001008b7          	lui	a7,0x100
    318a:	18fd                	addi	a7,a7,-1
    318c:	00b8f733          	and	a4,a7,a1
    3190:	0145d413          	srli	s0,a1,0x14
    3194:	01f5d493          	srli	s1,a1,0x1f
    3198:	0146d593          	srli	a1,a3,0x14
    319c:	00371793          	slli	a5,a4,0x3
    31a0:	00d8f8b3          	and	a7,a7,a3
    31a4:	01d55713          	srli	a4,a0,0x1d
    31a8:	7ff47413          	andi	s0,s0,2047
    31ac:	7ff5f593          	andi	a1,a1,2047
    31b0:	8f5d                	or	a4,a4,a5
    31b2:	01f6d313          	srli	t1,a3,0x1f
    31b6:	00351793          	slli	a5,a0,0x3
    31ba:	01d65693          	srli	a3,a2,0x1d
    31be:	088e                	slli	a7,a7,0x3
    31c0:	40b40533          	sub	a0,s0,a1
    31c4:	00361813          	slli	a6,a2,0x3
    31c8:	0116e6b3          	or	a3,a3,a7
    31cc:	862a                	mv	a2,a0
    31ce:	34649563          	bne	s1,t1,3518 <__adddf3+0x3a4>
    31d2:	10a05a63          	blez	a0,32e6 <__adddf3+0x172>
    31d6:	04059463          	bnez	a1,321e <__adddf3+0xaa>
    31da:	0106e533          	or	a0,a3,a6
    31de:	e511                	bnez	a0,31ea <__adddf3+0x76>
    31e0:	7ff00693          	li	a3,2047
    31e4:	2ad61c63          	bne	a2,a3,349c <__adddf3+0x328>
    31e8:	a839                	j	3206 <__adddf3+0x92>
    31ea:	fff60513          	addi	a0,a2,-1 # ffff <_global_impure_ptr+0x9ad7>
    31ee:	e901                	bnez	a0,31fe <__adddf3+0x8a>
    31f0:	983e                	add	a6,a6,a5
    31f2:	96ba                	add	a3,a3,a4
    31f4:	00f837b3          	sltu	a5,a6,a5
    31f8:	96be                	add	a3,a3,a5
    31fa:	4605                	li	a2,1
    31fc:	a059                	j	3282 <__adddf3+0x10e>
    31fe:	7ff00893          	li	a7,2047
    3202:	05161163          	bne	a2,a7,3244 <__adddf3+0xd0>
    3206:	00f766b3          	or	a3,a4,a5
    320a:	70068063          	beqz	a3,390a <__adddf3+0x796>
    320e:	004006b7          	lui	a3,0x400
    3212:	8ef9                	and	a3,a3,a4
    3214:	4401                	li	s0,0
    3216:	20069263          	bnez	a3,341a <__adddf3+0x2a6>
    321a:	45c1                	li	a1,16
    321c:	aafd                	j	341a <__adddf3+0x2a6>
    321e:	7ff00613          	li	a2,2047
    3222:	00c41e63          	bne	s0,a2,323e <__adddf3+0xca>
    3226:	00f766b3          	or	a3,a4,a5
    322a:	6e068363          	beqz	a3,3910 <__adddf3+0x79c>
    322e:	004006b7          	lui	a3,0x400
    3232:	8ef9                	and	a3,a3,a4
    3234:	12068563          	beqz	a3,335e <__adddf3+0x1ea>
    3238:	7ff00613          	li	a2,2047
    323c:	a485                	j	349c <__adddf3+0x328>
    323e:	00800637          	lui	a2,0x800
    3242:	8ed1                	or	a3,a3,a2
    3244:	03800613          	li	a2,56
    3248:	08a64a63          	blt	a2,a0,32dc <__adddf3+0x168>
    324c:	467d                	li	a2,31
    324e:	06a64063          	blt	a2,a0,32ae <__adddf3+0x13a>
    3252:	02000613          	li	a2,32
    3256:	8e09                	sub	a2,a2,a0
    3258:	00a858b3          	srl	a7,a6,a0
    325c:	00c695b3          	sll	a1,a3,a2
    3260:	00c81833          	sll	a6,a6,a2
    3264:	0115e5b3          	or	a1,a1,a7
    3268:	01003833          	snez	a6,a6
    326c:	0105e833          	or	a6,a1,a6
    3270:	00a6d533          	srl	a0,a3,a0
    3274:	983e                	add	a6,a6,a5
    3276:	953a                	add	a0,a0,a4
    3278:	00f837b3          	sltu	a5,a6,a5
    327c:	00f506b3          	add	a3,a0,a5
    3280:	8622                	mv	a2,s0
    3282:	008007b7          	lui	a5,0x800
    3286:	8ff5                	and	a5,a5,a3
    3288:	cbb5                	beqz	a5,32fc <__adddf3+0x188>
    328a:	0605                	addi	a2,a2,1
    328c:	7ff00793          	li	a5,2047
    3290:	26f60363          	beq	a2,a5,34f6 <__adddf3+0x382>
    3294:	ff800737          	lui	a4,0xff800
    3298:	177d                	addi	a4,a4,-1
    329a:	00185793          	srli	a5,a6,0x1
    329e:	8f75                	and	a4,a4,a3
    32a0:	00187813          	andi	a6,a6,1
    32a4:	0107e833          	or	a6,a5,a6
    32a8:	01f71793          	slli	a5,a4,0x1f
    32ac:	a2ed                	j	3496 <__adddf3+0x322>
    32ae:	fe050593          	addi	a1,a0,-32
    32b2:	02000893          	li	a7,32
    32b6:	00b6d5b3          	srl	a1,a3,a1
    32ba:	4601                	li	a2,0
    32bc:	01150863          	beq	a0,a7,32cc <__adddf3+0x158>
    32c0:	04000613          	li	a2,64
    32c4:	40a60533          	sub	a0,a2,a0
    32c8:	00a69633          	sll	a2,a3,a0
    32cc:	01066833          	or	a6,a2,a6
    32d0:	01003833          	snez	a6,a6
    32d4:	0105e833          	or	a6,a1,a6
    32d8:	4501                	li	a0,0
    32da:	bf69                	j	3274 <__adddf3+0x100>
    32dc:	0106e833          	or	a6,a3,a6
    32e0:	01003833          	snez	a6,a6
    32e4:	bfd5                	j	32d8 <__adddf3+0x164>
    32e6:	c97d                	beqz	a0,33dc <__adddf3+0x268>
    32e8:	40858633          	sub	a2,a1,s0
    32ec:	e821                	bnez	s0,333c <__adddf3+0x1c8>
    32ee:	00f76533          	or	a0,a4,a5
    32f2:	e911                	bnez	a0,3306 <__adddf3+0x192>
    32f4:	7ff00793          	li	a5,2047
    32f8:	02f60663          	beq	a2,a5,3324 <__adddf3+0x1b0>
    32fc:	8736                	mv	a4,a3
    32fe:	87c2                	mv	a5,a6
    3300:	40060563          	beqz	a2,370a <__adddf3+0x596>
    3304:	aa61                	j	349c <__adddf3+0x328>
    3306:	fff60893          	addi	a7,a2,-1 # 7fffff <_global_impure_ptr+0x7f9ad7>
    330a:	00089963          	bnez	a7,331c <__adddf3+0x1a8>
    330e:	97c2                	add	a5,a5,a6
    3310:	0107b833          	sltu	a6,a5,a6
    3314:	96ba                	add	a3,a3,a4
    3316:	96c2                	add	a3,a3,a6
    3318:	883e                	mv	a6,a5
    331a:	b5c5                	j	31fa <__adddf3+0x86>
    331c:	7ff00513          	li	a0,2047
    3320:	04a61563          	bne	a2,a0,336a <__adddf3+0x1f6>
    3324:	0106e7b3          	or	a5,a3,a6
    3328:	5e078763          	beqz	a5,3916 <__adddf3+0x7a2>
    332c:	004007b7          	lui	a5,0x400
    3330:	8ff5                	and	a5,a5,a3
    3332:	8736                	mv	a4,a3
    3334:	5e079363          	bnez	a5,391a <__adddf3+0x7a6>
    3338:	87c2                	mv	a5,a6
    333a:	b5c5                	j	321a <__adddf3+0xa6>
    333c:	7ff00513          	li	a0,2047
    3340:	02a59163          	bne	a1,a0,3362 <__adddf3+0x1ee>
    3344:	0106e7b3          	or	a5,a3,a6
    3348:	5a078463          	beqz	a5,38f0 <__adddf3+0x77c>
    334c:	004007b7          	lui	a5,0x400
    3350:	8ff5                	and	a5,a5,a3
    3352:	8736                	mv	a4,a3
    3354:	5a079363          	bnez	a5,38fa <__adddf3+0x786>
    3358:	87c2                	mv	a5,a6
    335a:	7ff00613          	li	a2,2047
    335e:	4401                	li	s0,0
    3360:	bd6d                	j	321a <__adddf3+0xa6>
    3362:	00800537          	lui	a0,0x800
    3366:	8f49                	or	a4,a4,a0
    3368:	88b2                	mv	a7,a2
    336a:	03800613          	li	a2,56
    336e:	07164363          	blt	a2,a7,33d4 <__adddf3+0x260>
    3372:	467d                	li	a2,31
    3374:	03164b63          	blt	a2,a7,33aa <__adddf3+0x236>
    3378:	02000513          	li	a0,32
    337c:	41150533          	sub	a0,a0,a7
    3380:	00a71633          	sll	a2,a4,a0
    3384:	0117d333          	srl	t1,a5,a7
    3388:	00a797b3          	sll	a5,a5,a0
    338c:	00666633          	or	a2,a2,t1
    3390:	00f037b3          	snez	a5,a5
    3394:	8fd1                	or	a5,a5,a2
    3396:	01175733          	srl	a4,a4,a7
    339a:	97c2                	add	a5,a5,a6
    339c:	9736                	add	a4,a4,a3
    339e:	0107b6b3          	sltu	a3,a5,a6
    33a2:	96ba                	add	a3,a3,a4
    33a4:	883e                	mv	a6,a5
    33a6:	862e                	mv	a2,a1
    33a8:	bde9                	j	3282 <__adddf3+0x10e>
    33aa:	fe088613          	addi	a2,a7,-32 # fffe0 <_global_impure_ptr+0xf9ab8>
    33ae:	02000313          	li	t1,32
    33b2:	00c75633          	srl	a2,a4,a2
    33b6:	4501                	li	a0,0
    33b8:	00688863          	beq	a7,t1,33c8 <__adddf3+0x254>
    33bc:	04000513          	li	a0,64
    33c0:	41150533          	sub	a0,a0,a7
    33c4:	00a71533          	sll	a0,a4,a0
    33c8:	8fc9                	or	a5,a5,a0
    33ca:	00f037b3          	snez	a5,a5
    33ce:	8fd1                	or	a5,a5,a2
    33d0:	4701                	li	a4,0
    33d2:	b7e1                	j	339a <__adddf3+0x226>
    33d4:	8fd9                	or	a5,a5,a4
    33d6:	00f037b3          	snez	a5,a5
    33da:	bfdd                	j	33d0 <__adddf3+0x25c>
    33dc:	00140613          	addi	a2,s0,1
    33e0:	7fe67513          	andi	a0,a2,2046
    33e4:	ed41                	bnez	a0,347c <__adddf3+0x308>
    33e6:	00f76533          	or	a0,a4,a5
    33ea:	e421                	bnez	s0,3432 <__adddf3+0x2be>
    33ec:	4c050563          	beqz	a0,38b6 <__adddf3+0x742>
    33f0:	0106e633          	or	a2,a3,a6
    33f4:	30060b63          	beqz	a2,370a <__adddf3+0x596>
    33f8:	983e                	add	a6,a6,a5
    33fa:	00f837b3          	sltu	a5,a6,a5
    33fe:	9736                	add	a4,a4,a3
    3400:	973e                	add	a4,a4,a5
    3402:	008007b7          	lui	a5,0x800
    3406:	8ff9                	and	a5,a5,a4
    3408:	4a078863          	beqz	a5,38b8 <__adddf3+0x744>
    340c:	ff8007b7          	lui	a5,0xff800
    3410:	17fd                	addi	a5,a5,-1
    3412:	8f7d                	and	a4,a4,a5
    3414:	4581                	li	a1,0
    3416:	87c2                	mv	a5,a6
    3418:	4605                	li	a2,1
    341a:	0077f693          	andi	a3,a5,7
    341e:	e6d5                	bnez	a3,34ca <__adddf3+0x356>
    3420:	58040363          	beqz	s0,39a6 <__adddf3+0x832>
    3424:	0015f693          	andi	a3,a1,1
    3428:	56068f63          	beqz	a3,39a6 <__adddf3+0x832>
    342c:	0025e593          	ori	a1,a1,2
    3430:	ab9d                	j	39a6 <__adddf3+0x832>
    3432:	7ff00613          	li	a2,2047
    3436:	02c41d63          	bne	s0,a2,3470 <__adddf3+0x2fc>
    343a:	5e050563          	beqz	a0,3a24 <__adddf3+0x8b0>
    343e:	00400637          	lui	a2,0x400
    3442:	8e79                	and	a2,a2,a4
    3444:	00163613          	seqz	a2,a2
    3448:	0612                	slli	a2,a2,0x4
    344a:	54859363          	bne	a1,s0,3990 <__adddf3+0x81c>
    344e:	85b2                	mv	a1,a2
    3450:	0106e633          	or	a2,a3,a6
    3454:	c611                	beqz	a2,3460 <__adddf3+0x2ec>
    3456:	00400637          	lui	a2,0x400
    345a:	8e75                	and	a2,a2,a3
    345c:	e211                	bnez	a2,3460 <__adddf3+0x2ec>
    345e:	45c1                	li	a1,16
    3460:	52051963          	bnez	a0,3992 <__adddf3+0x81e>
    3464:	8736                	mv	a4,a3
    3466:	87c2                	mv	a5,a6
    3468:	4401                	li	s0,0
    346a:	7ff00613          	li	a2,2047
    346e:	b775                	j	341a <__adddf3+0x2a6>
    3470:	00c59463          	bne	a1,a2,3478 <__adddf3+0x304>
    3474:	4581                	li	a1,0
    3476:	bfe9                	j	3450 <__adddf3+0x2dc>
    3478:	4581                	li	a1,0
    347a:	b7dd                	j	3460 <__adddf3+0x2ec>
    347c:	7ff00593          	li	a1,2047
    3480:	02b60063          	beq	a2,a1,34a0 <__adddf3+0x32c>
    3484:	983e                	add	a6,a6,a5
    3486:	00f837b3          	sltu	a5,a6,a5
    348a:	9736                	add	a4,a4,a3
    348c:	973e                	add	a4,a4,a5
    348e:	01f71793          	slli	a5,a4,0x1f
    3492:	00185813          	srli	a6,a6,0x1
    3496:	0107e7b3          	or	a5,a5,a6
    349a:	8305                	srli	a4,a4,0x1
    349c:	4401                	li	s0,0
    349e:	a9bd                	j	391c <__adddf3+0x7a8>
    34a0:	00098763          	beqz	s3,34ae <__adddf3+0x33a>
    34a4:	478d                	li	a5,3
    34a6:	00f99763          	bne	s3,a5,34b4 <__adddf3+0x340>
    34aa:	00049a63          	bnez	s1,34be <__adddf3+0x34a>
    34ae:	7ff00613          	li	a2,2047
    34b2:	a889                	j	3504 <__adddf3+0x390>
    34b4:	4789                	li	a5,2
    34b6:	00f99463          	bne	s3,a5,34be <__adddf3+0x34a>
    34ba:	fe049ae3          	bnez	s1,34ae <__adddf3+0x33a>
    34be:	4401                	li	s0,0
    34c0:	577d                	li	a4,-1
    34c2:	57fd                	li	a5,-1
    34c4:	7fe00613          	li	a2,2046
    34c8:	4595                	li	a1,5
    34ca:	4689                	li	a3,2
    34cc:	0015e593          	ori	a1,a1,1
    34d0:	48d98763          	beq	s3,a3,395e <__adddf3+0x7ea>
    34d4:	468d                	li	a3,3
    34d6:	48d98063          	beq	s3,a3,3956 <__adddf3+0x7e2>
    34da:	48099363          	bnez	s3,3960 <__adddf3+0x7ec>
    34de:	00f7f693          	andi	a3,a5,15
    34e2:	4511                	li	a0,4
    34e4:	46a68e63          	beq	a3,a0,3960 <__adddf3+0x7ec>
    34e8:	00478693          	addi	a3,a5,4 # ff800004 <__kernel_stack+0xdf74000c>
    34ec:	00f6b7b3          	sltu	a5,a3,a5
    34f0:	973e                	add	a4,a4,a5
    34f2:	87b6                	mv	a5,a3
    34f4:	a1b5                	j	3960 <__adddf3+0x7ec>
    34f6:	00098763          	beqz	s3,3504 <__adddf3+0x390>
    34fa:	478d                	li	a5,3
    34fc:	00f99863          	bne	s3,a5,350c <__adddf3+0x398>
    3500:	3e049f63          	bnez	s1,38fe <__adddf3+0x78a>
    3504:	4701                	li	a4,0
    3506:	4781                	li	a5,0
    3508:	4595                	li	a1,5
    350a:	a971                	j	39a6 <__adddf3+0x832>
    350c:	4789                	li	a5,2
    350e:	3ef99863          	bne	s3,a5,38fe <__adddf3+0x78a>
    3512:	fe0499e3          	bnez	s1,3504 <__adddf3+0x390>
    3516:	b765                	j	34be <__adddf3+0x34a>
    3518:	0ca05763          	blez	a0,35e6 <__adddf3+0x472>
    351c:	08059263          	bnez	a1,35a0 <__adddf3+0x42c>
    3520:	0106e533          	or	a0,a3,a6
    3524:	ca050ee3          	beqz	a0,31e0 <__adddf3+0x6c>
    3528:	fff60513          	addi	a0,a2,-1 # 3fffff <_global_impure_ptr+0x3f9ad7>
    352c:	e911                	bnez	a0,3540 <__adddf3+0x3cc>
    352e:	41078833          	sub	a6,a5,a6
    3532:	40d706b3          	sub	a3,a4,a3
    3536:	0107b7b3          	sltu	a5,a5,a6
    353a:	8e9d                	sub	a3,a3,a5
    353c:	4605                	li	a2,1
    353e:	a0a9                	j	3588 <__adddf3+0x414>
    3540:	7ff00893          	li	a7,2047
    3544:	cd1601e3          	beq	a2,a7,3206 <__adddf3+0x92>
    3548:	03800613          	li	a2,56
    354c:	08a64863          	blt	a2,a0,35dc <__adddf3+0x468>
    3550:	467d                	li	a2,31
    3552:	04a64f63          	blt	a2,a0,35b0 <__adddf3+0x43c>
    3556:	02000613          	li	a2,32
    355a:	8e09                	sub	a2,a2,a0
    355c:	00c695b3          	sll	a1,a3,a2
    3560:	00a858b3          	srl	a7,a6,a0
    3564:	00c81833          	sll	a6,a6,a2
    3568:	0115e5b3          	or	a1,a1,a7
    356c:	01003833          	snez	a6,a6
    3570:	0105e833          	or	a6,a1,a6
    3574:	00a6d6b3          	srl	a3,a3,a0
    3578:	41078833          	sub	a6,a5,a6
    357c:	40d706b3          	sub	a3,a4,a3
    3580:	0107b7b3          	sltu	a5,a5,a6
    3584:	8e9d                	sub	a3,a3,a5
    3586:	8622                	mv	a2,s0
    3588:	00800937          	lui	s2,0x800
    358c:	0126f7b3          	and	a5,a3,s2
    3590:	d60786e3          	beqz	a5,32fc <__adddf3+0x188>
    3594:	197d                	addi	s2,s2,-1
    3596:	0126f933          	and	s2,a3,s2
    359a:	8a42                	mv	s4,a6
    359c:	8432                	mv	s0,a2
    359e:	a4b5                	j	380a <__adddf3+0x696>
    35a0:	7ff00613          	li	a2,2047
    35a4:	c8c401e3          	beq	s0,a2,3226 <__adddf3+0xb2>
    35a8:	00800637          	lui	a2,0x800
    35ac:	8ed1                	or	a3,a3,a2
    35ae:	bf69                	j	3548 <__adddf3+0x3d4>
    35b0:	fe050593          	addi	a1,a0,-32 # 7fffe0 <_global_impure_ptr+0x7f9ab8>
    35b4:	02000893          	li	a7,32
    35b8:	00b6d5b3          	srl	a1,a3,a1
    35bc:	4601                	li	a2,0
    35be:	01150763          	beq	a0,a7,35cc <__adddf3+0x458>
    35c2:	04000613          	li	a2,64
    35c6:	8e09                	sub	a2,a2,a0
    35c8:	00c69633          	sll	a2,a3,a2
    35cc:	01066833          	or	a6,a2,a6
    35d0:	01003833          	snez	a6,a6
    35d4:	0105e833          	or	a6,a1,a6
    35d8:	4681                	li	a3,0
    35da:	bf79                	j	3578 <__adddf3+0x404>
    35dc:	0106e833          	or	a6,a3,a6
    35e0:	01003833          	snez	a6,a6
    35e4:	bfd5                	j	35d8 <__adddf3+0x464>
    35e6:	cd75                	beqz	a0,36e2 <__adddf3+0x56e>
    35e8:	40858633          	sub	a2,a1,s0
    35ec:	e439                	bnez	s0,363a <__adddf3+0x4c6>
    35ee:	00f76533          	or	a0,a4,a5
    35f2:	e509                	bnez	a0,35fc <__adddf3+0x488>
    35f4:	7ff00793          	li	a5,2047
    35f8:	849a                	mv	s1,t1
    35fa:	b9fd                	j	32f8 <__adddf3+0x184>
    35fc:	fff60893          	addi	a7,a2,-1 # 7fffff <_global_impure_ptr+0x7f9ad7>
    3600:	00089c63          	bnez	a7,3618 <__adddf3+0x4a4>
    3604:	40f807b3          	sub	a5,a6,a5
    3608:	00f83833          	sltu	a6,a6,a5
    360c:	8e99                	sub	a3,a3,a4
    360e:	410686b3          	sub	a3,a3,a6
    3612:	849a                	mv	s1,t1
    3614:	883e                	mv	a6,a5
    3616:	b71d                	j	353c <__adddf3+0x3c8>
    3618:	7ff00513          	li	a0,2047
    361c:	04a61663          	bne	a2,a0,3668 <__adddf3+0x4f4>
    3620:	0106e7b3          	or	a5,a3,a6
    3624:	2e078e63          	beqz	a5,3920 <__adddf3+0x7ac>
    3628:	004007b7          	lui	a5,0x400
    362c:	8ff5                	and	a5,a5,a3
    362e:	8736                	mv	a4,a3
    3630:	2e079b63          	bnez	a5,3926 <__adddf3+0x7b2>
    3634:	87c2                	mv	a5,a6
    3636:	849a                	mv	s1,t1
    3638:	b6cd                	j	321a <__adddf3+0xa6>
    363a:	7ff00513          	li	a0,2047
    363e:	02a59163          	bne	a1,a0,3660 <__adddf3+0x4ec>
    3642:	0106e7b3          	or	a5,a3,a6
    3646:	2e078363          	beqz	a5,392c <__adddf3+0x7b8>
    364a:	004007b7          	lui	a5,0x400
    364e:	8ff5                	and	a5,a5,a3
    3650:	8736                	mv	a4,a3
    3652:	2e079163          	bnez	a5,3934 <__adddf3+0x7c0>
    3656:	87c2                	mv	a5,a6
    3658:	7ff00613          	li	a2,2047
    365c:	849a                	mv	s1,t1
    365e:	b301                	j	335e <__adddf3+0x1ea>
    3660:	00800537          	lui	a0,0x800
    3664:	8f49                	or	a4,a4,a0
    3666:	88b2                	mv	a7,a2
    3668:	03800613          	li	a2,56
    366c:	07164763          	blt	a2,a7,36da <__adddf3+0x566>
    3670:	467d                	li	a2,31
    3672:	03164f63          	blt	a2,a7,36b0 <__adddf3+0x53c>
    3676:	02000513          	li	a0,32
    367a:	41150533          	sub	a0,a0,a7
    367e:	00a71633          	sll	a2,a4,a0
    3682:	0117de33          	srl	t3,a5,a7
    3686:	00a797b3          	sll	a5,a5,a0
    368a:	01c66633          	or	a2,a2,t3
    368e:	00f037b3          	snez	a5,a5
    3692:	8fd1                	or	a5,a5,a2
    3694:	01175733          	srl	a4,a4,a7
    3698:	40f807b3          	sub	a5,a6,a5
    369c:	40e68733          	sub	a4,a3,a4
    36a0:	00f836b3          	sltu	a3,a6,a5
    36a4:	40d706b3          	sub	a3,a4,a3
    36a8:	883e                	mv	a6,a5
    36aa:	862e                	mv	a2,a1
    36ac:	849a                	mv	s1,t1
    36ae:	bde9                	j	3588 <__adddf3+0x414>
    36b0:	fe088613          	addi	a2,a7,-32
    36b4:	02000e13          	li	t3,32
    36b8:	00c75633          	srl	a2,a4,a2
    36bc:	4501                	li	a0,0
    36be:	01c88863          	beq	a7,t3,36ce <__adddf3+0x55a>
    36c2:	04000513          	li	a0,64
    36c6:	41150533          	sub	a0,a0,a7
    36ca:	00a71533          	sll	a0,a4,a0
    36ce:	8fc9                	or	a5,a5,a0
    36d0:	00f037b3          	snez	a5,a5
    36d4:	8fd1                	or	a5,a5,a2
    36d6:	4701                	li	a4,0
    36d8:	b7c1                	j	3698 <__adddf3+0x524>
    36da:	8fd9                	or	a5,a5,a4
    36dc:	00f037b3          	snez	a5,a5
    36e0:	bfdd                	j	36d6 <__adddf3+0x562>
    36e2:	00140613          	addi	a2,s0,1
    36e6:	7fe67613          	andi	a2,a2,2046
    36ea:	ea7d                	bnez	a2,37e0 <__adddf3+0x66c>
    36ec:	00f768b3          	or	a7,a4,a5
    36f0:	0106e533          	or	a0,a3,a6
    36f4:	e05d                	bnez	s0,379a <__adddf3+0x626>
    36f6:	06089263          	bnez	a7,375a <__adddf3+0x5e6>
    36fa:	1c051163          	bnez	a0,38bc <__adddf3+0x748>
    36fe:	ffe98493          	addi	s1,s3,-2
    3702:	0014b493          	seqz	s1,s1
    3706:	4701                	li	a4,0
    3708:	4781                	li	a5,0
    370a:	00e7e6b3          	or	a3,a5,a4
    370e:	24068063          	beqz	a3,394e <__adddf3+0x7da>
    3712:	01f7d693          	srli	a3,a5,0x1f
    3716:	00171413          	slli	s0,a4,0x1
    371a:	9436                	add	s0,s0,a3
    371c:	00179693          	slli	a3,a5,0x1
    3720:	0076f613          	andi	a2,a3,7
    3724:	4581                	li	a1,0
    3726:	c605                	beqz	a2,374e <__adddf3+0x5da>
    3728:	4609                	li	a2,2
    372a:	1ac98963          	beq	s3,a2,38dc <__adddf3+0x768>
    372e:	460d                	li	a2,3
    3730:	18c98c63          	beq	s3,a2,38c8 <__adddf3+0x754>
    3734:	4585                	li	a1,1
    3736:	00099c63          	bnez	s3,374e <__adddf3+0x5da>
    373a:	00f6f613          	andi	a2,a3,15
    373e:	4511                	li	a0,4
    3740:	00a60763          	beq	a2,a0,374e <__adddf3+0x5da>
    3744:	ffc6b693          	sltiu	a3,a3,-4
    3748:	0016c693          	xori	a3,a3,1
    374c:	9436                	add	s0,s0,a3
    374e:	8061                	srli	s0,s0,0x18
    3750:	00144413          	xori	s0,s0,1
    3754:	8805                	andi	s0,s0,1
    3756:	4601                	li	a2,0
    3758:	b1c9                	j	341a <__adddf3+0x2a6>
    375a:	d945                	beqz	a0,370a <__adddf3+0x596>
    375c:	410785b3          	sub	a1,a5,a6
    3760:	00b7b533          	sltu	a0,a5,a1
    3764:	40d70633          	sub	a2,a4,a3
    3768:	8e09                	sub	a2,a2,a0
    376a:	00800537          	lui	a0,0x800
    376e:	8d71                	and	a0,a0,a2
    3770:	c919                	beqz	a0,3786 <__adddf3+0x612>
    3772:	40f807b3          	sub	a5,a6,a5
    3776:	40e68733          	sub	a4,a3,a4
    377a:	00f83833          	sltu	a6,a6,a5
    377e:	41070733          	sub	a4,a4,a6
    3782:	849a                	mv	s1,t1
    3784:	b759                	j	370a <__adddf3+0x596>
    3786:	00c5e7b3          	or	a5,a1,a2
    378a:	12079c63          	bnez	a5,38c2 <__adddf3+0x74e>
    378e:	ffe98493          	addi	s1,s3,-2
    3792:	0014b493          	seqz	s1,s1
    3796:	4701                	li	a4,0
    3798:	bf8d                	j	370a <__adddf3+0x596>
    379a:	7ff00613          	li	a2,2047
    379e:	00c41e63          	bne	s0,a2,37ba <__adddf3+0x646>
    37a2:	26088963          	beqz	a7,3a14 <__adddf3+0x8a0>
    37a6:	00400637          	lui	a2,0x400
    37aa:	8e79                	and	a2,a2,a4
    37ac:	00163613          	seqz	a2,a2
    37b0:	0612                	slli	a2,a2,0x4
    37b2:	26859563          	bne	a1,s0,3a1c <__adddf3+0x8a8>
    37b6:	85b2                	mv	a1,a2
    37b8:	a021                	j	37c0 <__adddf3+0x64c>
    37ba:	02c59163          	bne	a1,a2,37dc <__adddf3+0x668>
    37be:	4581                	li	a1,0
    37c0:	c511                	beqz	a0,37cc <__adddf3+0x658>
    37c2:	00400637          	lui	a2,0x400
    37c6:	8e75                	and	a2,a2,a3
    37c8:	e211                	bnez	a2,37cc <__adddf3+0x658>
    37ca:	45c1                	li	a1,16
    37cc:	24089963          	bnez	a7,3a1e <__adddf3+0x8aa>
    37d0:	16050763          	beqz	a0,393e <__adddf3+0x7ca>
    37d4:	8736                	mv	a4,a3
    37d6:	87c2                	mv	a5,a6
    37d8:	849a                	mv	s1,t1
    37da:	b179                	j	3468 <__adddf3+0x2f4>
    37dc:	4581                	li	a1,0
    37de:	b7fd                	j	37cc <__adddf3+0x658>
    37e0:	41078a33          	sub	s4,a5,a6
    37e4:	0147b633          	sltu	a2,a5,s4
    37e8:	40d70933          	sub	s2,a4,a3
    37ec:	40c90933          	sub	s2,s2,a2
    37f0:	00800637          	lui	a2,0x800
    37f4:	00c97633          	and	a2,s2,a2
    37f8:	c62d                	beqz	a2,3862 <__adddf3+0x6ee>
    37fa:	40f80a33          	sub	s4,a6,a5
    37fe:	8e99                	sub	a3,a3,a4
    3800:	01483833          	sltu	a6,a6,s4
    3804:	41068933          	sub	s2,a3,a6
    3808:	849a                	mv	s1,t1
    380a:	06090063          	beqz	s2,386a <__adddf3+0x6f6>
    380e:	854a                	mv	a0,s2
    3810:	337010ef          	jal	ra,5346 <__clzsi2>
    3814:	ff850613          	addi	a2,a0,-8 # 7ffff8 <_global_impure_ptr+0x7f9ad0>
    3818:	47fd                	li	a5,31
    381a:	04c7ce63          	blt	a5,a2,3876 <__adddf3+0x702>
    381e:	02000693          	li	a3,32
    3822:	8e91                	sub	a3,a3,a2
    3824:	00c91733          	sll	a4,s2,a2
    3828:	00da56b3          	srl	a3,s4,a3
    382c:	8ed9                	or	a3,a3,a4
    382e:	00ca1833          	sll	a6,s4,a2
    3832:	06864b63          	blt	a2,s0,38a8 <__adddf3+0x734>
    3836:	8e01                	sub	a2,a2,s0
    3838:	00160713          	addi	a4,a2,1 # 800001 <_global_impure_ptr+0x7f9ad9>
    383c:	47fd                	li	a5,31
    383e:	04e7c263          	blt	a5,a4,3882 <__adddf3+0x70e>
    3842:	02000613          	li	a2,32
    3846:	8e19                	sub	a2,a2,a4
    3848:	00c697b3          	sll	a5,a3,a2
    384c:	00e85533          	srl	a0,a6,a4
    3850:	00c81633          	sll	a2,a6,a2
    3854:	8fc9                	or	a5,a5,a0
    3856:	00c03633          	snez	a2,a2
    385a:	8fd1                	or	a5,a5,a2
    385c:	00e6d733          	srl	a4,a3,a4
    3860:	b56d                	j	370a <__adddf3+0x596>
    3862:	012a67b3          	or	a5,s4,s2
    3866:	f3d5                	bnez	a5,380a <__adddf3+0x696>
    3868:	b71d                	j	378e <__adddf3+0x61a>
    386a:	8552                	mv	a0,s4
    386c:	2db010ef          	jal	ra,5346 <__clzsi2>
    3870:	02050513          	addi	a0,a0,32
    3874:	b745                	j	3814 <__adddf3+0x6a0>
    3876:	fd850693          	addi	a3,a0,-40
    387a:	00da16b3          	sll	a3,s4,a3
    387e:	4801                	li	a6,0
    3880:	bf4d                	j	3832 <__adddf3+0x6be>
    3882:	1605                	addi	a2,a2,-31
    3884:	02000593          	li	a1,32
    3888:	00c6d633          	srl	a2,a3,a2
    388c:	4781                	li	a5,0
    388e:	00b70763          	beq	a4,a1,389c <__adddf3+0x728>
    3892:	04000793          	li	a5,64
    3896:	8f99                	sub	a5,a5,a4
    3898:	00f697b3          	sll	a5,a3,a5
    389c:	00f867b3          	or	a5,a6,a5
    38a0:	00f037b3          	snez	a5,a5
    38a4:	8fd1                	or	a5,a5,a2
    38a6:	bdc5                	j	3796 <__adddf3+0x622>
    38a8:	ff8007b7          	lui	a5,0xff800
    38ac:	17fd                	addi	a5,a5,-1
    38ae:	40c40633          	sub	a2,s0,a2
    38b2:	8efd                	and	a3,a3,a5
    38b4:	b4a1                	j	32fc <__adddf3+0x188>
    38b6:	8736                	mv	a4,a3
    38b8:	87c2                	mv	a5,a6
    38ba:	bd81                	j	370a <__adddf3+0x596>
    38bc:	8736                	mv	a4,a3
    38be:	87c2                	mv	a5,a6
    38c0:	b5c9                	j	3782 <__adddf3+0x60e>
    38c2:	8732                	mv	a4,a2
    38c4:	87ae                	mv	a5,a1
    38c6:	b591                	j	370a <__adddf3+0x596>
    38c8:	85a6                	mv	a1,s1
    38ca:	e80492e3          	bnez	s1,374e <__adddf3+0x5da>
    38ce:	ff86b693          	sltiu	a3,a3,-8
    38d2:	0016c693          	xori	a3,a3,1
    38d6:	9436                	add	s0,s0,a3
    38d8:	4585                	li	a1,1
    38da:	bd95                	j	374e <__adddf3+0x5da>
    38dc:	4585                	li	a1,1
    38de:	e60488e3          	beqz	s1,374e <__adddf3+0x5da>
    38e2:	ff86b693          	sltiu	a3,a3,-8
    38e6:	0016c693          	xori	a3,a3,1
    38ea:	9436                	add	s0,s0,a3
    38ec:	85a6                	mv	a1,s1
    38ee:	b585                	j	374e <__adddf3+0x5da>
    38f0:	4701                	li	a4,0
    38f2:	7ff00613          	li	a2,2047
    38f6:	4581                	li	a1,0
    38f8:	a07d                	j	39a6 <__adddf3+0x832>
    38fa:	87c2                	mv	a5,a6
    38fc:	ba35                	j	3238 <__adddf3+0xc4>
    38fe:	577d                	li	a4,-1
    3900:	57fd                	li	a5,-1
    3902:	7fe00613          	li	a2,2046
    3906:	4401                	li	s0,0
    3908:	b6c1                	j	34c8 <__adddf3+0x354>
    390a:	4701                	li	a4,0
    390c:	4781                	li	a5,0
    390e:	a861                	j	39a6 <__adddf3+0x832>
    3910:	4701                	li	a4,0
    3912:	4781                	li	a5,0
    3914:	bff9                	j	38f2 <__adddf3+0x77e>
    3916:	4701                	li	a4,0
    3918:	bff9                	j	38f6 <__adddf3+0x782>
    391a:	87c2                	mv	a5,a6
    391c:	4581                	li	a1,0
    391e:	bcf5                	j	341a <__adddf3+0x2a6>
    3920:	4701                	li	a4,0
    3922:	849a                	mv	s1,t1
    3924:	bfc9                	j	38f6 <__adddf3+0x782>
    3926:	87c2                	mv	a5,a6
    3928:	849a                	mv	s1,t1
    392a:	bfcd                	j	391c <__adddf3+0x7a8>
    392c:	4701                	li	a4,0
    392e:	7ff00613          	li	a2,2047
    3932:	bfc5                	j	3922 <__adddf3+0x7ae>
    3934:	87c2                	mv	a5,a6
    3936:	7ff00613          	li	a2,2047
    393a:	849a                	mv	s1,t1
    393c:	b685                	j	349c <__adddf3+0x328>
    393e:	4781                	li	a5,0
    3940:	4481                	li	s1,0
    3942:	00400737          	lui	a4,0x400
    3946:	7ff00613          	li	a2,2047
    394a:	45c1                	li	a1,16
    394c:	a8a9                	j	39a6 <__adddf3+0x832>
    394e:	4701                	li	a4,0
    3950:	4781                	li	a5,0
    3952:	4601                	li	a2,0
    3954:	b74d                	j	38f6 <__adddf3+0x782>
    3956:	e489                	bnez	s1,3960 <__adddf3+0x7ec>
    3958:	00878693          	addi	a3,a5,8 # ff800008 <__kernel_stack+0xdf740010>
    395c:	be41                	j	34ec <__adddf3+0x378>
    395e:	fced                	bnez	s1,3958 <__adddf3+0x7e4>
    3960:	ac0416e3          	bnez	s0,342c <__adddf3+0x2b8>
    3964:	a089                	j	39a6 <__adddf3+0x832>
    3966:	4781                	li	a5,0
    3968:	02098063          	beqz	s3,3988 <__adddf3+0x814>
    396c:	470d                	li	a4,3
    396e:	00e99863          	bne	s3,a4,397e <__adddf3+0x80a>
    3972:	00048b63          	beqz	s1,3988 <__adddf3+0x814>
    3976:	57fd                	li	a5,-1
    3978:	7fe00613          	li	a2,2046
    397c:	a031                	j	3988 <__adddf3+0x814>
    397e:	4709                	li	a4,2
    3980:	fee99be3          	bne	s3,a4,3976 <__adddf3+0x802>
    3984:	fe0489e3          	beqz	s1,3976 <__adddf3+0x802>
    3988:	0055e593          	ori	a1,a1,5
    398c:	873e                	mv	a4,a5
    398e:	a80d                	j	39c0 <__adddf3+0x84c>
    3990:	85b2                	mv	a1,a2
    3992:	0106e6b3          	or	a3,a3,a6
    3996:	ac0689e3          	beqz	a3,3468 <__adddf3+0x2f4>
    399a:	4481                	li	s1,0
    399c:	00400737          	lui	a4,0x400
    39a0:	4781                	li	a5,0
    39a2:	7ff00613          	li	a2,2047
    39a6:	008006b7          	lui	a3,0x800
    39aa:	8ef9                	and	a3,a3,a4
    39ac:	ca91                	beqz	a3,39c0 <__adddf3+0x84c>
    39ae:	0605                	addi	a2,a2,1
    39b0:	7ff00693          	li	a3,2047
    39b4:	fad609e3          	beq	a2,a3,3966 <__adddf3+0x7f2>
    39b8:	ff8006b7          	lui	a3,0xff800
    39bc:	16fd                	addi	a3,a3,-1
    39be:	8f75                	and	a4,a4,a3
    39c0:	0037d513          	srli	a0,a5,0x3
    39c4:	7ff00693          	li	a3,2047
    39c8:	01d71793          	slli	a5,a4,0x1d
    39cc:	8fc9                	or	a5,a5,a0
    39ce:	830d                	srli	a4,a4,0x3
    39d0:	00d61963          	bne	a2,a3,39e2 <__adddf3+0x86e>
    39d4:	8fd9                	or	a5,a5,a4
    39d6:	4701                	li	a4,0
    39d8:	c789                	beqz	a5,39e2 <__adddf3+0x86e>
    39da:	00080737          	lui	a4,0x80
    39de:	4781                	li	a5,0
    39e0:	4481                	li	s1,0
    39e2:	7ff006b7          	lui	a3,0x7ff00
    39e6:	0652                	slli	a2,a2,0x14
    39e8:	0732                	slli	a4,a4,0xc
    39ea:	8e75                	and	a2,a2,a3
    39ec:	8331                	srli	a4,a4,0xc
    39ee:	8f51                	or	a4,a4,a2
    39f0:	04fe                	slli	s1,s1,0x1f
    39f2:	009766b3          	or	a3,a4,s1
    39f6:	873e                	mv	a4,a5
    39f8:	87b6                	mv	a5,a3
    39fa:	c199                	beqz	a1,3a00 <__adddf3+0x88c>
    39fc:	0015a073          	csrs	fflags,a1
    3a00:	40f2                	lw	ra,28(sp)
    3a02:	4462                	lw	s0,24(sp)
    3a04:	44d2                	lw	s1,20(sp)
    3a06:	4942                	lw	s2,16(sp)
    3a08:	49b2                	lw	s3,12(sp)
    3a0a:	4a22                	lw	s4,8(sp)
    3a0c:	853a                	mv	a0,a4
    3a0e:	85be                	mv	a1,a5
    3a10:	6105                	addi	sp,sp,32
    3a12:	8082                	ret
    3a14:	da8585e3          	beq	a1,s0,37be <__adddf3+0x64a>
    3a18:	4581                	li	a1,0
    3a1a:	bb5d                	j	37d0 <__adddf3+0x65c>
    3a1c:	85b2                	mv	a1,a2
    3a1e:	a40505e3          	beqz	a0,3468 <__adddf3+0x2f4>
    3a22:	bfa5                	j	399a <__adddf3+0x826>
    3a24:	a48588e3          	beq	a1,s0,3474 <__adddf3+0x300>
    3a28:	4581                	li	a1,0
    3a2a:	bc2d                	j	3464 <__adddf3+0x2f0>

00003a2c <__divdf3>:
    3a2c:	7179                	addi	sp,sp,-48
    3a2e:	d422                	sw	s0,40(sp)
    3a30:	ca56                	sw	s5,20(sp)
    3a32:	c266                	sw	s9,4(sp)
    3a34:	d606                	sw	ra,44(sp)
    3a36:	d226                	sw	s1,36(sp)
    3a38:	d04a                	sw	s2,32(sp)
    3a3a:	ce4e                	sw	s3,28(sp)
    3a3c:	cc52                	sw	s4,24(sp)
    3a3e:	c85a                	sw	s6,16(sp)
    3a40:	c65e                	sw	s7,12(sp)
    3a42:	c462                	sw	s8,8(sp)
    3a44:	842a                	mv	s0,a0
    3a46:	8cb2                	mv	s9,a2
    3a48:	8ab6                	mv	s5,a3
    3a4a:	00202973          	frrm	s2
    3a4e:	0145db13          	srli	s6,a1,0x14
    3a52:	00c59b93          	slli	s7,a1,0xc
    3a56:	7ffb7b13          	andi	s6,s6,2047
    3a5a:	00cbdb93          	srli	s7,s7,0xc
    3a5e:	01f5da13          	srli	s4,a1,0x1f
    3a62:	020b0663          	beqz	s6,3a8e <__divdf3+0x62>
    3a66:	7ff00793          	li	a5,2047
    3a6a:	06fb0b63          	beq	s6,a5,3ae0 <__divdf3+0xb4>
    3a6e:	01d55713          	srli	a4,a0,0x1d
    3a72:	0b8e                	slli	s7,s7,0x3
    3a74:	01776bb3          	or	s7,a4,s7
    3a78:	008007b7          	lui	a5,0x800
    3a7c:	00fbebb3          	or	s7,s7,a5
    3a80:	00351993          	slli	s3,a0,0x3
    3a84:	c01b0b13          	addi	s6,s6,-1023
    3a88:	4c01                	li	s8,0
    3a8a:	4481                	li	s1,0
    3a8c:	a0bd                	j	3afa <__divdf3+0xce>
    3a8e:	00abe7b3          	or	a5,s7,a0
    3a92:	c7e9                	beqz	a5,3b5c <__divdf3+0x130>
    3a94:	020b8b63          	beqz	s7,3aca <__divdf3+0x9e>
    3a98:	855e                	mv	a0,s7
    3a9a:	0ad010ef          	jal	ra,5346 <__clzsi2>
    3a9e:	ff550713          	addi	a4,a0,-11
    3aa2:	47f1                	li	a5,28
    3aa4:	02e7c863          	blt	a5,a4,3ad4 <__divdf3+0xa8>
    3aa8:	46f5                	li	a3,29
    3aaa:	ff850993          	addi	s3,a0,-8
    3aae:	8e99                	sub	a3,a3,a4
    3ab0:	013b9bb3          	sll	s7,s7,s3
    3ab4:	00d456b3          	srl	a3,s0,a3
    3ab8:	0176ebb3          	or	s7,a3,s7
    3abc:	013419b3          	sll	s3,s0,s3
    3ac0:	c0d00593          	li	a1,-1011
    3ac4:	40a58b33          	sub	s6,a1,a0
    3ac8:	b7c1                	j	3a88 <__divdf3+0x5c>
    3aca:	07d010ef          	jal	ra,5346 <__clzsi2>
    3ace:	02050513          	addi	a0,a0,32
    3ad2:	b7f1                	j	3a9e <__divdf3+0x72>
    3ad4:	fd850b93          	addi	s7,a0,-40
    3ad8:	01741bb3          	sll	s7,s0,s7
    3adc:	4981                	li	s3,0
    3ade:	b7cd                	j	3ac0 <__divdf3+0x94>
    3ae0:	00abe433          	or	s0,s7,a0
    3ae4:	c049                	beqz	s0,3b66 <__divdf3+0x13a>
    3ae6:	000807b7          	lui	a5,0x80
    3aea:	00fbf7b3          	and	a5,s7,a5
    3aee:	89aa                	mv	s3,a0
    3af0:	7ff00b13          	li	s6,2047
    3af4:	4c0d                	li	s8,3
    3af6:	44c1                	li	s1,16
    3af8:	fbc9                	bnez	a5,3a8a <__divdf3+0x5e>
    3afa:	00ca9513          	slli	a0,s5,0xc
    3afe:	00c55413          	srli	s0,a0,0xc
    3b02:	014ad513          	srli	a0,s5,0x14
    3b06:	7ff57593          	andi	a1,a0,2047
    3b0a:	87e6                	mv	a5,s9
    3b0c:	01fada93          	srli	s5,s5,0x1f
    3b10:	c1ad                	beqz	a1,3b72 <__divdf3+0x146>
    3b12:	7ff00713          	li	a4,2047
    3b16:	0ae58963          	beq	a1,a4,3bc8 <__divdf3+0x19c>
    3b1a:	01dcd793          	srli	a5,s9,0x1d
    3b1e:	00341513          	slli	a0,s0,0x3
    3b22:	8d5d                	or	a0,a0,a5
    3b24:	00800437          	lui	s0,0x800
    3b28:	8c49                	or	s0,s0,a0
    3b2a:	003c9793          	slli	a5,s9,0x3
    3b2e:	c0158513          	addi	a0,a1,-1023
    3b32:	4701                	li	a4,0
    3b34:	002c1693          	slli	a3,s8,0x2
    3b38:	8ed9                	or	a3,a3,a4
    3b3a:	40ab05b3          	sub	a1,s6,a0
    3b3e:	16fd                	addi	a3,a3,-1
    3b40:	4539                	li	a0,14
    3b42:	015a4633          	xor	a2,s4,s5
    3b46:	0ad56a63          	bltu	a0,a3,3bfa <__divdf3+0x1ce>
    3b4a:	00002517          	auipc	a0,0x2
    3b4e:	7ca50513          	addi	a0,a0,1994 # 6314 <lin+0x100>
    3b52:	068a                	slli	a3,a3,0x2
    3b54:	96aa                	add	a3,a3,a0
    3b56:	4294                	lw	a3,0(a3)
    3b58:	96aa                	add	a3,a3,a0
    3b5a:	8682                	jr	a3
    3b5c:	4b81                	li	s7,0
    3b5e:	4981                	li	s3,0
    3b60:	4b01                	li	s6,0
    3b62:	4c05                	li	s8,1
    3b64:	b71d                	j	3a8a <__divdf3+0x5e>
    3b66:	4b81                	li	s7,0
    3b68:	4981                	li	s3,0
    3b6a:	7ff00b13          	li	s6,2047
    3b6e:	4c09                	li	s8,2
    3b70:	bf29                	j	3a8a <__divdf3+0x5e>
    3b72:	019467b3          	or	a5,s0,s9
    3b76:	c7ad                	beqz	a5,3be0 <__divdf3+0x1b4>
    3b78:	02040c63          	beqz	s0,3bb0 <__divdf3+0x184>
    3b7c:	8522                	mv	a0,s0
    3b7e:	7c8010ef          	jal	ra,5346 <__clzsi2>
    3b82:	85aa                	mv	a1,a0
    3b84:	ff558693          	addi	a3,a1,-11
    3b88:	47f1                	li	a5,28
    3b8a:	02d7c963          	blt	a5,a3,3bbc <__divdf3+0x190>
    3b8e:	4775                	li	a4,29
    3b90:	ff858793          	addi	a5,a1,-8
    3b94:	8f15                	sub	a4,a4,a3
    3b96:	00f41533          	sll	a0,s0,a5
    3b9a:	00ecd733          	srl	a4,s9,a4
    3b9e:	00a76433          	or	s0,a4,a0
    3ba2:	00fc97b3          	sll	a5,s9,a5
    3ba6:	c0d00713          	li	a4,-1011
    3baa:	40b70533          	sub	a0,a4,a1
    3bae:	b751                	j	3b32 <__divdf3+0x106>
    3bb0:	8566                	mv	a0,s9
    3bb2:	794010ef          	jal	ra,5346 <__clzsi2>
    3bb6:	02050593          	addi	a1,a0,32
    3bba:	b7e9                	j	3b84 <__divdf3+0x158>
    3bbc:	fd858513          	addi	a0,a1,-40
    3bc0:	00ac9433          	sll	s0,s9,a0
    3bc4:	4781                	li	a5,0
    3bc6:	b7c5                	j	3ba6 <__divdf3+0x17a>
    3bc8:	01946633          	or	a2,s0,s9
    3bcc:	ce19                	beqz	a2,3bea <__divdf3+0x1be>
    3bce:	00080737          	lui	a4,0x80
    3bd2:	8f61                	and	a4,a4,s0
    3bd4:	7ff00513          	li	a0,2047
    3bd8:	ef19                	bnez	a4,3bf6 <__divdf3+0x1ca>
    3bda:	470d                	li	a4,3
    3bdc:	44c1                	li	s1,16
    3bde:	bf99                	j	3b34 <__divdf3+0x108>
    3be0:	4401                	li	s0,0
    3be2:	4781                	li	a5,0
    3be4:	4501                	li	a0,0
    3be6:	4705                	li	a4,1
    3be8:	b7b1                	j	3b34 <__divdf3+0x108>
    3bea:	4401                	li	s0,0
    3bec:	4781                	li	a5,0
    3bee:	7ff00513          	li	a0,2047
    3bf2:	4709                	li	a4,2
    3bf4:	b781                	j	3b34 <__divdf3+0x108>
    3bf6:	470d                	li	a4,3
    3bf8:	bf35                	j	3b34 <__divdf3+0x108>
    3bfa:	01746663          	bltu	s0,s7,3c06 <__divdf3+0x1da>
    3bfe:	268b9463          	bne	s7,s0,3e66 <__divdf3+0x43a>
    3c02:	26f9e263          	bltu	s3,a5,3e66 <__divdf3+0x43a>
    3c06:	01fb9513          	slli	a0,s7,0x1f
    3c0a:	0019d713          	srli	a4,s3,0x1
    3c0e:	01f99693          	slli	a3,s3,0x1f
    3c12:	001bdb93          	srli	s7,s7,0x1
    3c16:	00e569b3          	or	s3,a0,a4
    3c1a:	00841513          	slli	a0,s0,0x8
    3c1e:	0187d813          	srli	a6,a5,0x18
    3c22:	00a86833          	or	a6,a6,a0
    3c26:	8141                	srli	a0,a0,0x10
    3c28:	02abde33          	divu	t3,s7,a0
    3c2c:	01081f13          	slli	t5,a6,0x10
    3c30:	010f5f13          	srli	t5,t5,0x10
    3c34:	00879893          	slli	a7,a5,0x8
    3c38:	0109d793          	srli	a5,s3,0x10
    3c3c:	02abfbb3          	remu	s7,s7,a0
    3c40:	8372                	mv	t1,t3
    3c42:	03cf0733          	mul	a4,t5,t3
    3c46:	0bc2                	slli	s7,s7,0x10
    3c48:	0177e7b3          	or	a5,a5,s7
    3c4c:	00e7fc63          	bgeu	a5,a4,3c64 <__divdf3+0x238>
    3c50:	97c2                	add	a5,a5,a6
    3c52:	fffe0313          	addi	t1,t3,-1
    3c56:	0107e763          	bltu	a5,a6,3c64 <__divdf3+0x238>
    3c5a:	00e7f563          	bgeu	a5,a4,3c64 <__divdf3+0x238>
    3c5e:	ffee0313          	addi	t1,t3,-2
    3c62:	97c2                	add	a5,a5,a6
    3c64:	8f99                	sub	a5,a5,a4
    3c66:	02a7deb3          	divu	t4,a5,a0
    3c6a:	01099713          	slli	a4,s3,0x10
    3c6e:	8341                	srli	a4,a4,0x10
    3c70:	02a7f7b3          	remu	a5,a5,a0
    3c74:	89f6                	mv	s3,t4
    3c76:	03df0e33          	mul	t3,t5,t4
    3c7a:	07c2                	slli	a5,a5,0x10
    3c7c:	8f5d                	or	a4,a4,a5
    3c7e:	01c77c63          	bgeu	a4,t3,3c96 <__divdf3+0x26a>
    3c82:	9742                	add	a4,a4,a6
    3c84:	fffe8993          	addi	s3,t4,-1
    3c88:	01076763          	bltu	a4,a6,3c96 <__divdf3+0x26a>
    3c8c:	01c77563          	bgeu	a4,t3,3c96 <__divdf3+0x26a>
    3c90:	ffee8993          	addi	s3,t4,-2
    3c94:	9742                	add	a4,a4,a6
    3c96:	0342                	slli	t1,t1,0x10
    3c98:	013369b3          	or	s3,t1,s3
    3c9c:	6341                	lui	t1,0x10
    3c9e:	fff30e93          	addi	t4,t1,-1 # ffff <_global_impure_ptr+0x9ad7>
    3ca2:	0109d293          	srli	t0,s3,0x10
    3ca6:	0108df93          	srli	t6,a7,0x10
    3caa:	41c70733          	sub	a4,a4,t3
    3cae:	01d9fe33          	and	t3,s3,t4
    3cb2:	01d8feb3          	and	t4,a7,t4
    3cb6:	03de07b3          	mul	a5,t3,t4
    3cba:	03d28433          	mul	s0,t0,t4
    3cbe:	03cf8e33          	mul	t3,t6,t3
    3cc2:	008e03b3          	add	t2,t3,s0
    3cc6:	0107de13          	srli	t3,a5,0x10
    3cca:	9e1e                	add	t3,t3,t2
    3ccc:	03f282b3          	mul	t0,t0,t6
    3cd0:	008e7363          	bgeu	t3,s0,3cd6 <__divdf3+0x2aa>
    3cd4:	929a                	add	t0,t0,t1
    3cd6:	63c1                	lui	t2,0x10
    3cd8:	010e5313          	srli	t1,t3,0x10
    3cdc:	13fd                	addi	t2,t2,-1
    3cde:	929a                	add	t0,t0,t1
    3ce0:	007e7333          	and	t1,t3,t2
    3ce4:	0342                	slli	t1,t1,0x10
    3ce6:	0077f7b3          	and	a5,a5,t2
    3cea:	933e                	add	t1,t1,a5
    3cec:	00576763          	bltu	a4,t0,3cfa <__divdf3+0x2ce>
    3cf0:	844e                	mv	s0,s3
    3cf2:	02571e63          	bne	a4,t0,3d2e <__divdf3+0x302>
    3cf6:	0266fc63          	bgeu	a3,t1,3d2e <__divdf3+0x302>
    3cfa:	96c6                	add	a3,a3,a7
    3cfc:	0116b7b3          	sltu	a5,a3,a7
    3d00:	97c2                	add	a5,a5,a6
    3d02:	973e                	add	a4,a4,a5
    3d04:	fff98413          	addi	s0,s3,-1
    3d08:	00e86663          	bltu	a6,a4,3d14 <__divdf3+0x2e8>
    3d0c:	02e81163          	bne	a6,a4,3d2e <__divdf3+0x302>
    3d10:	0116ef63          	bltu	a3,a7,3d2e <__divdf3+0x302>
    3d14:	00576663          	bltu	a4,t0,3d20 <__divdf3+0x2f4>
    3d18:	00e29b63          	bne	t0,a4,3d2e <__divdf3+0x302>
    3d1c:	0066f963          	bgeu	a3,t1,3d2e <__divdf3+0x302>
    3d20:	96c6                	add	a3,a3,a7
    3d22:	0116b7b3          	sltu	a5,a3,a7
    3d26:	97c2                	add	a5,a5,a6
    3d28:	ffe98413          	addi	s0,s3,-2
    3d2c:	973e                	add	a4,a4,a5
    3d2e:	40668333          	sub	t1,a3,t1
    3d32:	40570733          	sub	a4,a4,t0
    3d36:	0066b6b3          	sltu	a3,a3,t1
    3d3a:	8f15                	sub	a4,a4,a3
    3d3c:	57fd                	li	a5,-1
    3d3e:	0ee80763          	beq	a6,a4,3e2c <__divdf3+0x400>
    3d42:	02a752b3          	divu	t0,a4,a0
    3d46:	01035793          	srli	a5,t1,0x10
    3d4a:	02a77733          	remu	a4,a4,a0
    3d4e:	8696                	mv	a3,t0
    3d50:	025f0e33          	mul	t3,t5,t0
    3d54:	0742                	slli	a4,a4,0x10
    3d56:	8f5d                	or	a4,a4,a5
    3d58:	01c77c63          	bgeu	a4,t3,3d70 <__divdf3+0x344>
    3d5c:	9742                	add	a4,a4,a6
    3d5e:	fff28693          	addi	a3,t0,-1
    3d62:	01076763          	bltu	a4,a6,3d70 <__divdf3+0x344>
    3d66:	01c77563          	bgeu	a4,t3,3d70 <__divdf3+0x344>
    3d6a:	ffe28693          	addi	a3,t0,-2
    3d6e:	9742                	add	a4,a4,a6
    3d70:	41c70733          	sub	a4,a4,t3
    3d74:	02a75e33          	divu	t3,a4,a0
    3d78:	01031793          	slli	a5,t1,0x10
    3d7c:	83c1                	srli	a5,a5,0x10
    3d7e:	02a77733          	remu	a4,a4,a0
    3d82:	03cf0f33          	mul	t5,t5,t3
    3d86:	0742                	slli	a4,a4,0x10
    3d88:	8f5d                	or	a4,a4,a5
    3d8a:	87f2                	mv	a5,t3
    3d8c:	01e77c63          	bgeu	a4,t5,3da4 <__divdf3+0x378>
    3d90:	9742                	add	a4,a4,a6
    3d92:	fffe0793          	addi	a5,t3,-1
    3d96:	01076763          	bltu	a4,a6,3da4 <__divdf3+0x378>
    3d9a:	01e77563          	bgeu	a4,t5,3da4 <__divdf3+0x378>
    3d9e:	ffee0793          	addi	a5,t3,-2
    3da2:	9742                	add	a4,a4,a6
    3da4:	06c2                	slli	a3,a3,0x10
    3da6:	8edd                	or	a3,a3,a5
    3da8:	01069793          	slli	a5,a3,0x10
    3dac:	83c1                	srli	a5,a5,0x10
    3dae:	0106d313          	srli	t1,a3,0x10
    3db2:	026f8e33          	mul	t3,t6,t1
    3db6:	41e70733          	sub	a4,a4,t5
    3dba:	02ff8fb3          	mul	t6,t6,a5
    3dbe:	02fe8f33          	mul	t5,t4,a5
    3dc2:	03d30eb3          	mul	t4,t1,t4
    3dc6:	010f5793          	srli	a5,t5,0x10
    3dca:	9ff6                	add	t6,t6,t4
    3dcc:	97fe                	add	a5,a5,t6
    3dce:	01d7f463          	bgeu	a5,t4,3dd6 <__divdf3+0x3aa>
    3dd2:	6541                	lui	a0,0x10
    3dd4:	9e2a                	add	t3,t3,a0
    3dd6:	0107d313          	srli	t1,a5,0x10
    3dda:	9372                	add	t1,t1,t3
    3ddc:	6e41                	lui	t3,0x10
    3dde:	1e7d                	addi	t3,t3,-1
    3de0:	01c7f533          	and	a0,a5,t3
    3de4:	0542                	slli	a0,a0,0x10
    3de6:	01cf7f33          	and	t5,t5,t3
    3dea:	957a                	add	a0,a0,t5
    3dec:	00676663          	bltu	a4,t1,3df8 <__divdf3+0x3cc>
    3df0:	2c671263          	bne	a4,t1,40b4 <__divdf3+0x688>
    3df4:	87b6                	mv	a5,a3
    3df6:	c91d                	beqz	a0,3e2c <__divdf3+0x400>
    3df8:	9742                	add	a4,a4,a6
    3dfa:	fff68793          	addi	a5,a3,-1 # 7fefffff <__kernel_stack+0x5fe40007>
    3dfe:	03076163          	bltu	a4,a6,3e20 <__divdf3+0x3f4>
    3e02:	00676663          	bltu	a4,t1,3e0e <__divdf3+0x3e2>
    3e06:	2a671663          	bne	a4,t1,40b2 <__divdf3+0x686>
    3e0a:	00a8fd63          	bgeu	a7,a0,3e24 <__divdf3+0x3f8>
    3e0e:	ffe68793          	addi	a5,a3,-2
    3e12:	00189693          	slli	a3,a7,0x1
    3e16:	0116b8b3          	sltu	a7,a3,a7
    3e1a:	9846                	add	a6,a6,a7
    3e1c:	9742                	add	a4,a4,a6
    3e1e:	88b6                	mv	a7,a3
    3e20:	00671463          	bne	a4,t1,3e28 <__divdf3+0x3fc>
    3e24:	00a88463          	beq	a7,a0,3e2c <__divdf3+0x400>
    3e28:	0017e793          	ori	a5,a5,1
    3e2c:	3ff58813          	addi	a6,a1,1023
    3e30:	11005863          	blez	a6,3f40 <__divdf3+0x514>
    3e34:	0077f713          	andi	a4,a5,7
    3e38:	cf25                	beqz	a4,3eb0 <__divdf3+0x484>
    3e3a:	4709                	li	a4,2
    3e3c:	0014e493          	ori	s1,s1,1
    3e40:	06e90763          	beq	s2,a4,3eae <__divdf3+0x482>
    3e44:	470d                	li	a4,3
    3e46:	06e90063          	beq	s2,a4,3ea6 <__divdf3+0x47a>
    3e4a:	06091363          	bnez	s2,3eb0 <__divdf3+0x484>
    3e4e:	00f7f713          	andi	a4,a5,15
    3e52:	4691                	li	a3,4
    3e54:	04d70e63          	beq	a4,a3,3eb0 <__divdf3+0x484>
    3e58:	00478713          	addi	a4,a5,4 # 80004 <_global_impure_ptr+0x79adc>
    3e5c:	00f737b3          	sltu	a5,a4,a5
    3e60:	943e                	add	s0,s0,a5
    3e62:	87ba                	mv	a5,a4
    3e64:	a0b1                	j	3eb0 <__divdf3+0x484>
    3e66:	15fd                	addi	a1,a1,-1
    3e68:	4681                	li	a3,0
    3e6a:	bb45                	j	3c1a <__divdf3+0x1ee>
    3e6c:	8652                	mv	a2,s4
    3e6e:	845e                	mv	s0,s7
    3e70:	87ce                	mv	a5,s3
    3e72:	8762                	mv	a4,s8
    3e74:	468d                	li	a3,3
    3e76:	22d70763          	beq	a4,a3,40a4 <__divdf3+0x678>
    3e7a:	4685                	li	a3,1
    3e7c:	22d70163          	beq	a4,a3,409e <__divdf3+0x672>
    3e80:	4689                	li	a3,2
    3e82:	fad715e3          	bne	a4,a3,3e2c <__divdf3+0x400>
    3e86:	a029                	j	3e90 <__divdf3+0x464>
    3e88:	8656                	mv	a2,s5
    3e8a:	b7ed                	j	3e74 <__divdf3+0x448>
    3e8c:	0084e493          	ori	s1,s1,8
    3e90:	4501                	li	a0,0
    3e92:	4781                	li	a5,0
    3e94:	7ff00713          	li	a4,2047
    3e98:	a091                	j	3edc <__divdf3+0x4b0>
    3e9a:	00080437          	lui	s0,0x80
    3e9e:	4781                	li	a5,0
    3ea0:	4601                	li	a2,0
    3ea2:	470d                	li	a4,3
    3ea4:	bfc1                	j	3e74 <__divdf3+0x448>
    3ea6:	e609                	bnez	a2,3eb0 <__divdf3+0x484>
    3ea8:	00878713          	addi	a4,a5,8
    3eac:	bf45                	j	3e5c <__divdf3+0x430>
    3eae:	fe6d                	bnez	a2,3ea8 <__divdf3+0x47c>
    3eb0:	01000737          	lui	a4,0x1000
    3eb4:	8f61                	and	a4,a4,s0
    3eb6:	c719                	beqz	a4,3ec4 <__divdf3+0x498>
    3eb8:	ff000737          	lui	a4,0xff000
    3ebc:	177d                	addi	a4,a4,-1
    3ebe:	8c79                	and	s0,s0,a4
    3ec0:	40058813          	addi	a6,a1,1024
    3ec4:	7fe00713          	li	a4,2046
    3ec8:	05074663          	blt	a4,a6,3f14 <__divdf3+0x4e8>
    3ecc:	0037d713          	srli	a4,a5,0x3
    3ed0:	01d41793          	slli	a5,s0,0x1d
    3ed4:	8fd9                	or	a5,a5,a4
    3ed6:	00345513          	srli	a0,s0,0x3
    3eda:	8742                	mv	a4,a6
    3edc:	0752                	slli	a4,a4,0x14
    3ede:	7ff006b7          	lui	a3,0x7ff00
    3ee2:	0532                	slli	a0,a0,0xc
    3ee4:	8f75                	and	a4,a4,a3
    3ee6:	8131                	srli	a0,a0,0xc
    3ee8:	8d59                	or	a0,a0,a4
    3eea:	067e                	slli	a2,a2,0x1f
    3eec:	00c56733          	or	a4,a0,a2
    3ef0:	85ba                	mv	a1,a4
    3ef2:	853e                	mv	a0,a5
    3ef4:	c099                	beqz	s1,3efa <__divdf3+0x4ce>
    3ef6:	0014a073          	csrs	fflags,s1
    3efa:	50b2                	lw	ra,44(sp)
    3efc:	5422                	lw	s0,40(sp)
    3efe:	5492                	lw	s1,36(sp)
    3f00:	5902                	lw	s2,32(sp)
    3f02:	49f2                	lw	s3,28(sp)
    3f04:	4a62                	lw	s4,24(sp)
    3f06:	4ad2                	lw	s5,20(sp)
    3f08:	4b42                	lw	s6,16(sp)
    3f0a:	4bb2                	lw	s7,12(sp)
    3f0c:	4c22                	lw	s8,8(sp)
    3f0e:	4c92                	lw	s9,4(sp)
    3f10:	6145                	addi	sp,sp,48
    3f12:	8082                	ret
    3f14:	4789                	li	a5,2
    3f16:	02f90363          	beq	s2,a5,3f3c <__divdf3+0x510>
    3f1a:	478d                	li	a5,3
    3f1c:	00f90863          	beq	s2,a5,3f2c <__divdf3+0x500>
    3f20:	00091763          	bnez	s2,3f2e <__divdf3+0x502>
    3f24:	4781                	li	a5,0
    3f26:	7ff00713          	li	a4,2047
    3f2a:	a029                	j	3f34 <__divdf3+0x508>
    3f2c:	de65                	beqz	a2,3f24 <__divdf3+0x4f8>
    3f2e:	57fd                	li	a5,-1
    3f30:	7fe00713          	li	a4,2046
    3f34:	0054e493          	ori	s1,s1,5
    3f38:	853e                	mv	a0,a5
    3f3a:	b74d                	j	3edc <__divdf3+0x4b0>
    3f3c:	f665                	bnez	a2,3f24 <__divdf3+0x4f8>
    3f3e:	bfc5                	j	3f2e <__divdf3+0x502>
    3f40:	4705                	li	a4,1
    3f42:	04081463          	bnez	a6,3f8a <__divdf3+0x55e>
    3f46:	0077f693          	andi	a3,a5,7
    3f4a:	8722                	mv	a4,s0
    3f4c:	ca9d                	beqz	a3,3f82 <__divdf3+0x556>
    3f4e:	4689                	li	a3,2
    3f50:	0014e493          	ori	s1,s1,1
    3f54:	02d90663          	beq	s2,a3,3f80 <__divdf3+0x554>
    3f58:	468d                	li	a3,3
    3f5a:	00d90f63          	beq	s2,a3,3f78 <__divdf3+0x54c>
    3f5e:	02091263          	bnez	s2,3f82 <__divdf3+0x556>
    3f62:	00f7f693          	andi	a3,a5,15
    3f66:	4511                	li	a0,4
    3f68:	00a68d63          	beq	a3,a0,3f82 <__divdf3+0x556>
    3f6c:	ffc7b713          	sltiu	a4,a5,-4
    3f70:	00174713          	xori	a4,a4,1
    3f74:	9722                	add	a4,a4,s0
    3f76:	a031                	j	3f82 <__divdf3+0x556>
    3f78:	e609                	bnez	a2,3f82 <__divdf3+0x556>
    3f7a:	ff87b713          	sltiu	a4,a5,-8
    3f7e:	bfcd                	j	3f70 <__divdf3+0x544>
    3f80:	fe6d                	bnez	a2,3f7a <__divdf3+0x54e>
    3f82:	8361                	srli	a4,a4,0x18
    3f84:	00174713          	xori	a4,a4,1
    3f88:	8b05                	andi	a4,a4,1
    3f8a:	4505                	li	a0,1
    3f8c:	41050533          	sub	a0,a0,a6
    3f90:	03800693          	li	a3,56
    3f94:	0ca6c263          	blt	a3,a0,4058 <__divdf3+0x62c>
    3f98:	46fd                	li	a3,31
    3f9a:	04a6ca63          	blt	a3,a0,3fee <__divdf3+0x5c2>
    3f9e:	41e58593          	addi	a1,a1,1054
    3fa2:	00a7d833          	srl	a6,a5,a0
    3fa6:	00b416b3          	sll	a3,s0,a1
    3faa:	00b797b3          	sll	a5,a5,a1
    3fae:	0106e6b3          	or	a3,a3,a6
    3fb2:	00f037b3          	snez	a5,a5
    3fb6:	8fd5                	or	a5,a5,a3
    3fb8:	00a45533          	srl	a0,s0,a0
    3fbc:	0077f693          	andi	a3,a5,7
    3fc0:	c2ad                	beqz	a3,4022 <__divdf3+0x5f6>
    3fc2:	4689                	li	a3,2
    3fc4:	0014e493          	ori	s1,s1,1
    3fc8:	04d90c63          	beq	s2,a3,4020 <__divdf3+0x5f4>
    3fcc:	468d                	li	a3,3
    3fce:	04d90563          	beq	s2,a3,4018 <__divdf3+0x5ec>
    3fd2:	04091863          	bnez	s2,4022 <__divdf3+0x5f6>
    3fd6:	00f7f693          	andi	a3,a5,15
    3fda:	4591                	li	a1,4
    3fdc:	04b68363          	beq	a3,a1,4022 <__divdf3+0x5f6>
    3fe0:	00478693          	addi	a3,a5,4
    3fe4:	00f6b7b3          	sltu	a5,a3,a5
    3fe8:	953e                	add	a0,a0,a5
    3fea:	87b6                	mv	a5,a3
    3fec:	a81d                	j	4022 <__divdf3+0x5f6>
    3fee:	5685                	li	a3,-31
    3ff0:	410686b3          	sub	a3,a3,a6
    3ff4:	02000893          	li	a7,32
    3ff8:	00d456b3          	srl	a3,s0,a3
    3ffc:	4801                	li	a6,0
    3ffe:	01150663          	beq	a0,a7,400a <__divdf3+0x5de>
    4002:	43e58593          	addi	a1,a1,1086
    4006:	00b41833          	sll	a6,s0,a1
    400a:	00f867b3          	or	a5,a6,a5
    400e:	00f037b3          	snez	a5,a5
    4012:	8fd5                	or	a5,a5,a3
    4014:	4501                	li	a0,0
    4016:	b75d                	j	3fbc <__divdf3+0x590>
    4018:	e609                	bnez	a2,4022 <__divdf3+0x5f6>
    401a:	00878693          	addi	a3,a5,8
    401e:	b7d9                	j	3fe4 <__divdf3+0x5b8>
    4020:	fe6d                	bnez	a2,401a <__divdf3+0x5ee>
    4022:	008006b7          	lui	a3,0x800
    4026:	8ee9                	and	a3,a3,a0
    4028:	ca81                	beqz	a3,4038 <__divdf3+0x60c>
    402a:	0014e493          	ori	s1,s1,1
    402e:	4501                	li	a0,0
    4030:	4781                	li	a5,0
    4032:	e305                	bnez	a4,4052 <__divdf3+0x626>
    4034:	4705                	li	a4,1
    4036:	b55d                	j	3edc <__divdf3+0x4b0>
    4038:	0037d693          	srli	a3,a5,0x3
    403c:	01d51793          	slli	a5,a0,0x1d
    4040:	8fd5                	or	a5,a5,a3
    4042:	810d                	srli	a0,a0,0x3
    4044:	e8070ce3          	beqz	a4,3edc <__divdf3+0x4b0>
    4048:	0014f713          	andi	a4,s1,1
    404c:	e80708e3          	beqz	a4,3edc <__divdf3+0x4b0>
    4050:	4701                	li	a4,0
    4052:	0024e493          	ori	s1,s1,2
    4056:	b559                	j	3edc <__divdf3+0x4b0>
    4058:	8fc1                	or	a5,a5,s0
    405a:	cf91                	beqz	a5,4076 <__divdf3+0x64a>
    405c:	4789                	li	a5,2
    405e:	0014e493          	ori	s1,s1,1
    4062:	02f90363          	beq	s2,a5,4088 <__divdf3+0x65c>
    4066:	478d                	li	a5,3
    4068:	00f90c63          	beq	s2,a5,4080 <__divdf3+0x654>
    406c:	4785                	li	a5,1
    406e:	00091363          	bnez	s2,4074 <__divdf3+0x648>
    4072:	4795                	li	a5,5
    4074:	838d                	srli	a5,a5,0x3
    4076:	0024e493          	ori	s1,s1,2
    407a:	4501                	li	a0,0
    407c:	4701                	li	a4,0
    407e:	bdb9                	j	3edc <__divdf3+0x4b0>
    4080:	47a5                	li	a5,9
    4082:	da6d                	beqz	a2,4074 <__divdf3+0x648>
    4084:	4785                	li	a5,1
    4086:	b7fd                	j	4074 <__divdf3+0x648>
    4088:	47a5                	li	a5,9
    408a:	f66d                	bnez	a2,4074 <__divdf3+0x648>
    408c:	bfe5                	j	4084 <__divdf3+0x658>
    408e:	00080537          	lui	a0,0x80
    4092:	4781                	li	a5,0
    4094:	7ff00713          	li	a4,2047
    4098:	4601                	li	a2,0
    409a:	44c1                	li	s1,16
    409c:	b581                	j	3edc <__divdf3+0x4b0>
    409e:	4501                	li	a0,0
    40a0:	4781                	li	a5,0
    40a2:	bfe9                	j	407c <__divdf3+0x650>
    40a4:	00080537          	lui	a0,0x80
    40a8:	4781                	li	a5,0
    40aa:	7ff00713          	li	a4,2047
    40ae:	4601                	li	a2,0
    40b0:	b535                	j	3edc <__divdf3+0x4b0>
    40b2:	86be                	mv	a3,a5
    40b4:	87b6                	mv	a5,a3
    40b6:	bb8d                	j	3e28 <__divdf3+0x3fc>

000040b8 <__eqdf2>:
    40b8:	882a                	mv	a6,a0
    40ba:	002027f3          	frrm	a5
    40be:	001007b7          	lui	a5,0x100
    40c2:	0145d893          	srli	a7,a1,0x14
    40c6:	17fd                	addi	a5,a5,-1
    40c8:	0146d313          	srli	t1,a3,0x14
    40cc:	8e2a                	mv	t3,a0
    40ce:	7ff8f893          	andi	a7,a7,2047
    40d2:	7ff00513          	li	a0,2047
    40d6:	00b7f733          	and	a4,a5,a1
    40da:	8eb2                	mv	t4,a2
    40dc:	8ff5                	and	a5,a5,a3
    40de:	81fd                	srli	a1,a1,0x1f
    40e0:	7ff37313          	andi	t1,t1,2047
    40e4:	82fd                	srli	a3,a3,0x1f
    40e6:	00a89863          	bne	a7,a0,40f6 <__eqdf2+0x3e>
    40ea:	01076533          	or	a0,a4,a6
    40ee:	e531                	bnez	a0,413a <__eqdf2+0x82>
    40f0:	07131463          	bne	t1,a7,4158 <__eqdf2+0xa0>
    40f4:	a019                	j	40fa <__eqdf2+0x42>
    40f6:	00a31563          	bne	t1,a0,4100 <__eqdf2+0x48>
    40fa:	00c7e533          	or	a0,a5,a2
    40fe:	e515                	bnez	a0,412a <__eqdf2+0x72>
    4100:	4505                	li	a0,1
    4102:	04689c63          	bne	a7,t1,415a <__eqdf2+0xa2>
    4106:	04f71a63          	bne	a4,a5,415a <__eqdf2+0xa2>
    410a:	05de1863          	bne	t3,t4,415a <__eqdf2+0xa2>
    410e:	00d58c63          	beq	a1,a3,4126 <__eqdf2+0x6e>
    4112:	04089463          	bnez	a7,415a <__eqdf2+0xa2>
    4116:	01076733          	or	a4,a4,a6
    411a:	00e03533          	snez	a0,a4
    411e:	8082                	ret
    4120:	00186073          	csrsi	fflags,16
    4124:	a815                	j	4158 <__eqdf2+0xa0>
    4126:	4501                	li	a0,0
    4128:	8082                	ret
    412a:	7ff00693          	li	a3,2047
    412e:	02d89163          	bne	a7,a3,4150 <__eqdf2+0x98>
    4132:	01076833          	or	a6,a4,a6
    4136:	00080d63          	beqz	a6,4150 <__eqdf2+0x98>
    413a:	000806b7          	lui	a3,0x80
    413e:	8f75                	and	a4,a4,a3
    4140:	d365                	beqz	a4,4120 <__eqdf2+0x68>
    4142:	7ff00713          	li	a4,2047
    4146:	4505                	li	a0,1
    4148:	00e31963          	bne	t1,a4,415a <__eqdf2+0xa2>
    414c:	8e5d                	or	a2,a2,a5
    414e:	c611                	beqz	a2,415a <__eqdf2+0xa2>
    4150:	00080737          	lui	a4,0x80
    4154:	8ff9                	and	a5,a5,a4
    4156:	d7e9                	beqz	a5,4120 <__eqdf2+0x68>
    4158:	4505                	li	a0,1
    415a:	8082                	ret

0000415c <__gedf2>:
    415c:	87aa                	mv	a5,a0
    415e:	00202773          	frrm	a4
    4162:	00100737          	lui	a4,0x100
    4166:	177d                	addi	a4,a4,-1
    4168:	0145d813          	srli	a6,a1,0x14
    416c:	00b778b3          	and	a7,a4,a1
    4170:	832a                	mv	t1,a0
    4172:	7ff87813          	andi	a6,a6,2047
    4176:	01f5d513          	srli	a0,a1,0x1f
    417a:	7ff00e93          	li	t4,2047
    417e:	0146d593          	srli	a1,a3,0x14
    4182:	8f75                	and	a4,a4,a3
    4184:	8e32                	mv	t3,a2
    4186:	7ff5f593          	andi	a1,a1,2047
    418a:	82fd                	srli	a3,a3,0x1f
    418c:	01d81a63          	bne	a6,t4,41a0 <__gedf2+0x44>
    4190:	00f8eeb3          	or	t4,a7,a5
    4194:	060e8963          	beqz	t4,4206 <__gedf2+0xaa>
    4198:	00186073          	csrsi	fflags,16
    419c:	5579                	li	a0,-2
    419e:	8082                	ret
    41a0:	01d59663          	bne	a1,t4,41ac <__gedf2+0x50>
    41a4:	00c76eb3          	or	t4,a4,a2
    41a8:	fe0e98e3          	bnez	t4,4198 <__gedf2+0x3c>
    41ac:	04081f63          	bnez	a6,420a <__gedf2+0xae>
    41b0:	00f8e7b3          	or	a5,a7,a5
    41b4:	0017b793          	seqz	a5,a5
    41b8:	e199                	bnez	a1,41be <__gedf2+0x62>
    41ba:	8e59                	or	a2,a2,a4
    41bc:	c221                	beqz	a2,41fc <__gedf2+0xa0>
    41be:	00079a63          	bnez	a5,41d2 <__gedf2+0x76>
    41c2:	00d51463          	bne	a0,a3,41ca <__gedf2+0x6e>
    41c6:	0105da63          	bge	a1,a6,41da <__gedf2+0x7e>
    41ca:	02050763          	beqz	a0,41f8 <__gedf2+0x9c>
    41ce:	557d                	li	a0,-1
    41d0:	8082                	ret
    41d2:	557d                	li	a0,-1
    41d4:	c699                	beqz	a3,41e2 <__gedf2+0x86>
    41d6:	8536                	mv	a0,a3
    41d8:	8082                	ret
    41da:	00b85563          	bge	a6,a1,41e4 <__gedf2+0x88>
    41de:	fe0508e3          	beqz	a0,41ce <__gedf2+0x72>
    41e2:	8082                	ret
    41e4:	ff1763e3          	bltu	a4,a7,41ca <__gedf2+0x6e>
    41e8:	00e89c63          	bne	a7,a4,4200 <__gedf2+0xa4>
    41ec:	fc6e6fe3          	bltu	t3,t1,41ca <__gedf2+0x6e>
    41f0:	ffc367e3          	bltu	t1,t3,41de <__gedf2+0x82>
    41f4:	4501                	li	a0,0
    41f6:	8082                	ret
    41f8:	4505                	li	a0,1
    41fa:	8082                	ret
    41fc:	ffe5                	bnez	a5,41f4 <__gedf2+0x98>
    41fe:	b7f1                	j	41ca <__gedf2+0x6e>
    4200:	fce8efe3          	bltu	a7,a4,41de <__gedf2+0x82>
    4204:	bfc5                	j	41f4 <__gedf2+0x98>
    4206:	f9058fe3          	beq	a1,a6,41a4 <__gedf2+0x48>
    420a:	fa059ce3          	bnez	a1,41c2 <__gedf2+0x66>
    420e:	4781                	li	a5,0
    4210:	b76d                	j	41ba <__gedf2+0x5e>

00004212 <__ledf2>:
    4212:	87aa                	mv	a5,a0
    4214:	00202773          	frrm	a4
    4218:	00100737          	lui	a4,0x100
    421c:	177d                	addi	a4,a4,-1
    421e:	0145d813          	srli	a6,a1,0x14
    4222:	00b778b3          	and	a7,a4,a1
    4226:	832a                	mv	t1,a0
    4228:	7ff87813          	andi	a6,a6,2047
    422c:	01f5d513          	srli	a0,a1,0x1f
    4230:	7ff00e93          	li	t4,2047
    4234:	0146d593          	srli	a1,a3,0x14
    4238:	8f75                	and	a4,a4,a3
    423a:	8e32                	mv	t3,a2
    423c:	7ff5f593          	andi	a1,a1,2047
    4240:	82fd                	srli	a3,a3,0x1f
    4242:	01d81a63          	bne	a6,t4,4256 <__ledf2+0x44>
    4246:	00f8eeb3          	or	t4,a7,a5
    424a:	060e8963          	beqz	t4,42bc <__ledf2+0xaa>
    424e:	00186073          	csrsi	fflags,16
    4252:	4509                	li	a0,2
    4254:	8082                	ret
    4256:	01d59663          	bne	a1,t4,4262 <__ledf2+0x50>
    425a:	00c76eb3          	or	t4,a4,a2
    425e:	fe0e98e3          	bnez	t4,424e <__ledf2+0x3c>
    4262:	04081f63          	bnez	a6,42c0 <__ledf2+0xae>
    4266:	00f8e7b3          	or	a5,a7,a5
    426a:	0017b793          	seqz	a5,a5
    426e:	e199                	bnez	a1,4274 <__ledf2+0x62>
    4270:	8e59                	or	a2,a2,a4
    4272:	c221                	beqz	a2,42b2 <__ledf2+0xa0>
    4274:	00079a63          	bnez	a5,4288 <__ledf2+0x76>
    4278:	00d51463          	bne	a0,a3,4280 <__ledf2+0x6e>
    427c:	0105da63          	bge	a1,a6,4290 <__ledf2+0x7e>
    4280:	02050763          	beqz	a0,42ae <__ledf2+0x9c>
    4284:	557d                	li	a0,-1
    4286:	8082                	ret
    4288:	557d                	li	a0,-1
    428a:	c699                	beqz	a3,4298 <__ledf2+0x86>
    428c:	8536                	mv	a0,a3
    428e:	8082                	ret
    4290:	00b85563          	bge	a6,a1,429a <__ledf2+0x88>
    4294:	fe0508e3          	beqz	a0,4284 <__ledf2+0x72>
    4298:	8082                	ret
    429a:	ff1763e3          	bltu	a4,a7,4280 <__ledf2+0x6e>
    429e:	00e89c63          	bne	a7,a4,42b6 <__ledf2+0xa4>
    42a2:	fc6e6fe3          	bltu	t3,t1,4280 <__ledf2+0x6e>
    42a6:	ffc367e3          	bltu	t1,t3,4294 <__ledf2+0x82>
    42aa:	4501                	li	a0,0
    42ac:	8082                	ret
    42ae:	4505                	li	a0,1
    42b0:	8082                	ret
    42b2:	ffe5                	bnez	a5,42aa <__ledf2+0x98>
    42b4:	b7f1                	j	4280 <__ledf2+0x6e>
    42b6:	fce8efe3          	bltu	a7,a4,4294 <__ledf2+0x82>
    42ba:	bfc5                	j	42aa <__ledf2+0x98>
    42bc:	f9058fe3          	beq	a1,a6,425a <__ledf2+0x48>
    42c0:	fa059ce3          	bnez	a1,4278 <__ledf2+0x66>
    42c4:	4781                	li	a5,0
    42c6:	b76d                	j	4270 <__ledf2+0x5e>

000042c8 <__muldf3>:
    42c8:	7179                	addi	sp,sp,-48
    42ca:	d422                	sw	s0,40(sp)
    42cc:	ca56                	sw	s5,20(sp)
    42ce:	c266                	sw	s9,4(sp)
    42d0:	d606                	sw	ra,44(sp)
    42d2:	d226                	sw	s1,36(sp)
    42d4:	d04a                	sw	s2,32(sp)
    42d6:	ce4e                	sw	s3,28(sp)
    42d8:	cc52                	sw	s4,24(sp)
    42da:	c85a                	sw	s6,16(sp)
    42dc:	c65e                	sw	s7,12(sp)
    42de:	c462                	sw	s8,8(sp)
    42e0:	842a                	mv	s0,a0
    42e2:	8cb2                	mv	s9,a2
    42e4:	8ab6                	mv	s5,a3
    42e6:	00202973          	frrm	s2
    42ea:	0145db93          	srli	s7,a1,0x14
    42ee:	00c59993          	slli	s3,a1,0xc
    42f2:	7ffbfb93          	andi	s7,s7,2047
    42f6:	00c9d993          	srli	s3,s3,0xc
    42fa:	01f5db13          	srli	s6,a1,0x1f
    42fe:	020b8663          	beqz	s7,432a <__muldf3+0x62>
    4302:	7ff00793          	li	a5,2047
    4306:	06fb8b63          	beq	s7,a5,437c <__muldf3+0xb4>
    430a:	01d55793          	srli	a5,a0,0x1d
    430e:	098e                	slli	s3,s3,0x3
    4310:	0137e9b3          	or	s3,a5,s3
    4314:	008007b7          	lui	a5,0x800
    4318:	00f9e9b3          	or	s3,s3,a5
    431c:	00351a13          	slli	s4,a0,0x3
    4320:	c01b8b93          	addi	s7,s7,-1023
    4324:	4c01                	li	s8,0
    4326:	4481                	li	s1,0
    4328:	a0bd                	j	4396 <__muldf3+0xce>
    432a:	00a9e7b3          	or	a5,s3,a0
    432e:	c7e1                	beqz	a5,43f6 <__muldf3+0x12e>
    4330:	02098b63          	beqz	s3,4366 <__muldf3+0x9e>
    4334:	854e                	mv	a0,s3
    4336:	010010ef          	jal	ra,5346 <__clzsi2>
    433a:	ff550713          	addi	a4,a0,-11 # 7fff5 <_global_impure_ptr+0x79acd>
    433e:	47f1                	li	a5,28
    4340:	02e7c863          	blt	a5,a4,4370 <__muldf3+0xa8>
    4344:	47f5                	li	a5,29
    4346:	ff850a13          	addi	s4,a0,-8
    434a:	8f99                	sub	a5,a5,a4
    434c:	014999b3          	sll	s3,s3,s4
    4350:	00f457b3          	srl	a5,s0,a5
    4354:	0137e9b3          	or	s3,a5,s3
    4358:	01441a33          	sll	s4,s0,s4
    435c:	c0d00b93          	li	s7,-1011
    4360:	40ab8bb3          	sub	s7,s7,a0
    4364:	b7c1                	j	4324 <__muldf3+0x5c>
    4366:	7e1000ef          	jal	ra,5346 <__clzsi2>
    436a:	02050513          	addi	a0,a0,32
    436e:	b7f1                	j	433a <__muldf3+0x72>
    4370:	fd850993          	addi	s3,a0,-40
    4374:	013419b3          	sll	s3,s0,s3
    4378:	4a01                	li	s4,0
    437a:	b7cd                	j	435c <__muldf3+0x94>
    437c:	00a9e433          	or	s0,s3,a0
    4380:	c041                	beqz	s0,4400 <__muldf3+0x138>
    4382:	000807b7          	lui	a5,0x80
    4386:	00f9f7b3          	and	a5,s3,a5
    438a:	8a2a                	mv	s4,a0
    438c:	7ff00b93          	li	s7,2047
    4390:	4c0d                	li	s8,3
    4392:	44c1                	li	s1,16
    4394:	fbc9                	bnez	a5,4326 <__muldf3+0x5e>
    4396:	014ad513          	srli	a0,s5,0x14
    439a:	00ca9413          	slli	s0,s5,0xc
    439e:	7ff57513          	andi	a0,a0,2047
    43a2:	87e6                	mv	a5,s9
    43a4:	8031                	srli	s0,s0,0xc
    43a6:	01fada93          	srli	s5,s5,0x1f
    43aa:	c12d                	beqz	a0,440c <__muldf3+0x144>
    43ac:	7ff00713          	li	a4,2047
    43b0:	0ae50763          	beq	a0,a4,445e <__muldf3+0x196>
    43b4:	01dcd793          	srli	a5,s9,0x1d
    43b8:	040e                	slli	s0,s0,0x3
    43ba:	8c5d                	or	s0,s0,a5
    43bc:	008007b7          	lui	a5,0x800
    43c0:	8c5d                	or	s0,s0,a5
    43c2:	c0150513          	addi	a0,a0,-1023
    43c6:	003c9793          	slli	a5,s9,0x3
    43ca:	4701                	li	a4,0
    43cc:	002c1693          	slli	a3,s8,0x2
    43d0:	8ed9                	or	a3,a3,a4
    43d2:	9baa                	add	s7,s7,a0
    43d4:	16fd                	addi	a3,a3,-1
    43d6:	4639                	li	a2,14
    43d8:	015b45b3          	xor	a1,s6,s5
    43dc:	001b8513          	addi	a0,s7,1
    43e0:	0ed66b63          	bltu	a2,a3,44d6 <__muldf3+0x20e>
    43e4:	00002617          	auipc	a2,0x2
    43e8:	f6c60613          	addi	a2,a2,-148 # 6350 <lin+0x13c>
    43ec:	068a                	slli	a3,a3,0x2
    43ee:	96b2                	add	a3,a3,a2
    43f0:	4294                	lw	a3,0(a3)
    43f2:	96b2                	add	a3,a3,a2
    43f4:	8682                	jr	a3
    43f6:	4981                	li	s3,0
    43f8:	4a01                	li	s4,0
    43fa:	4b81                	li	s7,0
    43fc:	4c05                	li	s8,1
    43fe:	b725                	j	4326 <__muldf3+0x5e>
    4400:	4981                	li	s3,0
    4402:	4a01                	li	s4,0
    4404:	7ff00b93          	li	s7,2047
    4408:	4c09                	li	s8,2
    440a:	bf31                	j	4326 <__muldf3+0x5e>
    440c:	019467b3          	or	a5,s0,s9
    4410:	c3bd                	beqz	a5,4476 <__muldf3+0x1ae>
    4412:	02040a63          	beqz	s0,4446 <__muldf3+0x17e>
    4416:	8522                	mv	a0,s0
    4418:	72f000ef          	jal	ra,5346 <__clzsi2>
    441c:	ff550693          	addi	a3,a0,-11
    4420:	47f1                	li	a5,28
    4422:	02d7c863          	blt	a5,a3,4452 <__muldf3+0x18a>
    4426:	4775                	li	a4,29
    4428:	ff850793          	addi	a5,a0,-8
    442c:	8f15                	sub	a4,a4,a3
    442e:	00f41433          	sll	s0,s0,a5
    4432:	00ecd733          	srl	a4,s9,a4
    4436:	8c59                	or	s0,s0,a4
    4438:	00fc97b3          	sll	a5,s9,a5
    443c:	c0d00713          	li	a4,-1011
    4440:	40a70533          	sub	a0,a4,a0
    4444:	b759                	j	43ca <__muldf3+0x102>
    4446:	8566                	mv	a0,s9
    4448:	6ff000ef          	jal	ra,5346 <__clzsi2>
    444c:	02050513          	addi	a0,a0,32
    4450:	b7f1                	j	441c <__muldf3+0x154>
    4452:	fd850413          	addi	s0,a0,-40
    4456:	008c9433          	sll	s0,s9,s0
    445a:	4781                	li	a5,0
    445c:	b7c5                	j	443c <__muldf3+0x174>
    445e:	01946633          	or	a2,s0,s9
    4462:	ce19                	beqz	a2,4480 <__muldf3+0x1b8>
    4464:	00080737          	lui	a4,0x80
    4468:	8f61                	and	a4,a4,s0
    446a:	7ff00513          	li	a0,2047
    446e:	ef19                	bnez	a4,448c <__muldf3+0x1c4>
    4470:	470d                	li	a4,3
    4472:	44c1                	li	s1,16
    4474:	bfa1                	j	43cc <__muldf3+0x104>
    4476:	4401                	li	s0,0
    4478:	4781                	li	a5,0
    447a:	4501                	li	a0,0
    447c:	4705                	li	a4,1
    447e:	b7b9                	j	43cc <__muldf3+0x104>
    4480:	4401                	li	s0,0
    4482:	4781                	li	a5,0
    4484:	7ff00513          	li	a0,2047
    4488:	4709                	li	a4,2
    448a:	b789                	j	43cc <__muldf3+0x104>
    448c:	470d                	li	a4,3
    448e:	bf3d                	j	43cc <__muldf3+0x104>
    4490:	00080437          	lui	s0,0x80
    4494:	4781                	li	a5,0
    4496:	7ff00713          	li	a4,2047
    449a:	4581                	li	a1,0
    449c:	44c1                	li	s1,16
    449e:	0752                	slli	a4,a4,0x14
    44a0:	7ff006b7          	lui	a3,0x7ff00
    44a4:	0432                	slli	s0,s0,0xc
    44a6:	8f75                	and	a4,a4,a3
    44a8:	8031                	srli	s0,s0,0xc
    44aa:	05fe                	slli	a1,a1,0x1f
    44ac:	8c59                	or	s0,s0,a4
    44ae:	00b46733          	or	a4,s0,a1
    44b2:	853e                	mv	a0,a5
    44b4:	85ba                	mv	a1,a4
    44b6:	c099                	beqz	s1,44bc <__muldf3+0x1f4>
    44b8:	0014a073          	csrs	fflags,s1
    44bc:	50b2                	lw	ra,44(sp)
    44be:	5422                	lw	s0,40(sp)
    44c0:	5492                	lw	s1,36(sp)
    44c2:	5902                	lw	s2,32(sp)
    44c4:	49f2                	lw	s3,28(sp)
    44c6:	4a62                	lw	s4,24(sp)
    44c8:	4ad2                	lw	s5,20(sp)
    44ca:	4b42                	lw	s6,16(sp)
    44cc:	4bb2                	lw	s7,12(sp)
    44ce:	4c22                	lw	s8,8(sp)
    44d0:	4c92                	lw	s9,4(sp)
    44d2:	6145                	addi	sp,sp,48
    44d4:	8082                	ret
    44d6:	6ec1                	lui	t4,0x10
    44d8:	fffe8e13          	addi	t3,t4,-1 # ffff <_global_impure_ptr+0x9ad7>
    44dc:	010a5713          	srli	a4,s4,0x10
    44e0:	0107d893          	srli	a7,a5,0x10
    44e4:	01ca7a33          	and	s4,s4,t3
    44e8:	01c7f7b3          	and	a5,a5,t3
    44ec:	03488833          	mul	a6,a7,s4
    44f0:	034786b3          	mul	a3,a5,s4
    44f4:	02f70f33          	mul	t5,a4,a5
    44f8:	01e80333          	add	t1,a6,t5
    44fc:	0106d813          	srli	a6,a3,0x10
    4500:	981a                	add	a6,a6,t1
    4502:	03170633          	mul	a2,a4,a7
    4506:	01e87363          	bgeu	a6,t5,450c <__muldf3+0x244>
    450a:	9676                	add	a2,a2,t4
    450c:	01085f93          	srli	t6,a6,0x10
    4510:	01c87833          	and	a6,a6,t3
    4514:	01c6f6b3          	and	a3,a3,t3
    4518:	01045e93          	srli	t4,s0,0x10
    451c:	01c47e33          	and	t3,s0,t3
    4520:	0842                	slli	a6,a6,0x10
    4522:	9836                	add	a6,a6,a3
    4524:	03c70f33          	mul	t5,a4,t3
    4528:	03ca06b3          	mul	a3,s4,t3
    452c:	034e8a33          	mul	s4,t4,s4
    4530:	01ea0333          	add	t1,s4,t5
    4534:	0106da13          	srli	s4,a3,0x10
    4538:	9a1a                	add	s4,s4,t1
    453a:	03d70733          	mul	a4,a4,t4
    453e:	01ea7463          	bgeu	s4,t5,4546 <__muldf3+0x27e>
    4542:	6341                	lui	t1,0x10
    4544:	971a                	add	a4,a4,t1
    4546:	010a5313          	srli	t1,s4,0x10
    454a:	933a                	add	t1,t1,a4
    454c:	6741                	lui	a4,0x10
    454e:	fff70f13          	addi	t5,a4,-1 # ffff <_global_impure_ptr+0x9ad7>
    4552:	01ea7a33          	and	s4,s4,t5
    4556:	01e6f6b3          	and	a3,a3,t5
    455a:	0109d413          	srli	s0,s3,0x10
    455e:	0a42                	slli	s4,s4,0x10
    4560:	01e9f9b3          	and	s3,s3,t5
    4564:	03378f33          	mul	t5,a5,s3
    4568:	9a36                	add	s4,s4,a3
    456a:	9fd2                	add	t6,t6,s4
    456c:	033886b3          	mul	a3,a7,s3
    4570:	02f407b3          	mul	a5,s0,a5
    4574:	028882b3          	mul	t0,a7,s0
    4578:	00f688b3          	add	a7,a3,a5
    457c:	010f5693          	srli	a3,t5,0x10
    4580:	96c6                	add	a3,a3,a7
    4582:	00f6f363          	bgeu	a3,a5,4588 <__muldf3+0x2c0>
    4586:	92ba                	add	t0,t0,a4
    4588:	6741                	lui	a4,0x10
    458a:	fff70793          	addi	a5,a4,-1 # ffff <_global_impure_ptr+0x9ad7>
    458e:	00ff7f33          	and	t5,t5,a5
    4592:	0106d893          	srli	a7,a3,0x10
    4596:	8efd                	and	a3,a3,a5
    4598:	03c987b3          	mul	a5,s3,t3
    459c:	06c2                	slli	a3,a3,0x10
    459e:	96fa                	add	a3,a3,t5
    45a0:	9896                	add	a7,a7,t0
    45a2:	03c40e33          	mul	t3,s0,t3
    45a6:	033e89b3          	mul	s3,t4,s3
    45aa:	028e8f33          	mul	t5,t4,s0
    45ae:	99f2                	add	s3,s3,t3
    45b0:	0107d413          	srli	s0,a5,0x10
    45b4:	99a2                	add	s3,s3,s0
    45b6:	01c9f363          	bgeu	s3,t3,45bc <__muldf3+0x2f4>
    45ba:	9f3a                	add	t5,t5,a4
    45bc:	6e41                	lui	t3,0x10
    45be:	1e7d                	addi	t3,t3,-1
    45c0:	01c9f733          	and	a4,s3,t3
    45c4:	01c7f7b3          	and	a5,a5,t3
    45c8:	0742                	slli	a4,a4,0x10
    45ca:	967e                	add	a2,a2,t6
    45cc:	973e                	add	a4,a4,a5
    45ce:	01463a33          	sltu	s4,a2,s4
    45d2:	971a                	add	a4,a4,t1
    45d4:	01470433          	add	s0,a4,s4
    45d8:	9636                	add	a2,a2,a3
    45da:	00d636b3          	sltu	a3,a2,a3
    45de:	01140e33          	add	t3,s0,a7
    45e2:	00de0eb3          	add	t4,t3,a3
    45e6:	00673733          	sltu	a4,a4,t1
    45ea:	01443433          	sltu	s0,s0,s4
    45ee:	8c59                	or	s0,s0,a4
    45f0:	00deb6b3          	sltu	a3,t4,a3
    45f4:	0109d993          	srli	s3,s3,0x10
    45f8:	011e38b3          	sltu	a7,t3,a7
    45fc:	944e                	add	s0,s0,s3
    45fe:	00d8e6b3          	or	a3,a7,a3
    4602:	9436                	add	s0,s0,a3
    4604:	947a                	add	s0,s0,t5
    4606:	017ed793          	srli	a5,t4,0x17
    460a:	0426                	slli	s0,s0,0x9
    460c:	8c5d                	or	s0,s0,a5
    460e:	00961793          	slli	a5,a2,0x9
    4612:	0107e7b3          	or	a5,a5,a6
    4616:	00f037b3          	snez	a5,a5
    461a:	825d                	srli	a2,a2,0x17
    461c:	01000737          	lui	a4,0x1000
    4620:	8fd1                	or	a5,a5,a2
    4622:	0ea6                	slli	t4,t4,0x9
    4624:	8f61                	and	a4,a4,s0
    4626:	01d7e7b3          	or	a5,a5,t4
    462a:	cb25                	beqz	a4,469a <__muldf3+0x3d2>
    462c:	0017d713          	srli	a4,a5,0x1
    4630:	8b85                	andi	a5,a5,1
    4632:	8fd9                	or	a5,a5,a4
    4634:	01f41713          	slli	a4,s0,0x1f
    4638:	8fd9                	or	a5,a5,a4
    463a:	8005                	srli	s0,s0,0x1
    463c:	3ff50813          	addi	a6,a0,1023
    4640:	0d005063          	blez	a6,4700 <__muldf3+0x438>
    4644:	0077f713          	andi	a4,a5,7
    4648:	c325                	beqz	a4,46a8 <__muldf3+0x3e0>
    464a:	4709                	li	a4,2
    464c:	0014e493          	ori	s1,s1,1
    4650:	04e90b63          	beq	s2,a4,46a6 <__muldf3+0x3de>
    4654:	470d                	li	a4,3
    4656:	04e90463          	beq	s2,a4,469e <__muldf3+0x3d6>
    465a:	04091763          	bnez	s2,46a8 <__muldf3+0x3e0>
    465e:	00f7f713          	andi	a4,a5,15
    4662:	4691                	li	a3,4
    4664:	04d70263          	beq	a4,a3,46a8 <__muldf3+0x3e0>
    4668:	00478713          	addi	a4,a5,4 # 800004 <_global_impure_ptr+0x7f9adc>
    466c:	00f737b3          	sltu	a5,a4,a5
    4670:	943e                	add	s0,s0,a5
    4672:	87ba                	mv	a5,a4
    4674:	a815                	j	46a8 <__muldf3+0x3e0>
    4676:	85da                	mv	a1,s6
    4678:	844e                	mv	s0,s3
    467a:	87d2                	mv	a5,s4
    467c:	8762                	mv	a4,s8
    467e:	4689                	li	a3,2
    4680:	1cd70763          	beq	a4,a3,484e <__muldf3+0x586>
    4684:	468d                	li	a3,3
    4686:	1cd70963          	beq	a4,a3,4858 <__muldf3+0x590>
    468a:	4685                	li	a3,1
    468c:	fad718e3          	bne	a4,a3,463c <__muldf3+0x374>
    4690:	4401                	li	s0,0
    4692:	4781                	li	a5,0
    4694:	a265                	j	483c <__muldf3+0x574>
    4696:	85d6                	mv	a1,s5
    4698:	b7dd                	j	467e <__muldf3+0x3b6>
    469a:	855e                	mv	a0,s7
    469c:	b745                	j	463c <__muldf3+0x374>
    469e:	e589                	bnez	a1,46a8 <__muldf3+0x3e0>
    46a0:	00878713          	addi	a4,a5,8
    46a4:	b7e1                	j	466c <__muldf3+0x3a4>
    46a6:	fded                	bnez	a1,46a0 <__muldf3+0x3d8>
    46a8:	01000737          	lui	a4,0x1000
    46ac:	8f61                	and	a4,a4,s0
    46ae:	c719                	beqz	a4,46bc <__muldf3+0x3f4>
    46b0:	ff000737          	lui	a4,0xff000
    46b4:	177d                	addi	a4,a4,-1
    46b6:	8c79                	and	s0,s0,a4
    46b8:	40050813          	addi	a6,a0,1024
    46bc:	7fe00713          	li	a4,2046
    46c0:	01074a63          	blt	a4,a6,46d4 <__muldf3+0x40c>
    46c4:	0037d713          	srli	a4,a5,0x3
    46c8:	01d41793          	slli	a5,s0,0x1d
    46cc:	8fd9                	or	a5,a5,a4
    46ce:	800d                	srli	s0,s0,0x3
    46d0:	8742                	mv	a4,a6
    46d2:	b3f1                	j	449e <__muldf3+0x1d6>
    46d4:	4789                	li	a5,2
    46d6:	02f90363          	beq	s2,a5,46fc <__muldf3+0x434>
    46da:	478d                	li	a5,3
    46dc:	00f90863          	beq	s2,a5,46ec <__muldf3+0x424>
    46e0:	00091763          	bnez	s2,46ee <__muldf3+0x426>
    46e4:	4781                	li	a5,0
    46e6:	7ff00713          	li	a4,2047
    46ea:	a029                	j	46f4 <__muldf3+0x42c>
    46ec:	dde5                	beqz	a1,46e4 <__muldf3+0x41c>
    46ee:	57fd                	li	a5,-1
    46f0:	7fe00713          	li	a4,2046
    46f4:	0054e493          	ori	s1,s1,5
    46f8:	843e                	mv	s0,a5
    46fa:	b355                	j	449e <__muldf3+0x1d6>
    46fc:	f5e5                	bnez	a1,46e4 <__muldf3+0x41c>
    46fe:	bfc5                	j	46ee <__muldf3+0x426>
    4700:	4705                	li	a4,1
    4702:	04081463          	bnez	a6,474a <__muldf3+0x482>
    4706:	0077f693          	andi	a3,a5,7
    470a:	8722                	mv	a4,s0
    470c:	ca9d                	beqz	a3,4742 <__muldf3+0x47a>
    470e:	4689                	li	a3,2
    4710:	0014e493          	ori	s1,s1,1
    4714:	02d90663          	beq	s2,a3,4740 <__muldf3+0x478>
    4718:	468d                	li	a3,3
    471a:	00d90f63          	beq	s2,a3,4738 <__muldf3+0x470>
    471e:	02091263          	bnez	s2,4742 <__muldf3+0x47a>
    4722:	00f7f693          	andi	a3,a5,15
    4726:	4611                	li	a2,4
    4728:	00c68d63          	beq	a3,a2,4742 <__muldf3+0x47a>
    472c:	ffc7b713          	sltiu	a4,a5,-4
    4730:	00174713          	xori	a4,a4,1
    4734:	9722                	add	a4,a4,s0
    4736:	a031                	j	4742 <__muldf3+0x47a>
    4738:	e589                	bnez	a1,4742 <__muldf3+0x47a>
    473a:	ff87b713          	sltiu	a4,a5,-8
    473e:	bfcd                	j	4730 <__muldf3+0x468>
    4740:	fded                	bnez	a1,473a <__muldf3+0x472>
    4742:	8361                	srli	a4,a4,0x18
    4744:	00174713          	xori	a4,a4,1
    4748:	8b05                	andi	a4,a4,1
    474a:	4685                	li	a3,1
    474c:	410686b3          	sub	a3,a3,a6
    4750:	03800613          	li	a2,56
    4754:	0cd64263          	blt	a2,a3,4818 <__muldf3+0x550>
    4758:	467d                	li	a2,31
    475a:	04d64a63          	blt	a2,a3,47ae <__muldf3+0x4e6>
    475e:	41e50513          	addi	a0,a0,1054
    4762:	00a41633          	sll	a2,s0,a0
    4766:	00d7d833          	srl	a6,a5,a3
    476a:	00a797b3          	sll	a5,a5,a0
    476e:	01066633          	or	a2,a2,a6
    4772:	00f037b3          	snez	a5,a5
    4776:	8fd1                	or	a5,a5,a2
    4778:	00d45433          	srl	s0,s0,a3
    477c:	0077f693          	andi	a3,a5,7
    4780:	c2ad                	beqz	a3,47e2 <__muldf3+0x51a>
    4782:	4689                	li	a3,2
    4784:	0014e493          	ori	s1,s1,1
    4788:	04d90c63          	beq	s2,a3,47e0 <__muldf3+0x518>
    478c:	468d                	li	a3,3
    478e:	04d90563          	beq	s2,a3,47d8 <__muldf3+0x510>
    4792:	04091863          	bnez	s2,47e2 <__muldf3+0x51a>
    4796:	00f7f693          	andi	a3,a5,15
    479a:	4611                	li	a2,4
    479c:	04c68363          	beq	a3,a2,47e2 <__muldf3+0x51a>
    47a0:	00478693          	addi	a3,a5,4
    47a4:	00f6b7b3          	sltu	a5,a3,a5
    47a8:	943e                	add	s0,s0,a5
    47aa:	87b6                	mv	a5,a3
    47ac:	a81d                	j	47e2 <__muldf3+0x51a>
    47ae:	5605                	li	a2,-31
    47b0:	41060633          	sub	a2,a2,a6
    47b4:	02000893          	li	a7,32
    47b8:	00c45633          	srl	a2,s0,a2
    47bc:	4801                	li	a6,0
    47be:	01168663          	beq	a3,a7,47ca <__muldf3+0x502>
    47c2:	43e50513          	addi	a0,a0,1086
    47c6:	00a41833          	sll	a6,s0,a0
    47ca:	00f867b3          	or	a5,a6,a5
    47ce:	00f037b3          	snez	a5,a5
    47d2:	8fd1                	or	a5,a5,a2
    47d4:	4401                	li	s0,0
    47d6:	b75d                	j	477c <__muldf3+0x4b4>
    47d8:	e589                	bnez	a1,47e2 <__muldf3+0x51a>
    47da:	00878693          	addi	a3,a5,8
    47de:	b7d9                	j	47a4 <__muldf3+0x4dc>
    47e0:	fded                	bnez	a1,47da <__muldf3+0x512>
    47e2:	008006b7          	lui	a3,0x800
    47e6:	8ee1                	and	a3,a3,s0
    47e8:	ca81                	beqz	a3,47f8 <__muldf3+0x530>
    47ea:	0014e493          	ori	s1,s1,1
    47ee:	4401                	li	s0,0
    47f0:	4781                	li	a5,0
    47f2:	e305                	bnez	a4,4812 <__muldf3+0x54a>
    47f4:	4705                	li	a4,1
    47f6:	b165                	j	449e <__muldf3+0x1d6>
    47f8:	0037d693          	srli	a3,a5,0x3
    47fc:	01d41793          	slli	a5,s0,0x1d
    4800:	8fd5                	or	a5,a5,a3
    4802:	800d                	srli	s0,s0,0x3
    4804:	c8070de3          	beqz	a4,449e <__muldf3+0x1d6>
    4808:	0014f713          	andi	a4,s1,1
    480c:	c80709e3          	beqz	a4,449e <__muldf3+0x1d6>
    4810:	4701                	li	a4,0
    4812:	0024e493          	ori	s1,s1,2
    4816:	b161                	j	449e <__muldf3+0x1d6>
    4818:	8fc1                	or	a5,a5,s0
    481a:	cf91                	beqz	a5,4836 <__muldf3+0x56e>
    481c:	4789                	li	a5,2
    481e:	0014e493          	ori	s1,s1,1
    4822:	02f90363          	beq	s2,a5,4848 <__muldf3+0x580>
    4826:	478d                	li	a5,3
    4828:	00f90c63          	beq	s2,a5,4840 <__muldf3+0x578>
    482c:	4785                	li	a5,1
    482e:	00091363          	bnez	s2,4834 <__muldf3+0x56c>
    4832:	4795                	li	a5,5
    4834:	838d                	srli	a5,a5,0x3
    4836:	0024e493          	ori	s1,s1,2
    483a:	4401                	li	s0,0
    483c:	4701                	li	a4,0
    483e:	b185                	j	449e <__muldf3+0x1d6>
    4840:	47a5                	li	a5,9
    4842:	d9ed                	beqz	a1,4834 <__muldf3+0x56c>
    4844:	4785                	li	a5,1
    4846:	b7fd                	j	4834 <__muldf3+0x56c>
    4848:	47a5                	li	a5,9
    484a:	f5ed                	bnez	a1,4834 <__muldf3+0x56c>
    484c:	bfe5                	j	4844 <__muldf3+0x57c>
    484e:	4401                	li	s0,0
    4850:	4781                	li	a5,0
    4852:	7ff00713          	li	a4,2047
    4856:	b1a1                	j	449e <__muldf3+0x1d6>
    4858:	00080437          	lui	s0,0x80
    485c:	4781                	li	a5,0
    485e:	7ff00713          	li	a4,2047
    4862:	4581                	li	a1,0
    4864:	b92d                	j	449e <__muldf3+0x1d6>

00004866 <__subdf3>:
    4866:	1101                	addi	sp,sp,-32
    4868:	ce06                	sw	ra,28(sp)
    486a:	cc22                	sw	s0,24(sp)
    486c:	ca26                	sw	s1,20(sp)
    486e:	c84a                	sw	s2,16(sp)
    4870:	c64e                	sw	s3,12(sp)
    4872:	c452                	sw	s4,8(sp)
    4874:	002029f3          	frrm	s3
    4878:	001008b7          	lui	a7,0x100
    487c:	18fd                	addi	a7,a7,-1
    487e:	00b8f733          	and	a4,a7,a1
    4882:	0145d413          	srli	s0,a1,0x14
    4886:	00d8f8b3          	and	a7,a7,a3
    488a:	01f5d493          	srli	s1,a1,0x1f
    488e:	0146d593          	srli	a1,a3,0x14
    4892:	00371793          	slli	a5,a4,0x3
    4896:	01f6d313          	srli	t1,a3,0x1f
    489a:	01d55713          	srli	a4,a0,0x1d
    489e:	01d65693          	srli	a3,a2,0x1d
    48a2:	088e                	slli	a7,a7,0x3
    48a4:	00361813          	slli	a6,a2,0x3
    48a8:	7ff5f593          	andi	a1,a1,2047
    48ac:	7ff00613          	li	a2,2047
    48b0:	8f5d                	or	a4,a4,a5
    48b2:	7ff47413          	andi	s0,s0,2047
    48b6:	00351793          	slli	a5,a0,0x3
    48ba:	0116e6b3          	or	a3,a3,a7
    48be:	00c59563          	bne	a1,a2,48c8 <__subdf3+0x62>
    48c2:	0106e633          	or	a2,a3,a6
    48c6:	e219                	bnez	a2,48cc <__subdf3+0x66>
    48c8:	00134313          	xori	t1,t1,1
    48cc:	40b40633          	sub	a2,s0,a1
    48d0:	3c931c63          	bne	t1,s1,4ca8 <__subdf3+0x442>
    48d4:	12c05163          	blez	a2,49f6 <__subdf3+0x190>
    48d8:	04059a63          	bnez	a1,492c <__subdf3+0xc6>
    48dc:	0106e533          	or	a0,a3,a6
    48e0:	e10d                	bnez	a0,4902 <__subdf3+0x9c>
    48e2:	7ff00693          	li	a3,2047
    48e6:	4401                	li	s0,0
    48e8:	24d61363          	bne	a2,a3,4b2e <__subdf3+0x2c8>
    48ec:	00f766b3          	or	a3,a4,a5
    48f0:	7a068763          	beqz	a3,509e <__subdf3+0x838>
    48f4:	00400437          	lui	s0,0x400
    48f8:	8c79                	and	s0,s0,a4
    48fa:	00143413          	seqz	s0,s0
    48fe:	0412                	slli	s0,s0,0x4
    4900:	a43d                	j	4b2e <__subdf3+0x2c8>
    4902:	fff60513          	addi	a0,a2,-1
    4906:	e901                	bnez	a0,4916 <__subdf3+0xb0>
    4908:	983e                	add	a6,a6,a5
    490a:	96ba                	add	a3,a3,a4
    490c:	00f837b3          	sltu	a5,a6,a5
    4910:	96be                	add	a3,a3,a5
    4912:	4605                	li	a2,1
    4914:	a041                	j	4994 <__subdf3+0x12e>
    4916:	7ff00893          	li	a7,2047
    491a:	03161f63          	bne	a2,a7,4958 <__subdf3+0xf2>
    491e:	00f766b3          	or	a3,a4,a5
    4922:	fae9                	bnez	a3,48f4 <__subdf3+0x8e>
    4924:	4701                	li	a4,0
    4926:	4781                	li	a5,0
    4928:	4401                	li	s0,0
    492a:	ac9d                	j	4ba0 <__subdf3+0x33a>
    492c:	7ff00593          	li	a1,2047
    4930:	02b41063          	bne	s0,a1,4950 <__subdf3+0xea>
    4934:	00f766b3          	or	a3,a4,a5
    4938:	76068663          	beqz	a3,50a4 <__subdf3+0x83e>
    493c:	004006b7          	lui	a3,0x400
    4940:	8ef9                	and	a3,a3,a4
    4942:	7ff00613          	li	a2,2047
    4946:	4581                	li	a1,0
    4948:	2e069263          	bnez	a3,4c2c <__subdf3+0x3c6>
    494c:	4441                	li	s0,16
    494e:	a2c5                	j	4b2e <__subdf3+0x2c8>
    4950:	008005b7          	lui	a1,0x800
    4954:	8ecd                	or	a3,a3,a1
    4956:	8532                	mv	a0,a2
    4958:	03800613          	li	a2,56
    495c:	08a64863          	blt	a2,a0,49ec <__subdf3+0x186>
    4960:	467d                	li	a2,31
    4962:	04a64f63          	blt	a2,a0,49c0 <__subdf3+0x15a>
    4966:	02000613          	li	a2,32
    496a:	8e09                	sub	a2,a2,a0
    496c:	00c695b3          	sll	a1,a3,a2
    4970:	00a858b3          	srl	a7,a6,a0
    4974:	00c81833          	sll	a6,a6,a2
    4978:	0115e5b3          	or	a1,a1,a7
    497c:	01003833          	snez	a6,a6
    4980:	0105e833          	or	a6,a1,a6
    4984:	00a6d6b3          	srl	a3,a3,a0
    4988:	983e                	add	a6,a6,a5
    498a:	96ba                	add	a3,a3,a4
    498c:	00f837b3          	sltu	a5,a6,a5
    4990:	96be                	add	a3,a3,a5
    4992:	8622                	mv	a2,s0
    4994:	008007b7          	lui	a5,0x800
    4998:	8ff5                	and	a5,a5,a3
    499a:	cbad                	beqz	a5,4a0c <__subdf3+0x1a6>
    499c:	0605                	addi	a2,a2,1
    499e:	7ff00793          	li	a5,2047
    49a2:	2ef60263          	beq	a2,a5,4c86 <__subdf3+0x420>
    49a6:	ff800737          	lui	a4,0xff800
    49aa:	177d                	addi	a4,a4,-1
    49ac:	00185793          	srli	a5,a6,0x1
    49b0:	8f75                	and	a4,a4,a3
    49b2:	00187813          	andi	a6,a6,1
    49b6:	0107e833          	or	a6,a5,a6
    49ba:	01f71793          	slli	a5,a4,0x1f
    49be:	a49d                	j	4c24 <__subdf3+0x3be>
    49c0:	fe050593          	addi	a1,a0,-32
    49c4:	02000893          	li	a7,32
    49c8:	00b6d5b3          	srl	a1,a3,a1
    49cc:	4601                	li	a2,0
    49ce:	01150763          	beq	a0,a7,49dc <__subdf3+0x176>
    49d2:	04000613          	li	a2,64
    49d6:	8e09                	sub	a2,a2,a0
    49d8:	00c69633          	sll	a2,a3,a2
    49dc:	01066833          	or	a6,a2,a6
    49e0:	01003833          	snez	a6,a6
    49e4:	0105e833          	or	a6,a1,a6
    49e8:	4681                	li	a3,0
    49ea:	bf79                	j	4988 <__subdf3+0x122>
    49ec:	0106e833          	or	a6,a3,a6
    49f0:	01003833          	snez	a6,a6
    49f4:	bfd5                	j	49e8 <__subdf3+0x182>
    49f6:	ce65                	beqz	a2,4aee <__subdf3+0x288>
    49f8:	40858633          	sub	a2,a1,s0
    49fc:	e829                	bnez	s0,4a4e <__subdf3+0x1e8>
    49fe:	00f76533          	or	a0,a4,a5
    4a02:	e911                	bnez	a0,4a16 <__subdf3+0x1b0>
    4a04:	7ff00793          	li	a5,2047
    4a08:	02f60663          	beq	a2,a5,4a34 <__subdf3+0x1ce>
    4a0c:	8736                	mv	a4,a3
    4a0e:	87c2                	mv	a5,a6
    4a10:	48060563          	beqz	a2,4e9a <__subdf3+0x634>
    4a14:	ac19                	j	4c2a <__subdf3+0x3c4>
    4a16:	fff60893          	addi	a7,a2,-1
    4a1a:	00089963          	bnez	a7,4a2c <__subdf3+0x1c6>
    4a1e:	97c2                	add	a5,a5,a6
    4a20:	0107b833          	sltu	a6,a5,a6
    4a24:	96ba                	add	a3,a3,a4
    4a26:	96c2                	add	a3,a3,a6
    4a28:	883e                	mv	a6,a5
    4a2a:	b5e5                	j	4912 <__subdf3+0xac>
    4a2c:	7ff00513          	li	a0,2047
    4a30:	04a61663          	bne	a2,a0,4a7c <__subdf3+0x216>
    4a34:	0106e7b3          	or	a5,a3,a6
    4a38:	4701                	li	a4,0
    4a3a:	16078363          	beqz	a5,4ba0 <__subdf3+0x33a>
    4a3e:	004007b7          	lui	a5,0x400
    4a42:	8ff5                	and	a5,a5,a3
    4a44:	8736                	mv	a4,a3
    4a46:	66079263          	bnez	a5,50aa <__subdf3+0x844>
    4a4a:	87c2                	mv	a5,a6
    4a4c:	a015                	j	4a70 <__subdf3+0x20a>
    4a4e:	7ff00513          	li	a0,2047
    4a52:	02a59163          	bne	a1,a0,4a74 <__subdf3+0x20e>
    4a56:	0106e7b3          	or	a5,a3,a6
    4a5a:	62078463          	beqz	a5,5082 <__subdf3+0x81c>
    4a5e:	004007b7          	lui	a5,0x400
    4a62:	8ff5                	and	a5,a5,a3
    4a64:	8736                	mv	a4,a3
    4a66:	62079263          	bnez	a5,508a <__subdf3+0x824>
    4a6a:	87c2                	mv	a5,a6
    4a6c:	7ff00613          	li	a2,2047
    4a70:	4581                	li	a1,0
    4a72:	bde9                	j	494c <__subdf3+0xe6>
    4a74:	00800537          	lui	a0,0x800
    4a78:	8f49                	or	a4,a4,a0
    4a7a:	88b2                	mv	a7,a2
    4a7c:	03800613          	li	a2,56
    4a80:	07164363          	blt	a2,a7,4ae6 <__subdf3+0x280>
    4a84:	467d                	li	a2,31
    4a86:	03164b63          	blt	a2,a7,4abc <__subdf3+0x256>
    4a8a:	02000513          	li	a0,32
    4a8e:	41150533          	sub	a0,a0,a7
    4a92:	00a71633          	sll	a2,a4,a0
    4a96:	0117d333          	srl	t1,a5,a7
    4a9a:	00a797b3          	sll	a5,a5,a0
    4a9e:	00666633          	or	a2,a2,t1
    4aa2:	00f037b3          	snez	a5,a5
    4aa6:	8fd1                	or	a5,a5,a2
    4aa8:	01175733          	srl	a4,a4,a7
    4aac:	97c2                	add	a5,a5,a6
    4aae:	9736                	add	a4,a4,a3
    4ab0:	0107b6b3          	sltu	a3,a5,a6
    4ab4:	96ba                	add	a3,a3,a4
    4ab6:	883e                	mv	a6,a5
    4ab8:	862e                	mv	a2,a1
    4aba:	bde9                	j	4994 <__subdf3+0x12e>
    4abc:	fe088613          	addi	a2,a7,-32 # fffe0 <_global_impure_ptr+0xf9ab8>
    4ac0:	02000313          	li	t1,32
    4ac4:	00c75633          	srl	a2,a4,a2
    4ac8:	4501                	li	a0,0
    4aca:	00688863          	beq	a7,t1,4ada <__subdf3+0x274>
    4ace:	04000513          	li	a0,64
    4ad2:	41150533          	sub	a0,a0,a7
    4ad6:	00a71533          	sll	a0,a4,a0
    4ada:	8fc9                	or	a5,a5,a0
    4adc:	00f037b3          	snez	a5,a5
    4ae0:	8fd1                	or	a5,a5,a2
    4ae2:	4701                	li	a4,0
    4ae4:	b7e1                	j	4aac <__subdf3+0x246>
    4ae6:	8fd9                	or	a5,a5,a4
    4ae8:	00f037b3          	snez	a5,a5
    4aec:	bfdd                	j	4ae2 <__subdf3+0x27c>
    4aee:	00140613          	addi	a2,s0,1 # 400001 <_global_impure_ptr+0x3f9ad9>
    4af2:	7fe67513          	andi	a0,a2,2046
    4af6:	10051a63          	bnez	a0,4c0a <__subdf3+0x3a4>
    4afa:	00f76633          	or	a2,a4,a5
    4afe:	e421                	bnez	s0,4b46 <__subdf3+0x2e0>
    4b00:	54060463          	beqz	a2,5048 <__subdf3+0x7e2>
    4b04:	0106e633          	or	a2,a3,a6
    4b08:	38060963          	beqz	a2,4e9a <__subdf3+0x634>
    4b0c:	983e                	add	a6,a6,a5
    4b0e:	00f837b3          	sltu	a5,a6,a5
    4b12:	9736                	add	a4,a4,a3
    4b14:	973e                	add	a4,a4,a5
    4b16:	008007b7          	lui	a5,0x800
    4b1a:	8ff9                	and	a5,a5,a4
    4b1c:	52078763          	beqz	a5,504a <__subdf3+0x7e4>
    4b20:	ff8007b7          	lui	a5,0xff800
    4b24:	17fd                	addi	a5,a5,-1
    4b26:	8f7d                	and	a4,a4,a5
    4b28:	4581                	li	a1,0
    4b2a:	87c2                	mv	a5,a6
    4b2c:	4605                	li	a2,1
    4b2e:	0077f693          	andi	a3,a5,7
    4b32:	12069463          	bnez	a3,4c5a <__subdf3+0x3f4>
    4b36:	06058563          	beqz	a1,4ba0 <__subdf3+0x33a>
    4b3a:	00147693          	andi	a3,s0,1
    4b3e:	c2ad                	beqz	a3,4ba0 <__subdf3+0x33a>
    4b40:	00246413          	ori	s0,s0,2
    4b44:	a8b1                	j	4ba0 <__subdf3+0x33a>
    4b46:	7ff00513          	li	a0,2047
    4b4a:	02a41563          	bne	s0,a0,4b74 <__subdf3+0x30e>
    4b4e:	5c060e63          	beqz	a2,512a <__subdf3+0x8c4>
    4b52:	00400437          	lui	s0,0x400
    4b56:	8c79                	and	s0,s0,a4
    4b58:	00143413          	seqz	s0,s0
    4b5c:	0412                	slli	s0,s0,0x4
    4b5e:	02a59863          	bne	a1,a0,4b8e <__subdf3+0x328>
    4b62:	0106e5b3          	or	a1,a3,a6
    4b66:	c991                	beqz	a1,4b7a <__subdf3+0x314>
    4b68:	004005b7          	lui	a1,0x400
    4b6c:	8df5                	and	a1,a1,a3
    4b6e:	e591                	bnez	a1,4b7a <__subdf3+0x314>
    4b70:	4441                	li	s0,16
    4b72:	a021                	j	4b7a <__subdf3+0x314>
    4b74:	4401                	li	s0,0
    4b76:	fea586e3          	beq	a1,a0,4b62 <__subdf3+0x2fc>
    4b7a:	00061a63          	bnez	a2,4b8e <__subdf3+0x328>
    4b7e:	8736                	mv	a4,a3
    4b80:	87c2                	mv	a5,a6
    4b82:	4581                	li	a1,0
    4b84:	7ff00613          	li	a2,2047
    4b88:	b75d                	j	4b2e <__subdf3+0x2c8>
    4b8a:	4401                	li	s0,0
    4b8c:	bfd9                	j	4b62 <__subdf3+0x2fc>
    4b8e:	0106e6b3          	or	a3,a3,a6
    4b92:	dae5                	beqz	a3,4b82 <__subdf3+0x31c>
    4b94:	4481                	li	s1,0
    4b96:	00400737          	lui	a4,0x400
    4b9a:	4781                	li	a5,0
    4b9c:	7ff00613          	li	a2,2047
    4ba0:	008006b7          	lui	a3,0x800
    4ba4:	8ef9                	and	a3,a3,a4
    4ba6:	ca91                	beqz	a3,4bba <__subdf3+0x354>
    4ba8:	0605                	addi	a2,a2,1
    4baa:	7ff00693          	li	a3,2047
    4bae:	54d60563          	beq	a2,a3,50f8 <__subdf3+0x892>
    4bb2:	ff8006b7          	lui	a3,0xff800
    4bb6:	16fd                	addi	a3,a3,-1
    4bb8:	8f75                	and	a4,a4,a3
    4bba:	0037d513          	srli	a0,a5,0x3
    4bbe:	7ff00693          	li	a3,2047
    4bc2:	01d71793          	slli	a5,a4,0x1d
    4bc6:	8fc9                	or	a5,a5,a0
    4bc8:	830d                	srli	a4,a4,0x3
    4bca:	00d61963          	bne	a2,a3,4bdc <__subdf3+0x376>
    4bce:	8fd9                	or	a5,a5,a4
    4bd0:	4701                	li	a4,0
    4bd2:	c789                	beqz	a5,4bdc <__subdf3+0x376>
    4bd4:	00080737          	lui	a4,0x80
    4bd8:	4781                	li	a5,0
    4bda:	4481                	li	s1,0
    4bdc:	7ff006b7          	lui	a3,0x7ff00
    4be0:	0652                	slli	a2,a2,0x14
    4be2:	0732                	slli	a4,a4,0xc
    4be4:	8e75                	and	a2,a2,a3
    4be6:	8331                	srli	a4,a4,0xc
    4be8:	8f51                	or	a4,a4,a2
    4bea:	04fe                	slli	s1,s1,0x1f
    4bec:	009766b3          	or	a3,a4,s1
    4bf0:	853e                	mv	a0,a5
    4bf2:	85b6                	mv	a1,a3
    4bf4:	c019                	beqz	s0,4bfa <__subdf3+0x394>
    4bf6:	00142073          	csrs	fflags,s0
    4bfa:	40f2                	lw	ra,28(sp)
    4bfc:	4462                	lw	s0,24(sp)
    4bfe:	44d2                	lw	s1,20(sp)
    4c00:	4942                	lw	s2,16(sp)
    4c02:	49b2                	lw	s3,12(sp)
    4c04:	4a22                	lw	s4,8(sp)
    4c06:	6105                	addi	sp,sp,32
    4c08:	8082                	ret
    4c0a:	7ff00593          	li	a1,2047
    4c0e:	02b60163          	beq	a2,a1,4c30 <__subdf3+0x3ca>
    4c12:	983e                	add	a6,a6,a5
    4c14:	00f837b3          	sltu	a5,a6,a5
    4c18:	9736                	add	a4,a4,a3
    4c1a:	973e                	add	a4,a4,a5
    4c1c:	01f71793          	slli	a5,a4,0x1f
    4c20:	00185813          	srli	a6,a6,0x1
    4c24:	0107e7b3          	or	a5,a5,a6
    4c28:	8305                	srli	a4,a4,0x1
    4c2a:	4581                	li	a1,0
    4c2c:	4401                	li	s0,0
    4c2e:	b701                	j	4b2e <__subdf3+0x2c8>
    4c30:	00098763          	beqz	s3,4c3e <__subdf3+0x3d8>
    4c34:	478d                	li	a5,3
    4c36:	00f99763          	bne	s3,a5,4c44 <__subdf3+0x3de>
    4c3a:	00049a63          	bnez	s1,4c4e <__subdf3+0x3e8>
    4c3e:	7ff00613          	li	a2,2047
    4c42:	a889                	j	4c94 <__subdf3+0x42e>
    4c44:	4789                	li	a5,2
    4c46:	00f99463          	bne	s3,a5,4c4e <__subdf3+0x3e8>
    4c4a:	fe049ae3          	bnez	s1,4c3e <__subdf3+0x3d8>
    4c4e:	4581                	li	a1,0
    4c50:	577d                	li	a4,-1
    4c52:	57fd                	li	a5,-1
    4c54:	7fe00613          	li	a2,2046
    4c58:	4415                	li	s0,5
    4c5a:	4689                	li	a3,2
    4c5c:	00146413          	ori	s0,s0,1
    4c60:	48d98863          	beq	s3,a3,50f0 <__subdf3+0x88a>
    4c64:	468d                	li	a3,3
    4c66:	48d98163          	beq	s3,a3,50e8 <__subdf3+0x882>
    4c6a:	48099463          	bnez	s3,50f2 <__subdf3+0x88c>
    4c6e:	00f7f693          	andi	a3,a5,15
    4c72:	4511                	li	a0,4
    4c74:	46a68f63          	beq	a3,a0,50f2 <__subdf3+0x88c>
    4c78:	00478693          	addi	a3,a5,4 # ff800004 <__kernel_stack+0xdf74000c>
    4c7c:	00f6b7b3          	sltu	a5,a3,a5
    4c80:	973e                	add	a4,a4,a5
    4c82:	87b6                	mv	a5,a3
    4c84:	a1bd                	j	50f2 <__subdf3+0x88c>
    4c86:	00098763          	beqz	s3,4c94 <__subdf3+0x42e>
    4c8a:	478d                	li	a5,3
    4c8c:	00f99863          	bne	s3,a5,4c9c <__subdf3+0x436>
    4c90:	40049163          	bnez	s1,5092 <__subdf3+0x82c>
    4c94:	4701                	li	a4,0
    4c96:	4781                	li	a5,0
    4c98:	4415                	li	s0,5
    4c9a:	b719                	j	4ba0 <__subdf3+0x33a>
    4c9c:	4789                	li	a5,2
    4c9e:	3ef99a63          	bne	s3,a5,5092 <__subdf3+0x82c>
    4ca2:	fe0499e3          	bnez	s1,4c94 <__subdf3+0x42e>
    4ca6:	b765                	j	4c4e <__subdf3+0x3e8>
    4ca8:	0cc05863          	blez	a2,4d78 <__subdf3+0x512>
    4cac:	08059263          	bnez	a1,4d30 <__subdf3+0x4ca>
    4cb0:	0106e533          	or	a0,a3,a6
    4cb4:	c20507e3          	beqz	a0,48e2 <__subdf3+0x7c>
    4cb8:	fff60513          	addi	a0,a2,-1
    4cbc:	e911                	bnez	a0,4cd0 <__subdf3+0x46a>
    4cbe:	41078833          	sub	a6,a5,a6
    4cc2:	40d706b3          	sub	a3,a4,a3
    4cc6:	0107b7b3          	sltu	a5,a5,a6
    4cca:	8e9d                	sub	a3,a3,a5
    4ccc:	4605                	li	a2,1
    4cce:	a0a9                	j	4d18 <__subdf3+0x4b2>
    4cd0:	7ff00893          	li	a7,2047
    4cd4:	c51605e3          	beq	a2,a7,491e <__subdf3+0xb8>
    4cd8:	03800613          	li	a2,56
    4cdc:	08a64963          	blt	a2,a0,4d6e <__subdf3+0x508>
    4ce0:	467d                	li	a2,31
    4ce2:	06a64063          	blt	a2,a0,4d42 <__subdf3+0x4dc>
    4ce6:	02000613          	li	a2,32
    4cea:	8e09                	sub	a2,a2,a0
    4cec:	00c695b3          	sll	a1,a3,a2
    4cf0:	00a858b3          	srl	a7,a6,a0
    4cf4:	00c81833          	sll	a6,a6,a2
    4cf8:	0115e5b3          	or	a1,a1,a7
    4cfc:	01003833          	snez	a6,a6
    4d00:	0105e833          	or	a6,a1,a6
    4d04:	00a6d6b3          	srl	a3,a3,a0
    4d08:	41078833          	sub	a6,a5,a6
    4d0c:	40d706b3          	sub	a3,a4,a3
    4d10:	0107b7b3          	sltu	a5,a5,a6
    4d14:	8e9d                	sub	a3,a3,a5
    4d16:	8622                	mv	a2,s0
    4d18:	00800937          	lui	s2,0x800
    4d1c:	0126f7b3          	and	a5,a3,s2
    4d20:	ce0786e3          	beqz	a5,4a0c <__subdf3+0x1a6>
    4d24:	197d                	addi	s2,s2,-1
    4d26:	0126f933          	and	s2,a3,s2
    4d2a:	8a42                	mv	s4,a6
    4d2c:	8432                	mv	s0,a2
    4d2e:	ac8d                	j	4fa0 <__subdf3+0x73a>
    4d30:	7ff00593          	li	a1,2047
    4d34:	c0b400e3          	beq	s0,a1,4934 <__subdf3+0xce>
    4d38:	008005b7          	lui	a1,0x800
    4d3c:	8ecd                	or	a3,a3,a1
    4d3e:	8532                	mv	a0,a2
    4d40:	bf61                	j	4cd8 <__subdf3+0x472>
    4d42:	fe050593          	addi	a1,a0,-32 # 7fffe0 <_global_impure_ptr+0x7f9ab8>
    4d46:	02000893          	li	a7,32
    4d4a:	00b6d5b3          	srl	a1,a3,a1
    4d4e:	4601                	li	a2,0
    4d50:	01150763          	beq	a0,a7,4d5e <__subdf3+0x4f8>
    4d54:	04000613          	li	a2,64
    4d58:	8e09                	sub	a2,a2,a0
    4d5a:	00c69633          	sll	a2,a3,a2
    4d5e:	01066833          	or	a6,a2,a6
    4d62:	01003833          	snez	a6,a6
    4d66:	0105e833          	or	a6,a1,a6
    4d6a:	4681                	li	a3,0
    4d6c:	bf71                	j	4d08 <__subdf3+0x4a2>
    4d6e:	0106e833          	or	a6,a3,a6
    4d72:	01003833          	snez	a6,a6
    4d76:	bfd5                	j	4d6a <__subdf3+0x504>
    4d78:	ce6d                	beqz	a2,4e72 <__subdf3+0x60c>
    4d7a:	40858633          	sub	a2,a1,s0
    4d7e:	e439                	bnez	s0,4dcc <__subdf3+0x566>
    4d80:	00f76533          	or	a0,a4,a5
    4d84:	e509                	bnez	a0,4d8e <__subdf3+0x528>
    4d86:	7ff00793          	li	a5,2047
    4d8a:	849a                	mv	s1,t1
    4d8c:	b9b5                	j	4a08 <__subdf3+0x1a2>
    4d8e:	fff60893          	addi	a7,a2,-1
    4d92:	00089c63          	bnez	a7,4daa <__subdf3+0x544>
    4d96:	40f807b3          	sub	a5,a6,a5
    4d9a:	00f83833          	sltu	a6,a6,a5
    4d9e:	8e99                	sub	a3,a3,a4
    4da0:	410686b3          	sub	a3,a3,a6
    4da4:	849a                	mv	s1,t1
    4da6:	883e                	mv	a6,a5
    4da8:	b715                	j	4ccc <__subdf3+0x466>
    4daa:	7ff00513          	li	a0,2047
    4dae:	04a61563          	bne	a2,a0,4df8 <__subdf3+0x592>
    4db2:	0106e7b3          	or	a5,a3,a6
    4db6:	2e078d63          	beqz	a5,50b0 <__subdf3+0x84a>
    4dba:	004007b7          	lui	a5,0x400
    4dbe:	8ff5                	and	a5,a5,a3
    4dc0:	8736                	mv	a4,a3
    4dc2:	2e079a63          	bnez	a5,50b6 <__subdf3+0x850>
    4dc6:	87c2                	mv	a5,a6
    4dc8:	849a                	mv	s1,t1
    4dca:	b15d                	j	4a70 <__subdf3+0x20a>
    4dcc:	7ff00513          	li	a0,2047
    4dd0:	02a59063          	bne	a1,a0,4df0 <__subdf3+0x58a>
    4dd4:	0106e7b3          	or	a5,a3,a6
    4dd8:	2e078263          	beqz	a5,50bc <__subdf3+0x856>
    4ddc:	004007b7          	lui	a5,0x400
    4de0:	8ff5                	and	a5,a5,a3
    4de2:	8736                	mv	a4,a3
    4de4:	2e079163          	bnez	a5,50c6 <__subdf3+0x860>
    4de8:	87c2                	mv	a5,a6
    4dea:	7ff00613          	li	a2,2047
    4dee:	bfe9                	j	4dc8 <__subdf3+0x562>
    4df0:	00800537          	lui	a0,0x800
    4df4:	8f49                	or	a4,a4,a0
    4df6:	88b2                	mv	a7,a2
    4df8:	03800613          	li	a2,56
    4dfc:	07164763          	blt	a2,a7,4e6a <__subdf3+0x604>
    4e00:	467d                	li	a2,31
    4e02:	03164f63          	blt	a2,a7,4e40 <__subdf3+0x5da>
    4e06:	02000513          	li	a0,32
    4e0a:	41150533          	sub	a0,a0,a7
    4e0e:	00a71633          	sll	a2,a4,a0
    4e12:	0117de33          	srl	t3,a5,a7
    4e16:	00a797b3          	sll	a5,a5,a0
    4e1a:	01c66633          	or	a2,a2,t3
    4e1e:	00f037b3          	snez	a5,a5
    4e22:	8fd1                	or	a5,a5,a2
    4e24:	01175733          	srl	a4,a4,a7
    4e28:	40f807b3          	sub	a5,a6,a5
    4e2c:	40e68733          	sub	a4,a3,a4
    4e30:	00f836b3          	sltu	a3,a6,a5
    4e34:	40d706b3          	sub	a3,a4,a3
    4e38:	883e                	mv	a6,a5
    4e3a:	862e                	mv	a2,a1
    4e3c:	849a                	mv	s1,t1
    4e3e:	bde9                	j	4d18 <__subdf3+0x4b2>
    4e40:	fe088613          	addi	a2,a7,-32
    4e44:	02000e13          	li	t3,32
    4e48:	00c75633          	srl	a2,a4,a2
    4e4c:	4501                	li	a0,0
    4e4e:	01c88863          	beq	a7,t3,4e5e <__subdf3+0x5f8>
    4e52:	04000513          	li	a0,64
    4e56:	41150533          	sub	a0,a0,a7
    4e5a:	00a71533          	sll	a0,a4,a0
    4e5e:	8fc9                	or	a5,a5,a0
    4e60:	00f037b3          	snez	a5,a5
    4e64:	8fd1                	or	a5,a5,a2
    4e66:	4701                	li	a4,0
    4e68:	b7c1                	j	4e28 <__subdf3+0x5c2>
    4e6a:	8fd9                	or	a5,a5,a4
    4e6c:	00f037b3          	snez	a5,a5
    4e70:	bfdd                	j	4e66 <__subdf3+0x600>
    4e72:	00140613          	addi	a2,s0,1 # 400001 <_global_impure_ptr+0x3f9ad9>
    4e76:	7fe67613          	andi	a2,a2,2046
    4e7a:	ee75                	bnez	a2,4f76 <__subdf3+0x710>
    4e7c:	00f76533          	or	a0,a4,a5
    4e80:	0106e633          	or	a2,a3,a6
    4e84:	e05d                	bnez	s0,4f2a <__subdf3+0x6c4>
    4e86:	06051263          	bnez	a0,4eea <__subdf3+0x684>
    4e8a:	1c061263          	bnez	a2,504e <__subdf3+0x7e8>
    4e8e:	ffe98493          	addi	s1,s3,-2
    4e92:	0014b493          	seqz	s1,s1
    4e96:	4701                	li	a4,0
    4e98:	4781                	li	a5,0
    4e9a:	00e7e6b3          	or	a3,a5,a4
    4e9e:	24068163          	beqz	a3,50e0 <__subdf3+0x87a>
    4ea2:	01f7d693          	srli	a3,a5,0x1f
    4ea6:	00171593          	slli	a1,a4,0x1
    4eaa:	95b6                	add	a1,a1,a3
    4eac:	00179693          	slli	a3,a5,0x1
    4eb0:	0076f613          	andi	a2,a3,7
    4eb4:	4401                	li	s0,0
    4eb6:	c605                	beqz	a2,4ede <__subdf3+0x678>
    4eb8:	4609                	li	a2,2
    4eba:	1ac98a63          	beq	s3,a2,506e <__subdf3+0x808>
    4ebe:	460d                	li	a2,3
    4ec0:	18c98d63          	beq	s3,a2,505a <__subdf3+0x7f4>
    4ec4:	4405                	li	s0,1
    4ec6:	00099c63          	bnez	s3,4ede <__subdf3+0x678>
    4eca:	00f6f613          	andi	a2,a3,15
    4ece:	4511                	li	a0,4
    4ed0:	00a60763          	beq	a2,a0,4ede <__subdf3+0x678>
    4ed4:	ffc6b693          	sltiu	a3,a3,-4
    4ed8:	0016c693          	xori	a3,a3,1
    4edc:	95b6                	add	a1,a1,a3
    4ede:	81e1                	srli	a1,a1,0x18
    4ee0:	0015c593          	xori	a1,a1,1
    4ee4:	8985                	andi	a1,a1,1
    4ee6:	4601                	li	a2,0
    4ee8:	b199                	j	4b2e <__subdf3+0x2c8>
    4eea:	da45                	beqz	a2,4e9a <__subdf3+0x634>
    4eec:	410785b3          	sub	a1,a5,a6
    4ef0:	00b7b533          	sltu	a0,a5,a1
    4ef4:	40d70633          	sub	a2,a4,a3
    4ef8:	8e09                	sub	a2,a2,a0
    4efa:	00800537          	lui	a0,0x800
    4efe:	8d71                	and	a0,a0,a2
    4f00:	c919                	beqz	a0,4f16 <__subdf3+0x6b0>
    4f02:	40f807b3          	sub	a5,a6,a5
    4f06:	40e68733          	sub	a4,a3,a4
    4f0a:	00f83833          	sltu	a6,a6,a5
    4f0e:	41070733          	sub	a4,a4,a6
    4f12:	849a                	mv	s1,t1
    4f14:	b759                	j	4e9a <__subdf3+0x634>
    4f16:	00c5e7b3          	or	a5,a1,a2
    4f1a:	12079d63          	bnez	a5,5054 <__subdf3+0x7ee>
    4f1e:	ffe98493          	addi	s1,s3,-2
    4f22:	0014b493          	seqz	s1,s1
    4f26:	4701                	li	a4,0
    4f28:	bf8d                	j	4e9a <__subdf3+0x634>
    4f2a:	7ff00893          	li	a7,2047
    4f2e:	03141463          	bne	s0,a7,4f56 <__subdf3+0x6f0>
    4f32:	1e050863          	beqz	a0,5122 <__subdf3+0x8bc>
    4f36:	00400437          	lui	s0,0x400
    4f3a:	8c79                	and	s0,s0,a4
    4f3c:	00143413          	seqz	s0,s0
    4f40:	0412                	slli	s0,s0,0x4
    4f42:	03159763          	bne	a1,a7,4f70 <__subdf3+0x70a>
    4f46:	00060b63          	beqz	a2,4f5c <__subdf3+0x6f6>
    4f4a:	004005b7          	lui	a1,0x400
    4f4e:	8df5                	and	a1,a1,a3
    4f50:	e591                	bnez	a1,4f5c <__subdf3+0x6f6>
    4f52:	4441                	li	s0,16
    4f54:	a021                	j	4f5c <__subdf3+0x6f6>
    4f56:	4401                	li	s0,0
    4f58:	ff1587e3          	beq	a1,a7,4f46 <__subdf3+0x6e0>
    4f5c:	00051a63          	bnez	a0,4f70 <__subdf3+0x70a>
    4f60:	16060863          	beqz	a2,50d0 <__subdf3+0x86a>
    4f64:	8736                	mv	a4,a3
    4f66:	87c2                	mv	a5,a6
    4f68:	849a                	mv	s1,t1
    4f6a:	b921                	j	4b82 <__subdf3+0x31c>
    4f6c:	4401                	li	s0,0
    4f6e:	bfe1                	j	4f46 <__subdf3+0x6e0>
    4f70:	c00609e3          	beqz	a2,4b82 <__subdf3+0x31c>
    4f74:	b105                	j	4b94 <__subdf3+0x32e>
    4f76:	41078a33          	sub	s4,a5,a6
    4f7a:	0147b633          	sltu	a2,a5,s4
    4f7e:	40d70933          	sub	s2,a4,a3
    4f82:	40c90933          	sub	s2,s2,a2
    4f86:	00800637          	lui	a2,0x800
    4f8a:	00c97633          	and	a2,s2,a2
    4f8e:	c625                	beqz	a2,4ff6 <__subdf3+0x790>
    4f90:	40f80a33          	sub	s4,a6,a5
    4f94:	8e99                	sub	a3,a3,a4
    4f96:	01483833          	sltu	a6,a6,s4
    4f9a:	41068933          	sub	s2,a3,a6
    4f9e:	849a                	mv	s1,t1
    4fa0:	04090f63          	beqz	s2,4ffe <__subdf3+0x798>
    4fa4:	854a                	mv	a0,s2
    4fa6:	2645                	jal	5346 <__clzsi2>
    4fa8:	ff850613          	addi	a2,a0,-8 # 7ffff8 <_global_impure_ptr+0x7f9ad0>
    4fac:	47fd                	li	a5,31
    4fae:	04c7cd63          	blt	a5,a2,5008 <__subdf3+0x7a2>
    4fb2:	02000693          	li	a3,32
    4fb6:	8e91                	sub	a3,a3,a2
    4fb8:	00c91733          	sll	a4,s2,a2
    4fbc:	00da56b3          	srl	a3,s4,a3
    4fc0:	8ed9                	or	a3,a3,a4
    4fc2:	00ca1833          	sll	a6,s4,a2
    4fc6:	06864a63          	blt	a2,s0,503a <__subdf3+0x7d4>
    4fca:	8e01                	sub	a2,a2,s0
    4fcc:	00160713          	addi	a4,a2,1 # 800001 <_global_impure_ptr+0x7f9ad9>
    4fd0:	47fd                	li	a5,31
    4fd2:	04e7c163          	blt	a5,a4,5014 <__subdf3+0x7ae>
    4fd6:	02000613          	li	a2,32
    4fda:	8e19                	sub	a2,a2,a4
    4fdc:	00c697b3          	sll	a5,a3,a2
    4fe0:	00e85533          	srl	a0,a6,a4
    4fe4:	00c81633          	sll	a2,a6,a2
    4fe8:	8fc9                	or	a5,a5,a0
    4fea:	00c03633          	snez	a2,a2
    4fee:	8fd1                	or	a5,a5,a2
    4ff0:	00e6d733          	srl	a4,a3,a4
    4ff4:	b55d                	j	4e9a <__subdf3+0x634>
    4ff6:	012a67b3          	or	a5,s4,s2
    4ffa:	f3dd                	bnez	a5,4fa0 <__subdf3+0x73a>
    4ffc:	b70d                	j	4f1e <__subdf3+0x6b8>
    4ffe:	8552                	mv	a0,s4
    5000:	2699                	jal	5346 <__clzsi2>
    5002:	02050513          	addi	a0,a0,32
    5006:	b74d                	j	4fa8 <__subdf3+0x742>
    5008:	fd850693          	addi	a3,a0,-40
    500c:	00da16b3          	sll	a3,s4,a3
    5010:	4801                	li	a6,0
    5012:	bf55                	j	4fc6 <__subdf3+0x760>
    5014:	1605                	addi	a2,a2,-31
    5016:	02000593          	li	a1,32
    501a:	00c6d633          	srl	a2,a3,a2
    501e:	4781                	li	a5,0
    5020:	00b70763          	beq	a4,a1,502e <__subdf3+0x7c8>
    5024:	04000793          	li	a5,64
    5028:	8f99                	sub	a5,a5,a4
    502a:	00f697b3          	sll	a5,a3,a5
    502e:	00f867b3          	or	a5,a6,a5
    5032:	00f037b3          	snez	a5,a5
    5036:	8fd1                	or	a5,a5,a2
    5038:	b5fd                	j	4f26 <__subdf3+0x6c0>
    503a:	ff8007b7          	lui	a5,0xff800
    503e:	17fd                	addi	a5,a5,-1
    5040:	40c40633          	sub	a2,s0,a2
    5044:	8efd                	and	a3,a3,a5
    5046:	b2d9                	j	4a0c <__subdf3+0x1a6>
    5048:	8736                	mv	a4,a3
    504a:	87c2                	mv	a5,a6
    504c:	b5b9                	j	4e9a <__subdf3+0x634>
    504e:	8736                	mv	a4,a3
    5050:	87c2                	mv	a5,a6
    5052:	b5c1                	j	4f12 <__subdf3+0x6ac>
    5054:	8732                	mv	a4,a2
    5056:	87ae                	mv	a5,a1
    5058:	b589                	j	4e9a <__subdf3+0x634>
    505a:	8426                	mv	s0,s1
    505c:	e80491e3          	bnez	s1,4ede <__subdf3+0x678>
    5060:	ff86b693          	sltiu	a3,a3,-8
    5064:	0016c693          	xori	a3,a3,1
    5068:	95b6                	add	a1,a1,a3
    506a:	4405                	li	s0,1
    506c:	bd8d                	j	4ede <__subdf3+0x678>
    506e:	4405                	li	s0,1
    5070:	e60487e3          	beqz	s1,4ede <__subdf3+0x678>
    5074:	ff86b693          	sltiu	a3,a3,-8
    5078:	0016c693          	xori	a3,a3,1
    507c:	95b6                	add	a1,a1,a3
    507e:	8426                	mv	s0,s1
    5080:	bdb9                	j	4ede <__subdf3+0x678>
    5082:	4701                	li	a4,0
    5084:	7ff00613          	li	a2,2047
    5088:	b045                	j	4928 <__subdf3+0xc2>
    508a:	87c2                	mv	a5,a6
    508c:	7ff00613          	li	a2,2047
    5090:	be69                	j	4c2a <__subdf3+0x3c4>
    5092:	577d                	li	a4,-1
    5094:	57fd                	li	a5,-1
    5096:	7fe00613          	li	a2,2046
    509a:	4581                	li	a1,0
    509c:	be75                	j	4c58 <__subdf3+0x3f2>
    509e:	4701                	li	a4,0
    50a0:	4781                	li	a5,0
    50a2:	bcfd                	j	4ba0 <__subdf3+0x33a>
    50a4:	4701                	li	a4,0
    50a6:	4781                	li	a5,0
    50a8:	bff1                	j	5084 <__subdf3+0x81e>
    50aa:	87c2                	mv	a5,a6
    50ac:	4581                	li	a1,0
    50ae:	b441                	j	4b2e <__subdf3+0x2c8>
    50b0:	4701                	li	a4,0
    50b2:	849a                	mv	s1,t1
    50b4:	b4f5                	j	4ba0 <__subdf3+0x33a>
    50b6:	87c2                	mv	a5,a6
    50b8:	849a                	mv	s1,t1
    50ba:	bfcd                	j	50ac <__subdf3+0x846>
    50bc:	4701                	li	a4,0
    50be:	7ff00613          	li	a2,2047
    50c2:	849a                	mv	s1,t1
    50c4:	b095                	j	4928 <__subdf3+0xc2>
    50c6:	87c2                	mv	a5,a6
    50c8:	7ff00613          	li	a2,2047
    50cc:	849a                	mv	s1,t1
    50ce:	beb1                	j	4c2a <__subdf3+0x3c4>
    50d0:	4781                	li	a5,0
    50d2:	4481                	li	s1,0
    50d4:	00400737          	lui	a4,0x400
    50d8:	7ff00613          	li	a2,2047
    50dc:	4441                	li	s0,16
    50de:	b4c9                	j	4ba0 <__subdf3+0x33a>
    50e0:	4701                	li	a4,0
    50e2:	4781                	li	a5,0
    50e4:	4601                	li	a2,0
    50e6:	b089                	j	4928 <__subdf3+0xc2>
    50e8:	e489                	bnez	s1,50f2 <__subdf3+0x88c>
    50ea:	00878693          	addi	a3,a5,8 # ff800008 <__kernel_stack+0xdf740010>
    50ee:	b679                	j	4c7c <__subdf3+0x416>
    50f0:	fced                	bnez	s1,50ea <__subdf3+0x884>
    50f2:	a40597e3          	bnez	a1,4b40 <__subdf3+0x2da>
    50f6:	b46d                	j	4ba0 <__subdf3+0x33a>
    50f8:	4781                	li	a5,0
    50fa:	02098063          	beqz	s3,511a <__subdf3+0x8b4>
    50fe:	470d                	li	a4,3
    5100:	00e99863          	bne	s3,a4,5110 <__subdf3+0x8aa>
    5104:	00048b63          	beqz	s1,511a <__subdf3+0x8b4>
    5108:	57fd                	li	a5,-1
    510a:	7fe00613          	li	a2,2046
    510e:	a031                	j	511a <__subdf3+0x8b4>
    5110:	4709                	li	a4,2
    5112:	fee99be3          	bne	s3,a4,5108 <__subdf3+0x8a2>
    5116:	fe0489e3          	beqz	s1,5108 <__subdf3+0x8a2>
    511a:	00546413          	ori	s0,s0,5
    511e:	873e                	mv	a4,a5
    5120:	bc69                	j	4bba <__subdf3+0x354>
    5122:	e48585e3          	beq	a1,s0,4f6c <__subdf3+0x706>
    5126:	4401                	li	s0,0
    5128:	bd25                	j	4f60 <__subdf3+0x6fa>
    512a:	a68580e3          	beq	a1,s0,4b8a <__subdf3+0x324>
    512e:	4401                	li	s0,0
    5130:	b4b9                	j	4b7e <__subdf3+0x318>

00005132 <__fixdfsi>:
    5132:	882a                	mv	a6,a0
    5134:	002027f3          	frrm	a5
    5138:	001007b7          	lui	a5,0x100
    513c:	0145d693          	srli	a3,a1,0x14
    5140:	fff78613          	addi	a2,a5,-1 # fffff <_global_impure_ptr+0xf9ad7>
    5144:	7ff6f693          	andi	a3,a3,2047
    5148:	3fe00713          	li	a4,1022
    514c:	8e6d                	and	a2,a2,a1
    514e:	81fd                	srli	a1,a1,0x1f
    5150:	00d74763          	blt	a4,a3,515e <__fixdfsi+0x2c>
    5154:	08069b63          	bnez	a3,51ea <__fixdfsi+0xb8>
    5158:	8d51                	or	a0,a0,a2
    515a:	e941                	bnez	a0,51ea <__fixdfsi+0xb8>
    515c:	8082                	ret
    515e:	41d00713          	li	a4,1053
    5162:	02d75863          	bge	a4,a3,5192 <__fixdfsi+0x60>
    5166:	80000737          	lui	a4,0x80000
    516a:	fff74713          	not	a4,a4
    516e:	00e58533          	add	a0,a1,a4
    5172:	cdbd                	beqz	a1,51f0 <__fixdfsi+0xbe>
    5174:	41e00793          	li	a5,1054
    5178:	4741                	li	a4,16
    517a:	04f69263          	bne	a3,a5,51be <__fixdfsi+0x8c>
    517e:	00b61793          	slli	a5,a2,0xb
    5182:	01585613          	srli	a2,a6,0x15
    5186:	8fd1                	or	a5,a5,a2
    5188:	eb9d                	bnez	a5,51be <__fixdfsi+0x8c>
    518a:	00b81713          	slli	a4,a6,0xb
    518e:	e33d                	bnez	a4,51f4 <__fixdfsi+0xc2>
    5190:	8082                	ret
    5192:	43300513          	li	a0,1075
    5196:	8d15                	sub	a0,a0,a3
    5198:	477d                	li	a4,31
    519a:	8fd1                	or	a5,a5,a2
    519c:	02a74463          	blt	a4,a0,51c4 <__fixdfsi+0x92>
    51a0:	bed68613          	addi	a2,a3,-1043 # 7feffbed <__kernel_stack+0x5fe3fbf5>
    51a4:	00c816b3          	sll	a3,a6,a2
    51a8:	00c797b3          	sll	a5,a5,a2
    51ac:	00a85533          	srl	a0,a6,a0
    51b0:	00d03733          	snez	a4,a3
    51b4:	8d5d                	or	a0,a0,a5
    51b6:	c199                	beqz	a1,51bc <__fixdfsi+0x8a>
    51b8:	40a00533          	neg	a0,a0
    51bc:	c319                	beqz	a4,51c2 <__fixdfsi+0x90>
    51be:	00172073          	csrs	fflags,a4
    51c2:	8082                	ret
    51c4:	02000613          	li	a2,32
    51c8:	4701                	li	a4,0
    51ca:	00c50663          	beq	a0,a2,51d6 <__fixdfsi+0xa4>
    51ce:	c0d68713          	addi	a4,a3,-1011
    51d2:	00e79733          	sll	a4,a5,a4
    51d6:	41300513          	li	a0,1043
    51da:	01076733          	or	a4,a4,a6
    51de:	8d15                	sub	a0,a0,a3
    51e0:	00e03733          	snez	a4,a4
    51e4:	00a7d533          	srl	a0,a5,a0
    51e8:	b7f9                	j	51b6 <__fixdfsi+0x84>
    51ea:	4501                	li	a0,0
    51ec:	4705                	li	a4,1
    51ee:	bfc1                	j	51be <__fixdfsi+0x8c>
    51f0:	4741                	li	a4,16
    51f2:	b7f1                	j	51be <__fixdfsi+0x8c>
    51f4:	872e                	mv	a4,a1
    51f6:	b7e1                	j	51be <__fixdfsi+0x8c>

000051f8 <__fixunsdfsi>:
    51f8:	86aa                	mv	a3,a0
    51fa:	002027f3          	frrm	a5
    51fe:	00100837          	lui	a6,0x100
    5202:	0145d793          	srli	a5,a1,0x14
    5206:	fff80513          	addi	a0,a6,-1 # fffff <_global_impure_ptr+0xf9ad7>
    520a:	7ff7f793          	andi	a5,a5,2047
    520e:	3fe00613          	li	a2,1022
    5212:	8d6d                	and	a0,a0,a1
    5214:	01f5d713          	srli	a4,a1,0x1f
    5218:	00f64763          	blt	a2,a5,5226 <__fixunsdfsi+0x2e>
    521c:	06079763          	bnez	a5,528a <__fixunsdfsi+0x92>
    5220:	8d55                	or	a0,a0,a3
    5222:	e525                	bnez	a0,528a <__fixunsdfsi+0x92>
    5224:	8082                	ret
    5226:	41f00613          	li	a2,1055
    522a:	8e19                	sub	a2,a2,a4
    522c:	02c7d863          	bge	a5,a2,525c <__fixunsdfsi+0x64>
    5230:	04071f63          	bnez	a4,528e <__fixunsdfsi+0x96>
    5234:	010565b3          	or	a1,a0,a6
    5238:	43300513          	li	a0,1075
    523c:	8d1d                	sub	a0,a0,a5
    523e:	477d                	li	a4,31
    5240:	02a74463          	blt	a4,a0,5268 <__fixunsdfsi+0x70>
    5244:	bed78793          	addi	a5,a5,-1043
    5248:	00f595b3          	sll	a1,a1,a5
    524c:	00a6d533          	srl	a0,a3,a0
    5250:	00f697b3          	sll	a5,a3,a5
    5254:	8d4d                	or	a0,a0,a1
    5256:	cb8d                	beqz	a5,5288 <__fixunsdfsi+0x90>
    5258:	4785                	li	a5,1
    525a:	a021                	j	5262 <__fixunsdfsi+0x6a>
    525c:	fff70513          	addi	a0,a4,-1 # 7fffffff <__kernel_stack+0x5ff40007>
    5260:	47c1                	li	a5,16
    5262:	0017a073          	csrs	fflags,a5
    5266:	a00d                	j	5288 <__fixunsdfsi+0x90>
    5268:	02000613          	li	a2,32
    526c:	4701                	li	a4,0
    526e:	00c50663          	beq	a0,a2,527a <__fixunsdfsi+0x82>
    5272:	c0d78713          	addi	a4,a5,-1011
    5276:	00e59733          	sll	a4,a1,a4
    527a:	41300513          	li	a0,1043
    527e:	8d1d                	sub	a0,a0,a5
    5280:	8f55                	or	a4,a4,a3
    5282:	00a5d533          	srl	a0,a1,a0
    5286:	fb69                	bnez	a4,5258 <__fixunsdfsi+0x60>
    5288:	8082                	ret
    528a:	4501                	li	a0,0
    528c:	b7f1                	j	5258 <__fixunsdfsi+0x60>
    528e:	4501                	li	a0,0
    5290:	bfc1                	j	5260 <__fixunsdfsi+0x68>

00005292 <__floatsidf>:
    5292:	1141                	addi	sp,sp,-16
    5294:	c606                	sw	ra,12(sp)
    5296:	c422                	sw	s0,8(sp)
    5298:	c226                	sw	s1,4(sp)
    529a:	cd21                	beqz	a0,52f2 <__floatsidf+0x60>
    529c:	41f55793          	srai	a5,a0,0x1f
    52a0:	00a7c433          	xor	s0,a5,a0
    52a4:	8c1d                	sub	s0,s0,a5
    52a6:	01f55493          	srli	s1,a0,0x1f
    52aa:	8522                	mv	a0,s0
    52ac:	2869                	jal	5346 <__clzsi2>
    52ae:	41e00713          	li	a4,1054
    52b2:	47a9                	li	a5,10
    52b4:	8f09                	sub	a4,a4,a0
    52b6:	02a7c863          	blt	a5,a0,52e6 <__floatsidf+0x54>
    52ba:	47ad                	li	a5,11
    52bc:	8f89                	sub	a5,a5,a0
    52be:	0555                	addi	a0,a0,21
    52c0:	00f457b3          	srl	a5,s0,a5
    52c4:	00a41433          	sll	s0,s0,a0
    52c8:	8526                	mv	a0,s1
    52ca:	07b2                	slli	a5,a5,0xc
    52cc:	0752                	slli	a4,a4,0x14
    52ce:	83b1                	srli	a5,a5,0xc
    52d0:	057e                	slli	a0,a0,0x1f
    52d2:	8fd9                	or	a5,a5,a4
    52d4:	40b2                	lw	ra,12(sp)
    52d6:	00a7e733          	or	a4,a5,a0
    52da:	8522                	mv	a0,s0
    52dc:	4422                	lw	s0,8(sp)
    52de:	4492                	lw	s1,4(sp)
    52e0:	85ba                	mv	a1,a4
    52e2:	0141                	addi	sp,sp,16
    52e4:	8082                	ret
    52e6:	1555                	addi	a0,a0,-11
    52e8:	00a417b3          	sll	a5,s0,a0
    52ec:	8526                	mv	a0,s1
    52ee:	4401                	li	s0,0
    52f0:	bfe9                	j	52ca <__floatsidf+0x38>
    52f2:	4701                	li	a4,0
    52f4:	4781                	li	a5,0
    52f6:	bfe5                	j	52ee <__floatsidf+0x5c>

000052f8 <__floatunsidf>:
    52f8:	1141                	addi	sp,sp,-16
    52fa:	c422                	sw	s0,8(sp)
    52fc:	c606                	sw	ra,12(sp)
    52fe:	842a                	mv	s0,a0
    5300:	c121                	beqz	a0,5340 <__floatunsidf+0x48>
    5302:	2091                	jal	5346 <__clzsi2>
    5304:	41e00713          	li	a4,1054
    5308:	47a9                	li	a5,10
    530a:	8f09                	sub	a4,a4,a0
    530c:	02a7c463          	blt	a5,a0,5334 <__floatunsidf+0x3c>
    5310:	47ad                	li	a5,11
    5312:	8f89                	sub	a5,a5,a0
    5314:	0555                	addi	a0,a0,21
    5316:	00f457b3          	srl	a5,s0,a5
    531a:	00a41433          	sll	s0,s0,a0
    531e:	40b2                	lw	ra,12(sp)
    5320:	8522                	mv	a0,s0
    5322:	07b2                	slli	a5,a5,0xc
    5324:	4422                	lw	s0,8(sp)
    5326:	0752                	slli	a4,a4,0x14
    5328:	83b1                	srli	a5,a5,0xc
    532a:	00f766b3          	or	a3,a4,a5
    532e:	85b6                	mv	a1,a3
    5330:	0141                	addi	sp,sp,16
    5332:	8082                	ret
    5334:	ff550793          	addi	a5,a0,-11
    5338:	00f417b3          	sll	a5,s0,a5
    533c:	4401                	li	s0,0
    533e:	b7c5                	j	531e <__floatunsidf+0x26>
    5340:	4781                	li	a5,0
    5342:	4701                	li	a4,0
    5344:	bfe9                	j	531e <__floatunsidf+0x26>

00005346 <__clzsi2>:
    5346:	67c1                	lui	a5,0x10
    5348:	02f57663          	bgeu	a0,a5,5374 <__clzsi2+0x2e>
    534c:	0ff00793          	li	a5,255
    5350:	00a7b7b3          	sltu	a5,a5,a0
    5354:	078e                	slli	a5,a5,0x3
    5356:	02000713          	li	a4,32
    535a:	8f1d                	sub	a4,a4,a5
    535c:	00f55533          	srl	a0,a0,a5
    5360:	00001797          	auipc	a5,0x1
    5364:	02c78793          	addi	a5,a5,44 # 638c <__clz_tab>
    5368:	953e                	add	a0,a0,a5
    536a:	00054503          	lbu	a0,0(a0)
    536e:	40a70533          	sub	a0,a4,a0
    5372:	8082                	ret
    5374:	01000737          	lui	a4,0x1000
    5378:	47c1                	li	a5,16
    537a:	fce56ee3          	bltu	a0,a4,5356 <__clzsi2+0x10>
    537e:	47e1                	li	a5,24
    5380:	bfd9                	j	5356 <__clzsi2+0x10>

00005382 <malloc>:
    5382:	85aa                	mv	a1,a0
    5384:	1fffb517          	auipc	a0,0x1fffb
    5388:	52c52503          	lw	a0,1324(a0) # 200008b0 <_impure_ptr>
    538c:	a801                	j	539c <_malloc_r>

0000538e <free>:
    538e:	85aa                	mv	a1,a0
    5390:	1fffb517          	auipc	a0,0x1fffb
    5394:	52052503          	lw	a0,1312(a0) # 200008b0 <_impure_ptr>
    5398:	78c0006f          	j	5b24 <_free_r>

0000539c <_malloc_r>:
    539c:	7179                	addi	sp,sp,-48
    539e:	d04a                	sw	s2,32(sp)
    53a0:	d606                	sw	ra,44(sp)
    53a2:	d422                	sw	s0,40(sp)
    53a4:	d226                	sw	s1,36(sp)
    53a6:	ce4e                	sw	s3,28(sp)
    53a8:	cc52                	sw	s4,24(sp)
    53aa:	ca56                	sw	s5,20(sp)
    53ac:	c85a                	sw	s6,16(sp)
    53ae:	c65e                	sw	s7,12(sp)
    53b0:	c462                	sw	s8,8(sp)
    53b2:	c266                	sw	s9,4(sp)
    53b4:	00b58793          	addi	a5,a1,11 # 40000b <_global_impure_ptr+0x3f9ae3>
    53b8:	4759                	li	a4,22
    53ba:	892a                	mv	s2,a0
    53bc:	04f76363          	bltu	a4,a5,5402 <_malloc_r+0x66>
    53c0:	47c1                	li	a5,16
    53c2:	16b7e363          	bltu	a5,a1,5528 <_malloc_r+0x18c>
    53c6:	2b79                	jal	5964 <__malloc_lock>
    53c8:	44c1                	li	s1,16
    53ca:	47e1                	li	a5,24
    53cc:	4609                	li	a2,2
    53ce:	1fffb997          	auipc	s3,0x1fffb
    53d2:	c5698993          	addi	s3,s3,-938 # 20000024 <__malloc_av_>
    53d6:	97ce                	add	a5,a5,s3
    53d8:	43c0                	lw	s0,4(a5)
    53da:	ff878713          	addi	a4,a5,-8
    53de:	16e40d63          	beq	s0,a4,5558 <_malloc_r+0x1bc>
    53e2:	405c                	lw	a5,4(s0)
    53e4:	4454                	lw	a3,12(s0)
    53e6:	4410                	lw	a2,8(s0)
    53e8:	9bf1                	andi	a5,a5,-4
    53ea:	97a2                	add	a5,a5,s0
    53ec:	43d8                	lw	a4,4(a5)
    53ee:	c654                	sw	a3,12(a2)
    53f0:	c690                	sw	a2,8(a3)
    53f2:	00176713          	ori	a4,a4,1
    53f6:	854a                	mv	a0,s2
    53f8:	c3d8                	sw	a4,4(a5)
    53fa:	2b95                	jal	596e <__malloc_unlock>
    53fc:	00840513          	addi	a0,s0,8 # 400008 <_global_impure_ptr+0x3f9ae0>
    5400:	aa05                	j	5530 <_malloc_r+0x194>
    5402:	ff87f493          	andi	s1,a5,-8
    5406:	1207c163          	bltz	a5,5528 <_malloc_r+0x18c>
    540a:	10b4ef63          	bltu	s1,a1,5528 <_malloc_r+0x18c>
    540e:	2b99                	jal	5964 <__malloc_lock>
    5410:	1f700793          	li	a5,503
    5414:	3497f963          	bgeu	a5,s1,5766 <_malloc_r+0x3ca>
    5418:	0094d793          	srli	a5,s1,0x9
    541c:	12078763          	beqz	a5,554a <_malloc_r+0x1ae>
    5420:	4711                	li	a4,4
    5422:	2ef76263          	bltu	a4,a5,5706 <_malloc_r+0x36a>
    5426:	0064d793          	srli	a5,s1,0x6
    542a:	03978613          	addi	a2,a5,57
    542e:	03878513          	addi	a0,a5,56
    5432:	00361693          	slli	a3,a2,0x3
    5436:	1fffb997          	auipc	s3,0x1fffb
    543a:	bee98993          	addi	s3,s3,-1042 # 20000024 <__malloc_av_>
    543e:	96ce                	add	a3,a3,s3
    5440:	42c0                	lw	s0,4(a3)
    5442:	16e1                	addi	a3,a3,-8
    5444:	02868063          	beq	a3,s0,5464 <_malloc_r+0xc8>
    5448:	45bd                	li	a1,15
    544a:	a031                	j	5456 <_malloc_r+0xba>
    544c:	26075963          	bgez	a4,56be <_malloc_r+0x322>
    5450:	4440                	lw	s0,12(s0)
    5452:	00868963          	beq	a3,s0,5464 <_malloc_r+0xc8>
    5456:	405c                	lw	a5,4(s0)
    5458:	9bf1                	andi	a5,a5,-4
    545a:	40978733          	sub	a4,a5,s1
    545e:	fee5d7e3          	bge	a1,a4,544c <_malloc_r+0xb0>
    5462:	862a                	mv	a2,a0
    5464:	0109a403          	lw	s0,16(s3)
    5468:	1fffb897          	auipc	a7,0x1fffb
    546c:	bc488893          	addi	a7,a7,-1084 # 2000002c <__malloc_av_+0x8>
    5470:	11140063          	beq	s0,a7,5570 <_malloc_r+0x1d4>
    5474:	4048                	lw	a0,4(s0)
    5476:	46bd                	li	a3,15
    5478:	9971                	andi	a0,a0,-4
    547a:	409507b3          	sub	a5,a0,s1
    547e:	30f6c463          	blt	a3,a5,5786 <_malloc_r+0x3ea>
    5482:	0119aa23          	sw	a7,20(s3)
    5486:	0119a823          	sw	a7,16(s3)
    548a:	2e07d363          	bgez	a5,5770 <_malloc_r+0x3d4>
    548e:	1ff00793          	li	a5,511
    5492:	22a7e963          	bltu	a5,a0,56c4 <_malloc_r+0x328>
    5496:	ff857793          	andi	a5,a0,-8
    549a:	07a1                	addi	a5,a5,8
    549c:	0049a583          	lw	a1,4(s3)
    54a0:	97ce                	add	a5,a5,s3
    54a2:	4394                	lw	a3,0(a5)
    54a4:	8115                	srli	a0,a0,0x5
    54a6:	4705                	li	a4,1
    54a8:	00a71733          	sll	a4,a4,a0
    54ac:	8f4d                	or	a4,a4,a1
    54ae:	ff878593          	addi	a1,a5,-8
    54b2:	c44c                	sw	a1,12(s0)
    54b4:	c414                	sw	a3,8(s0)
    54b6:	00e9a223          	sw	a4,4(s3)
    54ba:	c380                	sw	s0,0(a5)
    54bc:	c6c0                	sw	s0,12(a3)
    54be:	40265793          	srai	a5,a2,0x2
    54c2:	4585                	li	a1,1
    54c4:	00f595b3          	sll	a1,a1,a5
    54c8:	0ab76d63          	bltu	a4,a1,5582 <_malloc_r+0x1e6>
    54cc:	00e5f7b3          	and	a5,a1,a4
    54d0:	ef81                	bnez	a5,54e8 <_malloc_r+0x14c>
    54d2:	0586                	slli	a1,a1,0x1
    54d4:	9a71                	andi	a2,a2,-4
    54d6:	00e5f7b3          	and	a5,a1,a4
    54da:	0611                	addi	a2,a2,4
    54dc:	e791                	bnez	a5,54e8 <_malloc_r+0x14c>
    54de:	0586                	slli	a1,a1,0x1
    54e0:	00e5f7b3          	and	a5,a1,a4
    54e4:	0611                	addi	a2,a2,4
    54e6:	dfe5                	beqz	a5,54de <_malloc_r+0x142>
    54e8:	483d                	li	a6,15
    54ea:	00361313          	slli	t1,a2,0x3
    54ee:	934e                	add	t1,t1,s3
    54f0:	851a                	mv	a0,t1
    54f2:	455c                	lw	a5,12(a0)
    54f4:	8e32                	mv	t3,a2
    54f6:	22f50863          	beq	a0,a5,5726 <_malloc_r+0x38a>
    54fa:	43d8                	lw	a4,4(a5)
    54fc:	843e                	mv	s0,a5
    54fe:	47dc                	lw	a5,12(a5)
    5500:	9b71                	andi	a4,a4,-4
    5502:	409706b3          	sub	a3,a4,s1
    5506:	22d84763          	blt	a6,a3,5734 <_malloc_r+0x398>
    550a:	fe06c6e3          	bltz	a3,54f6 <_malloc_r+0x15a>
    550e:	9722                	add	a4,a4,s0
    5510:	4354                	lw	a3,4(a4)
    5512:	4410                	lw	a2,8(s0)
    5514:	854a                	mv	a0,s2
    5516:	0016e693          	ori	a3,a3,1
    551a:	c354                	sw	a3,4(a4)
    551c:	c65c                	sw	a5,12(a2)
    551e:	c790                	sw	a2,8(a5)
    5520:	21b9                	jal	596e <__malloc_unlock>
    5522:	00840513          	addi	a0,s0,8
    5526:	a029                	j	5530 <_malloc_r+0x194>
    5528:	47b1                	li	a5,12
    552a:	00f92023          	sw	a5,0(s2) # 800000 <_global_impure_ptr+0x7f9ad8>
    552e:	4501                	li	a0,0
    5530:	50b2                	lw	ra,44(sp)
    5532:	5422                	lw	s0,40(sp)
    5534:	5492                	lw	s1,36(sp)
    5536:	5902                	lw	s2,32(sp)
    5538:	49f2                	lw	s3,28(sp)
    553a:	4a62                	lw	s4,24(sp)
    553c:	4ad2                	lw	s5,20(sp)
    553e:	4b42                	lw	s6,16(sp)
    5540:	4bb2                	lw	s7,12(sp)
    5542:	4c22                	lw	s8,8(sp)
    5544:	4c92                	lw	s9,4(sp)
    5546:	6145                	addi	sp,sp,48
    5548:	8082                	ret
    554a:	20000693          	li	a3,512
    554e:	04000613          	li	a2,64
    5552:	03f00513          	li	a0,63
    5556:	b5c5                	j	5436 <_malloc_r+0x9a>
    5558:	47c0                	lw	s0,12(a5)
    555a:	0609                	addi	a2,a2,2
    555c:	e88793e3          	bne	a5,s0,53e2 <_malloc_r+0x46>
    5560:	0109a403          	lw	s0,16(s3)
    5564:	1fffb897          	auipc	a7,0x1fffb
    5568:	ac888893          	addi	a7,a7,-1336 # 2000002c <__malloc_av_+0x8>
    556c:	f11414e3          	bne	s0,a7,5474 <_malloc_r+0xd8>
    5570:	0049a703          	lw	a4,4(s3)
    5574:	40265793          	srai	a5,a2,0x2
    5578:	4585                	li	a1,1
    557a:	00f595b3          	sll	a1,a1,a5
    557e:	f4b777e3          	bgeu	a4,a1,54cc <_malloc_r+0x130>
    5582:	0089a403          	lw	s0,8(s3)
    5586:	00442a83          	lw	s5,4(s0)
    558a:	ffcafb13          	andi	s6,s5,-4
    558e:	009b6763          	bltu	s6,s1,559c <_malloc_r+0x200>
    5592:	409b07b3          	sub	a5,s6,s1
    5596:	473d                	li	a4,15
    5598:	10f74563          	blt	a4,a5,56a2 <_malloc_r+0x306>
    559c:	1fffbc97          	auipc	s9,0x1fffb
    55a0:	30cc8c93          	addi	s9,s9,780 # 200008a8 <__malloc_sbrk_base>
    55a4:	1fffba97          	auipc	s5,0x1fffb
    55a8:	644aaa83          	lw	s5,1604(s5) # 20000be8 <__malloc_top_pad>
    55ac:	000ca703          	lw	a4,0(s9)
    55b0:	57fd                	li	a5,-1
    55b2:	01640a33          	add	s4,s0,s6
    55b6:	9aa6                	add	s5,s5,s1
    55b8:	26f70e63          	beq	a4,a5,5834 <_malloc_r+0x498>
    55bc:	6785                	lui	a5,0x1
    55be:	07bd                	addi	a5,a5,15
    55c0:	9abe                	add	s5,s5,a5
    55c2:	77fd                	lui	a5,0xfffff
    55c4:	00fafab3          	and	s5,s5,a5
    55c8:	85d6                	mv	a1,s5
    55ca:	854a                	mv	a0,s2
    55cc:	2675                	jal	5978 <_sbrk_r>
    55ce:	57fd                	li	a5,-1
    55d0:	8baa                	mv	s7,a0
    55d2:	1ef50a63          	beq	a0,a5,57c6 <_malloc_r+0x42a>
    55d6:	1f456663          	bltu	a0,s4,57c2 <_malloc_r+0x426>
    55da:	1fffbc17          	auipc	s8,0x1fffb
    55de:	5dac0c13          	addi	s8,s8,1498 # 20000bb4 <__malloc_current_mallinfo>
    55e2:	000c2583          	lw	a1,0(s8)
    55e6:	95d6                	add	a1,a1,s5
    55e8:	00bc2023          	sw	a1,0(s8)
    55ec:	87ae                	mv	a5,a1
    55ee:	2caa0163          	beq	s4,a0,58b0 <_malloc_r+0x514>
    55f2:	000ca683          	lw	a3,0(s9)
    55f6:	577d                	li	a4,-1
    55f8:	2ce68863          	beq	a3,a4,58c8 <_malloc_r+0x52c>
    55fc:	414b8a33          	sub	s4,s7,s4
    5600:	97d2                	add	a5,a5,s4
    5602:	00fc2023          	sw	a5,0(s8)
    5606:	007bfc93          	andi	s9,s7,7
    560a:	240c8163          	beqz	s9,584c <_malloc_r+0x4b0>
    560e:	6785                	lui	a5,0x1
    5610:	419b8bb3          	sub	s7,s7,s9
    5614:	00878593          	addi	a1,a5,8 # 1008 <_etoa+0x3e8>
    5618:	0ba1                	addi	s7,s7,8
    561a:	419585b3          	sub	a1,a1,s9
    561e:	9ade                	add	s5,s5,s7
    5620:	17fd                	addi	a5,a5,-1
    5622:	415585b3          	sub	a1,a1,s5
    5626:	00f5fa33          	and	s4,a1,a5
    562a:	85d2                	mv	a1,s4
    562c:	854a                	mv	a0,s2
    562e:	26a9                	jal	5978 <_sbrk_r>
    5630:	57fd                	li	a5,-1
    5632:	2cf50d63          	beq	a0,a5,590c <_malloc_r+0x570>
    5636:	41750533          	sub	a0,a0,s7
    563a:	01450ab3          	add	s5,a0,s4
    563e:	000c2583          	lw	a1,0(s8)
    5642:	0179a423          	sw	s7,8(s3)
    5646:	001aea93          	ori	s5,s5,1
    564a:	95d2                	add	a1,a1,s4
    564c:	00bc2023          	sw	a1,0(s8)
    5650:	015ba223          	sw	s5,4(s7)
    5654:	27340d63          	beq	s0,s3,58ce <_malloc_r+0x532>
    5658:	46bd                	li	a3,15
    565a:	2766fc63          	bgeu	a3,s6,58d2 <_malloc_r+0x536>
    565e:	4058                	lw	a4,4(s0)
    5660:	ff4b0793          	addi	a5,s6,-12
    5664:	9be1                	andi	a5,a5,-8
    5666:	8b05                	andi	a4,a4,1
    5668:	8f5d                	or	a4,a4,a5
    566a:	c058                	sw	a4,4(s0)
    566c:	4615                	li	a2,5
    566e:	00f40733          	add	a4,s0,a5
    5672:	c350                	sw	a2,4(a4)
    5674:	c710                	sw	a2,8(a4)
    5676:	2af6e163          	bltu	a3,a5,5918 <_malloc_r+0x57c>
    567a:	004baa83          	lw	s5,4(s7)
    567e:	845e                	mv	s0,s7
    5680:	1fffb797          	auipc	a5,0x1fffb
    5684:	56478793          	addi	a5,a5,1380 # 20000be4 <__malloc_max_sbrked_mem>
    5688:	4398                	lw	a4,0(a5)
    568a:	00b77363          	bgeu	a4,a1,5690 <_malloc_r+0x2f4>
    568e:	c38c                	sw	a1,0(a5)
    5690:	1fffb797          	auipc	a5,0x1fffb
    5694:	55078793          	addi	a5,a5,1360 # 20000be0 <__malloc_max_total_mem>
    5698:	4398                	lw	a4,0(a5)
    569a:	12b77a63          	bgeu	a4,a1,57ce <_malloc_r+0x432>
    569e:	c38c                	sw	a1,0(a5)
    56a0:	a23d                	j	57ce <_malloc_r+0x432>
    56a2:	0014e713          	ori	a4,s1,1
    56a6:	c058                	sw	a4,4(s0)
    56a8:	94a2                	add	s1,s1,s0
    56aa:	0099a423          	sw	s1,8(s3)
    56ae:	0017e793          	ori	a5,a5,1
    56b2:	854a                	mv	a0,s2
    56b4:	c0dc                	sw	a5,4(s1)
    56b6:	2c65                	jal	596e <__malloc_unlock>
    56b8:	00840513          	addi	a0,s0,8
    56bc:	bd95                	j	5530 <_malloc_r+0x194>
    56be:	4454                	lw	a3,12(s0)
    56c0:	4410                	lw	a2,8(s0)
    56c2:	b325                	j	53ea <_malloc_r+0x4e>
    56c4:	00955793          	srli	a5,a0,0x9
    56c8:	4711                	li	a4,4
    56ca:	0ef77463          	bgeu	a4,a5,57b2 <_malloc_r+0x416>
    56ce:	4751                	li	a4,20
    56d0:	18f76d63          	bltu	a4,a5,586a <_malloc_r+0x4ce>
    56d4:	05c78693          	addi	a3,a5,92
    56d8:	05b78593          	addi	a1,a5,91
    56dc:	068e                	slli	a3,a3,0x3
    56de:	96ce                	add	a3,a3,s3
    56e0:	429c                	lw	a5,0(a3)
    56e2:	16e1                	addi	a3,a3,-8
    56e4:	14f68a63          	beq	a3,a5,5838 <_malloc_r+0x49c>
    56e8:	43d8                	lw	a4,4(a5)
    56ea:	9b71                	andi	a4,a4,-4
    56ec:	00e57563          	bgeu	a0,a4,56f6 <_malloc_r+0x35a>
    56f0:	479c                	lw	a5,8(a5)
    56f2:	fef69be3          	bne	a3,a5,56e8 <_malloc_r+0x34c>
    56f6:	47d4                	lw	a3,12(a5)
    56f8:	0049a703          	lw	a4,4(s3)
    56fc:	c454                	sw	a3,12(s0)
    56fe:	c41c                	sw	a5,8(s0)
    5700:	c680                	sw	s0,8(a3)
    5702:	c7c0                	sw	s0,12(a5)
    5704:	bb6d                	j	54be <_malloc_r+0x122>
    5706:	4751                	li	a4,20
    5708:	0ef77063          	bgeu	a4,a5,57e8 <_malloc_r+0x44c>
    570c:	05400713          	li	a4,84
    5710:	16f76963          	bltu	a4,a5,5882 <_malloc_r+0x4e6>
    5714:	00c4d793          	srli	a5,s1,0xc
    5718:	06f78613          	addi	a2,a5,111
    571c:	06e78513          	addi	a0,a5,110
    5720:	00361693          	slli	a3,a2,0x3
    5724:	bb09                	j	5436 <_malloc_r+0x9a>
    5726:	0e05                	addi	t3,t3,1
    5728:	003e7793          	andi	a5,t3,3
    572c:	0521                	addi	a0,a0,8
    572e:	cbe9                	beqz	a5,5800 <_malloc_r+0x464>
    5730:	455c                	lw	a5,12(a0)
    5732:	b3d1                	j	54f6 <_malloc_r+0x15a>
    5734:	4410                	lw	a2,8(s0)
    5736:	0014e593          	ori	a1,s1,1
    573a:	c04c                	sw	a1,4(s0)
    573c:	c65c                	sw	a5,12(a2)
    573e:	c790                	sw	a2,8(a5)
    5740:	94a2                	add	s1,s1,s0
    5742:	0099aa23          	sw	s1,20(s3)
    5746:	0099a823          	sw	s1,16(s3)
    574a:	0016e793          	ori	a5,a3,1
    574e:	0114a623          	sw	a7,12(s1)
    5752:	0114a423          	sw	a7,8(s1)
    5756:	c0dc                	sw	a5,4(s1)
    5758:	9722                	add	a4,a4,s0
    575a:	854a                	mv	a0,s2
    575c:	c314                	sw	a3,0(a4)
    575e:	2c01                	jal	596e <__malloc_unlock>
    5760:	00840513          	addi	a0,s0,8
    5764:	b3f1                	j	5530 <_malloc_r+0x194>
    5766:	0034d613          	srli	a2,s1,0x3
    576a:	00848793          	addi	a5,s1,8
    576e:	b185                	j	53ce <_malloc_r+0x32>
    5770:	00a40733          	add	a4,s0,a0
    5774:	435c                	lw	a5,4(a4)
    5776:	854a                	mv	a0,s2
    5778:	0017e793          	ori	a5,a5,1
    577c:	c35c                	sw	a5,4(a4)
    577e:	2ac5                	jal	596e <__malloc_unlock>
    5780:	00840513          	addi	a0,s0,8
    5784:	b375                	j	5530 <_malloc_r+0x194>
    5786:	0014e713          	ori	a4,s1,1
    578a:	c058                	sw	a4,4(s0)
    578c:	94a2                	add	s1,s1,s0
    578e:	0099aa23          	sw	s1,20(s3)
    5792:	0099a823          	sw	s1,16(s3)
    5796:	0017e713          	ori	a4,a5,1
    579a:	0114a623          	sw	a7,12(s1)
    579e:	0114a423          	sw	a7,8(s1)
    57a2:	c0d8                	sw	a4,4(s1)
    57a4:	9522                	add	a0,a0,s0
    57a6:	c11c                	sw	a5,0(a0)
    57a8:	854a                	mv	a0,s2
    57aa:	22d1                	jal	596e <__malloc_unlock>
    57ac:	00840513          	addi	a0,s0,8
    57b0:	b341                	j	5530 <_malloc_r+0x194>
    57b2:	00655793          	srli	a5,a0,0x6
    57b6:	03978693          	addi	a3,a5,57
    57ba:	03878593          	addi	a1,a5,56
    57be:	068e                	slli	a3,a3,0x3
    57c0:	bf39                	j	56de <_malloc_r+0x342>
    57c2:	0d340d63          	beq	s0,s3,589c <_malloc_r+0x500>
    57c6:	0089a403          	lw	s0,8(s3)
    57ca:	00442a83          	lw	s5,4(s0)
    57ce:	ffcafa93          	andi	s5,s5,-4
    57d2:	409a87b3          	sub	a5,s5,s1
    57d6:	009ae563          	bltu	s5,s1,57e0 <_malloc_r+0x444>
    57da:	473d                	li	a4,15
    57dc:	ecf743e3          	blt	a4,a5,56a2 <_malloc_r+0x306>
    57e0:	854a                	mv	a0,s2
    57e2:	2271                	jal	596e <__malloc_unlock>
    57e4:	4501                	li	a0,0
    57e6:	b3a9                	j	5530 <_malloc_r+0x194>
    57e8:	05c78613          	addi	a2,a5,92
    57ec:	05b78513          	addi	a0,a5,91
    57f0:	00361693          	slli	a3,a2,0x3
    57f4:	b189                	j	5436 <_malloc_r+0x9a>
    57f6:	00832783          	lw	a5,8(t1) # 10008 <_global_impure_ptr+0x9ae0>
    57fa:	167d                	addi	a2,a2,-1
    57fc:	16679163          	bne	a5,t1,595e <_malloc_r+0x5c2>
    5800:	00367793          	andi	a5,a2,3
    5804:	1361                	addi	t1,t1,-8
    5806:	fbe5                	bnez	a5,57f6 <_malloc_r+0x45a>
    5808:	0049a703          	lw	a4,4(s3)
    580c:	fff5c793          	not	a5,a1
    5810:	8ff9                	and	a5,a5,a4
    5812:	00f9a223          	sw	a5,4(s3)
    5816:	0586                	slli	a1,a1,0x1
    5818:	d6b7e5e3          	bltu	a5,a1,5582 <_malloc_r+0x1e6>
    581c:	d60583e3          	beqz	a1,5582 <_malloc_r+0x1e6>
    5820:	00f5f733          	and	a4,a1,a5
    5824:	e711                	bnez	a4,5830 <_malloc_r+0x494>
    5826:	0586                	slli	a1,a1,0x1
    5828:	00f5f733          	and	a4,a1,a5
    582c:	0e11                	addi	t3,t3,4
    582e:	df65                	beqz	a4,5826 <_malloc_r+0x48a>
    5830:	8672                	mv	a2,t3
    5832:	b965                	j	54ea <_malloc_r+0x14e>
    5834:	0ac1                	addi	s5,s5,16
    5836:	bb49                	j	55c8 <_malloc_r+0x22c>
    5838:	0049a503          	lw	a0,4(s3)
    583c:	8589                	srai	a1,a1,0x2
    583e:	4705                	li	a4,1
    5840:	00b71733          	sll	a4,a4,a1
    5844:	8f49                	or	a4,a4,a0
    5846:	00e9a223          	sw	a4,4(s3)
    584a:	bd4d                	j	56fc <_malloc_r+0x360>
    584c:	015b85b3          	add	a1,s7,s5
    5850:	40b005b3          	neg	a1,a1
    5854:	05d2                	slli	a1,a1,0x14
    5856:	0145da13          	srli	s4,a1,0x14
    585a:	85d2                	mv	a1,s4
    585c:	854a                	mv	a0,s2
    585e:	2a29                	jal	5978 <_sbrk_r>
    5860:	57fd                	li	a5,-1
    5862:	dcf51ae3          	bne	a0,a5,5636 <_malloc_r+0x29a>
    5866:	4a01                	li	s4,0
    5868:	bbd9                	j	563e <_malloc_r+0x2a2>
    586a:	05400713          	li	a4,84
    586e:	06f76663          	bltu	a4,a5,58da <_malloc_r+0x53e>
    5872:	00c55793          	srli	a5,a0,0xc
    5876:	06f78693          	addi	a3,a5,111
    587a:	06e78593          	addi	a1,a5,110
    587e:	068e                	slli	a3,a3,0x3
    5880:	bdb9                	j	56de <_malloc_r+0x342>
    5882:	15400713          	li	a4,340
    5886:	06f76663          	bltu	a4,a5,58f2 <_malloc_r+0x556>
    588a:	00f4d793          	srli	a5,s1,0xf
    588e:	07878613          	addi	a2,a5,120
    5892:	07778513          	addi	a0,a5,119
    5896:	00361693          	slli	a3,a2,0x3
    589a:	be71                	j	5436 <_malloc_r+0x9a>
    589c:	1fffbc17          	auipc	s8,0x1fffb
    58a0:	318c0c13          	addi	s8,s8,792 # 20000bb4 <__malloc_current_mallinfo>
    58a4:	000c2783          	lw	a5,0(s8)
    58a8:	97d6                	add	a5,a5,s5
    58aa:	00fc2023          	sw	a5,0(s8)
    58ae:	b391                	j	55f2 <_malloc_r+0x256>
    58b0:	014a1713          	slli	a4,s4,0x14
    58b4:	d2071fe3          	bnez	a4,55f2 <_malloc_r+0x256>
    58b8:	0089a403          	lw	s0,8(s3)
    58bc:	9ada                	add	s5,s5,s6
    58be:	001aea93          	ori	s5,s5,1
    58c2:	01542223          	sw	s5,4(s0)
    58c6:	bb6d                	j	5680 <_malloc_r+0x2e4>
    58c8:	017ca023          	sw	s7,0(s9)
    58cc:	bb2d                	j	5606 <_malloc_r+0x26a>
    58ce:	845e                	mv	s0,s7
    58d0:	bb45                	j	5680 <_malloc_r+0x2e4>
    58d2:	4785                	li	a5,1
    58d4:	00fba223          	sw	a5,4(s7)
    58d8:	b721                	j	57e0 <_malloc_r+0x444>
    58da:	15400713          	li	a4,340
    58de:	04f76863          	bltu	a4,a5,592e <_malloc_r+0x592>
    58e2:	00f55793          	srli	a5,a0,0xf
    58e6:	07878693          	addi	a3,a5,120
    58ea:	07778593          	addi	a1,a5,119
    58ee:	068e                	slli	a3,a3,0x3
    58f0:	b3fd                	j	56de <_malloc_r+0x342>
    58f2:	55400713          	li	a4,1364
    58f6:	04f76863          	bltu	a4,a5,5946 <_malloc_r+0x5aa>
    58fa:	0124d793          	srli	a5,s1,0x12
    58fe:	07d78613          	addi	a2,a5,125
    5902:	07c78513          	addi	a0,a5,124
    5906:	00361693          	slli	a3,a2,0x3
    590a:	b635                	j	5436 <_malloc_r+0x9a>
    590c:	1ce1                	addi	s9,s9,-8
    590e:	9ae6                	add	s5,s5,s9
    5910:	417a8ab3          	sub	s5,s5,s7
    5914:	4a01                	li	s4,0
    5916:	b325                	j	563e <_malloc_r+0x2a2>
    5918:	00840593          	addi	a1,s0,8
    591c:	854a                	mv	a0,s2
    591e:	2419                	jal	5b24 <_free_r>
    5920:	0089a403          	lw	s0,8(s3)
    5924:	000c2583          	lw	a1,0(s8)
    5928:	00442a83          	lw	s5,4(s0)
    592c:	bb91                	j	5680 <_malloc_r+0x2e4>
    592e:	55400713          	li	a4,1364
    5932:	02f76163          	bltu	a4,a5,5954 <_malloc_r+0x5b8>
    5936:	01255793          	srli	a5,a0,0x12
    593a:	07d78693          	addi	a3,a5,125
    593e:	07c78593          	addi	a1,a5,124
    5942:	068e                	slli	a3,a3,0x3
    5944:	bb69                	j	56de <_malloc_r+0x342>
    5946:	3f800693          	li	a3,1016
    594a:	07f00613          	li	a2,127
    594e:	07e00513          	li	a0,126
    5952:	b4d5                	j	5436 <_malloc_r+0x9a>
    5954:	3f800693          	li	a3,1016
    5958:	07e00593          	li	a1,126
    595c:	b349                	j	56de <_malloc_r+0x342>
    595e:	0049a783          	lw	a5,4(s3)
    5962:	bd55                	j	5816 <_malloc_r+0x47a>

00005964 <__malloc_lock>:
    5964:	1fffb517          	auipc	a0,0x1fffb
    5968:	29850513          	addi	a0,a0,664 # 20000bfc <__lock___malloc_recursive_mutex>
    596c:	a6fd                	j	5d5a <__retarget_lock_acquire_recursive>

0000596e <__malloc_unlock>:
    596e:	1fffb517          	auipc	a0,0x1fffb
    5972:	28e50513          	addi	a0,a0,654 # 20000bfc <__lock___malloc_recursive_mutex>
    5976:	aec5                	j	5d66 <__retarget_lock_release_recursive>

00005978 <_sbrk_r>:
    5978:	1141                	addi	sp,sp,-16
    597a:	c422                	sw	s0,8(sp)
    597c:	842a                	mv	s0,a0
    597e:	852e                	mv	a0,a1
    5980:	1fffb797          	auipc	a5,0x1fffb
    5984:	2807a823          	sw	zero,656(a5) # 20000c10 <errno>
    5988:	c606                	sw	ra,12(sp)
    598a:	2b61                	jal	5f22 <_sbrk>
    598c:	57fd                	li	a5,-1
    598e:	00f50663          	beq	a0,a5,599a <_sbrk_r+0x22>
    5992:	40b2                	lw	ra,12(sp)
    5994:	4422                	lw	s0,8(sp)
    5996:	0141                	addi	sp,sp,16
    5998:	8082                	ret
    599a:	1fffb797          	auipc	a5,0x1fffb
    599e:	2767a783          	lw	a5,630(a5) # 20000c10 <errno>
    59a2:	dbe5                	beqz	a5,5992 <_sbrk_r+0x1a>
    59a4:	40b2                	lw	ra,12(sp)
    59a6:	c01c                	sw	a5,0(s0)
    59a8:	4422                	lw	s0,8(sp)
    59aa:	0141                	addi	sp,sp,16
    59ac:	8082                	ret

000059ae <strdup>:
    59ae:	85aa                	mv	a1,a0
    59b0:	1fffb517          	auipc	a0,0x1fffb
    59b4:	f0052503          	lw	a0,-256(a0) # 200008b0 <_impure_ptr>
    59b8:	a009                	j	59ba <_strdup_r>

000059ba <_strdup_r>:
    59ba:	1141                	addi	sp,sp,-16
    59bc:	c422                	sw	s0,8(sp)
    59be:	842a                	mv	s0,a0
    59c0:	852e                	mv	a0,a1
    59c2:	c606                	sw	ra,12(sp)
    59c4:	c226                	sw	s1,4(sp)
    59c6:	c04a                	sw	s2,0(sp)
    59c8:	84ae                	mv	s1,a1
    59ca:	201d                	jal	59f0 <strlen>
    59cc:	00150913          	addi	s2,a0,1
    59d0:	85ca                	mv	a1,s2
    59d2:	8522                	mv	a0,s0
    59d4:	9c9ff0ef          	jal	ra,539c <_malloc_r>
    59d8:	842a                	mv	s0,a0
    59da:	c501                	beqz	a0,59e2 <_strdup_r+0x28>
    59dc:	864a                	mv	a2,s2
    59de:	85a6                	mv	a1,s1
    59e0:	2661                	jal	5d68 <memcpy>
    59e2:	40b2                	lw	ra,12(sp)
    59e4:	8522                	mv	a0,s0
    59e6:	4422                	lw	s0,8(sp)
    59e8:	4492                	lw	s1,4(sp)
    59ea:	4902                	lw	s2,0(sp)
    59ec:	0141                	addi	sp,sp,16
    59ee:	8082                	ret

000059f0 <strlen>:
    59f0:	00357793          	andi	a5,a0,3
    59f4:	872a                	mv	a4,a0
    59f6:	ef9d                	bnez	a5,5a34 <strlen+0x44>
    59f8:	7f7f86b7          	lui	a3,0x7f7f8
    59fc:	f7f68693          	addi	a3,a3,-129 # 7f7f7f7f <__kernel_stack+0x5f737f87>
    5a00:	55fd                	li	a1,-1
    5a02:	4310                	lw	a2,0(a4)
    5a04:	0711                	addi	a4,a4,4
    5a06:	00d677b3          	and	a5,a2,a3
    5a0a:	97b6                	add	a5,a5,a3
    5a0c:	8fd1                	or	a5,a5,a2
    5a0e:	8fd5                	or	a5,a5,a3
    5a10:	feb789e3          	beq	a5,a1,5a02 <strlen+0x12>
    5a14:	ffc74683          	lbu	a3,-4(a4) # fffffc <_global_impure_ptr+0xff9ad4>
    5a18:	ffd74603          	lbu	a2,-3(a4)
    5a1c:	ffe74783          	lbu	a5,-2(a4)
    5a20:	8f09                	sub	a4,a4,a0
    5a22:	c695                	beqz	a3,5a4e <strlen+0x5e>
    5a24:	02060263          	beqz	a2,5a48 <strlen+0x58>
    5a28:	00f03533          	snez	a0,a5
    5a2c:	953a                	add	a0,a0,a4
    5a2e:	1579                	addi	a0,a0,-2
    5a30:	8082                	ret
    5a32:	d2f9                	beqz	a3,59f8 <strlen+0x8>
    5a34:	00074783          	lbu	a5,0(a4)
    5a38:	0705                	addi	a4,a4,1
    5a3a:	00377693          	andi	a3,a4,3
    5a3e:	fbf5                	bnez	a5,5a32 <strlen+0x42>
    5a40:	8f09                	sub	a4,a4,a0
    5a42:	fff70513          	addi	a0,a4,-1
    5a46:	8082                	ret
    5a48:	ffd70513          	addi	a0,a4,-3
    5a4c:	8082                	ret
    5a4e:	ffc70513          	addi	a0,a4,-4
    5a52:	8082                	ret
	...

00005a56 <_malloc_trim_r>:
    5a56:	1101                	addi	sp,sp,-32
    5a58:	cc22                	sw	s0,24(sp)
    5a5a:	ca26                	sw	s1,20(sp)
    5a5c:	c84a                	sw	s2,16(sp)
    5a5e:	c64e                	sw	s3,12(sp)
    5a60:	c452                	sw	s4,8(sp)
    5a62:	89ae                	mv	s3,a1
    5a64:	ce06                	sw	ra,28(sp)
    5a66:	1fffaa17          	auipc	s4,0x1fffa
    5a6a:	5bea0a13          	addi	s4,s4,1470 # 20000024 <__malloc_av_>
    5a6e:	892a                	mv	s2,a0
    5a70:	3dd5                	jal	5964 <__malloc_lock>
    5a72:	008a2703          	lw	a4,8(s4)
    5a76:	6785                	lui	a5,0x1
    5a78:	fef78413          	addi	s0,a5,-17 # fef <_etoa+0x3cf>
    5a7c:	4344                	lw	s1,4(a4)
    5a7e:	41340433          	sub	s0,s0,s3
    5a82:	98f1                	andi	s1,s1,-4
    5a84:	9426                	add	s0,s0,s1
    5a86:	8031                	srli	s0,s0,0xc
    5a88:	147d                	addi	s0,s0,-1
    5a8a:	0432                	slli	s0,s0,0xc
    5a8c:	00f44a63          	blt	s0,a5,5aa0 <_malloc_trim_r+0x4a>
    5a90:	4581                	li	a1,0
    5a92:	854a                	mv	a0,s2
    5a94:	35d5                	jal	5978 <_sbrk_r>
    5a96:	008a2783          	lw	a5,8(s4)
    5a9a:	97a6                	add	a5,a5,s1
    5a9c:	00f50d63          	beq	a0,a5,5ab6 <_malloc_trim_r+0x60>
    5aa0:	854a                	mv	a0,s2
    5aa2:	35f1                	jal	596e <__malloc_unlock>
    5aa4:	40f2                	lw	ra,28(sp)
    5aa6:	4462                	lw	s0,24(sp)
    5aa8:	44d2                	lw	s1,20(sp)
    5aaa:	4942                	lw	s2,16(sp)
    5aac:	49b2                	lw	s3,12(sp)
    5aae:	4a22                	lw	s4,8(sp)
    5ab0:	4501                	li	a0,0
    5ab2:	6105                	addi	sp,sp,32
    5ab4:	8082                	ret
    5ab6:	408005b3          	neg	a1,s0
    5aba:	854a                	mv	a0,s2
    5abc:	3d75                	jal	5978 <_sbrk_r>
    5abe:	57fd                	li	a5,-1
    5ac0:	02f50b63          	beq	a0,a5,5af6 <_malloc_trim_r+0xa0>
    5ac4:	1fffb717          	auipc	a4,0x1fffb
    5ac8:	0f070713          	addi	a4,a4,240 # 20000bb4 <__malloc_current_mallinfo>
    5acc:	431c                	lw	a5,0(a4)
    5ace:	008a2683          	lw	a3,8(s4)
    5ad2:	8c81                	sub	s1,s1,s0
    5ad4:	0014e493          	ori	s1,s1,1
    5ad8:	40878433          	sub	s0,a5,s0
    5adc:	854a                	mv	a0,s2
    5ade:	c2c4                	sw	s1,4(a3)
    5ae0:	c300                	sw	s0,0(a4)
    5ae2:	3571                	jal	596e <__malloc_unlock>
    5ae4:	40f2                	lw	ra,28(sp)
    5ae6:	4462                	lw	s0,24(sp)
    5ae8:	44d2                	lw	s1,20(sp)
    5aea:	4942                	lw	s2,16(sp)
    5aec:	49b2                	lw	s3,12(sp)
    5aee:	4a22                	lw	s4,8(sp)
    5af0:	4505                	li	a0,1
    5af2:	6105                	addi	sp,sp,32
    5af4:	8082                	ret
    5af6:	4581                	li	a1,0
    5af8:	854a                	mv	a0,s2
    5afa:	3dbd                	jal	5978 <_sbrk_r>
    5afc:	008a2703          	lw	a4,8(s4)
    5b00:	46bd                	li	a3,15
    5b02:	40e507b3          	sub	a5,a0,a4
    5b06:	f8f6dde3          	bge	a3,a5,5aa0 <_malloc_trim_r+0x4a>
    5b0a:	0017e793          	ori	a5,a5,1
    5b0e:	c35c                	sw	a5,4(a4)
    5b10:	1fffb797          	auipc	a5,0x1fffb
    5b14:	d987a783          	lw	a5,-616(a5) # 200008a8 <__malloc_sbrk_base>
    5b18:	8d1d                	sub	a0,a0,a5
    5b1a:	1fffb797          	auipc	a5,0x1fffb
    5b1e:	08a7ad23          	sw	a0,154(a5) # 20000bb4 <__malloc_current_mallinfo>
    5b22:	bfbd                	j	5aa0 <_malloc_trim_r+0x4a>

00005b24 <_free_r>:
    5b24:	cde9                	beqz	a1,5bfe <_free_r+0xda>
    5b26:	1141                	addi	sp,sp,-16
    5b28:	c422                	sw	s0,8(sp)
    5b2a:	c226                	sw	s1,4(sp)
    5b2c:	842e                	mv	s0,a1
    5b2e:	84aa                	mv	s1,a0
    5b30:	c606                	sw	ra,12(sp)
    5b32:	3d0d                	jal	5964 <__malloc_lock>
    5b34:	ffc42583          	lw	a1,-4(s0)
    5b38:	ff840713          	addi	a4,s0,-8
    5b3c:	1fffa817          	auipc	a6,0x1fffa
    5b40:	4e880813          	addi	a6,a6,1256 # 20000024 <__malloc_av_>
    5b44:	ffe5f793          	andi	a5,a1,-2
    5b48:	00f70633          	add	a2,a4,a5
    5b4c:	4254                	lw	a3,4(a2)
    5b4e:	00882503          	lw	a0,8(a6)
    5b52:	9af1                	andi	a3,a3,-4
    5b54:	12c50363          	beq	a0,a2,5c7a <_free_r+0x156>
    5b58:	c254                	sw	a3,4(a2)
    5b5a:	8985                	andi	a1,a1,1
    5b5c:	00d60533          	add	a0,a2,a3
    5b60:	e9b5                	bnez	a1,5bd4 <_free_r+0xb0>
    5b62:	ff842303          	lw	t1,-8(s0)
    5b66:	414c                	lw	a1,4(a0)
    5b68:	1fffa897          	auipc	a7,0x1fffa
    5b6c:	4c488893          	addi	a7,a7,1220 # 2000002c <__malloc_av_+0x8>
    5b70:	40670733          	sub	a4,a4,t1
    5b74:	4708                	lw	a0,8(a4)
    5b76:	979a                	add	a5,a5,t1
    5b78:	8985                	andi	a1,a1,1
    5b7a:	0d150f63          	beq	a0,a7,5c58 <_free_r+0x134>
    5b7e:	00c72303          	lw	t1,12(a4)
    5b82:	00652623          	sw	t1,12(a0)
    5b86:	00a32423          	sw	a0,8(t1)
    5b8a:	14058463          	beqz	a1,5cd2 <_free_r+0x1ae>
    5b8e:	0017e693          	ori	a3,a5,1
    5b92:	c354                	sw	a3,4(a4)
    5b94:	c21c                	sw	a5,0(a2)
    5b96:	1ff00693          	li	a3,511
    5b9a:	06f6ec63          	bltu	a3,a5,5c12 <_free_r+0xee>
    5b9e:	ff87f693          	andi	a3,a5,-8
    5ba2:	06a1                	addi	a3,a3,8
    5ba4:	00482583          	lw	a1,4(a6)
    5ba8:	96c2                	add	a3,a3,a6
    5baa:	4290                	lw	a2,0(a3)
    5bac:	0057d513          	srli	a0,a5,0x5
    5bb0:	4785                	li	a5,1
    5bb2:	00a797b3          	sll	a5,a5,a0
    5bb6:	8fcd                	or	a5,a5,a1
    5bb8:	ff868593          	addi	a1,a3,-8
    5bbc:	c74c                	sw	a1,12(a4)
    5bbe:	c710                	sw	a2,8(a4)
    5bc0:	00f82223          	sw	a5,4(a6)
    5bc4:	c298                	sw	a4,0(a3)
    5bc6:	c658                	sw	a4,12(a2)
    5bc8:	4422                	lw	s0,8(sp)
    5bca:	40b2                	lw	ra,12(sp)
    5bcc:	8526                	mv	a0,s1
    5bce:	4492                	lw	s1,4(sp)
    5bd0:	0141                	addi	sp,sp,16
    5bd2:	bb71                	j	596e <__malloc_unlock>
    5bd4:	414c                	lw	a1,4(a0)
    5bd6:	8985                	andi	a1,a1,1
    5bd8:	e585                	bnez	a1,5c00 <_free_r+0xdc>
    5bda:	97b6                	add	a5,a5,a3
    5bdc:	1fffa897          	auipc	a7,0x1fffa
    5be0:	45088893          	addi	a7,a7,1104 # 2000002c <__malloc_av_+0x8>
    5be4:	4614                	lw	a3,8(a2)
    5be6:	0017e513          	ori	a0,a5,1
    5bea:	00f705b3          	add	a1,a4,a5
    5bee:	0f168a63          	beq	a3,a7,5ce2 <_free_r+0x1be>
    5bf2:	4650                	lw	a2,12(a2)
    5bf4:	c6d0                	sw	a2,12(a3)
    5bf6:	c614                	sw	a3,8(a2)
    5bf8:	c348                	sw	a0,4(a4)
    5bfa:	c19c                	sw	a5,0(a1)
    5bfc:	bf69                	j	5b96 <_free_r+0x72>
    5bfe:	8082                	ret
    5c00:	0017e693          	ori	a3,a5,1
    5c04:	fed42e23          	sw	a3,-4(s0)
    5c08:	c21c                	sw	a5,0(a2)
    5c0a:	1ff00693          	li	a3,511
    5c0e:	f8f6f8e3          	bgeu	a3,a5,5b9e <_free_r+0x7a>
    5c12:	0097d693          	srli	a3,a5,0x9
    5c16:	4611                	li	a2,4
    5c18:	08d66e63          	bltu	a2,a3,5cb4 <_free_r+0x190>
    5c1c:	0067d693          	srli	a3,a5,0x6
    5c20:	03968593          	addi	a1,a3,57
    5c24:	03868613          	addi	a2,a3,56
    5c28:	058e                	slli	a1,a1,0x3
    5c2a:	95c2                	add	a1,a1,a6
    5c2c:	4194                	lw	a3,0(a1)
    5c2e:	15e1                	addi	a1,a1,-8
    5c30:	0cd58463          	beq	a1,a3,5cf8 <_free_r+0x1d4>
    5c34:	42d0                	lw	a2,4(a3)
    5c36:	9a71                	andi	a2,a2,-4
    5c38:	00c7f563          	bgeu	a5,a2,5c42 <_free_r+0x11e>
    5c3c:	4694                	lw	a3,8(a3)
    5c3e:	fed59be3          	bne	a1,a3,5c34 <_free_r+0x110>
    5c42:	46cc                	lw	a1,12(a3)
    5c44:	c74c                	sw	a1,12(a4)
    5c46:	c714                	sw	a3,8(a4)
    5c48:	4422                	lw	s0,8(sp)
    5c4a:	40b2                	lw	ra,12(sp)
    5c4c:	c598                	sw	a4,8(a1)
    5c4e:	8526                	mv	a0,s1
    5c50:	4492                	lw	s1,4(sp)
    5c52:	c6d8                	sw	a4,12(a3)
    5c54:	0141                	addi	sp,sp,16
    5c56:	bb21                	j	596e <__malloc_unlock>
    5c58:	e5fd                	bnez	a1,5d46 <_free_r+0x222>
    5c5a:	464c                	lw	a1,12(a2)
    5c5c:	4610                	lw	a2,8(a2)
    5c5e:	97b6                	add	a5,a5,a3
    5c60:	4422                	lw	s0,8(sp)
    5c62:	c64c                	sw	a1,12(a2)
    5c64:	c590                	sw	a2,8(a1)
    5c66:	0017e693          	ori	a3,a5,1
    5c6a:	40b2                	lw	ra,12(sp)
    5c6c:	c354                	sw	a3,4(a4)
    5c6e:	8526                	mv	a0,s1
    5c70:	973e                	add	a4,a4,a5
    5c72:	4492                	lw	s1,4(sp)
    5c74:	c31c                	sw	a5,0(a4)
    5c76:	0141                	addi	sp,sp,16
    5c78:	b9dd                	j	596e <__malloc_unlock>
    5c7a:	8985                	andi	a1,a1,1
    5c7c:	97b6                	add	a5,a5,a3
    5c7e:	e989                	bnez	a1,5c90 <_free_r+0x16c>
    5c80:	ff842583          	lw	a1,-8(s0)
    5c84:	8f0d                	sub	a4,a4,a1
    5c86:	4754                	lw	a3,12(a4)
    5c88:	4710                	lw	a2,8(a4)
    5c8a:	97ae                	add	a5,a5,a1
    5c8c:	c654                	sw	a3,12(a2)
    5c8e:	c690                	sw	a2,8(a3)
    5c90:	0017e613          	ori	a2,a5,1
    5c94:	1fffb697          	auipc	a3,0x1fffb
    5c98:	c186a683          	lw	a3,-1000(a3) # 200008ac <__malloc_trim_threshold>
    5c9c:	c350                	sw	a2,4(a4)
    5c9e:	00e82423          	sw	a4,8(a6)
    5ca2:	f2d7e3e3          	bltu	a5,a3,5bc8 <_free_r+0xa4>
    5ca6:	1fffb597          	auipc	a1,0x1fffb
    5caa:	f425a583          	lw	a1,-190(a1) # 20000be8 <__malloc_top_pad>
    5cae:	8526                	mv	a0,s1
    5cb0:	335d                	jal	5a56 <_malloc_trim_r>
    5cb2:	bf19                	j	5bc8 <_free_r+0xa4>
    5cb4:	4651                	li	a2,20
    5cb6:	02d67063          	bgeu	a2,a3,5cd6 <_free_r+0x1b2>
    5cba:	05400613          	li	a2,84
    5cbe:	04d66763          	bltu	a2,a3,5d0c <_free_r+0x1e8>
    5cc2:	00c7d693          	srli	a3,a5,0xc
    5cc6:	06f68593          	addi	a1,a3,111
    5cca:	06e68613          	addi	a2,a3,110
    5cce:	058e                	slli	a1,a1,0x3
    5cd0:	bfa9                	j	5c2a <_free_r+0x106>
    5cd2:	97b6                	add	a5,a5,a3
    5cd4:	bf01                	j	5be4 <_free_r+0xc0>
    5cd6:	05c68593          	addi	a1,a3,92
    5cda:	05b68613          	addi	a2,a3,91
    5cde:	058e                	slli	a1,a1,0x3
    5ce0:	b7a9                	j	5c2a <_free_r+0x106>
    5ce2:	00e82a23          	sw	a4,20(a6)
    5ce6:	00e82823          	sw	a4,16(a6)
    5cea:	01172623          	sw	a7,12(a4)
    5cee:	01172423          	sw	a7,8(a4)
    5cf2:	c348                	sw	a0,4(a4)
    5cf4:	c19c                	sw	a5,0(a1)
    5cf6:	bdc9                	j	5bc8 <_free_r+0xa4>
    5cf8:	00482503          	lw	a0,4(a6)
    5cfc:	8609                	srai	a2,a2,0x2
    5cfe:	4785                	li	a5,1
    5d00:	00c79633          	sll	a2,a5,a2
    5d04:	8e49                	or	a2,a2,a0
    5d06:	00c82223          	sw	a2,4(a6)
    5d0a:	bf2d                	j	5c44 <_free_r+0x120>
    5d0c:	15400613          	li	a2,340
    5d10:	00d66a63          	bltu	a2,a3,5d24 <_free_r+0x200>
    5d14:	00f7d693          	srli	a3,a5,0xf
    5d18:	07868593          	addi	a1,a3,120
    5d1c:	07768613          	addi	a2,a3,119
    5d20:	058e                	slli	a1,a1,0x3
    5d22:	b721                	j	5c2a <_free_r+0x106>
    5d24:	55400613          	li	a2,1364
    5d28:	00d66a63          	bltu	a2,a3,5d3c <_free_r+0x218>
    5d2c:	0127d693          	srli	a3,a5,0x12
    5d30:	07d68593          	addi	a1,a3,125
    5d34:	07c68613          	addi	a2,a3,124
    5d38:	058e                	slli	a1,a1,0x3
    5d3a:	bdc5                	j	5c2a <_free_r+0x106>
    5d3c:	3f800593          	li	a1,1016
    5d40:	07e00613          	li	a2,126
    5d44:	b5dd                	j	5c2a <_free_r+0x106>
    5d46:	0017e693          	ori	a3,a5,1
    5d4a:	c354                	sw	a3,4(a4)
    5d4c:	c21c                	sw	a5,0(a2)
    5d4e:	bdad                	j	5bc8 <_free_r+0xa4>

00005d50 <__retarget_lock_init>:
    5d50:	8082                	ret

00005d52 <__retarget_lock_init_recursive>:
    5d52:	8082                	ret

00005d54 <__retarget_lock_close>:
    5d54:	8082                	ret

00005d56 <__retarget_lock_close_recursive>:
    5d56:	8082                	ret

00005d58 <__retarget_lock_acquire>:
    5d58:	8082                	ret

00005d5a <__retarget_lock_acquire_recursive>:
    5d5a:	8082                	ret

00005d5c <__retarget_lock_try_acquire>:
    5d5c:	4505                	li	a0,1
    5d5e:	8082                	ret

00005d60 <__retarget_lock_try_acquire_recursive>:
    5d60:	4505                	li	a0,1
    5d62:	8082                	ret

00005d64 <__retarget_lock_release>:
    5d64:	8082                	ret

00005d66 <__retarget_lock_release_recursive>:
    5d66:	8082                	ret

00005d68 <memcpy>:
    5d68:	00463693          	sltiu	a3,a2,4
    5d6c:	82aa                	mv	t0,a0
    5d6e:	00c50333          	add	t1,a0,a2
    5d72:	eea5                	bnez	a3,5dea <memcpy+0x82>
    5d74:	00b546b3          	xor	a3,a0,a1
    5d78:	8a8d                	andi	a3,a3,3
    5d7a:	eaa5                	bnez	a3,5dea <memcpy+0x82>
    5d7c:	00357693          	andi	a3,a0,3
    5d80:	4391                	li	t2,4
    5d82:	eebd                	bnez	a3,5e00 <memcpy+0x98>
    5d84:	ffc37393          	andi	t2,t1,-4
    5d88:	fe038313          	addi	t1,t2,-32 # ffe0 <_global_impure_ptr+0x9ab8>
    5d8c:	04a36263          	bltu	t1,a0,5dd0 <memcpy+0x68>
    5d90:	8a7d                	andi	a2,a2,31
    5d92:	0001                	nop
    5d94:	4198                	lw	a4,0(a1)
    5d96:	c118                	sw	a4,0(a0)
    5d98:	41dc                	lw	a5,4(a1)
    5d9a:	c15c                	sw	a5,4(a0)
    5d9c:	0085a803          	lw	a6,8(a1)
    5da0:	01052423          	sw	a6,8(a0)
    5da4:	00c5a883          	lw	a7,12(a1)
    5da8:	01152623          	sw	a7,12(a0)
    5dac:	4998                	lw	a4,16(a1)
    5dae:	c918                	sw	a4,16(a0)
    5db0:	49dc                	lw	a5,20(a1)
    5db2:	c95c                	sw	a5,20(a0)
    5db4:	0185a803          	lw	a6,24(a1)
    5db8:	01052c23          	sw	a6,24(a0)
    5dbc:	01c5a883          	lw	a7,28(a1)
    5dc0:	02058593          	addi	a1,a1,32
    5dc4:	01152e23          	sw	a7,28(a0)
    5dc8:	02050513          	addi	a0,a0,32
    5dcc:	fca374e3          	bgeu	t1,a0,5d94 <memcpy+0x2c>
    5dd0:	ffc38313          	addi	t1,t2,-4
    5dd4:	00a36963          	bltu	t1,a0,5de6 <memcpy+0x7e>
    5dd8:	8a0d                	andi	a2,a2,3
    5dda:	4198                	lw	a4,0(a1)
    5ddc:	0591                	addi	a1,a1,4
    5dde:	c118                	sw	a4,0(a0)
    5de0:	0511                	addi	a0,a0,4
    5de2:	fea37ce3          	bgeu	t1,a0,5dda <memcpy+0x72>
    5de6:	00c50333          	add	t1,a0,a2
    5dea:	ca09                	beqz	a2,5dfc <memcpy+0x94>
    5dec:	00058703          	lb	a4,0(a1)
    5df0:	0585                	addi	a1,a1,1
    5df2:	00e50023          	sb	a4,0(a0)
    5df6:	0505                	addi	a0,a0,1
    5df8:	fe656ae3          	bltu	a0,t1,5dec <memcpy+0x84>
    5dfc:	8516                	mv	a0,t0
    5dfe:	8082                	ret
    5e00:	40d386b3          	sub	a3,t2,a3
    5e04:	83b6                	mv	t2,a3
    5e06:	00058703          	lb	a4,0(a1)
    5e0a:	0585                	addi	a1,a1,1
    5e0c:	16fd                	addi	a3,a3,-1
    5e0e:	00e50023          	sb	a4,0(a0)
    5e12:	0505                	addi	a0,a0,1
    5e14:	faed                	bnez	a3,5e06 <memcpy+0x9e>
    5e16:	40760633          	sub	a2,a2,t2
    5e1a:	00263693          	sltiu	a3,a2,2
    5e1e:	f6f1                	bnez	a3,5dea <memcpy+0x82>
    5e20:	b795                	j	5d84 <memcpy+0x1c>
	...

00005e24 <cleanup_glue>:
    5e24:	1101                	addi	sp,sp,-32
    5e26:	c84a                	sw	s2,16(sp)
    5e28:	0005a903          	lw	s2,0(a1)
    5e2c:	cc22                	sw	s0,24(sp)
    5e2e:	ca26                	sw	s1,20(sp)
    5e30:	ce06                	sw	ra,28(sp)
    5e32:	c64e                	sw	s3,12(sp)
    5e34:	c452                	sw	s4,8(sp)
    5e36:	842e                	mv	s0,a1
    5e38:	84aa                	mv	s1,a0
    5e3a:	02090763          	beqz	s2,5e68 <cleanup_glue+0x44>
    5e3e:	00092983          	lw	s3,0(s2)
    5e42:	02098063          	beqz	s3,5e62 <cleanup_glue+0x3e>
    5e46:	0009aa03          	lw	s4,0(s3)
    5e4a:	000a0963          	beqz	s4,5e5c <cleanup_glue+0x38>
    5e4e:	000a2583          	lw	a1,0(s4)
    5e52:	c191                	beqz	a1,5e56 <cleanup_glue+0x32>
    5e54:	3fc1                	jal	5e24 <cleanup_glue>
    5e56:	85d2                	mv	a1,s4
    5e58:	8526                	mv	a0,s1
    5e5a:	31e9                	jal	5b24 <_free_r>
    5e5c:	85ce                	mv	a1,s3
    5e5e:	8526                	mv	a0,s1
    5e60:	31d1                	jal	5b24 <_free_r>
    5e62:	85ca                	mv	a1,s2
    5e64:	8526                	mv	a0,s1
    5e66:	397d                	jal	5b24 <_free_r>
    5e68:	85a2                	mv	a1,s0
    5e6a:	4462                	lw	s0,24(sp)
    5e6c:	40f2                	lw	ra,28(sp)
    5e6e:	4942                	lw	s2,16(sp)
    5e70:	49b2                	lw	s3,12(sp)
    5e72:	4a22                	lw	s4,8(sp)
    5e74:	8526                	mv	a0,s1
    5e76:	44d2                	lw	s1,20(sp)
    5e78:	6105                	addi	sp,sp,32
    5e7a:	b16d                	j	5b24 <_free_r>

00005e7c <_reclaim_reent>:
    5e7c:	1fffb797          	auipc	a5,0x1fffb
    5e80:	a347a783          	lw	a5,-1484(a5) # 200008b0 <_impure_ptr>
    5e84:	08a78e63          	beq	a5,a0,5f20 <_reclaim_reent+0xa4>
    5e88:	456c                	lw	a1,76(a0)
    5e8a:	1101                	addi	sp,sp,-32
    5e8c:	ca26                	sw	s1,20(sp)
    5e8e:	ce06                	sw	ra,28(sp)
    5e90:	cc22                	sw	s0,24(sp)
    5e92:	c84a                	sw	s2,16(sp)
    5e94:	c64e                	sw	s3,12(sp)
    5e96:	84aa                	mv	s1,a0
    5e98:	c19d                	beqz	a1,5ebe <_reclaim_reent+0x42>
    5e9a:	4901                	li	s2,0
    5e9c:	08000993          	li	s3,128
    5ea0:	012587b3          	add	a5,a1,s2
    5ea4:	4380                	lw	s0,0(a5)
    5ea6:	c419                	beqz	s0,5eb4 <_reclaim_reent+0x38>
    5ea8:	85a2                	mv	a1,s0
    5eaa:	4000                	lw	s0,0(s0)
    5eac:	8526                	mv	a0,s1
    5eae:	399d                	jal	5b24 <_free_r>
    5eb0:	fc65                	bnez	s0,5ea8 <_reclaim_reent+0x2c>
    5eb2:	44ec                	lw	a1,76(s1)
    5eb4:	0911                	addi	s2,s2,4
    5eb6:	ff3915e3          	bne	s2,s3,5ea0 <_reclaim_reent+0x24>
    5eba:	8526                	mv	a0,s1
    5ebc:	31a5                	jal	5b24 <_free_r>
    5ebe:	40ac                	lw	a1,64(s1)
    5ec0:	c199                	beqz	a1,5ec6 <_reclaim_reent+0x4a>
    5ec2:	8526                	mv	a0,s1
    5ec4:	3185                	jal	5b24 <_free_r>
    5ec6:	1484a403          	lw	s0,328(s1)
    5eca:	c819                	beqz	s0,5ee0 <_reclaim_reent+0x64>
    5ecc:	14c48913          	addi	s2,s1,332
    5ed0:	01240863          	beq	s0,s2,5ee0 <_reclaim_reent+0x64>
    5ed4:	85a2                	mv	a1,s0
    5ed6:	4000                	lw	s0,0(s0)
    5ed8:	8526                	mv	a0,s1
    5eda:	31a9                	jal	5b24 <_free_r>
    5edc:	fe891ce3          	bne	s2,s0,5ed4 <_reclaim_reent+0x58>
    5ee0:	48ec                	lw	a1,84(s1)
    5ee2:	c199                	beqz	a1,5ee8 <_reclaim_reent+0x6c>
    5ee4:	8526                	mv	a0,s1
    5ee6:	393d                	jal	5b24 <_free_r>
    5ee8:	5c9c                	lw	a5,56(s1)
    5eea:	c785                	beqz	a5,5f12 <_reclaim_reent+0x96>
    5eec:	5cdc                	lw	a5,60(s1)
    5eee:	8526                	mv	a0,s1
    5ef0:	9782                	jalr	a5
    5ef2:	2e04a403          	lw	s0,736(s1)
    5ef6:	cc11                	beqz	s0,5f12 <_reclaim_reent+0x96>
    5ef8:	400c                	lw	a1,0(s0)
    5efa:	c199                	beqz	a1,5f00 <_reclaim_reent+0x84>
    5efc:	8526                	mv	a0,s1
    5efe:	371d                	jal	5e24 <cleanup_glue>
    5f00:	85a2                	mv	a1,s0
    5f02:	4462                	lw	s0,24(sp)
    5f04:	40f2                	lw	ra,28(sp)
    5f06:	4942                	lw	s2,16(sp)
    5f08:	49b2                	lw	s3,12(sp)
    5f0a:	8526                	mv	a0,s1
    5f0c:	44d2                	lw	s1,20(sp)
    5f0e:	6105                	addi	sp,sp,32
    5f10:	b911                	j	5b24 <_free_r>
    5f12:	40f2                	lw	ra,28(sp)
    5f14:	4462                	lw	s0,24(sp)
    5f16:	44d2                	lw	s1,20(sp)
    5f18:	4942                	lw	s2,16(sp)
    5f1a:	49b2                	lw	s3,12(sp)
    5f1c:	6105                	addi	sp,sp,32
    5f1e:	8082                	ret
    5f20:	8082                	ret

00005f22 <_sbrk>:
    5f22:	1fffb317          	auipc	t1,0x1fffb
    5f26:	cf230313          	addi	t1,t1,-782 # 20000c14 <heap_end.0>
    5f2a:	00032783          	lw	a5,0(t1)
    5f2e:	1141                	addi	sp,sp,-16
    5f30:	c606                	sw	ra,12(sp)
    5f32:	882a                	mv	a6,a0
    5f34:	e385                	bnez	a5,5f54 <_sbrk+0x32>
    5f36:	4501                	li	a0,0
    5f38:	4581                	li	a1,0
    5f3a:	4601                	li	a2,0
    5f3c:	4681                	li	a3,0
    5f3e:	4701                	li	a4,0
    5f40:	0d600893          	li	a7,214
    5f44:	00000073          	ecall
    5f48:	577d                	li	a4,-1
    5f4a:	87aa                	mv	a5,a0
    5f4c:	02e50a63          	beq	a0,a4,5f80 <_sbrk+0x5e>
    5f50:	00a32023          	sw	a0,0(t1)
    5f54:	00f80533          	add	a0,a6,a5
    5f58:	4581                	li	a1,0
    5f5a:	4601                	li	a2,0
    5f5c:	4681                	li	a3,0
    5f5e:	4701                	li	a4,0
    5f60:	4781                	li	a5,0
    5f62:	0d600893          	li	a7,214
    5f66:	00000073          	ecall
    5f6a:	00032783          	lw	a5,0(t1)
    5f6e:	983e                	add	a6,a6,a5
    5f70:	01051863          	bne	a0,a6,5f80 <_sbrk+0x5e>
    5f74:	40b2                	lw	ra,12(sp)
    5f76:	00a32023          	sw	a0,0(t1)
    5f7a:	853e                	mv	a0,a5
    5f7c:	0141                	addi	sp,sp,16
    5f7e:	8082                	ret
    5f80:	2039                	jal	5f8e <__errno>
    5f82:	40b2                	lw	ra,12(sp)
    5f84:	47b1                	li	a5,12
    5f86:	c11c                	sw	a5,0(a0)
    5f88:	557d                	li	a0,-1
    5f8a:	0141                	addi	sp,sp,16
    5f8c:	8082                	ret

00005f8e <__errno>:
    5f8e:	1fffb517          	auipc	a0,0x1fffb
    5f92:	92252503          	lw	a0,-1758(a0) # 200008b0 <_impure_ptr>
    5f96:	8082                	ret
	...
