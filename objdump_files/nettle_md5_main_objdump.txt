
nettle_md5_main.elf:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <__start>:
#
#  li x3, 0x1000
#  csrrs x0, mhcr, x3

#la x3, 0x20000
  la  x2, __kernel_stack
       0:	200c0117          	auipc	sp,0x200c0
       4:	ff810113          	addi	sp,sp,-8 # 200bfff8 <__kernel_stack>
#  sw x0, 0(x2)
#  addi x2, x2, -4
#  addi x3, x3, -4
#  bnez x3, Init_Stack

  la x3, __erodata
       8:	00006197          	auipc	gp,0x6
       c:	f6418193          	addi	gp,gp,-156 # 5f6c <__erodata>
  la x4, __data_start__
      10:	20000217          	auipc	tp,0x20000
      14:	ff020213          	addi	tp,tp,-16 # 20000000 <__data_start__>
  la x5, __data_end__
      18:	20001297          	auipc	t0,0x20001
      1c:	8d028293          	addi	t0,t0,-1840 # 200008e8 <__malloc_sbrk_base>

  sub x5, x5, x4
      20:	404282b3          	sub	t0,t0,tp
  beqz x5, L_loop0_done
      24:	00028b63          	beqz	t0,3a <L_loop0_done>

00000028 <L_loop0>:

L_loop0:
   lw x6, 0(x3)
      28:	0001a303          	lw	t1,0(gp)
   sw x6, 0(x4)
      2c:	00622023          	sw	t1,0(tp) # 0 <__start>
   addi x3, x3, 0x4
      30:	0191                	addi	gp,gp,4
   addi x4, x4, 0x4
      32:	0211                	addi	tp,tp,4
   addi x5, x5, -4
      34:	12f1                	addi	t0,t0,-4
   bnez x5, L_loop0
      36:	fe0299e3          	bnez	t0,28 <L_loop0>

0000003a <L_loop0_done>:

L_loop0_done:
   la x3, __data_end__
      3a:	20001197          	auipc	gp,0x20001
      3e:	8ae18193          	addi	gp,gp,-1874 # 200008e8 <__malloc_sbrk_base>
   la x4, __bss_end__
      42:	20001217          	auipc	tp,0x20001
      46:	8ea20213          	addi	tp,tp,-1814 # 2000092c <__malloc_max_total_mem>

   li x5, 0
      4a:	4281                	li	t0,0
   sub x4, x4, x3
      4c:	40320233          	sub	tp,tp,gp
   beqz x4, L_loop1_done
      50:	00020863          	beqz	tp,60 <L_loop1_done>

00000054 <L_loop1>:

L_loop1:
   sw x5, 0(x3)
      54:	0051a023          	sw	t0,0(gp)
   addi x3, x3, 0x4
      58:	0191                	addi	gp,gp,4
   addi x4, x4, -4
      5a:	1271                	addi	tp,tp,-4
   bnez x4, L_loop1  
      5c:	fe021ce3          	bnez	tp,54 <L_loop1>

00000060 <L_loop1_done>:


L_loop1_done:
  
  la x3, trap_handler
      60:	00000197          	auipc	gp,0x0
      64:	0e018193          	addi	gp,gp,224 # 140 <trap_handler>
  csrw mtvec, x3
      68:	30519073          	csrw	mtvec,gp

  la x3, vector_table
      6c:	00000197          	auipc	gp,0x0
      70:	11418193          	addi	gp,gp,276 # 180 <vector_table>
  addi x3, x3, 64
      74:	04018193          	addi	gp,gp,64
  csrw mtvt, x3
      78:	30719073          	csrw	mtvt,gp


  li a5, 0xeffff000
      7c:	effff7b7          	lui	a5,0xeffff
  li a6, 0x20000
      80:	00020837          	lui	a6,0x20
  sw a6, 0(a5)
      84:	0107a023          	sw	a6,0(a5) # effff000 <__kernel_stack+0xcff3f008>
  li a7, 0xc
      88:	48b1                	li	a7,12
  sw a7, 4(a5)
      8a:	0117a223          	sw	a7,4(a5)

  li a6, 0x40000
      8e:	00040837          	lui	a6,0x40
  li a7, 0xc
      92:	48b1                	li	a7,12
  sw a6, 8(a5)
      94:	0107a423          	sw	a6,8(a5)
  sw a7, 12(a5)
      98:	0117a623          	sw	a7,12(a5)
  
  li a6, 0x50000
      9c:	00050837          	lui	a6,0x50
  li a7, 0x10
      a0:	48c1                	li	a7,16
  sw a6, 16(a5)
      a2:	0107a823          	sw	a6,16(a5)
  sw a7, 20(a5)
      a6:	0117aa23          	sw	a7,20(a5)

  li a5, 0x40011000
      aa:	400117b7          	lui	a5,0x40011
  li a6, 0xff
      ae:	0ff00813          	li	a6,255
  sw a6, 0(a5)
      b2:	0107a023          	sw	a6,0(a5) # 40011000 <__kernel_stack+0x1ff51008>
  li a6, 0x3
      b6:	480d                	li	a6,3
  sw a6, 8(a5)
      b8:	0107a423          	sw	a6,8(a5)
  lw a6, 4(a5)
      bc:	0047a803          	lw	a6,4(a5)


# enable mie
  li   x3,0x88 
      c0:	08800193          	li	gp,136
  csrw mstatus,x3
      c4:	30019073          	csrw	mstatus,gp

# enable fpu
  li x3, 0x2000
      c8:	6189                	lui	gp,0x2
  csrs mstatus,x3
      ca:	3001a073          	csrs	mstatus,gp

  li   x3,0x103f
      ce:	6185                	lui	gp,0x1
      d0:	03f18193          	addi	gp,gp,63 # 103f <_ftoa+0x23b>
  csrw mhcr,x3
      d4:	7c119073          	csrw	mhcr,gp
  li   x3,0x400c
      d8:	6191                	lui	gp,0x4
      da:	01b1                	addi	gp,gp,12
  csrw mhint,x3
      dc:	7c519073          	csrw	mhint,gp

000000e0 <__to_main>:
  
__to_main:
  jal main
      e0:	57c020ef          	jal	ra,265c <main>

000000e4 <__exit>:


  .global __exit
__exit:
  fence.i
      e4:	0000100f          	fence.i
  fence
      e8:	0ff0000f          	fence
  li    x4, 0x6000fff8
      ec:	60010237          	lui	tp,0x60010
      f0:	1261                	addi	tp,tp,-8
  addi  x3, x0,0xFF
      f2:	0ff00193          	li	gp,255
  slli  x3, x3,0x4
      f6:	0192                	slli	gp,gp,0x4
  addi  x3, x3, 0xf #0xFFF
      f8:	01bd                	addi	gp,gp,15
  sw	x3, 0(x4)
      fa:	00322023          	sw	gp,0(tp) # 60010000 <__kernel_stack+0x3ff50008>

000000fe <__fail>:

  .global __fail
__fail:
  fence.i
      fe:	0000100f          	fence.i
  fence
     102:	0ff0000f          	fence
  li    x4, 0x6000fff8
     106:	60010237          	lui	tp,0x60010
     10a:	1261                	addi	tp,tp,-8
  addi  x3, x0,0xEE
     10c:	0ee00193          	li	gp,238
  slli  x3, x3,0x4
     110:	0192                	slli	gp,gp,0x4
  addi  x3, x3,0xe #0xEEE
     112:	01b9                	addi	gp,gp,14
  sw	x3, 0(x4)
     114:	00322023          	sw	gp,0(tp) # 60010000 <__kernel_stack+0x3ff50008>
     118:	00000013          	nop
     11c:	00000013          	nop
     120:	00000013          	nop
     124:	00000013          	nop
     128:	00000013          	nop
     12c:	00000013          	nop
     130:	00000013          	nop
     134:	00000013          	nop
     138:	00000013          	nop
     13c:	00000013          	nop

00000140 <trap_handler>:

  .align 6  
  .global trap_handler
trap_handler:
  j __synchronous_exception
     140:	a019                	j	146 <__synchronous_exception>
     142:	0001                	nop
  .align 2  
  j __fail
     144:	bf6d                	j	fe <__fail>

00000146 <__synchronous_exception>:
 
__synchronous_exception:
  sw   x13,-4(x2)
     146:	fed12e23          	sw	a3,-4(sp)
  sw   x14,-8(x2)
     14a:	fee12c23          	sw	a4,-8(sp)
  sw   x15,-12(x2)
     14e:	fef12a23          	sw	a5,-12(sp)
  csrr x14,mcause
     152:	34202773          	csrr	a4,mcause
  andi x15,x14,0xff  #cause
     156:	0ff77793          	andi	a5,a4,255
  srli x14,x14,0x1b   #int
     15a:	836d                	srli	a4,a4,0x1b
  andi x14,x14,0x10   #mask bit
     15c:	8b41                	andi	a4,a4,16
  add  x14,x14,x15    #{int,cause}
     15e:	973e                	add	a4,a4,a5

  slli x14,x14,0x2  #offset
     160:	070a                	slli	a4,a4,0x2
  la   x15,vector_table
     162:	00000797          	auipc	a5,0x0
     166:	01e78793          	addi	a5,a5,30 # 180 <vector_table>
  add  x15,x14,x15  #target pc
     16a:	97ba                	add	a5,a5,a4
  lw   x14, 0(x15)  #get exception addr
     16c:	4398                	lw	a4,0(a5)
  lw   x13, -4(x2)  #recover x16
     16e:	ffc12683          	lw	a3,-4(sp)
  lw   x15, -12(x2) #recover x15
     172:	ff412783          	lw	a5,-12(sp)
#addi x14,x14,-4
  jr   x14
     176:	8702                	jr	a4
     178:	00000013          	nop
     17c:	00000013          	nop

00000180 <vector_table>:
     180:	0580                	addi	s0,sp,704
     182:	0000                	unimp
     184:	0580                	addi	s0,sp,704
     186:	0000                	unimp
     188:	0580                	addi	s0,sp,704
     18a:	0000                	unimp
     18c:	0580                	addi	s0,sp,704
     18e:	0000                	unimp
     190:	0580                	addi	s0,sp,704
     192:	0000                	unimp
     194:	0580                	addi	s0,sp,704
     196:	0000                	unimp
     198:	0580                	addi	s0,sp,704
     19a:	0000                	unimp
     19c:	0580                	addi	s0,sp,704
     19e:	0000                	unimp
     1a0:	0580                	addi	s0,sp,704
     1a2:	0000                	unimp
     1a4:	0580                	addi	s0,sp,704
     1a6:	0000                	unimp
     1a8:	0580                	addi	s0,sp,704
     1aa:	0000                	unimp
     1ac:	0580                	addi	s0,sp,704
     1ae:	0000                	unimp
     1b0:	0580                	addi	s0,sp,704
     1b2:	0000                	unimp
     1b4:	0580                	addi	s0,sp,704
     1b6:	0000                	unimp
     1b8:	0580                	addi	s0,sp,704
     1ba:	0000                	unimp
     1bc:	0580                	addi	s0,sp,704
     1be:	0000                	unimp
     1c0:	0580                	addi	s0,sp,704
     1c2:	0000                	unimp
     1c4:	0580                	addi	s0,sp,704
     1c6:	0000                	unimp
     1c8:	0580                	addi	s0,sp,704
     1ca:	0000                	unimp
     1cc:	0580                	addi	s0,sp,704
     1ce:	0000                	unimp
     1d0:	0580                	addi	s0,sp,704
     1d2:	0000                	unimp
     1d4:	0580                	addi	s0,sp,704
     1d6:	0000                	unimp
     1d8:	0580                	addi	s0,sp,704
     1da:	0000                	unimp
     1dc:	0580                	addi	s0,sp,704
     1de:	0000                	unimp
     1e0:	0580                	addi	s0,sp,704
     1e2:	0000                	unimp
     1e4:	0580                	addi	s0,sp,704
     1e6:	0000                	unimp
     1e8:	0580                	addi	s0,sp,704
     1ea:	0000                	unimp
     1ec:	0580                	addi	s0,sp,704
     1ee:	0000                	unimp
     1f0:	0580                	addi	s0,sp,704
     1f2:	0000                	unimp
     1f4:	0580                	addi	s0,sp,704
     1f6:	0000                	unimp
     1f8:	0580                	addi	s0,sp,704
     1fa:	0000                	unimp
     1fc:	0580                	addi	s0,sp,704
     1fe:	0000                	unimp
     200:	0580                	addi	s0,sp,704
     202:	0000                	unimp
     204:	0580                	addi	s0,sp,704
     206:	0000                	unimp
     208:	0580                	addi	s0,sp,704
     20a:	0000                	unimp
     20c:	0580                	addi	s0,sp,704
     20e:	0000                	unimp
     210:	0580                	addi	s0,sp,704
     212:	0000                	unimp
     214:	0580                	addi	s0,sp,704
     216:	0000                	unimp
     218:	0580                	addi	s0,sp,704
     21a:	0000                	unimp
     21c:	0580                	addi	s0,sp,704
     21e:	0000                	unimp
     220:	0580                	addi	s0,sp,704
     222:	0000                	unimp
     224:	0580                	addi	s0,sp,704
     226:	0000                	unimp
     228:	0580                	addi	s0,sp,704
     22a:	0000                	unimp
     22c:	0580                	addi	s0,sp,704
     22e:	0000                	unimp
     230:	0580                	addi	s0,sp,704
     232:	0000                	unimp
     234:	0580                	addi	s0,sp,704
     236:	0000                	unimp
     238:	0580                	addi	s0,sp,704
     23a:	0000                	unimp
     23c:	0580                	addi	s0,sp,704
     23e:	0000                	unimp
     240:	0580                	addi	s0,sp,704
     242:	0000                	unimp
     244:	0580                	addi	s0,sp,704
     246:	0000                	unimp
     248:	0580                	addi	s0,sp,704
     24a:	0000                	unimp
     24c:	0580                	addi	s0,sp,704
     24e:	0000                	unimp
     250:	0580                	addi	s0,sp,704
     252:	0000                	unimp
     254:	0580                	addi	s0,sp,704
     256:	0000                	unimp
     258:	0580                	addi	s0,sp,704
     25a:	0000                	unimp
     25c:	0580                	addi	s0,sp,704
     25e:	0000                	unimp
     260:	0580                	addi	s0,sp,704
     262:	0000                	unimp
     264:	0580                	addi	s0,sp,704
     266:	0000                	unimp
     268:	0580                	addi	s0,sp,704
     26a:	0000                	unimp
     26c:	0580                	addi	s0,sp,704
     26e:	0000                	unimp
     270:	0580                	addi	s0,sp,704
     272:	0000                	unimp
     274:	0580                	addi	s0,sp,704
     276:	0000                	unimp
     278:	0580                	addi	s0,sp,704
     27a:	0000                	unimp
     27c:	0580                	addi	s0,sp,704
     27e:	0000                	unimp
     280:	0580                	addi	s0,sp,704
     282:	0000                	unimp
     284:	0580                	addi	s0,sp,704
     286:	0000                	unimp
     288:	0580                	addi	s0,sp,704
     28a:	0000                	unimp
     28c:	0580                	addi	s0,sp,704
     28e:	0000                	unimp
     290:	0580                	addi	s0,sp,704
     292:	0000                	unimp
     294:	0580                	addi	s0,sp,704
     296:	0000                	unimp
     298:	0580                	addi	s0,sp,704
     29a:	0000                	unimp
     29c:	0580                	addi	s0,sp,704
     29e:	0000                	unimp
     2a0:	0580                	addi	s0,sp,704
     2a2:	0000                	unimp
     2a4:	0580                	addi	s0,sp,704
     2a6:	0000                	unimp
     2a8:	0580                	addi	s0,sp,704
     2aa:	0000                	unimp
     2ac:	0580                	addi	s0,sp,704
     2ae:	0000                	unimp
     2b0:	0580                	addi	s0,sp,704
     2b2:	0000                	unimp
     2b4:	0580                	addi	s0,sp,704
     2b6:	0000                	unimp
     2b8:	0580                	addi	s0,sp,704
     2ba:	0000                	unimp
     2bc:	0580                	addi	s0,sp,704
     2be:	0000                	unimp
     2c0:	0580                	addi	s0,sp,704
     2c2:	0000                	unimp
     2c4:	0580                	addi	s0,sp,704
     2c6:	0000                	unimp
     2c8:	0580                	addi	s0,sp,704
     2ca:	0000                	unimp
     2cc:	0580                	addi	s0,sp,704
     2ce:	0000                	unimp
     2d0:	0580                	addi	s0,sp,704
     2d2:	0000                	unimp
     2d4:	0580                	addi	s0,sp,704
     2d6:	0000                	unimp
     2d8:	0580                	addi	s0,sp,704
     2da:	0000                	unimp
     2dc:	0580                	addi	s0,sp,704
     2de:	0000                	unimp
     2e0:	0580                	addi	s0,sp,704
     2e2:	0000                	unimp
     2e4:	0580                	addi	s0,sp,704
     2e6:	0000                	unimp
     2e8:	0580                	addi	s0,sp,704
     2ea:	0000                	unimp
     2ec:	0580                	addi	s0,sp,704
     2ee:	0000                	unimp
     2f0:	0580                	addi	s0,sp,704
     2f2:	0000                	unimp
     2f4:	0580                	addi	s0,sp,704
     2f6:	0000                	unimp
     2f8:	0580                	addi	s0,sp,704
     2fa:	0000                	unimp
     2fc:	0580                	addi	s0,sp,704
     2fe:	0000                	unimp
     300:	0580                	addi	s0,sp,704
     302:	0000                	unimp
     304:	0580                	addi	s0,sp,704
     306:	0000                	unimp
     308:	0580                	addi	s0,sp,704
     30a:	0000                	unimp
     30c:	0580                	addi	s0,sp,704
     30e:	0000                	unimp
     310:	0580                	addi	s0,sp,704
     312:	0000                	unimp
     314:	0580                	addi	s0,sp,704
     316:	0000                	unimp
     318:	0580                	addi	s0,sp,704
     31a:	0000                	unimp
     31c:	0580                	addi	s0,sp,704
     31e:	0000                	unimp
     320:	0580                	addi	s0,sp,704
     322:	0000                	unimp
     324:	0580                	addi	s0,sp,704
     326:	0000                	unimp
     328:	0580                	addi	s0,sp,704
     32a:	0000                	unimp
     32c:	0580                	addi	s0,sp,704
     32e:	0000                	unimp
     330:	0580                	addi	s0,sp,704
     332:	0000                	unimp
     334:	0580                	addi	s0,sp,704
     336:	0000                	unimp
     338:	0580                	addi	s0,sp,704
     33a:	0000                	unimp
     33c:	0580                	addi	s0,sp,704
     33e:	0000                	unimp
     340:	0580                	addi	s0,sp,704
     342:	0000                	unimp
     344:	0580                	addi	s0,sp,704
     346:	0000                	unimp
     348:	0580                	addi	s0,sp,704
     34a:	0000                	unimp
     34c:	0580                	addi	s0,sp,704
     34e:	0000                	unimp
     350:	0580                	addi	s0,sp,704
     352:	0000                	unimp
     354:	0580                	addi	s0,sp,704
     356:	0000                	unimp
     358:	0580                	addi	s0,sp,704
     35a:	0000                	unimp
     35c:	0580                	addi	s0,sp,704
     35e:	0000                	unimp
     360:	0580                	addi	s0,sp,704
     362:	0000                	unimp
     364:	0580                	addi	s0,sp,704
     366:	0000                	unimp
     368:	0580                	addi	s0,sp,704
     36a:	0000                	unimp
     36c:	0580                	addi	s0,sp,704
     36e:	0000                	unimp
     370:	0580                	addi	s0,sp,704
     372:	0000                	unimp
     374:	0580                	addi	s0,sp,704
     376:	0000                	unimp
     378:	0580                	addi	s0,sp,704
     37a:	0000                	unimp
     37c:	0580                	addi	s0,sp,704
     37e:	0000                	unimp
     380:	0580                	addi	s0,sp,704
     382:	0000                	unimp
     384:	0580                	addi	s0,sp,704
     386:	0000                	unimp
     388:	0580                	addi	s0,sp,704
     38a:	0000                	unimp
     38c:	0580                	addi	s0,sp,704
     38e:	0000                	unimp
     390:	0580                	addi	s0,sp,704
     392:	0000                	unimp
     394:	0580                	addi	s0,sp,704
     396:	0000                	unimp
     398:	0580                	addi	s0,sp,704
     39a:	0000                	unimp
     39c:	0580                	addi	s0,sp,704
     39e:	0000                	unimp
     3a0:	0580                	addi	s0,sp,704
     3a2:	0000                	unimp
     3a4:	0580                	addi	s0,sp,704
     3a6:	0000                	unimp
     3a8:	0580                	addi	s0,sp,704
     3aa:	0000                	unimp
     3ac:	0580                	addi	s0,sp,704
     3ae:	0000                	unimp
     3b0:	0580                	addi	s0,sp,704
     3b2:	0000                	unimp
     3b4:	0580                	addi	s0,sp,704
     3b6:	0000                	unimp
     3b8:	0580                	addi	s0,sp,704
     3ba:	0000                	unimp
     3bc:	0580                	addi	s0,sp,704
     3be:	0000                	unimp
     3c0:	0580                	addi	s0,sp,704
     3c2:	0000                	unimp
     3c4:	0580                	addi	s0,sp,704
     3c6:	0000                	unimp
     3c8:	0580                	addi	s0,sp,704
     3ca:	0000                	unimp
     3cc:	0580                	addi	s0,sp,704
     3ce:	0000                	unimp
     3d0:	0580                	addi	s0,sp,704
     3d2:	0000                	unimp
     3d4:	0580                	addi	s0,sp,704
     3d6:	0000                	unimp
     3d8:	0580                	addi	s0,sp,704
     3da:	0000                	unimp
     3dc:	0580                	addi	s0,sp,704
     3de:	0000                	unimp
     3e0:	0580                	addi	s0,sp,704
     3e2:	0000                	unimp
     3e4:	0580                	addi	s0,sp,704
     3e6:	0000                	unimp
     3e8:	0580                	addi	s0,sp,704
     3ea:	0000                	unimp
     3ec:	0580                	addi	s0,sp,704
     3ee:	0000                	unimp
     3f0:	0580                	addi	s0,sp,704
     3f2:	0000                	unimp
     3f4:	0580                	addi	s0,sp,704
     3f6:	0000                	unimp
     3f8:	0580                	addi	s0,sp,704
     3fa:	0000                	unimp
     3fc:	0580                	addi	s0,sp,704
     3fe:	0000                	unimp
     400:	0580                	addi	s0,sp,704
     402:	0000                	unimp
     404:	0580                	addi	s0,sp,704
     406:	0000                	unimp
     408:	0580                	addi	s0,sp,704
     40a:	0000                	unimp
     40c:	0580                	addi	s0,sp,704
     40e:	0000                	unimp
     410:	0580                	addi	s0,sp,704
     412:	0000                	unimp
     414:	0580                	addi	s0,sp,704
     416:	0000                	unimp
     418:	0580                	addi	s0,sp,704
     41a:	0000                	unimp
     41c:	0580                	addi	s0,sp,704
     41e:	0000                	unimp
     420:	0580                	addi	s0,sp,704
     422:	0000                	unimp
     424:	0580                	addi	s0,sp,704
     426:	0000                	unimp
     428:	0580                	addi	s0,sp,704
     42a:	0000                	unimp
     42c:	0580                	addi	s0,sp,704
     42e:	0000                	unimp
     430:	0580                	addi	s0,sp,704
     432:	0000                	unimp
     434:	0580                	addi	s0,sp,704
     436:	0000                	unimp
     438:	0580                	addi	s0,sp,704
     43a:	0000                	unimp
     43c:	0580                	addi	s0,sp,704
     43e:	0000                	unimp
     440:	0580                	addi	s0,sp,704
     442:	0000                	unimp
     444:	0580                	addi	s0,sp,704
     446:	0000                	unimp
     448:	0580                	addi	s0,sp,704
     44a:	0000                	unimp
     44c:	0580                	addi	s0,sp,704
     44e:	0000                	unimp
     450:	0580                	addi	s0,sp,704
     452:	0000                	unimp
     454:	0580                	addi	s0,sp,704
     456:	0000                	unimp
     458:	0580                	addi	s0,sp,704
     45a:	0000                	unimp
     45c:	0580                	addi	s0,sp,704
     45e:	0000                	unimp
     460:	0580                	addi	s0,sp,704
     462:	0000                	unimp
     464:	0580                	addi	s0,sp,704
     466:	0000                	unimp
     468:	0580                	addi	s0,sp,704
     46a:	0000                	unimp
     46c:	0580                	addi	s0,sp,704
     46e:	0000                	unimp
     470:	0580                	addi	s0,sp,704
     472:	0000                	unimp
     474:	0580                	addi	s0,sp,704
     476:	0000                	unimp
     478:	0580                	addi	s0,sp,704
     47a:	0000                	unimp
     47c:	0580                	addi	s0,sp,704
     47e:	0000                	unimp
     480:	0580                	addi	s0,sp,704
     482:	0000                	unimp
     484:	0580                	addi	s0,sp,704
     486:	0000                	unimp
     488:	0580                	addi	s0,sp,704
     48a:	0000                	unimp
     48c:	0580                	addi	s0,sp,704
     48e:	0000                	unimp
     490:	0580                	addi	s0,sp,704
     492:	0000                	unimp
     494:	0580                	addi	s0,sp,704
     496:	0000                	unimp
     498:	0580                	addi	s0,sp,704
     49a:	0000                	unimp
     49c:	0580                	addi	s0,sp,704
     49e:	0000                	unimp
     4a0:	0580                	addi	s0,sp,704
     4a2:	0000                	unimp
     4a4:	0580                	addi	s0,sp,704
     4a6:	0000                	unimp
     4a8:	0580                	addi	s0,sp,704
     4aa:	0000                	unimp
     4ac:	0580                	addi	s0,sp,704
     4ae:	0000                	unimp
     4b0:	0580                	addi	s0,sp,704
     4b2:	0000                	unimp
     4b4:	0580                	addi	s0,sp,704
     4b6:	0000                	unimp
     4b8:	0580                	addi	s0,sp,704
     4ba:	0000                	unimp
     4bc:	0580                	addi	s0,sp,704
     4be:	0000                	unimp
     4c0:	0580                	addi	s0,sp,704
     4c2:	0000                	unimp
     4c4:	0580                	addi	s0,sp,704
     4c6:	0000                	unimp
     4c8:	0580                	addi	s0,sp,704
     4ca:	0000                	unimp
     4cc:	0580                	addi	s0,sp,704
     4ce:	0000                	unimp
     4d0:	0580                	addi	s0,sp,704
     4d2:	0000                	unimp
     4d4:	0580                	addi	s0,sp,704
     4d6:	0000                	unimp
     4d8:	0580                	addi	s0,sp,704
     4da:	0000                	unimp
     4dc:	0580                	addi	s0,sp,704
     4de:	0000                	unimp
     4e0:	0580                	addi	s0,sp,704
     4e2:	0000                	unimp
     4e4:	0580                	addi	s0,sp,704
     4e6:	0000                	unimp
     4e8:	0580                	addi	s0,sp,704
     4ea:	0000                	unimp
     4ec:	0580                	addi	s0,sp,704
     4ee:	0000                	unimp
     4f0:	0580                	addi	s0,sp,704
     4f2:	0000                	unimp
     4f4:	0580                	addi	s0,sp,704
     4f6:	0000                	unimp
     4f8:	0580                	addi	s0,sp,704
     4fa:	0000                	unimp
     4fc:	0580                	addi	s0,sp,704
     4fe:	0000                	unimp
     500:	0580                	addi	s0,sp,704
     502:	0000                	unimp
     504:	0580                	addi	s0,sp,704
     506:	0000                	unimp
     508:	0580                	addi	s0,sp,704
     50a:	0000                	unimp
     50c:	0580                	addi	s0,sp,704
     50e:	0000                	unimp
     510:	0580                	addi	s0,sp,704
     512:	0000                	unimp
     514:	0580                	addi	s0,sp,704
     516:	0000                	unimp
     518:	0580                	addi	s0,sp,704
     51a:	0000                	unimp
     51c:	0580                	addi	s0,sp,704
     51e:	0000                	unimp
     520:	0580                	addi	s0,sp,704
     522:	0000                	unimp
     524:	0580                	addi	s0,sp,704
     526:	0000                	unimp
     528:	0580                	addi	s0,sp,704
     52a:	0000                	unimp
     52c:	0580                	addi	s0,sp,704
     52e:	0000                	unimp
     530:	0580                	addi	s0,sp,704
     532:	0000                	unimp
     534:	0580                	addi	s0,sp,704
     536:	0000                	unimp
     538:	0580                	addi	s0,sp,704
     53a:	0000                	unimp
     53c:	0580                	addi	s0,sp,704
     53e:	0000                	unimp
     540:	0580                	addi	s0,sp,704
     542:	0000                	unimp
     544:	0580                	addi	s0,sp,704
     546:	0000                	unimp
     548:	0580                	addi	s0,sp,704
     54a:	0000                	unimp
     54c:	0580                	addi	s0,sp,704
     54e:	0000                	unimp
     550:	0580                	addi	s0,sp,704
     552:	0000                	unimp
     554:	0580                	addi	s0,sp,704
     556:	0000                	unimp
     558:	0580                	addi	s0,sp,704
     55a:	0000                	unimp
     55c:	0580                	addi	s0,sp,704
     55e:	0000                	unimp
     560:	0580                	addi	s0,sp,704
     562:	0000                	unimp
     564:	0580                	addi	s0,sp,704
     566:	0000                	unimp
     568:	0580                	addi	s0,sp,704
     56a:	0000                	unimp
     56c:	0580                	addi	s0,sp,704
     56e:	0000                	unimp
     570:	0580                	addi	s0,sp,704
     572:	0000                	unimp
     574:	0580                	addi	s0,sp,704
     576:	0000                	unimp
     578:	0580                	addi	s0,sp,704
     57a:	0000                	unimp
     57c:	0580                	addi	s0,sp,704
	...

00000580 <__dummy>:
	.long   __dummy
	.endr

  .global __dummy
__dummy:  
  j __fail
     580:	bebd                	j	fe <__fail>
	...

000005b4 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
     5b4:	00d67563          	bgeu	a2,a3,5be <_out_buffer+0xa>
    ((char*)buffer)[idx] = character;
     5b8:	95b2                	add	a1,a1,a2
     5ba:	00a58023          	sb	a0,0(a1)
  }
}
     5be:	8082                	ret

000005c0 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
     5c0:	8082                	ret

000005c2 <_out_rev>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
     5c2:	7179                	addi	sp,sp,-48
     5c4:	d226                	sw	s1,36(sp)
     5c6:	d04a                	sw	s2,32(sp)
     5c8:	ce4e                	sw	s3,28(sp)
     5ca:	cc52                	sw	s4,24(sp)
     5cc:	ca56                	sw	s5,20(sp)
     5ce:	c85a                	sw	s6,16(sp)
     5d0:	8ab2                	mv	s5,a2
     5d2:	c462                	sw	s8,8(sp)
     5d4:	c266                	sw	s9,4(sp)
     5d6:	c06a                	sw	s10,0(sp)
     5d8:	d606                	sw	ra,44(sp)
     5da:	d422                	sw	s0,40(sp)
     5dc:	c65e                	sw	s7,12(sp)
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
     5de:	0038f613          	andi	a2,a7,3
{
     5e2:	8cc6                	mv	s9,a7
     5e4:	892a                	mv	s2,a0
     5e6:	89ae                	mv	s3,a1
     5e8:	8a36                	mv	s4,a3
     5ea:	8b3a                	mv	s6,a4
     5ec:	8d3e                	mv	s10,a5
     5ee:	8c42                	mv	s8,a6
     5f0:	84d6                	mv	s1,s5
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
     5f2:	e205                	bnez	a2,612 <_out_rev+0x50>
    for (size_t i = len; i < width; i++) {
     5f4:	0107ff63          	bgeu	a5,a6,612 <_out_rev+0x50>
     5f8:	40f804b3          	sub	s1,a6,a5
     5fc:	94d6                	add	s1,s1,s5
     5fe:	8456                	mv	s0,s5
      out(' ', buffer, idx++, maxlen);
     600:	8622                	mv	a2,s0
     602:	86d2                	mv	a3,s4
     604:	0405                	addi	s0,s0,1
     606:	85ce                	mv	a1,s3
     608:	02000513          	li	a0,32
     60c:	9902                	jalr	s2
    for (size_t i = len; i < width; i++) {
     60e:	fe9419e3          	bne	s0,s1,600 <_out_rev+0x3e>
    }
  }

  // reverse string
  while (len) {
     612:	020d0163          	beqz	s10,634 <_out_rev+0x72>
     616:	01ab0433          	add	s0,s6,s10
     61a:	00940bb3          	add	s7,s0,s1
    out(buf[--len], buffer, idx++, maxlen);
     61e:	fff44503          	lbu	a0,-1(s0)
     622:	408b8633          	sub	a2,s7,s0
     626:	86d2                	mv	a3,s4
  while (len) {
     628:	147d                	addi	s0,s0,-1
    out(buf[--len], buffer, idx++, maxlen);
     62a:	85ce                	mv	a1,s3
     62c:	9902                	jalr	s2
  while (len) {
     62e:	fe8b18e3          	bne	s6,s0,61e <_out_rev+0x5c>
    out(buf[--len], buffer, idx++, maxlen);
     632:	94ea                	add	s1,s1,s10
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
     634:	002cfc93          	andi	s9,s9,2
     638:	020c8063          	beqz	s9,658 <_out_rev+0x96>
    while (idx - start_idx < width) {
     63c:	41548ab3          	sub	s5,s1,s5
     640:	018afc63          	bgeu	s5,s8,658 <_out_rev+0x96>
      out(' ', buffer, idx++, maxlen);
     644:	8626                	mv	a2,s1
    while (idx - start_idx < width) {
     646:	0a85                	addi	s5,s5,1
      out(' ', buffer, idx++, maxlen);
     648:	86d2                	mv	a3,s4
     64a:	85ce                	mv	a1,s3
     64c:	02000513          	li	a0,32
     650:	0485                	addi	s1,s1,1
     652:	9902                	jalr	s2
    while (idx - start_idx < width) {
     654:	ff8ae8e3          	bltu	s5,s8,644 <_out_rev+0x82>
    }
  }

  return idx;
}
     658:	50b2                	lw	ra,44(sp)
     65a:	5422                	lw	s0,40(sp)
     65c:	5902                	lw	s2,32(sp)
     65e:	49f2                	lw	s3,28(sp)
     660:	4a62                	lw	s4,24(sp)
     662:	4ad2                	lw	s5,20(sp)
     664:	4b42                	lw	s6,16(sp)
     666:	4bb2                	lw	s7,12(sp)
     668:	4c22                	lw	s8,8(sp)
     66a:	4c92                	lw	s9,4(sp)
     66c:	4d02                	lw	s10,0(sp)
     66e:	8526                	mv	a0,s1
     670:	5492                	lw	s1,36(sp)
     672:	6145                	addi	sp,sp,48
     674:	8082                	ret

00000676 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
     676:	43a2                	lw	t2,8(sp)
     678:	4282                	lw	t0,0(sp)
     67a:	4f92                	lw	t6,4(sp)
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
     67c:	0023f313          	andi	t1,t2,2
{
     680:	8f42                	mv	t5,a6
  if (!(flags & FLAGS_LEFT)) {
     682:	04031f63          	bnez	t1,6e0 <_ntoa_format+0x6a>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
     686:	0013f813          	andi	a6,t2,1
     68a:	0e0f9d63          	bnez	t6,784 <_ntoa_format+0x10e>
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     68e:	0257f363          	bgeu	a5,t0,6b4 <_ntoa_format+0x3e>
     692:	437d                	li	t1,31
     694:	1cf36b63          	bltu	t1,a5,86a <_ntoa_format+0x1f4>
      buf[len++] = '0';
     698:	03000e13          	li	t3,48
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     69c:	02000e93          	li	t4,32
     6a0:	a019                	j	6a6 <_ntoa_format+0x30>
     6a2:	01d78963          	beq	a5,t4,6b4 <_ntoa_format+0x3e>
      buf[len++] = '0';
     6a6:	0785                	addi	a5,a5,1
     6a8:	00f70333          	add	t1,a4,a5
     6ac:	ffc30fa3          	sb	t3,-1(t1)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     6b0:	fe57e9e3          	bltu	a5,t0,6a2 <_ntoa_format+0x2c>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     6b4:	02080663          	beqz	a6,6e0 <_ntoa_format+0x6a>
     6b8:	03f7f463          	bgeu	a5,t6,6e0 <_ntoa_format+0x6a>
     6bc:	02000813          	li	a6,32
     6c0:	0f078363          	beq	a5,a6,7a6 <_ntoa_format+0x130>
      buf[len++] = '0';
     6c4:	03000e13          	li	t3,48
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     6c8:	02000e93          	li	t4,32
     6cc:	a019                	j	6d2 <_ntoa_format+0x5c>
     6ce:	0dd78c63          	beq	a5,t4,7a6 <_ntoa_format+0x130>
      buf[len++] = '0';
     6d2:	0785                	addi	a5,a5,1
     6d4:	00f70333          	add	t1,a4,a5
     6d8:	ffc30fa3          	sb	t3,-1(t1)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     6dc:	fff799e3          	bne	a5,t6,6ce <_ntoa_format+0x58>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
     6e0:	0103f813          	andi	a6,t2,16
     6e4:	06080a63          	beqz	a6,758 <_ntoa_format+0xe2>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
     6e8:	4003f813          	andi	a6,t2,1024
     6ec:	04081563          	bnez	a6,736 <_ntoa_format+0xc0>
     6f0:	02079f63          	bnez	a5,72e <_ntoa_format+0xb8>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     6f4:	47c1                	li	a5,16
     6f6:	12f88663          	beq	a7,a5,822 <_ntoa_format+0x1ac>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     6fa:	4789                	li	a5,2
     6fc:	16f88163          	beq	a7,a5,85e <_ntoa_format+0x1e8>
      buf[len++] = 'b';
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
      buf[len++] = '0';
     700:	03000793          	li	a5,48
     704:	00f70023          	sb	a5,0(a4)
     708:	4785                	li	a5,1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    if (negative) {
     70a:	040f0d63          	beqz	t5,764 <_ntoa_format+0xee>
      buf[len++] = '-';
     70e:	00f70833          	add	a6,a4,a5
     712:	02d00893          	li	a7,45
     716:	01180023          	sb	a7,0(a6) # 50000 <_global_impure_ptr+0x49ff8>
     71a:	0785                	addi	a5,a5,1
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
     71c:	889e                	mv	a7,t2
     71e:	887e                	mv	a6,t6
     720:	b54d                	j	5c2 <_out_rev>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
     722:	4003f793          	andi	a5,t2,1024
     726:	12079363          	bnez	a5,84c <_ntoa_format+0x1d6>
     72a:	02000793          	li	a5,32
     72e:	0af28e63          	beq	t0,a5,7ea <_ntoa_format+0x174>
     732:	0aff8c63          	beq	t6,a5,7ea <_ntoa_format+0x174>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     736:	4841                	li	a6,16
     738:	0d088563          	beq	a7,a6,802 <_ntoa_format+0x18c>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     73c:	4809                	li	a6,2
     73e:	09088c63          	beq	a7,a6,7d6 <_ntoa_format+0x160>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
     742:	02000813          	li	a6,32
     746:	fd078be3          	beq	a5,a6,71c <_ntoa_format+0xa6>
      buf[len++] = '0';
     74a:	00f70833          	add	a6,a4,a5
     74e:	03000893          	li	a7,48
     752:	01180023          	sb	a7,0(a6)
     756:	0785                	addi	a5,a5,1
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
     758:	02000813          	li	a6,32
     75c:	fd0780e3          	beq	a5,a6,71c <_ntoa_format+0xa6>
    if (negative) {
     760:	fa0f17e3          	bnez	t5,70e <_ntoa_format+0x98>
    else if (flags & FLAGS_PLUS) {
     764:	0043f813          	andi	a6,t2,4
     768:	04081d63          	bnez	a6,7c2 <_ntoa_format+0x14c>
    else if (flags & FLAGS_SPACE) {
     76c:	0083f813          	andi	a6,t2,8
     770:	fa0806e3          	beqz	a6,71c <_ntoa_format+0xa6>
      buf[len++] = ' ';
     774:	00f70833          	add	a6,a4,a5
     778:	02000893          	li	a7,32
     77c:	01180023          	sb	a7,0(a6)
     780:	0785                	addi	a5,a5,1
     782:	bf69                	j	71c <_ntoa_format+0xa6>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
     784:	02080763          	beqz	a6,7b2 <_ntoa_format+0x13c>
     788:	040f1f63          	bnez	t5,7e6 <_ntoa_format+0x170>
     78c:	00c3f313          	andi	t1,t2,12
     790:	04031b63          	bnez	t1,7e6 <_ntoa_format+0x170>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     794:	f257f2e3          	bgeu	a5,t0,6b8 <_ntoa_format+0x42>
     798:	437d                	li	t1,31
     79a:	eef37fe3          	bgeu	t1,a5,698 <_ntoa_format+0x22>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     79e:	02000793          	li	a5,32
     7a2:	f3f7ffe3          	bgeu	a5,t6,6e0 <_ntoa_format+0x6a>
  if (flags & FLAGS_HASH) {
     7a6:	0103f793          	andi	a5,t2,16
     7aa:	ffa5                	bnez	a5,722 <_ntoa_format+0xac>
     7ac:	02000793          	li	a5,32
     7b0:	b7b5                	j	71c <_ntoa_format+0xa6>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     7b2:	f257f7e3          	bgeu	a5,t0,6e0 <_ntoa_format+0x6a>
     7b6:	437d                	li	t1,31
     7b8:	eef370e3          	bgeu	t1,a5,698 <_ntoa_format+0x22>
     7bc:	02000793          	li	a5,32
     7c0:	b705                	j	6e0 <_ntoa_format+0x6a>
      buf[len++] = '+';  // ignore the space if the '+' exists
     7c2:	00f70833          	add	a6,a4,a5
     7c6:	02b00893          	li	a7,43
     7ca:	01180023          	sb	a7,0(a6)
     7ce:	0785                	addi	a5,a5,1
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
     7d0:	889e                	mv	a7,t2
     7d2:	887e                	mv	a6,t6
     7d4:	b3fd                	j	5c2 <_out_rev>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     7d6:	02000813          	li	a6,32
     7da:	f50781e3          	beq	a5,a6,71c <_ntoa_format+0xa6>
      buf[len++] = 'b';
     7de:	00f70833          	add	a6,a4,a5
     7e2:	0785                	addi	a5,a5,1
     7e4:	a055                	j	888 <_ntoa_format+0x212>
      width--;
     7e6:	1ffd                	addi	t6,t6,-1
     7e8:	b775                	j	794 <_ntoa_format+0x11e>
      len--;
     7ea:	fff78813          	addi	a6,a5,-1
      if (len && (base == 16U)) {
     7ee:	f00803e3          	beqz	a6,6f4 <_ntoa_format+0x7e>
     7f2:	4341                	li	t1,16
     7f4:	08688063          	beq	a7,t1,874 <_ntoa_format+0x1fe>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     7f8:	4309                	li	t1,2
     7fa:	08688663          	beq	a7,t1,886 <_ntoa_format+0x210>
     7fe:	87c2                	mv	a5,a6
     800:	b7a9                	j	74a <_ntoa_format+0xd4>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     802:	0203f813          	andi	a6,t2,32
     806:	02081763          	bnez	a6,834 <_ntoa_format+0x1be>
     80a:	02000813          	li	a6,32
     80e:	f10787e3          	beq	a5,a6,71c <_ntoa_format+0xa6>
      buf[len++] = 'x';
     812:	00f708b3          	add	a7,a4,a5
     816:	0785                	addi	a5,a5,1
     818:	07800813          	li	a6,120
     81c:	01088023          	sb	a6,0(a7)
     820:	b70d                	j	742 <_ntoa_format+0xcc>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     822:	0203f793          	andi	a5,t2,32
     826:	e795                	bnez	a5,852 <_ntoa_format+0x1dc>
      buf[len++] = 'x';
     828:	07800793          	li	a5,120
     82c:	00f70023          	sb	a5,0(a4)
     830:	4785                	li	a5,1
     832:	bf21                	j	74a <_ntoa_format+0xd4>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     834:	02000813          	li	a6,32
     838:	ef0782e3          	beq	a5,a6,71c <_ntoa_format+0xa6>
      buf[len++] = 'X';
     83c:	00f70833          	add	a6,a4,a5
     840:	05800893          	li	a7,88
     844:	01180023          	sb	a7,0(a6)
     848:	0785                	addi	a5,a5,1
     84a:	bde5                	j	742 <_ntoa_format+0xcc>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
     84c:	02000793          	li	a5,32
     850:	b5dd                	j	736 <_ntoa_format+0xc0>
      buf[len++] = 'X';
     852:	05800793          	li	a5,88
     856:	00f70023          	sb	a5,0(a4)
     85a:	4785                	li	a5,1
     85c:	b5fd                	j	74a <_ntoa_format+0xd4>
      buf[len++] = 'b';
     85e:	06200793          	li	a5,98
     862:	00f70023          	sb	a5,0(a4)
     866:	4785                	li	a5,1
     868:	b5cd                	j	74a <_ntoa_format+0xd4>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     86a:	02000793          	li	a5,32
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     86e:	e40815e3          	bnez	a6,6b8 <_ntoa_format+0x42>
     872:	b5bd                	j	6e0 <_ntoa_format+0x6a>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     874:	0203f893          	andi	a7,t2,32
        len--;
     878:	17f9                	addi	a5,a5,-2
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     87a:	fc0891e3          	bnez	a7,83c <_ntoa_format+0x1c6>
      buf[len++] = 'x';
     87e:	00f708b3          	add	a7,a4,a5
     882:	87c2                	mv	a5,a6
     884:	bf51                	j	818 <_ntoa_format+0x1a2>
      buf[len++] = 'b';
     886:	983a                	add	a6,a6,a4
     888:	06200893          	li	a7,98
     88c:	01180023          	sb	a7,0(a6)
     890:	bd4d                	j	742 <_ntoa_format+0xcc>

00000892 <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
     892:	7139                	addi	sp,sp,-64
     894:	dc22                	sw	s0,56(sp)
     896:	de06                	sw	ra,60(sp)
     898:	8ec2                	mv	t4,a6
     89a:	4416                	lw	s0,68(sp)
     89c:	8e3a                	mv	t3,a4
     89e:	883e                	mv	a6,a5
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
     8a0:	e709                	bnez	a4,8aa <_ntoa_long+0x18>
    flags &= ~FLAGS_HASH;
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
     8a2:	40047793          	andi	a5,s0,1024
    flags &= ~FLAGS_HASH;
     8a6:	983d                	andi	s0,s0,-17
  if (!(flags & FLAGS_PRECISION) || value) {
     8a8:	e3bd                	bnez	a5,90e <_ntoa_long+0x7c>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     8aa:	02047713          	andi	a4,s0,32
     8ae:	06100293          	li	t0,97
     8b2:	eb39                	bnez	a4,908 <_ntoa_long+0x76>
     8b4:	4781                	li	a5,0
     8b6:	0818                	addi	a4,sp,16
     8b8:	43a5                	li	t2,9
     8ba:	12d9                	addi	t0,t0,-10
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     8bc:	02000093          	li	ra,32
     8c0:	a021                	j	8c8 <_ntoa_long+0x36>
     8c2:	02178963          	beq	a5,ra,8f4 <_ntoa_long+0x62>
      value /= base;
     8c6:	8e1a                	mv	t3,t1
      const char digit = (char)(value % base);
     8c8:	03de7f33          	remu	t5,t3,t4
     8cc:	0fff7313          	andi	t1,t5,255
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     8d0:	03030f93          	addi	t6,t1,48
     8d4:	9316                	add	t1,t1,t0
     8d6:	0ff37313          	andi	t1,t1,255
     8da:	01e3e463          	bltu	t2,t5,8e2 <_ntoa_long+0x50>
     8de:	0ffff313          	andi	t1,t6,255
     8e2:	0785                	addi	a5,a5,1
     8e4:	00f70f33          	add	t5,a4,a5
     8e8:	fe6f0fa3          	sb	t1,-1(t5)
      value /= base;
     8ec:	03de5333          	divu	t1,t3,t4
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     8f0:	fdde79e3          	bgeu	t3,t4,8c2 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
     8f4:	4306                	lw	t1,64(sp)
     8f6:	c422                	sw	s0,8(sp)
     8f8:	c046                	sw	a7,0(sp)
     8fa:	c21a                	sw	t1,4(sp)
     8fc:	88f6                	mv	a7,t4
     8fe:	3ba5                	jal	676 <_ntoa_format>
}
     900:	50f2                	lw	ra,60(sp)
     902:	5462                	lw	s0,56(sp)
     904:	6121                	addi	sp,sp,64
     906:	8082                	ret
     908:	04100293          	li	t0,65
     90c:	b765                	j	8b4 <_ntoa_long+0x22>
  size_t len = 0U;
     90e:	4781                	li	a5,0
     910:	0818                	addi	a4,sp,16
     912:	b7cd                	j	8f4 <_ntoa_long+0x62>

00000914 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
     914:	7175                	addi	sp,sp,-144
     916:	d2d6                	sw	s5,100(sp)
     918:	d0da                	sw	s6,96(sp)
     91a:	cede                	sw	s7,92(sp)
     91c:	cce2                	sw	s8,88(sp)
     91e:	cae6                	sw	s9,84(sp)
     920:	c8ea                	sw	s10,80(sp)
     922:	c6ee                	sw	s11,76(sp)
     924:	de86                	sw	ra,124(sp)
     926:	8dbe                	mv	s11,a5
     928:	dca2                	sw	s0,120(sp)
     92a:	daa6                	sw	s1,116(sp)
     92c:	d8ca                	sw	s2,112(sp)
     92e:	d6ce                	sw	s3,108(sp)
     930:	d4d2                	sw	s4,104(sp)
     932:	c746                	sw	a7,140(sp)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
     934:	8fd9                	or	a5,a5,a4
{
     936:	cc2a                	sw	a0,24(sp)
     938:	ce2e                	sw	a1,28(sp)
     93a:	4b4a                	lw	s6,144(sp)
     93c:	8aba                	mv	s5,a4
     93e:	8bb2                	mv	s7,a2
     940:	8c36                	mv	s8,a3
     942:	8cc2                	mv	s9,a6
     944:	8d46                	mv	s10,a7
  if (!value) {
     946:	eb89                	bnez	a5,958 <_ntoa_long_long+0x44>
    flags &= ~FLAGS_HASH;
     948:	477a                	lw	a4,156(sp)
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
     94a:	47fa                	lw	a5,156(sp)
    flags &= ~FLAGS_HASH;
     94c:	fef77a13          	andi	s4,a4,-17
  if (!(flags & FLAGS_PRECISION) || value) {
     950:	4007f793          	andi	a5,a5,1024
    flags &= ~FLAGS_HASH;
     954:	cf52                	sw	s4,156(sp)
  if (!(flags & FLAGS_PRECISION) || value) {
     956:	e3bd                	bnez	a5,9bc <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     958:	47fa                	lw	a5,156(sp)
     95a:	06100413          	li	s0,97
     95e:	0207f793          	andi	a5,a5,32
     962:	e3c5                	bnez	a5,a02 <_ntoa_long_long+0xee>
     964:	4a01                	li	s4,0
     966:	1004                	addi	s1,sp,32
     968:	4925                	li	s2,9
     96a:	1459                	addi	s0,s0,-10
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     96c:	02000993          	li	s3,32
      const char digit = (char)(value % base);
     970:	866a                	mv	a2,s10
     972:	86da                	mv	a3,s6
     974:	8556                	mv	a0,s5
     976:	85ee                	mv	a1,s11
     978:	090020ef          	jal	ra,2a08 <__umoddi3>
     97c:	0ff57513          	andi	a0,a0,255
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     980:	00850833          	add	a6,a0,s0
     984:	03050613          	addi	a2,a0,48
     988:	0ff87813          	andi	a6,a6,255
     98c:	00a96463          	bltu	s2,a0,994 <_ntoa_long_long+0x80>
     990:	0ff67813          	andi	a6,a2,255
     994:	0a05                	addi	s4,s4,1
     996:	014488b3          	add	a7,s1,s4
      value /= base;
     99a:	8556                	mv	a0,s5
     99c:	85ee                	mv	a1,s11
     99e:	866a                	mv	a2,s10
     9a0:	86da                	mv	a3,s6
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     9a2:	ff088fa3          	sb	a6,-1(a7)
      value /= base;
     9a6:	503010ef          	jal	ra,26a8 <__udivdi3>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     9aa:	016deb63          	bltu	s11,s6,9c0 <_ntoa_long_long+0xac>
     9ae:	05bb0763          	beq	s6,s11,9fc <_ntoa_long_long+0xe8>
     9b2:	013a0763          	beq	s4,s3,9c0 <_ntoa_long_long+0xac>
      value /= base;
     9b6:	8aaa                	mv	s5,a0
     9b8:	8dae                	mv	s11,a1
     9ba:	bf5d                	j	970 <_ntoa_long_long+0x5c>
  size_t len = 0U;
     9bc:	4a01                	li	s4,0
     9be:	1004                	addi	s1,sp,32
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
     9c0:	476a                	lw	a4,152(sp)
     9c2:	47fa                	lw	a5,156(sp)
     9c4:	45f2                	lw	a1,28(sp)
     9c6:	c23a                	sw	a4,4(sp)
     9c8:	475a                	lw	a4,148(sp)
     9ca:	4562                	lw	a0,24(sp)
     9cc:	c43e                	sw	a5,8(sp)
     9ce:	c03a                	sw	a4,0(sp)
     9d0:	88ea                	mv	a7,s10
     9d2:	8866                	mv	a6,s9
     9d4:	87d2                	mv	a5,s4
     9d6:	8726                	mv	a4,s1
     9d8:	86e2                	mv	a3,s8
     9da:	865e                	mv	a2,s7
     9dc:	3969                	jal	676 <_ntoa_format>
}
     9de:	50f6                	lw	ra,124(sp)
     9e0:	5466                	lw	s0,120(sp)
     9e2:	54d6                	lw	s1,116(sp)
     9e4:	5946                	lw	s2,112(sp)
     9e6:	59b6                	lw	s3,108(sp)
     9e8:	5a26                	lw	s4,104(sp)
     9ea:	5a96                	lw	s5,100(sp)
     9ec:	5b06                	lw	s6,96(sp)
     9ee:	4bf6                	lw	s7,92(sp)
     9f0:	4c66                	lw	s8,88(sp)
     9f2:	4cd6                	lw	s9,84(sp)
     9f4:	4d46                	lw	s10,80(sp)
     9f6:	4db6                	lw	s11,76(sp)
     9f8:	6149                	addi	sp,sp,144
     9fa:	8082                	ret
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     9fc:	fbaafbe3          	bgeu	s5,s10,9b2 <_ntoa_long_long+0x9e>
     a00:	b7c1                	j	9c0 <_ntoa_long_long+0xac>
     a02:	04100413          	li	s0,65
     a06:	bfb9                	j	964 <_ntoa_long_long+0x50>

00000a08 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
     a08:	7119                	addi	sp,sp,-128
     a0a:	d8ca                	sw	s2,112(sp)
     a0c:	d6ce                	sw	s3,108(sp)
     a0e:	d4d2                	sw	s4,104(sp)
     a10:	d2d6                	sw	s5,100(sp)
     a12:	89aa                	mv	s3,a0
     a14:	8a2e                	mv	s4,a1
     a16:	8932                	mv	s2,a2
     a18:	8ab6                	mv	s5,a3
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
     a1a:	863a                	mv	a2,a4
     a1c:	86be                	mv	a3,a5
     a1e:	853a                	mv	a0,a4
     a20:	85be                	mv	a1,a5
{
     a22:	dca2                	sw	s0,120(sp)
     a24:	daa6                	sw	s1,116(sp)
     a26:	d0da                	sw	s6,96(sp)
     a28:	cce2                	sw	s8,88(sp)
     a2a:	cae6                	sw	s9,84(sp)
     a2c:	de86                	sw	ra,124(sp)
     a2e:	cede                	sw	s7,92(sp)
     a30:	c8ea                	sw	s10,80(sp)
     a32:	c6ee                	sw	s11,76(sp)
     a34:	843a                	mv	s0,a4
     a36:	84be                	mv	s1,a5
     a38:	8c42                	mv	s8,a6
     a3a:	8b46                	mv	s6,a7
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
     a3c:	250030ef          	jal	ra,3c8c <__eqdf2>
{
     a40:	4c8a                	lw	s9,128(sp)
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
     a42:	36051063          	bnez	a0,da2 <_etoa+0x39a>
     a46:	6799                	lui	a5,0x6
     a48:	f707a603          	lw	a2,-144(a5) # 5f70 <__erodata+0x4>
     a4c:	f747a683          	lw	a3,-140(a5)
     a50:	8522                	mv	a0,s0
     a52:	85a6                	mv	a1,s1
     a54:	2dc030ef          	jal	ra,3d30 <__gedf2>
     a58:	34a04563          	bgtz	a0,da2 <_etoa+0x39a>
     a5c:	6799                	lui	a5,0x6
     a5e:	f787a603          	lw	a2,-136(a5) # 5f78 <__erodata+0xc>
     a62:	f7c7a683          	lw	a3,-132(a5)
     a66:	8522                	mv	a0,s0
     a68:	85a6                	mv	a1,s1
     a6a:	37c030ef          	jal	ra,3de6 <__ledf2>
     a6e:	32054a63          	bltz	a0,da2 <_etoa+0x39a>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
  }

  // determine the sign
  const bool negative = value < 0;
  if (negative) {
     a72:	8522                	mv	a0,s0
     a74:	85a6                	mv	a1,s1
     a76:	4601                	li	a2,0
     a78:	4681                	li	a3,0
     a7a:	36c030ef          	jal	ra,3de6 <__ledf2>
    value = -value;
     a7e:	80000bb7          	lui	s7,0x80000
     a82:	d222                	sw	s0,36(sp)
     a84:	009bcbb3          	xor	s7,s7,s1
  if (negative) {
     a88:	00054363          	bltz	a0,a8e <_etoa+0x86>
     a8c:	8ba6                	mv	s7,s1
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
     a8e:	400cf793          	andi	a5,s9,1024
     a92:	de3e                	sw	a5,60(sp)
     a94:	e391                	bnez	a5,a98 <_etoa+0x90>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
     a96:	4c19                	li	s8,6
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
     a98:	014bd513          	srli	a0,s7,0x14
     a9c:	7ff57513          	andi	a0,a0,2047
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
     aa0:	c0150513          	addi	a0,a0,-1023
     aa4:	3c2040ef          	jal	ra,4e66 <__floatsidf>
     aa8:	6799                	lui	a5,0x6
     aaa:	f807a603          	lw	a2,-128(a5) # 5f80 <__erodata+0x14>
     aae:	f847a683          	lw	a3,-124(a5)
     ab2:	3ea030ef          	jal	ra,3e9c <__muldf3>
     ab6:	6799                	lui	a5,0x6
     ab8:	f887a603          	lw	a2,-120(a5) # 5f88 <__erodata+0x1c>
     abc:	f8c7a683          	lw	a3,-116(a5)
     ac0:	288020ef          	jal	ra,2d48 <__adddf3>
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
     ac4:	00cb9793          	slli	a5,s7,0xc
     ac8:	00c7d713          	srli	a4,a5,0xc
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
     acc:	6799                	lui	a5,0x6
     ace:	f907a603          	lw	a2,-112(a5) # 5f90 <__erodata+0x24>
     ad2:	f947a683          	lw	a3,-108(a5)
     ad6:	3ff007b7          	lui	a5,0x3ff00
     ada:	8fd9                	or	a5,a5,a4
     adc:	8daa                	mv	s11,a0
     ade:	8d2e                	mv	s10,a1
     ae0:	8522                	mv	a0,s0
     ae2:	85be                	mv	a1,a5
     ae4:	157030ef          	jal	ra,443a <__subdf3>
     ae8:	6799                	lui	a5,0x6
     aea:	f987a603          	lw	a2,-104(a5) # 5f98 <__erodata+0x2c>
     aee:	f9c7a683          	lw	a3,-100(a5)
     af2:	3aa030ef          	jal	ra,3e9c <__muldf3>
     af6:	862a                	mv	a2,a0
     af8:	86ae                	mv	a3,a1
     afa:	856e                	mv	a0,s11
     afc:	85ea                	mv	a1,s10
     afe:	24a020ef          	jal	ra,2d48 <__adddf3>
     b02:	204040ef          	jal	ra,4d06 <__fixdfsi>
     b06:	8d2a                	mv	s10,a0
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
     b08:	35e040ef          	jal	ra,4e66 <__floatsidf>
     b0c:	6799                	lui	a5,0x6
     b0e:	fa07a603          	lw	a2,-96(a5) # 5fa0 <__erodata+0x34>
     b12:	fa47a683          	lw	a3,-92(a5)
     b16:	8dae                	mv	s11,a1
     b18:	cc2a                	sw	a0,24(sp)
     b1a:	382030ef          	jal	ra,3e9c <__muldf3>
     b1e:	6719                	lui	a4,0x6
     b20:	fa872603          	lw	a2,-88(a4) # 5fa8 <__erodata+0x3c>
     b24:	fac72683          	lw	a3,-84(a4)
     b28:	220020ef          	jal	ra,2d48 <__adddf3>
     b2c:	1da040ef          	jal	ra,4d06 <__fixdfsi>
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
     b30:	47e2                	lw	a5,24(sp)
     b32:	6699                	lui	a3,0x6
     b34:	fb06a603          	lw	a2,-80(a3) # 5fb0 <__erodata+0x44>
     b38:	fb46a683          	lw	a3,-76(a3)
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
     b3c:	872a                	mv	a4,a0
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
     b3e:	85ee                	mv	a1,s11
     b40:	853e                	mv	a0,a5
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
     b42:	8dba                	mv	s11,a4
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
     b44:	358030ef          	jal	ra,3e9c <__muldf3>
     b48:	87aa                	mv	a5,a0
     b4a:	856e                	mv	a0,s11
     b4c:	cc3e                	sw	a5,24(sp)
     b4e:	d46e                	sw	s11,40(sp)
     b50:	8dae                	mv	s11,a1
     b52:	314040ef          	jal	ra,4e66 <__floatsidf>
     b56:	6719                	lui	a4,0x6
     b58:	fb872603          	lw	a2,-72(a4) # 5fb8 <__erodata+0x4c>
     b5c:	fbc72683          	lw	a3,-68(a4)
     b60:	33c030ef          	jal	ra,3e9c <__muldf3>
     b64:	47e2                	lw	a5,24(sp)
     b66:	862a                	mv	a2,a0
     b68:	86ae                	mv	a3,a1
     b6a:	853e                	mv	a0,a5
     b6c:	85ee                	mv	a1,s11
     b6e:	0cd030ef          	jal	ra,443a <__subdf3>
  const double z2 = z * z;
     b72:	862a                	mv	a2,a0
     b74:	86ae                	mv	a3,a1
     b76:	d62a                	sw	a0,44(sp)
     b78:	cc2e                	sw	a1,24(sp)
     b7a:	322030ef          	jal	ra,3e9c <__muldf3>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     b7e:	47e2                	lw	a5,24(sp)
     b80:	5732                	lw	a4,44(sp)
  const double z2 = z * z;
     b82:	8daa                	mv	s11,a0
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     b84:	86be                	mv	a3,a5
  const double z2 = z * z;
     b86:	882e                	mv	a6,a1
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     b88:	863a                	mv	a2,a4
     b8a:	85be                	mv	a1,a5
     b8c:	853a                	mv	a0,a4
     b8e:	da3e                	sw	a5,52(sp)
     b90:	dc3a                	sw	a4,56(sp)
  const double z2 = z * z;
     b92:	cc42                	sw	a6,24(sp)
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     b94:	1b4020ef          	jal	ra,2d48 <__adddf3>
     b98:	6699                	lui	a3,0x6
     b9a:	882e                	mv	a6,a1
     b9c:	fc06a603          	lw	a2,-64(a3) # 5fc0 <__erodata+0x54>
     ba0:	45e2                	lw	a1,24(sp)
     ba2:	fc46a683          	lw	a3,-60(a3)
     ba6:	88aa                	mv	a7,a0
     ba8:	856e                	mv	a0,s11
     baa:	d846                	sw	a7,48(sp)
     bac:	d642                	sw	a6,44(sp)
     bae:	253020ef          	jal	ra,3600 <__divdf3>
     bb2:	6719                	lui	a4,0x6
     bb4:	fc872603          	lw	a2,-56(a4) # 5fc8 <__erodata+0x5c>
     bb8:	fcc72683          	lw	a3,-52(a4)
     bbc:	18c020ef          	jal	ra,2d48 <__adddf3>
     bc0:	86ae                	mv	a3,a1
     bc2:	45e2                	lw	a1,24(sp)
     bc4:	862a                	mv	a2,a0
     bc6:	856e                	mv	a0,s11
     bc8:	239020ef          	jal	ra,3600 <__divdf3>
     bcc:	6699                	lui	a3,0x6
     bce:	fd06a603          	lw	a2,-48(a3) # 5fd0 <__erodata+0x64>
     bd2:	fd46a683          	lw	a3,-44(a3)
     bd6:	172020ef          	jal	ra,2d48 <__adddf3>
     bda:	86ae                	mv	a3,a1
     bdc:	45e2                	lw	a1,24(sp)
     bde:	862a                	mv	a2,a0
     be0:	856e                	mv	a0,s11
     be2:	21f020ef          	jal	ra,3600 <__divdf3>
     be6:	5762                	lw	a4,56(sp)
     be8:	57d2                	lw	a5,52(sp)
     bea:	6699                	lui	a3,0x6
     bec:	832a                	mv	t1,a0
     bee:	8dae                	mv	s11,a1
     bf0:	fd86a503          	lw	a0,-40(a3) # 5fd8 <__erodata+0x6c>
     bf4:	fdc6a583          	lw	a1,-36(a3)
     bf8:	863a                	mv	a2,a4
     bfa:	86be                	mv	a3,a5
     bfc:	cc1a                	sw	t1,24(sp)
     bfe:	03d030ef          	jal	ra,443a <__subdf3>
     c02:	4362                	lw	t1,24(sp)
     c04:	862a                	mv	a2,a0
     c06:	86ae                	mv	a3,a1
     c08:	851a                	mv	a0,t1
     c0a:	85ee                	mv	a1,s11
     c0c:	13c020ef          	jal	ra,2d48 <__adddf3>
     c10:	58c2                	lw	a7,48(sp)
     c12:	5832                	lw	a6,44(sp)
     c14:	862a                	mv	a2,a0
     c16:	86ae                	mv	a3,a1
     c18:	8546                	mv	a0,a7
     c1a:	85c2                	mv	a1,a6
     c1c:	1e5020ef          	jal	ra,3600 <__divdf3>
     c20:	6799                	lui	a5,0x6
     c22:	fe07a603          	lw	a2,-32(a5) # 5fe0 <__erodata+0x74>
     c26:	fe47a683          	lw	a3,-28(a5)
     c2a:	11e020ef          	jal	ra,2d48 <__adddf3>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
     c2e:	57a2                	lw	a5,40(sp)
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     c30:	4601                	li	a2,0
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
     c32:	3ff78793          	addi	a5,a5,1023
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     c36:	07d2                	slli	a5,a5,0x14
     c38:	86be                	mv	a3,a5
     c3a:	262030ef          	jal	ra,3e9c <__muldf3>
  // correct for rounding errors
  if (value < conv.F) {
     c3e:	8622                	mv	a2,s0
     c40:	86de                	mv	a3,s7
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     c42:	8daa                	mv	s11,a0
     c44:	cc2e                	sw	a1,24(sp)
  if (value < conv.F) {
     c46:	0ea030ef          	jal	ra,3d30 <__gedf2>
     c4a:	18a04463          	bgtz	a0,dd2 <_etoa+0x3ca>
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     c4e:	43e2                	lw	t2,24(sp)
     c50:	836e                	mv	t1,s11
    expval--;
    conv.F /= 10;
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
     c52:	063d0d93          	addi	s11,s10,99

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
     c56:	00bcd793          	srli	a5,s9,0xb
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
     c5a:	0c600713          	li	a4,198
     c5e:	01b73db3          	sltu	s11,a4,s11
  if (flags & FLAGS_ADAPT_EXP) {
     c62:	8b85                	andi	a5,a5,1
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
     c64:	0d91                	addi	s11,s11,4
  if (flags & FLAGS_ADAPT_EXP) {
     c66:	c7a1                	beqz	a5,cae <_etoa+0x2a6>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
     c68:	6799                	lui	a5,0x6
     c6a:	fe87a603          	lw	a2,-24(a5) # 5fe8 <__erodata+0x7c>
     c6e:	fec7a683          	lw	a3,-20(a5)
     c72:	8522                	mv	a0,s0
     c74:	85de                	mv	a1,s7
     c76:	cc1a                	sw	t1,24(sp)
     c78:	ce1e                	sw	t2,28(sp)
     c7a:	0b6030ef          	jal	ra,3d30 <__gedf2>
     c7e:	4362                	lw	t1,24(sp)
     c80:	43f2                	lw	t2,28(sp)
     c82:	00054f63          	bltz	a0,ca0 <_etoa+0x298>
     c86:	6799                	lui	a5,0x6
     c88:	ff07a603          	lw	a2,-16(a5) # 5ff0 <__erodata+0x84>
     c8c:	ff47a683          	lw	a3,-12(a5)
     c90:	8522                	mv	a0,s0
     c92:	85de                	mv	a1,s7
     c94:	152030ef          	jal	ra,3de6 <__ledf2>
     c98:	4362                	lw	t1,24(sp)
     c9a:	43f2                	lw	t2,28(sp)
     c9c:	14054863          	bltz	a0,dec <_etoa+0x3e4>
      minwidth = 0U;
      expval   = 0;
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
     ca0:	000c0763          	beqz	s8,cae <_etoa+0x2a6>
        --prec;
     ca4:	57f2                	lw	a5,60(sp)
     ca6:	00f037b3          	snez	a5,a5
     caa:	40fc0c33          	sub	s8,s8,a5
  if (width > minwidth) {
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
     cae:	4881                	li	a7,0
  if (width > minwidth) {
     cb0:	016df463          	bgeu	s11,s6,cb8 <_etoa+0x2b0>
    fwidth -= minwidth;
     cb4:	41bb08b3          	sub	a7,s6,s11
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
     cb8:	002cf793          	andi	a5,s9,2
     cbc:	d43e                	sw	a5,40(sp)
     cbe:	c799                	beqz	a5,ccc <_etoa+0x2c4>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
     cc0:	001db793          	seqz	a5,s11
     cc4:	40f007b3          	neg	a5,a5
     cc8:	00f8f8b3          	and	a7,a7,a5
  }

  // rescale the float value
  if (expval) {
     ccc:	000d0c63          	beqz	s10,ce4 <_etoa+0x2dc>
    value /= conv.F;
     cd0:	85de                	mv	a1,s7
     cd2:	8522                	mv	a0,s0
     cd4:	861a                	mv	a2,t1
     cd6:	869e                	mv	a3,t2
     cd8:	cc46                	sw	a7,24(sp)
     cda:	127020ef          	jal	ra,3600 <__divdf3>
     cde:	48e2                	lw	a7,24(sp)
     ce0:	d22a                	sw	a0,36(sp)
     ce2:	8bae                	mv	s7,a1
  }

  // output the floating part
  const size_t start_idx = idx;
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
     ce4:	8522                	mv	a0,s0
     ce6:	85a6                	mv	a1,s1
     ce8:	4601                	li	a2,0
     cea:	4681                	li	a3,0
     cec:	cc46                	sw	a7,24(sp)
     cee:	0f8030ef          	jal	ra,3de6 <__ledf2>
     cf2:	48e2                	lw	a7,24(sp)
     cf4:	00055663          	bgez	a0,d00 <_etoa+0x2f8>
     cf8:	800007b7          	lui	a5,0x80000
     cfc:	0177cbb3          	xor	s7,a5,s7
     d00:	5512                	lw	a0,36(sp)
     d02:	77fd                	lui	a5,0xfffff
     d04:	7ff78793          	addi	a5,a5,2047 # fffff7ff <__kernel_stack+0xdff3f807>
     d08:	00fcf7b3          	and	a5,s9,a5
     d0c:	c03e                	sw	a5,0(sp)
     d0e:	872a                	mv	a4,a0
     d10:	8862                	mv	a6,s8
     d12:	87de                	mv	a5,s7
     d14:	86d6                	mv	a3,s5
     d16:	864a                	mv	a2,s2
     d18:	85d2                	mv	a1,s4
     d1a:	854e                	mv	a0,s3
     d1c:	20e5                	jal	e04 <_ftoa>
     d1e:	842a                	mv	s0,a0

  // output the exponent part
  if (minwidth) {
     d20:	060d8163          	beqz	s11,d82 <_etoa+0x37a>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
     d24:	01ac9513          	slli	a0,s9,0x1a
     d28:	857d                	srai	a0,a0,0x1f
     d2a:	9901                	andi	a0,a0,-32
     d2c:	8622                	mv	a2,s0
     d2e:	86d6                	mv	a3,s5
     d30:	85d2                	mv	a1,s4
     d32:	06550513          	addi	a0,a0,101
     d36:	9982                	jalr	s3
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
     d38:	41fd5713          	srai	a4,s10,0x1f
     d3c:	01a746b3          	xor	a3,a4,s10
     d40:	4795                	li	a5,5
     d42:	1dfd                	addi	s11,s11,-1
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
     d44:	00140613          	addi	a2,s0,1
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
     d48:	c23e                	sw	a5,4(sp)
     d4a:	40e68733          	sub	a4,a3,a4
     d4e:	01fd5793          	srli	a5,s10,0x1f
     d52:	c06e                	sw	s11,0(sp)
     d54:	4881                	li	a7,0
     d56:	4829                	li	a6,10
     d58:	86d6                	mv	a3,s5
     d5a:	85d2                	mv	a1,s4
     d5c:	854e                	mv	a0,s3
     d5e:	3e15                	jal	892 <_ntoa_long>
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
     d60:	57a2                	lw	a5,40(sp)
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
     d62:	842a                	mv	s0,a0
    if (flags & FLAGS_LEFT) {
     d64:	cf99                	beqz	a5,d82 <_etoa+0x37a>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
     d66:	41250933          	sub	s2,a0,s2
     d6a:	01697c63          	bgeu	s2,s6,d82 <_etoa+0x37a>
     d6e:	8622                	mv	a2,s0
     d70:	0905                	addi	s2,s2,1
     d72:	86d6                	mv	a3,s5
     d74:	85d2                	mv	a1,s4
     d76:	02000513          	li	a0,32
     d7a:	0405                	addi	s0,s0,1
     d7c:	9982                	jalr	s3
     d7e:	ff6968e3          	bltu	s2,s6,d6e <_etoa+0x366>
    }
  }
  return idx;
}
     d82:	50f6                	lw	ra,124(sp)
     d84:	8522                	mv	a0,s0
     d86:	5466                	lw	s0,120(sp)
     d88:	54d6                	lw	s1,116(sp)
     d8a:	5946                	lw	s2,112(sp)
     d8c:	59b6                	lw	s3,108(sp)
     d8e:	5a26                	lw	s4,104(sp)
     d90:	5a96                	lw	s5,100(sp)
     d92:	5b06                	lw	s6,96(sp)
     d94:	4bf6                	lw	s7,92(sp)
     d96:	4c66                	lw	s8,88(sp)
     d98:	4cd6                	lw	s9,84(sp)
     d9a:	4d46                	lw	s10,80(sp)
     d9c:	4db6                	lw	s11,76(sp)
     d9e:	6109                	addi	sp,sp,128
     da0:	8082                	ret
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
     da2:	8722                	mv	a4,s0
}
     da4:	5466                	lw	s0,120(sp)
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
     da6:	c166                	sw	s9,128(sp)
}
     da8:	50f6                	lw	ra,124(sp)
     daa:	4bf6                	lw	s7,92(sp)
     dac:	4cd6                	lw	s9,84(sp)
     dae:	4d46                	lw	s10,80(sp)
     db0:	4db6                	lw	s11,76(sp)
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
     db2:	87a6                	mv	a5,s1
     db4:	88da                	mv	a7,s6
}
     db6:	54d6                	lw	s1,116(sp)
     db8:	5b06                	lw	s6,96(sp)
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
     dba:	8862                	mv	a6,s8
     dbc:	86d6                	mv	a3,s5
}
     dbe:	4c66                	lw	s8,88(sp)
     dc0:	5a96                	lw	s5,100(sp)
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
     dc2:	864a                	mv	a2,s2
     dc4:	85d2                	mv	a1,s4
}
     dc6:	5946                	lw	s2,112(sp)
     dc8:	5a26                	lw	s4,104(sp)
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
     dca:	854e                	mv	a0,s3
}
     dcc:	59b6                	lw	s3,108(sp)
     dce:	6109                	addi	sp,sp,128
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
     dd0:	a815                	j	e04 <_ftoa>
    conv.F /= 10;
     dd2:	6799                	lui	a5,0x6
     dd4:	fc87a603          	lw	a2,-56(a5) # 5fc8 <__erodata+0x5c>
     dd8:	fcc7a683          	lw	a3,-52(a5)
     ddc:	45e2                	lw	a1,24(sp)
     dde:	856e                	mv	a0,s11
    expval--;
     de0:	1d7d                	addi	s10,s10,-1
    conv.F /= 10;
     de2:	01f020ef          	jal	ra,3600 <__divdf3>
     de6:	832a                	mv	t1,a0
     de8:	83ae                	mv	t2,a1
     dea:	b5a5                	j	c52 <_etoa+0x24a>
      if ((int)prec > expval) {
     dec:	018d5a63          	bge	s10,s8,e00 <_etoa+0x3f8>
        prec = (unsigned)((int)prec - expval - 1);
     df0:	41ac0c33          	sub	s8,s8,s10
     df4:	1c7d                	addi	s8,s8,-1
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
     df6:	400cec93          	ori	s9,s9,1024
      minwidth = 0U;
     dfa:	4d81                	li	s11,0
      expval   = 0;
     dfc:	4d01                	li	s10,0
     dfe:	bd45                	j	cae <_etoa+0x2a6>
        prec = 0;
     e00:	4c01                	li	s8,0
     e02:	bfd5                	j	df6 <_etoa+0x3ee>

00000e04 <_ftoa>:
{
     e04:	7119                	addi	sp,sp,-128
     e06:	d6ce                	sw	s3,108(sp)
     e08:	d4d2                	sw	s4,104(sp)
     e0a:	d2d6                	sw	s5,100(sp)
     e0c:	cce2                	sw	s8,88(sp)
     e0e:	89aa                	mv	s3,a0
     e10:	8a2e                	mv	s4,a1
     e12:	8ab2                	mv	s5,a2
     e14:	8c36                	mv	s8,a3
  if (value != value)
     e16:	863a                	mv	a2,a4
     e18:	86be                	mv	a3,a5
     e1a:	853a                	mv	a0,a4
     e1c:	85be                	mv	a1,a5
{
     e1e:	dca2                	sw	s0,120(sp)
     e20:	daa6                	sw	s1,116(sp)
     e22:	d8ca                	sw	s2,112(sp)
     e24:	d0da                	sw	s6,96(sp)
     e26:	cae6                	sw	s9,84(sp)
     e28:	de86                	sw	ra,124(sp)
     e2a:	cede                	sw	s7,92(sp)
     e2c:	c8ea                	sw	s10,80(sp)
     e2e:	c6ee                	sw	s11,76(sp)
     e30:	84ba                	mv	s1,a4
     e32:	843e                	mv	s0,a5
     e34:	8b42                	mv	s6,a6
     e36:	8946                	mv	s2,a7
  if (value != value)
     e38:	655020ef          	jal	ra,3c8c <__eqdf2>
{
     e3c:	4c8a                	lw	s9,128(sp)
  if (value != value)
     e3e:	16051d63          	bnez	a0,fb8 <_ftoa+0x1b4>
  if (value < -DBL_MAX)
     e42:	6799                	lui	a5,0x6
     e44:	f787a603          	lw	a2,-136(a5) # 5f78 <__erodata+0xc>
     e48:	f7c7a683          	lw	a3,-132(a5)
     e4c:	8526                	mv	a0,s1
     e4e:	85a2                	mv	a1,s0
     e50:	797020ef          	jal	ra,3de6 <__ledf2>
     e54:	1e054463          	bltz	a0,103c <_ftoa+0x238>
  if (value > DBL_MAX)
     e58:	6799                	lui	a5,0x6
     e5a:	f707a603          	lw	a2,-144(a5) # 5f70 <__erodata+0x4>
     e5e:	f747a683          	lw	a3,-140(a5)
     e62:	8526                	mv	a0,s1
     e64:	85a2                	mv	a1,s0
     e66:	6cb020ef          	jal	ra,3d30 <__gedf2>
     e6a:	12a04d63          	bgtz	a0,fa4 <_ftoa+0x1a0>
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
     e6e:	6799                	lui	a5,0x6
     e70:	ff87a603          	lw	a2,-8(a5) # 5ff8 <__erodata+0x8c>
     e74:	ffc7a683          	lw	a3,-4(a5)
     e78:	8526                	mv	a0,s1
     e7a:	85a2                	mv	a1,s0
     e7c:	6b5020ef          	jal	ra,3d30 <__gedf2>
     e80:	18a04663          	bgtz	a0,100c <_ftoa+0x208>
     e84:	6799                	lui	a5,0x6
     e86:	0007a603          	lw	a2,0(a5) # 6000 <__erodata+0x94>
     e8a:	0047a683          	lw	a3,4(a5)
     e8e:	8526                	mv	a0,s1
     e90:	85a2                	mv	a1,s0
     e92:	755020ef          	jal	ra,3de6 <__ledf2>
     e96:	16054b63          	bltz	a0,100c <_ftoa+0x208>
  if (value < 0) {
     e9a:	8526                	mv	a0,s1
     e9c:	85a2                	mv	a1,s0
     e9e:	4601                	li	a2,0
     ea0:	4681                	li	a3,0
     ea2:	745020ef          	jal	ra,3de6 <__ledf2>
     ea6:	14054863          	bltz	a0,ff6 <_ftoa+0x1f2>
  bool negative = false;
     eaa:	ce02                	sw	zero,28(sp)
  if (!(flags & FLAGS_PRECISION)) {
     eac:	400cf793          	andi	a5,s9,1024
     eb0:	e391                	bnez	a5,eb4 <_ftoa+0xb0>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
     eb2:	4b19                	li	s6,6
     eb4:	1014                	addi	a3,sp,32
     eb6:	fe0b0513          	addi	a0,s6,-32
     eba:	8bda                	mv	s7,s6
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
     ebc:	4625                	li	a2,9
    buf[len++] = '0';
     ebe:	03000593          	li	a1,48
     ec2:	a039                	j	ed0 <_ftoa+0xcc>
     ec4:	00b68023          	sb	a1,0(a3)
    prec--;
     ec8:	1bfd                	addi	s7,s7,-1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
     eca:	0685                	addi	a3,a3,1
     ecc:	26ab8363          	beq	s7,a0,1132 <_ftoa+0x32e>
    buf[len++] = '0';
     ed0:	417b0db3          	sub	s11,s6,s7
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
     ed4:	ff7668e3          	bltu	a2,s7,ec4 <_ftoa+0xc0>
  int whole = (int)value;
     ed8:	85a2                	mv	a1,s0
     eda:	8526                	mv	a0,s1
     edc:	62b030ef          	jal	ra,4d06 <__fixdfsi>
  double tmp = (value - whole) * pow10[prec];
     ee0:	6619                	lui	a2,0x6
     ee2:	d6860613          	addi	a2,a2,-664 # 5d68 <pow10.0>
     ee6:	003b9693          	slli	a3,s7,0x3
     eea:	96b2                	add	a3,a3,a2
     eec:	0046a803          	lw	a6,4(a3)
     ef0:	429c                	lw	a5,0(a3)
  int whole = (int)value;
     ef2:	8d2a                	mv	s10,a0
  double tmp = (value - whole) * pow10[prec];
     ef4:	c642                	sw	a6,12(sp)
     ef6:	c43e                	sw	a5,8(sp)
     ef8:	76f030ef          	jal	ra,4e66 <__floatsidf>
     efc:	862a                	mv	a2,a0
     efe:	86ae                	mv	a3,a1
     f00:	8526                	mv	a0,s1
     f02:	85a2                	mv	a1,s0
     f04:	536030ef          	jal	ra,443a <__subdf3>
     f08:	4622                	lw	a2,8(sp)
     f0a:	46b2                	lw	a3,12(sp)
     f0c:	791020ef          	jal	ra,3e9c <__muldf3>
     f10:	ca2e                	sw	a1,20(sp)
     f12:	cc2a                	sw	a0,24(sp)
  unsigned long frac = (unsigned long)tmp;
     f14:	6b9030ef          	jal	ra,4dcc <__fixunsdfsi>
     f18:	8b2a                	mv	s6,a0
  diff = tmp - frac;
     f1a:	7b3030ef          	jal	ra,4ecc <__floatunsidf>
     f1e:	47d2                	lw	a5,20(sp)
     f20:	4362                	lw	t1,24(sp)
     f22:	862a                	mv	a2,a0
     f24:	86ae                	mv	a3,a1
     f26:	851a                	mv	a0,t1
     f28:	85be                	mv	a1,a5
     f2a:	510030ef          	jal	ra,443a <__subdf3>
  if (diff > 0.5) {
     f2e:	6719                	lui	a4,0x6
     f30:	fa872303          	lw	t1,-88(a4) # 5fa8 <__erodata+0x3c>
     f34:	fac72383          	lw	t2,-84(a4)
  diff = tmp - frac;
     f38:	ca2a                	sw	a0,20(sp)
  if (diff > 0.5) {
     f3a:	861a                	mv	a2,t1
     f3c:	869e                	mv	a3,t2
  diff = tmp - frac;
     f3e:	cc2e                	sw	a1,24(sp)
  if (diff > 0.5) {
     f40:	5f1020ef          	jal	ra,3d30 <__gedf2>
     f44:	6799                	lui	a5,0x6
     f46:	fa87a303          	lw	t1,-88(a5) # 5fa8 <__erodata+0x3c>
     f4a:	fac7a383          	lw	t2,-84(a5)
     f4e:	1ca05663          	blez	a0,111a <_ftoa+0x316>
    ++frac;
     f52:	0b05                	addi	s6,s6,1
    if (frac >= pow10[prec]) {
     f54:	855a                	mv	a0,s6
     f56:	777030ef          	jal	ra,4ecc <__floatunsidf>
     f5a:	862a                	mv	a2,a0
     f5c:	86ae                	mv	a3,a1
     f5e:	4522                	lw	a0,8(sp)
     f60:	45b2                	lw	a1,12(sp)
     f62:	685020ef          	jal	ra,3de6 <__ledf2>
     f66:	00a04463          	bgtz	a0,f6e <_ftoa+0x16a>
      ++whole;
     f6a:	0d05                	addi	s10,s10,1
      frac = 0;
     f6c:	4b01                	li	s6,0
  if (prec == 0U) {
     f6e:	100b8d63          	beqz	s7,1088 <_ftoa+0x284>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
     f72:	02000313          	li	t1,32
      buf[len++] = (char)(48U + (frac % 10U));
     f76:	4629                	li	a2,10
      if (!(frac /= 10U)) {
     f78:	4e25                	li	t3,9
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
     f7a:	0c6d8863          	beq	s11,t1,104a <_ftoa+0x246>
      buf[len++] = (char)(48U + (frac % 10U));
     f7e:	02cb76b3          	remu	a3,s6,a2
     f82:	0d85                	addi	s11,s11,1
     f84:	101c                	addi	a5,sp,32
     f86:	01b78533          	add	a0,a5,s11
      --count;
     f8a:	fffb8593          	addi	a1,s7,-1 # 7fffffff <__kernel_stack+0x5ff40007>
      buf[len++] = (char)(48U + (frac % 10U));
     f8e:	03068693          	addi	a3,a3,48
     f92:	fed50fa3          	sb	a3,-1(a0)
      if (!(frac /= 10U)) {
     f96:	02cb56b3          	divu	a3,s6,a2
     f9a:	1f6e7b63          	bgeu	t3,s6,1190 <_ftoa+0x38c>
      --count;
     f9e:	8bae                	mv	s7,a1
      if (!(frac /= 10U)) {
     fa0:	8b36                	mv	s6,a3
     fa2:	bfe1                	j	f7a <_ftoa+0x176>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
     fa4:	004cf793          	andi	a5,s9,4
     fa8:	e3b1                	bnez	a5,fec <_ftoa+0x1e8>
     faa:	6719                	lui	a4,0x6
     fac:	b7070713          	addi	a4,a4,-1168 # 5b70 <__errno+0xe>
     fb0:	478d                	li	a5,3
     fb2:	88e6                	mv	a7,s9
     fb4:	884a                	mv	a6,s2
     fb6:	a039                	j	fc4 <_ftoa+0x1c0>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
     fb8:	6719                	lui	a4,0x6
     fba:	88e6                	mv	a7,s9
     fbc:	884a                	mv	a6,s2
     fbe:	478d                	li	a5,3
     fc0:	b7c70713          	addi	a4,a4,-1156 # 5b7c <__errno+0x1a>
}
     fc4:	5466                	lw	s0,120(sp)
     fc6:	50f6                	lw	ra,124(sp)
     fc8:	54d6                	lw	s1,116(sp)
     fca:	5946                	lw	s2,112(sp)
     fcc:	5b06                	lw	s6,96(sp)
     fce:	4bf6                	lw	s7,92(sp)
     fd0:	4cd6                	lw	s9,84(sp)
     fd2:	4d46                	lw	s10,80(sp)
     fd4:	4db6                	lw	s11,76(sp)
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
     fd6:	86e2                	mv	a3,s8
     fd8:	8656                	mv	a2,s5
}
     fda:	4c66                	lw	s8,88(sp)
     fdc:	5a96                	lw	s5,100(sp)
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
     fde:	85d2                	mv	a1,s4
     fe0:	854e                	mv	a0,s3
}
     fe2:	5a26                	lw	s4,104(sp)
     fe4:	59b6                	lw	s3,108(sp)
     fe6:	6109                	addi	sp,sp,128
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
     fe8:	ddaff06f          	j	5c2 <_out_rev>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
     fec:	6719                	lui	a4,0x6
     fee:	b7470713          	addi	a4,a4,-1164 # 5b74 <__errno+0x12>
     ff2:	4791                	li	a5,4
     ff4:	bf7d                	j	fb2 <_ftoa+0x1ae>
    value = 0 - value;
     ff6:	8626                	mv	a2,s1
     ff8:	86a2                	mv	a3,s0
     ffa:	4501                	li	a0,0
     ffc:	4581                	li	a1,0
     ffe:	43c030ef          	jal	ra,443a <__subdf3>
    negative = true;
    1002:	4785                	li	a5,1
    value = 0 - value;
    1004:	84aa                	mv	s1,a0
    1006:	842e                	mv	s0,a1
    negative = true;
    1008:	ce3e                	sw	a5,28(sp)
    100a:	b54d                	j	eac <_ftoa+0xa8>
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    100c:	87a2                	mv	a5,s0
}
    100e:	5466                	lw	s0,120(sp)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    1010:	c166                	sw	s9,128(sp)
}
    1012:	50f6                	lw	ra,124(sp)
    1014:	4bf6                	lw	s7,92(sp)
    1016:	4cd6                	lw	s9,84(sp)
    1018:	4d46                	lw	s10,80(sp)
    101a:	4db6                	lw	s11,76(sp)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    101c:	8726                	mv	a4,s1
    101e:	88ca                	mv	a7,s2
}
    1020:	54d6                	lw	s1,116(sp)
    1022:	5946                	lw	s2,112(sp)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    1024:	885a                	mv	a6,s6
    1026:	86e2                	mv	a3,s8
}
    1028:	5b06                	lw	s6,96(sp)
    102a:	4c66                	lw	s8,88(sp)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    102c:	8656                	mv	a2,s5
    102e:	85d2                	mv	a1,s4
}
    1030:	5a96                	lw	s5,100(sp)
    1032:	5a26                	lw	s4,104(sp)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    1034:	854e                	mv	a0,s3
}
    1036:	59b6                	lw	s3,108(sp)
    1038:	6109                	addi	sp,sp,128
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    103a:	b2f9                	j	a08 <_etoa>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    103c:	6719                	lui	a4,0x6
    103e:	88e6                	mv	a7,s9
    1040:	884a                	mv	a6,s2
    1042:	4791                	li	a5,4
    1044:	b8070713          	addi	a4,a4,-1152 # 5b80 <__errno+0x1e>
    1048:	bfb5                	j	fc4 <_ftoa+0x1c0>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    104a:	003cf793          	andi	a5,s9,3
    104e:	4705                	li	a4,1
    1050:	0ee78463          	beq	a5,a4,1138 <_ftoa+0x334>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    1054:	02000793          	li	a5,32
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    1058:	88e6                	mv	a7,s9
    105a:	884a                	mv	a6,s2
    105c:	1018                	addi	a4,sp,32
    105e:	86e2                	mv	a3,s8
    1060:	8656                	mv	a2,s5
    1062:	85d2                	mv	a1,s4
    1064:	854e                	mv	a0,s3
    1066:	d5cff0ef          	jal	ra,5c2 <_out_rev>
}
    106a:	50f6                	lw	ra,124(sp)
    106c:	5466                	lw	s0,120(sp)
    106e:	54d6                	lw	s1,116(sp)
    1070:	5946                	lw	s2,112(sp)
    1072:	59b6                	lw	s3,108(sp)
    1074:	5a26                	lw	s4,104(sp)
    1076:	5a96                	lw	s5,100(sp)
    1078:	5b06                	lw	s6,96(sp)
    107a:	4bf6                	lw	s7,92(sp)
    107c:	4c66                	lw	s8,88(sp)
    107e:	4cd6                	lw	s9,84(sp)
    1080:	4d46                	lw	s10,80(sp)
    1082:	4db6                	lw	s11,76(sp)
    1084:	6109                	addi	sp,sp,128
    1086:	8082                	ret
    diff = value - (double)whole;
    1088:	856a                	mv	a0,s10
    108a:	5dd030ef          	jal	ra,4e66 <__floatsidf>
    108e:	862a                	mv	a2,a0
    1090:	86ae                	mv	a3,a1
    1092:	8526                	mv	a0,s1
    1094:	85a2                	mv	a1,s0
    1096:	3a4030ef          	jal	ra,443a <__subdf3>
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    109a:	6799                	lui	a5,0x6
    109c:	fa87ab03          	lw	s6,-88(a5) # 5fa8 <__erodata+0x3c>
    10a0:	fac7ab83          	lw	s7,-84(a5)
    diff = value - (double)whole;
    10a4:	84aa                	mv	s1,a0
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    10a6:	865a                	mv	a2,s6
    10a8:	86de                	mv	a3,s7
    diff = value - (double)whole;
    10aa:	842e                	mv	s0,a1
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    10ac:	53b020ef          	jal	ra,3de6 <__ledf2>
    10b0:	00055a63          	bgez	a0,10c4 <_ftoa+0x2c0>
    10b4:	8526                	mv	a0,s1
    10b6:	85a2                	mv	a1,s0
    10b8:	865a                	mv	a2,s6
    10ba:	86de                	mv	a3,s7
    10bc:	475020ef          	jal	ra,3d30 <__gedf2>
    10c0:	00a05563          	blez	a0,10ca <_ftoa+0x2c6>
      ++whole;
    10c4:	001d7793          	andi	a5,s10,1
    10c8:	9d3e                	add	s10,s10,a5
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    10ca:	02000593          	li	a1,32
    buf[len++] = (char)(48 + (whole % 10));
    10ce:	46a9                	li	a3,10
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    10d0:	f6bd8de3          	beq	s11,a1,104a <_ftoa+0x246>
    buf[len++] = (char)(48 + (whole % 10));
    10d4:	02dd67b3          	rem	a5,s10,a3
    10d8:	0d85                	addi	s11,s11,1
    10da:	1018                	addi	a4,sp,32
    10dc:	01b70633          	add	a2,a4,s11
    if (!(whole /= 10)) {
    10e0:	02dd4d33          	div	s10,s10,a3
    buf[len++] = (char)(48 + (whole % 10));
    10e4:	03078793          	addi	a5,a5,48
    10e8:	fef60fa3          	sb	a5,-1(a2)
    if (!(whole /= 10)) {
    10ec:	fe0d12e3          	bnez	s10,10d0 <_ftoa+0x2cc>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    10f0:	003cf793          	andi	a5,s9,3
    10f4:	4685                	li	a3,1
    10f6:	04d78363          	beq	a5,a3,113c <_ftoa+0x338>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    10fa:	02000693          	li	a3,32
    10fe:	f4dd8be3          	beq	s11,a3,1054 <_ftoa+0x250>
    if (negative) {
    1102:	47f2                	lw	a5,28(sp)
    1104:	c7bd                	beqz	a5,1172 <_ftoa+0x36e>
      buf[len++] = '-';
    1106:	009c                	addi	a5,sp,64
    1108:	01b786b3          	add	a3,a5,s11
    110c:	02d00713          	li	a4,45
    1110:	001d8793          	addi	a5,s11,1
    1114:	fee68023          	sb	a4,-32(a3)
    1118:	b781                	j	1058 <_ftoa+0x254>
  else if (diff < 0.5) {
    111a:	4552                	lw	a0,20(sp)
    111c:	45e2                	lw	a1,24(sp)
    111e:	861a                	mv	a2,t1
    1120:	869e                	mv	a3,t2
    1122:	4c5020ef          	jal	ra,3de6 <__ledf2>
    1126:	e40544e3          	bltz	a0,f6e <_ftoa+0x16a>
  else if ((frac == 0U) || (frac & 1U)) {
    112a:	0a0b1263          	bnez	s6,11ce <_ftoa+0x3ca>
    ++frac;
    112e:	0b05                	addi	s6,s6,1
    1130:	bd3d                	j	f6e <_ftoa+0x16a>
    1132:	02000d93          	li	s11,32
    1136:	b34d                	j	ed8 <_ftoa+0xd4>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    1138:	02000d93          	li	s11,32
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    113c:	fa090fe3          	beqz	s2,10fa <_ftoa+0x2f6>
    1140:	47f2                	lw	a5,28(sp)
    1142:	e7d5                	bnez	a5,11ee <_ftoa+0x3ea>
    1144:	00ccf793          	andi	a5,s9,12
    1148:	e3dd                	bnez	a5,11ee <_ftoa+0x3ea>
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    114a:	fb2df8e3          	bgeu	s11,s2,10fa <_ftoa+0x2f6>
    114e:	02000793          	li	a5,32
      buf[len++] = '0';
    1152:	03000613          	li	a2,48
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    1156:	02000693          	li	a3,32
    115a:	eefd8de3          	beq	s11,a5,1054 <_ftoa+0x250>
      buf[len++] = '0';
    115e:	0d85                	addi	s11,s11,1
    1160:	101c                	addi	a5,sp,32
    1162:	97ee                	add	a5,a5,s11
    1164:	fec78fa3          	sb	a2,-1(a5)
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    1168:	f92d89e3          	beq	s11,s2,10fa <_ftoa+0x2f6>
    116c:	fedd99e3          	bne	s11,a3,115e <_ftoa+0x35a>
    1170:	b5d5                	j	1054 <_ftoa+0x250>
    else if (flags & FLAGS_PLUS) {
    1172:	004cf793          	andi	a5,s9,4
    1176:	e3b5                	bnez	a5,11da <_ftoa+0x3d6>
    else if (flags & FLAGS_SPACE) {
    1178:	008cf613          	andi	a2,s9,8
    117c:	87ee                	mv	a5,s11
    117e:	ec060de3          	beqz	a2,1058 <_ftoa+0x254>
      buf[len++] = ' ';
    1182:	0098                	addi	a4,sp,64
    1184:	976e                	add	a4,a4,s11
    1186:	001d8793          	addi	a5,s11,1
    118a:	fed70023          	sb	a3,-32(a4)
    118e:	b5e9                	j	1058 <_ftoa+0x254>
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    1190:	ea6d8de3          	beq	s11,t1,104a <_ftoa+0x246>
    1194:	866e                	mv	a2,s11
      buf[len++] = '0';
    1196:	03000893          	li	a7,48
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    119a:	02000513          	li	a0,32
    119e:	cd99                	beqz	a1,11bc <_ftoa+0x3b8>
      buf[len++] = '0';
    11a0:	0605                	addi	a2,a2,1
    11a2:	101c                	addi	a5,sp,32
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    11a4:	fff64693          	not	a3,a2
      buf[len++] = '0';
    11a8:	00c785b3          	add	a1,a5,a2
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    11ac:	96ee                	add	a3,a3,s11
      buf[len++] = '0';
    11ae:	ff158fa3          	sb	a7,-1(a1)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    11b2:	96de                	add	a3,a3,s7
    11b4:	e8a60be3          	beq	a2,a0,104a <_ftoa+0x246>
    11b8:	fe0694e3          	bnez	a3,11a0 <_ftoa+0x39c>
      buf[len++] = '.';
    11bc:	009c                	addi	a5,sp,64
    11be:	97b2                	add	a5,a5,a2
    11c0:	02e00693          	li	a3,46
    11c4:	00160d93          	addi	s11,a2,1
    11c8:	fed78023          	sb	a3,-32(a5)
    11cc:	bdfd                	j	10ca <_ftoa+0x2c6>
  else if ((frac == 0U) || (frac & 1U)) {
    11ce:	001b7693          	andi	a3,s6,1
    11d2:	d8068ee3          	beqz	a3,f6e <_ftoa+0x16a>
    ++frac;
    11d6:	0b05                	addi	s6,s6,1
    11d8:	bb59                	j	f6e <_ftoa+0x16a>
      buf[len++] = '+';  // ignore the space if the '+' exists
    11da:	009c                	addi	a5,sp,64
    11dc:	01b786b3          	add	a3,a5,s11
    11e0:	02b00713          	li	a4,43
    11e4:	001d8793          	addi	a5,s11,1
    11e8:	fee68023          	sb	a4,-32(a3)
    11ec:	b5b5                	j	1058 <_ftoa+0x254>
      width--;
    11ee:	197d                	addi	s2,s2,-1
    11f0:	bfa9                	j	114a <_ftoa+0x346>

000011f2 <_out_char>:
  if (character) {
    11f2:	e111                	bnez	a0,11f6 <_out_char+0x4>
}
    11f4:	8082                	ret
    fputc(character, (void *)-1);
    11f6:	55fd                	li	a1,-1
    11f8:	2cb0006f          	j	1cc2 <fputc>

000011fc <_out_fct>:
  if (character) {
    11fc:	c501                	beqz	a0,1204 <_out_fct+0x8>
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
    11fe:	419c                	lw	a5,0(a1)
    1200:	41cc                	lw	a1,4(a1)
    1202:	8782                	jr	a5
}
    1204:	8082                	ret

00001206 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    1206:	7159                	addi	sp,sp,-112
    1208:	d4a2                	sw	s0,104(sp)
    120a:	d2a6                	sw	s1,100(sp)
    120c:	d0ca                	sw	s2,96(sp)
    120e:	cece                	sw	s3,92(sp)
    1210:	c6de                	sw	s7,76(sp)
    1212:	d686                	sw	ra,108(sp)
    1214:	ccd2                	sw	s4,88(sp)
    1216:	cad6                	sw	s5,84(sp)
    1218:	c8da                	sw	s6,80(sp)
    121a:	c4e2                	sw	s8,72(sp)
    121c:	c2e6                	sw	s9,68(sp)
    121e:	c0ea                	sw	s10,64(sp)
    1220:	de6e                	sw	s11,60(sp)
    1222:	892e                	mv	s2,a1
    1224:	84b2                	mv	s1,a2
    1226:	8bb6                	mv	s7,a3
    1228:	843a                	mv	s0,a4
    122a:	89aa                	mv	s3,a0
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    122c:	38058e63          	beqz	a1,15c8 <_vsnprintf+0x3c2>
    // use null output function
    out = _out_null;
  }

  while (*format)
    1230:	000bc503          	lbu	a0,0(s7)
    1234:	4d81                	li	s11,0
    1236:	3a050063          	beqz	a0,15d6 <_vsnprintf+0x3d0>
    123a:	6799                	lui	a5,0x6
    123c:	c1878793          	addi	a5,a5,-1000 # 5c18 <__errno+0xb6>
    1240:	6b19                	lui	s6,0x6
    1242:	6a19                	lui	s4,0x6
    1244:	d23e                	sw	a5,36(sp)
    1246:	bccb0793          	addi	a5,s6,-1076 # 5bcc <__errno+0x6a>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    124a:	02500a93          	li	s5,37
    124e:	b88a0a13          	addi	s4,s4,-1144 # 5b88 <__errno+0x26>
    1252:	d03e                	sw	a5,32(sp)
    1254:	a809                	j	1266 <_vsnprintf+0x60>
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    1256:	866e                	mv	a2,s11
    1258:	86a6                	mv	a3,s1
    125a:	85ca                	mv	a1,s2
    125c:	0d85                	addi	s11,s11,1
    125e:	9982                	jalr	s3
  while (*format)
    1260:	000bc503          	lbu	a0,0(s7)
    1264:	c955                	beqz	a0,1318 <_vsnprintf+0x112>
      format++;
    1266:	0b85                	addi	s7,s7,1
    if (*format != '%') {
    1268:	ff5517e3          	bne	a0,s5,1256 <_vsnprintf+0x50>
    flags = 0U;
    126c:	4681                	li	a3,0
    126e:	45c1                	li	a1,16
      switch (*format) {
    1270:	000bc503          	lbu	a0,0(s7)
      format++;
    1274:	001b8713          	addi	a4,s7,1
    1278:	863a                	mv	a2,a4
    127a:	fe050793          	addi	a5,a0,-32
    127e:	0ff7f793          	andi	a5,a5,255
    1282:	00f5e663          	bltu	a1,a5,128e <_vsnprintf+0x88>
    1286:	078a                	slli	a5,a5,0x2
    1288:	97d2                	add	a5,a5,s4
    128a:	439c                	lw	a5,0(a5)
    128c:	8782                	jr	a5
  return (ch >= '0') && (ch <= '9');
    128e:	fd050793          	addi	a5,a0,-48
    if (_is_digit(*format)) {
    1292:	0ff7f793          	andi	a5,a5,255
    1296:	45a5                	li	a1,9
    1298:	10f5f263          	bgeu	a1,a5,139c <_vsnprintf+0x196>
    else if (*format == '*') {
    129c:	02a00793          	li	a5,42
    12a0:	12f50863          	beq	a0,a5,13d0 <_vsnprintf+0x1ca>
    12a4:	865e                	mv	a2,s7
    width = 0U;
    12a6:	4c01                	li	s8,0
      format++;
    12a8:	8bba                	mv	s7,a4
    if (*format == '.') {
    12aa:	02e00793          	li	a5,46
    precision = 0U;
    12ae:	4b01                	li	s6,0
    if (*format == '.') {
    12b0:	08f50e63          	beq	a0,a5,134c <_vsnprintf+0x146>
    switch (*format) {
    12b4:	f9850793          	addi	a5,a0,-104
    12b8:	0ff7f793          	andi	a5,a5,255
    12bc:	4749                	li	a4,18
    12be:	00f76c63          	bltu	a4,a5,12d6 <_vsnprintf+0xd0>
    12c2:	5702                	lw	a4,32(sp)
    12c4:	078a                	slli	a5,a5,0x2
    12c6:	97ba                	add	a5,a5,a4
    12c8:	439c                	lw	a5,0(a5)
    12ca:	8782                	jr	a5
    switch (*format) {
    12cc:	00164503          	lbu	a0,1(a2)
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    12d0:	1006e693          	ori	a3,a3,256
        format++;
    12d4:	0b85                	addi	s7,s7,1
    switch (*format) {
    12d6:	fdb50793          	addi	a5,a0,-37
    12da:	0ff7f793          	andi	a5,a5,255
    12de:	05300713          	li	a4,83
    12e2:	f6f76ae3          	bltu	a4,a5,1256 <_vsnprintf+0x50>
    12e6:	5712                	lw	a4,36(sp)
    12e8:	078a                	slli	a5,a5,0x2
    12ea:	97ba                	add	a5,a5,a4
    12ec:	439c                	lw	a5,0(a5)
    12ee:	8782                	jr	a5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    12f0:	0016e693          	ori	a3,a3,1
      format++;
    12f4:	8bba                	mv	s7,a4
    12f6:	bfad                	j	1270 <_vsnprintf+0x6a>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    12f8:	0026e693          	ori	a3,a3,2
      format++;
    12fc:	8bba                	mv	s7,a4
    12fe:	bf8d                	j	1270 <_vsnprintf+0x6a>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    1300:	0046e693          	ori	a3,a3,4
      format++;
    1304:	8bba                	mv	s7,a4
    1306:	b7ad                	j	1270 <_vsnprintf+0x6a>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    1308:	0106e693          	ori	a3,a3,16
      format++;
    130c:	8bba                	mv	s7,a4
    130e:	b78d                	j	1270 <_vsnprintf+0x6a>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    1310:	0086e693          	ori	a3,a3,8
      format++;
    1314:	8bba                	mv	s7,a4
    1316:	bfa9                	j	1270 <_vsnprintf+0x6a>

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

  // return written chars without terminating \0
  return (int)idx;
    1318:	846e                	mv	s0,s11
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    131a:	009de463          	bltu	s11,s1,1322 <_vsnprintf+0x11c>
    131e:	fff48d93          	addi	s11,s1,-1
    1322:	86a6                	mv	a3,s1
    1324:	866e                	mv	a2,s11
    1326:	85ca                	mv	a1,s2
    1328:	4501                	li	a0,0
    132a:	9982                	jalr	s3
}
    132c:	50b6                	lw	ra,108(sp)
    132e:	8522                	mv	a0,s0
    1330:	5426                	lw	s0,104(sp)
    1332:	5496                	lw	s1,100(sp)
    1334:	5906                	lw	s2,96(sp)
    1336:	49f6                	lw	s3,92(sp)
    1338:	4a66                	lw	s4,88(sp)
    133a:	4ad6                	lw	s5,84(sp)
    133c:	4b46                	lw	s6,80(sp)
    133e:	4bb6                	lw	s7,76(sp)
    1340:	4c26                	lw	s8,72(sp)
    1342:	4c96                	lw	s9,68(sp)
    1344:	4d06                	lw	s10,64(sp)
    1346:	5df2                	lw	s11,60(sp)
    1348:	6165                	addi	sp,sp,112
    134a:	8082                	ret
      if (_is_digit(*format)) {
    134c:	00164503          	lbu	a0,1(a2)
    1350:	4725                	li	a4,9
      flags |= FLAGS_PRECISION;
    1352:	4006e693          	ori	a3,a3,1024
  return (ch >= '0') && (ch <= '9');
    1356:	fd050793          	addi	a5,a0,-48
      if (_is_digit(*format)) {
    135a:	0ff7f793          	andi	a5,a5,255
    135e:	00f77963          	bgeu	a4,a5,1370 <_vsnprintf+0x16a>
      else if (*format == '*') {
    1362:	02a00793          	li	a5,42
    1366:	26f50c63          	beq	a0,a5,15de <_vsnprintf+0x3d8>
      format++;
    136a:	865e                	mv	a2,s7
        format++;
    136c:	0b85                	addi	s7,s7,1
    136e:	b799                	j	12b4 <_vsnprintf+0xae>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1370:	002b1793          	slli	a5,s6,0x2
    1374:	01678833          	add	a6,a5,s6
    1378:	85de                	mv	a1,s7
    137a:	0806                	slli	a6,a6,0x1
    137c:	0b85                	addi	s7,s7,1
    137e:	982a                	add	a6,a6,a0
  while (_is_digit(**str)) {
    1380:	000bc503          	lbu	a0,0(s7)
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1384:	fd080b13          	addi	s6,a6,-48
  return (ch >= '0') && (ch <= '9');
    1388:	fd050793          	addi	a5,a0,-48
  while (_is_digit(**str)) {
    138c:	0ff7f793          	andi	a5,a5,255
    1390:	fef770e3          	bgeu	a4,a5,1370 <_vsnprintf+0x16a>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1394:	865e                	mv	a2,s7
        format++;
    1396:	00258b93          	addi	s7,a1,2
    139a:	bf29                	j	12b4 <_vsnprintf+0xae>
  unsigned int i = 0U;
    139c:	4c01                	li	s8,0
  while (_is_digit(**str)) {
    139e:	4625                	li	a2,9
    13a0:	a011                	j	13a4 <_vsnprintf+0x19e>
    13a2:	0705                	addi	a4,a4,1
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    13a4:	002c1793          	slli	a5,s8,0x2
    13a8:	018788b3          	add	a7,a5,s8
    13ac:	0886                	slli	a7,a7,0x1
    13ae:	98aa                	add	a7,a7,a0
  while (_is_digit(**str)) {
    13b0:	00074503          	lbu	a0,0(a4)
    13b4:	85de                	mv	a1,s7
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    13b6:	fd088c13          	addi	s8,a7,-48
  return (ch >= '0') && (ch <= '9');
    13ba:	fd050793          	addi	a5,a0,-48
  while (_is_digit(**str)) {
    13be:	0ff7f793          	andi	a5,a5,255
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    13c2:	8bba                	mv	s7,a4
  while (_is_digit(**str)) {
    13c4:	fcf67fe3          	bgeu	a2,a5,13a2 <_vsnprintf+0x19c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    13c8:	863a                	mv	a2,a4
      format++;
    13ca:	00258b93          	addi	s7,a1,2
    13ce:	bdf1                	j	12aa <_vsnprintf+0xa4>
      const int w = va_arg(va, int);
    13d0:	00042c03          	lw	s8,0(s0)
    13d4:	0411                	addi	s0,s0,4
      if (w < 0) {
    13d6:	000c4663          	bltz	s8,13e2 <_vsnprintf+0x1dc>
    if (*format == '.') {
    13da:	001bc503          	lbu	a0,1(s7)
      format++;
    13de:	0b89                	addi	s7,s7,2
    13e0:	b5e9                	j	12aa <_vsnprintf+0xa4>
    if (*format == '.') {
    13e2:	001bc503          	lbu	a0,1(s7)
        flags |= FLAGS_LEFT;    // reverse padding
    13e6:	0026e693          	ori	a3,a3,2
        width = (unsigned int)-w;
    13ea:	41800c33          	neg	s8,s8
      format++;
    13ee:	0b89                	addi	s7,s7,2
    13f0:	bd6d                	j	12aa <_vsnprintf+0xa4>
        if (*format == 'x' || *format == 'X') {
    13f2:	07800793          	li	a5,120
    13f6:	3af50363          	beq	a0,a5,179c <_vsnprintf+0x596>
    13fa:	05800793          	li	a5,88
    13fe:	28f50a63          	beq	a0,a5,1692 <_vsnprintf+0x48c>
        else if (*format == 'o') {
    1402:	06f00793          	li	a5,111
    1406:	3cf50263          	beq	a0,a5,17ca <_vsnprintf+0x5c4>
        else if (*format == 'b') {
    140a:	06200793          	li	a5,98
    140e:	40f50663          	beq	a0,a5,181a <_vsnprintf+0x614>
        if ((*format != 'i') && (*format != 'd')) {
    1412:	06900713          	li	a4,105
          flags &= ~FLAGS_HASH;   // no hash for dec format
    1416:	fef6f593          	andi	a1,a3,-17
        if (flags & FLAGS_PRECISION) {
    141a:	4006f793          	andi	a5,a3,1024
        if ((*format != 'i') && (*format != 'd')) {
    141e:	42e51263          	bne	a0,a4,1842 <_vsnprintf+0x63c>
        if (flags & FLAGS_PRECISION) {
    1422:	38079563          	bnez	a5,17ac <_vsnprintf+0x5a6>
          if (flags & FLAGS_LONG_LONG) {
    1426:	2006f693          	andi	a3,a3,512
          base = 10U;
    142a:	4829                	li	a6,10
          if (flags & FLAGS_LONG_LONG) {
    142c:	32069663          	bnez	a3,1758 <_vsnprintf+0x552>
          else if (flags & FLAGS_LONG) {
    1430:	1005f793          	andi	a5,a1,256
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    1434:	00440c93          	addi	s9,s0,4
          else if (flags & FLAGS_LONG) {
    1438:	3c079463          	bnez	a5,1800 <_vsnprintf+0x5fa>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    143c:	0405f793          	andi	a5,a1,64
    1440:	36079b63          	bnez	a5,17b6 <_vsnprintf+0x5b0>
    1444:	0805f793          	andi	a5,a1,128
    1448:	3c078b63          	beqz	a5,181e <_vsnprintf+0x618>
    144c:	00041783          	lh	a5,0(s0)
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    1450:	40f7d693          	srai	a3,a5,0xf
    1454:	00d7c733          	xor	a4,a5,a3
    1458:	8f15                	sub	a4,a4,a3
    145a:	0742                	slli	a4,a4,0x10
    145c:	8341                	srli	a4,a4,0x10
    145e:	866e                	mv	a2,s11
    1460:	c22e                	sw	a1,4(sp)
    1462:	c062                	sw	s8,0(sp)
    1464:	88da                	mv	a7,s6
    1466:	83fd                	srli	a5,a5,0x1f
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    1468:	86a6                	mv	a3,s1
    146a:	85ca                	mv	a1,s2
    146c:	854e                	mv	a0,s3
    146e:	c24ff0ef          	jal	ra,892 <_ntoa_long>
    1472:	8daa                	mv	s11,a0
    1474:	8466                	mv	s0,s9
        break;
    1476:	b3ed                	j	1260 <_vsnprintf+0x5a>
    switch (*format) {
    1478:	00164503          	lbu	a0,1(a2)
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    147c:	2006e693          	ori	a3,a3,512
        format++;
    1480:	0b85                	addi	s7,s7,1
        break;
    1482:	bd91                	j	12d6 <_vsnprintf+0xd0>
        if (*format == 'h') {
    1484:	00164503          	lbu	a0,1(a2)
    1488:	06800793          	li	a5,104
    148c:	1ef50863          	beq	a0,a5,167c <_vsnprintf+0x476>
        flags |= FLAGS_SHORT;
    1490:	0806e693          	ori	a3,a3,128
        format++;
    1494:	0b85                	addi	s7,s7,1
    1496:	b581                	j	12d6 <_vsnprintf+0xd0>
        if (*format == 'l') {
    1498:	00164503          	lbu	a0,1(a2)
    149c:	06c00793          	li	a5,108
    14a0:	e2f518e3          	bne	a0,a5,12d0 <_vsnprintf+0xca>
    switch (*format) {
    14a4:	00264503          	lbu	a0,2(a2)
          flags |= FLAGS_LONG_LONG;
    14a8:	3006e693          	ori	a3,a3,768
        format++;
    14ac:	00360b93          	addi	s7,a2,3
    14b0:	b51d                	j	12d6 <_vsnprintf+0xd0>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
    14b2:	04600793          	li	a5,70
    14b6:	18f50163          	beq	a0,a5,1638 <_vsnprintf+0x432>
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    14ba:	041d                	addi	s0,s0,7
    14bc:	9861                	andi	s0,s0,-8
    14be:	4018                	lw	a4,0(s0)
    14c0:	405c                	lw	a5,4(s0)
    14c2:	866e                	mv	a2,s11
    14c4:	c036                	sw	a3,0(sp)
    14c6:	88e2                	mv	a7,s8
    14c8:	885a                	mv	a6,s6
    14ca:	86a6                	mv	a3,s1
    14cc:	85ca                	mv	a1,s2
    14ce:	854e                	mv	a0,s3
    14d0:	3a15                	jal	e04 <_ftoa>
    14d2:	0421                	addi	s0,s0,8
    14d4:	8daa                	mv	s11,a0
        break;
    14d6:	b369                	j	1260 <_vsnprintf+0x5a>
      out(*format, buffer, idx++, maxlen);
    14d8:	001d8d13          	addi	s10,s11,1
        if (!(flags & FLAGS_LEFT)) {
    14dc:	8a89                	andi	a3,a3,2
      out(*format, buffer, idx++, maxlen);
    14de:	8cea                	mv	s9,s10
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    14e0:	00440b13          	addi	s6,s0,4
        if (!(flags & FLAGS_LEFT)) {
    14e4:	20068463          	beqz	a3,16ec <_vsnprintf+0x4e6>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    14e8:	00044503          	lbu	a0,0(s0)
    14ec:	866e                	mv	a2,s11
    14ee:	86a6                	mv	a3,s1
    14f0:	85ca                	mv	a1,s2
    14f2:	9982                	jalr	s3
          while (l++ < width) {
    14f4:	4785                	li	a5,1
    14f6:	9de2                	add	s11,s11,s8
    14f8:	2d87f663          	bgeu	a5,s8,17c4 <_vsnprintf+0x5be>
            out(' ', buffer, idx++, maxlen);
    14fc:	8666                	mv	a2,s9
    14fe:	86a6                	mv	a3,s1
    1500:	0c85                	addi	s9,s9,1
    1502:	85ca                	mv	a1,s2
    1504:	02000513          	li	a0,32
    1508:	9982                	jalr	s3
          while (l++ < width) {
    150a:	ff9d99e3          	bne	s11,s9,14fc <_vsnprintf+0x2f6>
        break;
    150e:	845a                	mv	s0,s6
    1510:	bb81                	j	1260 <_vsnprintf+0x5a>
        out('%', buffer, idx++, maxlen);
    1512:	866e                	mv	a2,s11
    1514:	86a6                	mv	a3,s1
    1516:	85ca                	mv	a1,s2
    1518:	02500513          	li	a0,37
    151c:	0d85                	addi	s11,s11,1
    151e:	9982                	jalr	s3
        break;
    1520:	b381                	j	1260 <_vsnprintf+0x5a>
        const char* p = va_arg(va, char*);
    1522:	00042d03          	lw	s10,0(s0)
    1526:	00440793          	addi	a5,s0,4
    152a:	d63e                	sw	a5,44(sp)
  for (s = str; *s && maxsize--; ++s);
    152c:	000d4503          	lbu	a0,0(s10)
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    1530:	0c0b1563          	bnez	s6,15fa <_vsnprintf+0x3f4>
  for (s = str; *s && maxsize--; ++s);
    1534:	5cf9                	li	s9,-2
    1536:	2e050b63          	beqz	a0,182c <_vsnprintf+0x626>
    153a:	0c85                	addi	s9,s9,1
    153c:	9cea                	add	s9,s9,s10
    153e:	87ea                	mv	a5,s10
    1540:	a019                	j	1546 <_vsnprintf+0x340>
    1542:	14fc8463          	beq	s9,a5,168a <_vsnprintf+0x484>
    1546:	0017c703          	lbu	a4,1(a5)
    154a:	0785                	addi	a5,a5,1
    154c:	fb7d                	bnez	a4,1542 <_vsnprintf+0x33c>
  return (unsigned int)(s - str);
    154e:	41a787b3          	sub	a5,a5,s10
    1552:	d43e                	sw	a5,40(sp)
        if (flags & FLAGS_PRECISION) {
    1554:	4006f793          	andi	a5,a3,1024
    1558:	ce3e                	sw	a5,28(sp)
    155a:	c789                	beqz	a5,1564 <_vsnprintf+0x35e>
          l = (l < precision ? l : precision);
    155c:	57a2                	lw	a5,40(sp)
    155e:	00fb7363          	bgeu	s6,a5,1564 <_vsnprintf+0x35e>
    1562:	d45a                	sw	s6,40(sp)
        if (!(flags & FLAGS_LEFT)) {
    1564:	0026f413          	andi	s0,a3,2
    1568:	1a040d63          	beqz	s0,1722 <_vsnprintf+0x51c>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    156c:	0c050a63          	beqz	a0,1640 <_vsnprintf+0x43a>
    1570:	866e                	mv	a2,s11
    1572:	a011                	j	1576 <_vsnprintf+0x370>
          out(*(p++), buffer, idx++, maxlen);
    1574:	8666                	mv	a2,s9
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1576:	47f2                	lw	a5,28(sp)
    1578:	c791                	beqz	a5,1584 <_vsnprintf+0x37e>
    157a:	fffb0793          	addi	a5,s6,-1
    157e:	160b0563          	beqz	s6,16e8 <_vsnprintf+0x4e2>
    1582:	8b3e                	mv	s6,a5
          out(*(p++), buffer, idx++, maxlen);
    1584:	86a6                	mv	a3,s1
    1586:	85ca                	mv	a1,s2
    1588:	00160c93          	addi	s9,a2,1
    158c:	9982                	jalr	s3
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    158e:	41bc87b3          	sub	a5,s9,s11
    1592:	97ea                	add	a5,a5,s10
    1594:	0007c503          	lbu	a0,0(a5)
    1598:	fd71                	bnez	a0,1574 <_vsnprintf+0x36e>
        if (flags & FLAGS_LEFT) {
    159a:	0a041263          	bnez	s0,163e <_vsnprintf+0x438>
        const char* p = va_arg(va, char*);
    159e:	5432                	lw	s0,44(sp)
        break;
    15a0:	8de6                	mv	s11,s9
    15a2:	b97d                	j	1260 <_vsnprintf+0x5a>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    15a4:	4018                	lw	a4,0(s0)
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    15a6:	0216e693          	ori	a3,a3,33
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    15aa:	47a1                	li	a5,8
    15ac:	866e                	mv	a2,s11
    15ae:	c236                	sw	a3,4(sp)
    15b0:	c03e                	sw	a5,0(sp)
    15b2:	88da                	mv	a7,s6
    15b4:	4841                	li	a6,16
    15b6:	4781                	li	a5,0
    15b8:	86a6                	mv	a3,s1
    15ba:	85ca                	mv	a1,s2
    15bc:	854e                	mv	a0,s3
    15be:	ad4ff0ef          	jal	ra,892 <_ntoa_long>
    15c2:	0411                	addi	s0,s0,4
    15c4:	8daa                	mv	s11,a0
        break;
    15c6:	b969                	j	1260 <_vsnprintf+0x5a>
  while (*format)
    15c8:	000bc503          	lbu	a0,0(s7)
    out = _out_null;
    15cc:	5c000993          	li	s3,1472
  while (*format)
    15d0:	4d81                	li	s11,0
    15d2:	c60514e3          	bnez	a0,123a <_vsnprintf+0x34>
    15d6:	4401                	li	s0,0
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    15d8:	d49de5e3          	bltu	s11,s1,1322 <_vsnprintf+0x11c>
    15dc:	b389                	j	131e <_vsnprintf+0x118>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    15de:	00042b03          	lw	s6,0(s0)
    switch (*format) {
    15e2:	00264503          	lbu	a0,2(a2)
        format++;
    15e6:	00360b93          	addi	s7,a2,3
        precision = prec > 0 ? (unsigned int)prec : 0U;
    15ea:	fffb4793          	not	a5,s6
    15ee:	87fd                	srai	a5,a5,0x1f
    15f0:	00fb7b33          	and	s6,s6,a5
        const int prec = (int)va_arg(va, int);
    15f4:	0411                	addi	s0,s0,4
        format++;
    15f6:	0609                	addi	a2,a2,2
    15f8:	b975                	j	12b4 <_vsnprintf+0xae>
  for (s = str; *s && maxsize--; ++s);
    15fa:	22050963          	beqz	a0,182c <_vsnprintf+0x626>
    15fe:	fffb0c93          	addi	s9,s6,-1
    1602:	bf25                	j	153a <_vsnprintf+0x334>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    1604:	0df57793          	andi	a5,a0,223
    1608:	04700713          	li	a4,71
    160c:	04e78b63          	beq	a5,a4,1662 <_vsnprintf+0x45c>
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    1610:	04500793          	li	a5,69
    1614:	06f50163          	beq	a0,a5,1676 <_vsnprintf+0x470>
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    1618:	041d                	addi	s0,s0,7
    161a:	9861                	andi	s0,s0,-8
    161c:	4018                	lw	a4,0(s0)
    161e:	405c                	lw	a5,4(s0)
    1620:	866e                	mv	a2,s11
    1622:	c036                	sw	a3,0(sp)
    1624:	88e2                	mv	a7,s8
    1626:	885a                	mv	a6,s6
    1628:	86a6                	mv	a3,s1
    162a:	85ca                	mv	a1,s2
    162c:	854e                	mv	a0,s3
    162e:	bdaff0ef          	jal	ra,a08 <_etoa>
    1632:	0421                	addi	s0,s0,8
    1634:	8daa                	mv	s11,a0
        break;
    1636:	b12d                	j	1260 <_vsnprintf+0x5a>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
    1638:	0206e693          	ori	a3,a3,32
    163c:	bdbd                	j	14ba <_vsnprintf+0x2b4>
    163e:	8de6                	mv	s11,s9
          while (l++ < width) {
    1640:	57a2                	lw	a5,40(sp)
    1642:	1187f963          	bgeu	a5,s8,1754 <_vsnprintf+0x54e>
    1646:	01bc0733          	add	a4,s8,s11
    164a:	40f70cb3          	sub	s9,a4,a5
            out(' ', buffer, idx++, maxlen);
    164e:	866e                	mv	a2,s11
    1650:	86a6                	mv	a3,s1
    1652:	0d85                	addi	s11,s11,1
    1654:	85ca                	mv	a1,s2
    1656:	02000513          	li	a0,32
    165a:	9982                	jalr	s3
          while (l++ < width) {
    165c:	ffbc99e3          	bne	s9,s11,164e <_vsnprintf+0x448>
    1660:	bf3d                	j	159e <_vsnprintf+0x398>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    1662:	6785                	lui	a5,0x1
    1664:	80078793          	addi	a5,a5,-2048 # 800 <_ntoa_format+0x18a>
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    1668:	0fd57513          	andi	a0,a0,253
    166c:	04500713          	li	a4,69
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    1670:	8edd                	or	a3,a3,a5
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    1672:	fae513e3          	bne	a0,a4,1618 <_vsnprintf+0x412>
    1676:	0206e693          	ori	a3,a3,32
    167a:	bf79                	j	1618 <_vsnprintf+0x412>
    switch (*format) {
    167c:	00264503          	lbu	a0,2(a2)
          flags |= FLAGS_CHAR;
    1680:	0c06e693          	ori	a3,a3,192
        format++;
    1684:	00360b93          	addi	s7,a2,3
    1688:	b1b9                	j	12d6 <_vsnprintf+0xd0>
  return (unsigned int)(s - str);
    168a:	41ac87b3          	sub	a5,s9,s10
    168e:	d43e                	sw	a5,40(sp)
    1690:	b5d1                	j	1554 <_vsnprintf+0x34e>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    1692:	ff36f593          	andi	a1,a3,-13
        if (flags & FLAGS_PRECISION) {
    1696:	4006f793          	andi	a5,a3,1024
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    169a:	0205e593          	ori	a1,a1,32
          base = 16U;
    169e:	4841                	li	a6,16
        if (flags & FLAGS_PRECISION) {
    16a0:	10078863          	beqz	a5,17b0 <_vsnprintf+0x5aa>
          flags &= ~FLAGS_ZEROPAD;
    16a4:	99f9                	andi	a1,a1,-2
        if ((*format == 'i') || (*format == 'd')) {
    16a6:	06900793          	li	a5,105
          if (flags & FLAGS_LONG_LONG) {
    16aa:	2005f693          	andi	a3,a1,512
        if ((*format == 'i') || (*format == 'd')) {
    16ae:	d6f50fe3          	beq	a0,a5,142c <_vsnprintf+0x226>
    16b2:	06400793          	li	a5,100
    16b6:	d6f50be3          	beq	a0,a5,142c <_vsnprintf+0x226>
          if (flags & FLAGS_LONG_LONG) {
    16ba:	12069763          	bnez	a3,17e8 <_vsnprintf+0x5e2>
          else if (flags & FLAGS_LONG) {
    16be:	1005f793          	andi	a5,a1,256
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    16c2:	00440c93          	addi	s9,s0,4
          else if (flags & FLAGS_LONG) {
    16c6:	10079f63          	bnez	a5,17e4 <_vsnprintf+0x5de>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    16ca:	0405f793          	andi	a5,a1,64
    16ce:	ebe5                	bnez	a5,17be <_vsnprintf+0x5b8>
    16d0:	0805f793          	andi	a5,a1,128
    16d4:	10078863          	beqz	a5,17e4 <_vsnprintf+0x5de>
    16d8:	00045703          	lhu	a4,0(s0)
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    16dc:	866e                	mv	a2,s11
    16de:	c22e                	sw	a1,4(sp)
    16e0:	c062                	sw	s8,0(sp)
    16e2:	88da                	mv	a7,s6
    16e4:	4781                	li	a5,0
    16e6:	b349                	j	1468 <_vsnprintf+0x262>
    16e8:	8cb2                	mv	s9,a2
    16ea:	bd45                	j	159a <_vsnprintf+0x394>
          while (l++ < width) {
    16ec:	4785                	li	a5,1
    16ee:	1587f563          	bgeu	a5,s8,1838 <_vsnprintf+0x632>
    16f2:	fffd8c93          	addi	s9,s11,-1
    16f6:	9ce2                	add	s9,s9,s8
    16f8:	a011                	j	16fc <_vsnprintf+0x4f6>
    16fa:	0d05                	addi	s10,s10,1
            out(' ', buffer, idx++, maxlen);
    16fc:	866e                	mv	a2,s11
    16fe:	86a6                	mv	a3,s1
    1700:	85ca                	mv	a1,s2
    1702:	02000513          	li	a0,32
    1706:	8dea                	mv	s11,s10
    1708:	9982                	jalr	s3
          while (l++ < width) {
    170a:	ff9d18e3          	bne	s10,s9,16fa <_vsnprintf+0x4f4>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    170e:	001d0d93          	addi	s11,s10,1
    1712:	00044503          	lbu	a0,0(s0)
    1716:	86a6                	mv	a3,s1
    1718:	8666                	mv	a2,s9
    171a:	85ca                	mv	a1,s2
    171c:	9982                	jalr	s3
        break;
    171e:	845a                	mv	s0,s6
    1720:	b681                	j	1260 <_vsnprintf+0x5a>
          while (l++ < width) {
    1722:	5722                	lw	a4,40(sp)
    1724:	00170793          	addi	a5,a4,1
    1728:	11877463          	bgeu	a4,s8,1830 <_vsnprintf+0x62a>
    172c:	01bc07b3          	add	a5,s8,s11
    1730:	40e78cb3          	sub	s9,a5,a4
            out(' ', buffer, idx++, maxlen);
    1734:	866e                	mv	a2,s11
    1736:	86a6                	mv	a3,s1
    1738:	0d85                	addi	s11,s11,1
    173a:	85ca                	mv	a1,s2
    173c:	02000513          	li	a0,32
    1740:	9982                	jalr	s3
          while (l++ < width) {
    1742:	ffbc99e3          	bne	s9,s11,1734 <_vsnprintf+0x52e>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1746:	000d4503          	lbu	a0,0(s10)
          while (l++ < width) {
    174a:	001c0793          	addi	a5,s8,1
    174e:	d43e                	sw	a5,40(sp)
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1750:	e20510e3          	bnez	a0,1570 <_vsnprintf+0x36a>
          while (l++ < width) {
    1754:	8cee                	mv	s9,s11
    1756:	b5a1                	j	159e <_vsnprintf+0x398>
            const long long value = va_arg(va, long long);
    1758:	041d                	addi	s0,s0,7
    175a:	9861                	andi	s0,s0,-8
    175c:	00442f03          	lw	t5,4(s0)
    1760:	401c                	lw	a5,0(s0)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    1762:	88c2                	mv	a7,a6
    1764:	41ff5693          	srai	a3,t5,0x1f
    1768:	8fb5                	xor	a5,a5,a3
    176a:	40d78733          	sub	a4,a5,a3
    176e:	01e6c533          	xor	a0,a3,t5
    1772:	00e7b7b3          	sltu	a5,a5,a4
    1776:	40d506b3          	sub	a3,a0,a3
    177a:	866e                	mv	a2,s11
    177c:	c62e                	sw	a1,12(sp)
    177e:	c462                	sw	s8,8(sp)
    1780:	c25a                	sw	s6,4(sp)
    1782:	c002                	sw	zero,0(sp)
    1784:	01ff5813          	srli	a6,t5,0x1f
    1788:	40f687b3          	sub	a5,a3,a5
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    178c:	86a6                	mv	a3,s1
    178e:	85ca                	mv	a1,s2
    1790:	854e                	mv	a0,s3
    1792:	982ff0ef          	jal	ra,914 <_ntoa_long_long>
    1796:	0421                	addi	s0,s0,8
    1798:	8daa                	mv	s11,a0
    179a:	b4d9                	j	1260 <_vsnprintf+0x5a>
        if (flags & FLAGS_PRECISION) {
    179c:	4006f793          	andi	a5,a3,1024
          base = 16U;
    17a0:	4841                	li	a6,16
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    17a2:	ff36f593          	andi	a1,a3,-13
        if (flags & FLAGS_PRECISION) {
    17a6:	f00780e3          	beqz	a5,16a6 <_vsnprintf+0x4a0>
    17aa:	bded                	j	16a4 <_vsnprintf+0x49e>
          base = 10U;
    17ac:	4829                	li	a6,10
    17ae:	bddd                	j	16a4 <_vsnprintf+0x49e>
        if ((*format == 'i') || (*format == 'd')) {
    17b0:	2006f693          	andi	a3,a3,512
    17b4:	b719                	j	16ba <_vsnprintf+0x4b4>
    17b6:	00044783          	lbu	a5,0(s0)
    17ba:	873e                	mv	a4,a5
    17bc:	b14d                	j	145e <_vsnprintf+0x258>
    17be:	00044703          	lbu	a4,0(s0)
    17c2:	bf29                	j	16dc <_vsnprintf+0x4d6>
          while (l++ < width) {
    17c4:	8dea                	mv	s11,s10
        break;
    17c6:	845a                	mv	s0,s6
    17c8:	bc61                	j	1260 <_vsnprintf+0x5a>
          base =  8U;
    17ca:	4821                	li	a6,8
    precision = 0U;
    17cc:	85b6                	mv	a1,a3
        if ((*format != 'i') && (*format != 'd')) {
    17ce:	06400713          	li	a4,100
        if (flags & FLAGS_PRECISION) {
    17d2:	4005f793          	andi	a5,a1,1024
        if ((*format != 'i') && (*format != 'd')) {
    17d6:	06e51463          	bne	a0,a4,183e <_vsnprintf+0x638>
          if (flags & FLAGS_LONG_LONG) {
    17da:	2005f693          	andi	a3,a1,512
        if (flags & FLAGS_PRECISION) {
    17de:	c40787e3          	beqz	a5,142c <_vsnprintf+0x226>
    17e2:	b5c9                	j	16a4 <_vsnprintf+0x49e>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    17e4:	4018                	lw	a4,0(s0)
    17e6:	bddd                	j	16dc <_vsnprintf+0x4d6>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    17e8:	041d                	addi	s0,s0,7
    17ea:	9861                	andi	s0,s0,-8
    17ec:	4018                	lw	a4,0(s0)
    17ee:	405c                	lw	a5,4(s0)
    17f0:	88c2                	mv	a7,a6
    17f2:	866e                	mv	a2,s11
    17f4:	c62e                	sw	a1,12(sp)
    17f6:	c462                	sw	s8,8(sp)
    17f8:	c25a                	sw	s6,4(sp)
    17fa:	c002                	sw	zero,0(sp)
    17fc:	4801                	li	a6,0
    17fe:	b779                	j	178c <_vsnprintf+0x586>
            const long value = va_arg(va, long);
    1800:	401c                	lw	a5,0(s0)
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    1802:	866e                	mv	a2,s11
    1804:	c22e                	sw	a1,4(sp)
    1806:	41f7d713          	srai	a4,a5,0x1f
    180a:	00f746b3          	xor	a3,a4,a5
    180e:	c062                	sw	s8,0(sp)
    1810:	88da                	mv	a7,s6
    1812:	83fd                	srli	a5,a5,0x1f
    1814:	40e68733          	sub	a4,a3,a4
    1818:	b981                	j	1468 <_vsnprintf+0x262>
          base =  2U;
    181a:	4809                	li	a6,2
    181c:	bf45                	j	17cc <_vsnprintf+0x5c6>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    181e:	401c                	lw	a5,0(s0)
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    1820:	41f7d693          	srai	a3,a5,0x1f
    1824:	00f6c733          	xor	a4,a3,a5
    1828:	8f15                	sub	a4,a4,a3
    182a:	b915                	j	145e <_vsnprintf+0x258>
  for (s = str; *s && maxsize--; ++s);
    182c:	d402                	sw	zero,40(sp)
    182e:	b31d                	j	1554 <_vsnprintf+0x34e>
          while (l++ < width) {
    1830:	d43e                	sw	a5,40(sp)
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1832:	d2051fe3          	bnez	a0,1570 <_vsnprintf+0x36a>
    1836:	bf39                	j	1754 <_vsnprintf+0x54e>
          while (l++ < width) {
    1838:	8cee                	mv	s9,s11
    183a:	8dea                	mv	s11,s10
    183c:	bdd9                	j	1712 <_vsnprintf+0x50c>
    183e:	86ae                	mv	a3,a1
    1840:	b78d                	j	17a2 <_vsnprintf+0x59c>
          base = 10U;
    1842:	4829                	li	a6,10
    1844:	b769                	j	17ce <_vsnprintf+0x5c8>

00001846 <puts>:
{
    1846:	1141                	addi	sp,sp,-16
    1848:	c422                	sw	s0,8(sp)
    184a:	c606                	sw	ra,12(sp)
    184c:	842a                	mv	s0,a0
   while(*s !='\0')
    184e:	00054503          	lbu	a0,0(a0)
    1852:	c519                	beqz	a0,1860 <puts+0x1a>
       fputc(*s, (void *)-1);
    1854:	55fd                	li	a1,-1
       s++;
    1856:	0405                	addi	s0,s0,1
       fputc(*s, (void *)-1);
    1858:	21ad                	jal	1cc2 <fputc>
   while(*s !='\0')
    185a:	00044503          	lbu	a0,0(s0)
    185e:	f97d                	bnez	a0,1854 <puts+0xe>
   fputc('\n', (void *)-1);
    1860:	55fd                	li	a1,-1
    1862:	4529                	li	a0,10
    1864:	29b9                	jal	1cc2 <fputc>
}
    1866:	40b2                	lw	ra,12(sp)
    1868:	4422                	lw	s0,8(sp)
    186a:	4501                	li	a0,0
    186c:	0141                	addi	sp,sp,16
    186e:	8082                	ret

00001870 <_putchar>:
    fputc(character, (void *)-1);
    1870:	55fd                	li	a1,-1
    1872:	a981                	j	1cc2 <fputc>

00001874 <putchar>:
{
    1874:	1141                	addi	sp,sp,-16
    fputc(character, (void *)-1);
    1876:	55fd                	li	a1,-1
    1878:	0ff57513          	andi	a0,a0,255
{
    187c:	c606                	sw	ra,12(sp)
    fputc(character, (void *)-1);
    187e:	2191                	jal	1cc2 <fputc>
}
    1880:	40b2                	lw	ra,12(sp)
    1882:	4501                	li	a0,0
    1884:	0141                	addi	sp,sp,16
    1886:	8082                	ret

00001888 <printf>:


///////////////////////////////////////////////////////////////////////////////

int printf(const char* format, ...)
{
    1888:	7139                	addi	sp,sp,-64
  va_list va;
  va_start(va, format);
    188a:	02410313          	addi	t1,sp,36
{
    188e:	d636                	sw	a3,44(sp)
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    1890:	86aa                	mv	a3,a0
    1892:	6505                	lui	a0,0x1
{
    1894:	d22e                	sw	a1,36(sp)
    1896:	d432                	sw	a2,40(sp)
    1898:	d83a                	sw	a4,48(sp)
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    189a:	002c                	addi	a1,sp,8
    189c:	871a                	mv	a4,t1
    189e:	567d                	li	a2,-1
    18a0:	1f250513          	addi	a0,a0,498 # 11f2 <_out_char>
{
    18a4:	ce06                	sw	ra,28(sp)
    18a6:	da3e                	sw	a5,52(sp)
    18a8:	dc42                	sw	a6,56(sp)
    18aa:	de46                	sw	a7,60(sp)
  va_start(va, format);
    18ac:	c61a                	sw	t1,12(sp)
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    18ae:	3aa1                	jal	1206 <_vsnprintf>
  va_end(va);
  return ret;
}
    18b0:	40f2                	lw	ra,28(sp)
    18b2:	6121                	addi	sp,sp,64
    18b4:	8082                	ret

000018b6 <sprintf>:


int sprintf(char* buffer, const char* format, ...)
{
    18b6:	7139                	addi	sp,sp,-64
  va_list va;
  va_start(va, format);
    18b8:	02810313          	addi	t1,sp,40
{
    18bc:	d636                	sw	a3,44(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    18be:	86ae                	mv	a3,a1
    18c0:	85aa                	mv	a1,a0
{
    18c2:	d432                	sw	a2,40(sp)
    18c4:	d83a                	sw	a4,48(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    18c6:	567d                	li	a2,-1
    18c8:	871a                	mv	a4,t1
    18ca:	5b400513          	li	a0,1460
{
    18ce:	ce06                	sw	ra,28(sp)
    18d0:	da3e                	sw	a5,52(sp)
    18d2:	dc42                	sw	a6,56(sp)
    18d4:	de46                	sw	a7,60(sp)
  va_start(va, format);
    18d6:	c61a                	sw	t1,12(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    18d8:	323d                	jal	1206 <_vsnprintf>
  va_end(va);
  return ret;
}
    18da:	40f2                	lw	ra,28(sp)
    18dc:	6121                	addi	sp,sp,64
    18de:	8082                	ret

000018e0 <snprintf>:


int snprintf(char* buffer, size_t count, const char* format, ...)
{
    18e0:	7139                	addi	sp,sp,-64
  va_list va;
  va_start(va, format);
    18e2:	02c10313          	addi	t1,sp,44
{
    18e6:	d636                	sw	a3,44(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    18e8:	86b2                	mv	a3,a2
    18ea:	862e                	mv	a2,a1
    18ec:	85aa                	mv	a1,a0
{
    18ee:	d83a                	sw	a4,48(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    18f0:	5b400513          	li	a0,1460
    18f4:	871a                	mv	a4,t1
{
    18f6:	ce06                	sw	ra,28(sp)
    18f8:	da3e                	sw	a5,52(sp)
    18fa:	dc42                	sw	a6,56(sp)
    18fc:	de46                	sw	a7,60(sp)
  va_start(va, format);
    18fe:	c61a                	sw	t1,12(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    1900:	3219                	jal	1206 <_vsnprintf>
  va_end(va);
  return ret;
}
    1902:	40f2                	lw	ra,28(sp)
    1904:	6121                	addi	sp,sp,64
    1906:	8082                	ret

00001908 <vprintf>:


int vprintf(const char* format, va_list va)
{
    1908:	1101                	addi	sp,sp,-32
    190a:	86aa                	mv	a3,a0
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    190c:	6505                	lui	a0,0x1
{
    190e:	872e                	mv	a4,a1
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    1910:	567d                	li	a2,-1
    1912:	006c                	addi	a1,sp,12
    1914:	1f250513          	addi	a0,a0,498 # 11f2 <_out_char>
{
    1918:	ce06                	sw	ra,28(sp)
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    191a:	30f5                	jal	1206 <_vsnprintf>
}
    191c:	40f2                	lw	ra,28(sp)
    191e:	6105                	addi	sp,sp,32
    1920:	8082                	ret

00001922 <vsnprintf>:


int vsnprintf(char* buffer, size_t count, const char* format, va_list va)
{
    1922:	8736                	mv	a4,a3
  return _vsnprintf(_out_buffer, buffer, count, format, va);
    1924:	86b2                	mv	a3,a2
    1926:	862e                	mv	a2,a1
    1928:	85aa                	mv	a1,a0
    192a:	5b400513          	li	a0,1460
    192e:	b8e1                	j	1206 <_vsnprintf>

00001930 <fctprintf>:
}


int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
    1930:	7139                	addi	sp,sp,-64
  va_list va;
  va_start(va, format);
    1932:	02c10313          	addi	t1,sp,44
{
    1936:	8eaa                	mv	t4,a0
  const out_fct_wrap_type out_fct_wrap = { out, arg };
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    1938:	6505                	lui	a0,0x1
{
    193a:	8e2e                	mv	t3,a1
    193c:	d636                	sw	a3,44(sp)
    193e:	d83a                	sw	a4,48(sp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    1940:	86b2                	mv	a3,a2
    1942:	002c                	addi	a1,sp,8
    1944:	871a                	mv	a4,t1
    1946:	567d                	li	a2,-1
    1948:	1fc50513          	addi	a0,a0,508 # 11fc <_out_fct>
{
    194c:	ce06                	sw	ra,28(sp)
    194e:	da3e                	sw	a5,52(sp)
    1950:	dc42                	sw	a6,56(sp)
    1952:	de46                	sw	a7,60(sp)
  va_start(va, format);
    1954:	c21a                	sw	t1,4(sp)
  const out_fct_wrap_type out_fct_wrap = { out, arg };
    1956:	c476                	sw	t4,8(sp)
    1958:	c672                	sw	t3,12(sp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    195a:	3075                	jal	1206 <_vsnprintf>
  va_end(va);
  return ret;
}
    195c:	40f2                	lw	ra,28(sp)
    195e:	6121                	addi	sp,sp,64
    1960:	8082                	ret

00001962 <get_vtimer>:
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
int get_vtimer()
{
    1962:	1141                	addi	sp,sp,-16
  volatile unsigned int   LoadCount;
  asm ("csrr %[LoadCount], time\n"
    1964:	c01027f3          	rdtime	a5
    1968:	c63e                	sw	a5,12(sp)
      :[LoadCount]"=r"(LoadCount)
      :
      :
      );
  //LoadCount = *TIMER_ADDR;
  return LoadCount;
    196a:	4532                	lw	a0,12(sp)
  //int *TIMER_ADDR;
  //TIMER_ADDR = 0xE0013000;
  //volatile unsigned int   LoadCount;
  //LoadCount = *TIMER_ADDR;
  //return LoadCount;
}
    196c:	0141                	addi	sp,sp,16
    196e:	8082                	ret

00001970 <sim_end>:
{
  int *END_ADDR;
  END_ADDR = 0x6000FFF8;
  unsigned int END_DATA;
  END_DATA= 0xffff0000;
  *END_ADDR = END_DATA;
    1970:	600107b7          	lui	a5,0x60010
    1974:	7741                	lui	a4,0xffff0
    1976:	fee7ac23          	sw	a4,-8(a5) # 6000fff8 <__kernel_stack+0x3ff50000>
}
    197a:	8082                	ret

0000197c <ck_uart_set_baudrate>:

void ck_uart_set_baudrate(p_ck_uart_device uart_device, uint32_t baudrate)
{ /* {{{ ck_uart_set_baudrate */
    uint32_t baud_div;
    uint32_t *addr = uart_device->register_map;
    baud_div = (APB_FREQ/baudrate) >> 4;
    197c:	05f5e7b7          	lui	a5,0x5f5e
    1980:	10078793          	addi	a5,a5,256 # 5f5e100 <_global_impure_ptr+0x5f580f8>
    1984:	02b7d7b3          	divu	a5,a5,a1
    uint32_t *addr = uart_device->register_map;
    1988:	4158                	lw	a4,4(a0)
    uart_device->baudrate = baudrate;
    198a:	c50c                	sw	a1,8(a0)
    *(reg8_t*)(addr+CK_UART_LCR) |= LCR_SET_DLAB;
    198c:	00c74683          	lbu	a3,12(a4) # ffff000c <__kernel_stack+0xdff30014>
    1990:	f806e693          	ori	a3,a3,-128
    1994:	0ff6f693          	andi	a3,a3,255
    1998:	00d70623          	sb	a3,12(a4)
    baud_div = (APB_FREQ/baudrate) >> 4;
    199c:	0047d693          	srli	a3,a5,0x4
    *(reg8_t*)(addr+CK_UART_DLL) = (baud_div & 0xFF);
    19a0:	0ff6f693          	andi	a3,a3,255
    *(reg8_t*)(addr+CK_UART_DLH) = ((baud_div >> 8) & 0xFF);
    19a4:	83b1                	srli	a5,a5,0xc
    *(reg8_t*)(addr+CK_UART_DLL) = (baud_div & 0xFF);
    19a6:	00d70023          	sb	a3,0(a4)
    *(reg8_t*)(addr+CK_UART_DLH) = ((baud_div >> 8) & 0xFF);
    19aa:	0ff7f793          	andi	a5,a5,255
    19ae:	00f70223          	sb	a5,4(a4)
    *(reg8_t*)(addr+CK_UART_LCR) &= (~LCR_SET_DLAB);
    19b2:	00c74783          	lbu	a5,12(a4)
    19b6:	07f7f793          	andi	a5,a5,127
    19ba:	00f70623          	sb	a5,12(a4)
} /* }}} */
    19be:	8082                	ret

000019c0 <ck_uart_set_parity>:

void ck_uart_set_parity(p_ck_uart_device uart_device, t_ck_uart_parity parity)
{ /* {{{ ck_uart_set_parity */
    uart_device->parity = parity;
    19c0:	c54c                	sw	a1,12(a0)
    switch (parity)
    19c2:	4785                	li	a5,1
    19c4:	04f58363          	beq	a1,a5,1a0a <ck_uart_set_parity+0x4a>
    19c8:	4789                	li	a5,2
    19ca:	00f58d63          	beq	a1,a5,19e4 <ck_uart_set_parity+0x24>
    19ce:	00058363          	beqz	a1,19d4 <ck_uart_set_parity+0x14>
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_PARITY_EVEN;
            break;
        default:
            break;
    }
} /* }}} */
    19d2:	8082                	ret
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= (~LCR_PARITY_ENABLE);
    19d4:	4158                	lw	a4,4(a0)
    19d6:	00c74783          	lbu	a5,12(a4)
    19da:	0f77f793          	andi	a5,a5,247
    19de:	00f70623          	sb	a5,12(a4)
            break;
    19e2:	8082                	ret
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_PARITY_ENABLE;
    19e4:	4158                	lw	a4,4(a0)
    19e6:	00c74783          	lbu	a5,12(a4)
    19ea:	0ff7f793          	andi	a5,a5,255
    19ee:	0087e793          	ori	a5,a5,8
    19f2:	00f70623          	sb	a5,12(a4)
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_PARITY_EVEN;
    19f6:	4158                	lw	a4,4(a0)
    19f8:	00c74783          	lbu	a5,12(a4)
    19fc:	0ff7f793          	andi	a5,a5,255
    1a00:	0107e793          	ori	a5,a5,16
    1a04:	00f70623          	sb	a5,12(a4)
} /* }}} */
    1a08:	8082                	ret
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_PARITY_ENABLE;
    1a0a:	4158                	lw	a4,4(a0)
    1a0c:	00c74783          	lbu	a5,12(a4)
    1a10:	0ff7f793          	andi	a5,a5,255
    1a14:	0087e793          	ori	a5,a5,8
    1a18:	00f70623          	sb	a5,12(a4)
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= LCR_PARITY_ODD;
    1a1c:	4158                	lw	a4,4(a0)
    1a1e:	00c74783          	lbu	a5,12(a4)
    1a22:	0ef7f793          	andi	a5,a5,239
    1a26:	00f70623          	sb	a5,12(a4)
            break;
    1a2a:	8082                	ret

00001a2c <ck_uart_set_wordsize>:

void ck_uart_set_wordsize(p_ck_uart_device uart_device, t_ck_uart_wordsize wordsize)
{ /* {{{ ck_uart_set_wordsize */
    uart_device->wordsize = wordsize;
    1a2c:	c94c                	sw	a1,20(a0)
    switch (wordsize)
    1a2e:	4789                	li	a5,2
    1a30:	04f58d63          	beq	a1,a5,1a8a <ck_uart_set_wordsize+0x5e>
    1a34:	02b7e563          	bltu	a5,a1,1a5e <ck_uart_set_wordsize+0x32>
    1a38:	04058163          	beqz	a1,1a7a <ck_uart_set_wordsize+0x4e>
    {
        case WORDSIZE_5:
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= LCR_WORD_SIZE_5;
            break;
        case WORDSIZE_6:
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= 0xfd;
    1a3c:	4158                	lw	a4,4(a0)
    1a3e:	00c74783          	lbu	a5,12(a4)
    1a42:	0fd7f793          	andi	a5,a5,253
    1a46:	00f70623          	sb	a5,12(a4)
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_WORD_SIZE_6;
    1a4a:	4158                	lw	a4,4(a0)
    1a4c:	00c74783          	lbu	a5,12(a4)
    1a50:	0ff7f793          	andi	a5,a5,255
    1a54:	0017e793          	ori	a5,a5,1
    1a58:	00f70623          	sb	a5,12(a4)
            break;
    1a5c:	8082                	ret
    switch (wordsize)
    1a5e:	478d                	li	a5,3
    1a60:	00f59c63          	bne	a1,a5,1a78 <ck_uart_set_wordsize+0x4c>
        case WORDSIZE_7:
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= 0xfe;
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_WORD_SIZE_7;
            break;
        case WORDSIZE_8:
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_WORD_SIZE_8;
    1a64:	4158                	lw	a4,4(a0)
    1a66:	00c74783          	lbu	a5,12(a4)
    1a6a:	0ff7f793          	andi	a5,a5,255
    1a6e:	0037e793          	ori	a5,a5,3
    1a72:	00f70623          	sb	a5,12(a4)
            break;
        default:
            break;
    }			
} /* }}} */
    1a76:	8082                	ret
    1a78:	8082                	ret
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= LCR_WORD_SIZE_5;
    1a7a:	4158                	lw	a4,4(a0)
    1a7c:	00c74783          	lbu	a5,12(a4)
    1a80:	0fc7f793          	andi	a5,a5,252
    1a84:	00f70623          	sb	a5,12(a4)
            break;
    1a88:	8082                	ret
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= 0xfe;
    1a8a:	4158                	lw	a4,4(a0)
    1a8c:	00c74783          	lbu	a5,12(a4)
    1a90:	0fe7f793          	andi	a5,a5,254
    1a94:	00f70623          	sb	a5,12(a4)
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_WORD_SIZE_7;
    1a98:	4158                	lw	a4,4(a0)
    1a9a:	00c74783          	lbu	a5,12(a4)
    1a9e:	0ff7f793          	andi	a5,a5,255
    1aa2:	0027e793          	ori	a5,a5,2
    1aa6:	00f70623          	sb	a5,12(a4)
            break;
    1aaa:	8082                	ret

00001aac <ck_uart_set_stopbit>:

void ck_uart_set_stopbit(p_ck_uart_device uart_device, t_ck_uart_stopbit stopbit)
{ /* {{{ ck_uart_set_stopbit */
    uart_device->stopbit = stopbit;
    1aac:	c90c                	sw	a1,16(a0)
    switch(stopbit)
    1aae:	cd99                	beqz	a1,1acc <ck_uart_set_stopbit+0x20>
    1ab0:	4785                	li	a5,1
    1ab2:	00f59c63          	bne	a1,a5,1aca <ck_uart_set_stopbit+0x1e>
    {
        case STOPBIT_1:
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= LCR_STOP_BIT1;
            break;
        case STOPBIT_2:
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_STOP_BIT2;
    1ab6:	4158                	lw	a4,4(a0)
    1ab8:	00c74783          	lbu	a5,12(a4)
    1abc:	0ff7f793          	andi	a5,a5,255
    1ac0:	0047e793          	ori	a5,a5,4
    1ac4:	00f70623          	sb	a5,12(a4)
            break;
        default:
            break;
    }
} /* }}} */
    1ac8:	8082                	ret
    1aca:	8082                	ret
    1acc:	4158                	lw	a4,4(a0)
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= LCR_STOP_BIT1;
    1ace:	00c74783          	lbu	a5,12(a4)
    1ad2:	0fb7f793          	andi	a5,a5,251
    1ad6:	00f70623          	sb	a5,12(a4)
            break;
    1ada:	8082                	ret

00001adc <ck_uart_set_rxmode>:


void ck_uart_set_rxmode(p_ck_uart_device uart_device, t_ck_uart_mode rxmode)
{ /* {{{ ck_uart_set_rxmode */
    uart_device->rxmode = rxmode;
    1adc:	cd0c                	sw	a1,24(a0)

} /* }}} */
    1ade:	8082                	ret

00001ae0 <ck_uart_set_txmode>:

void ck_uart_set_txmode(p_ck_uart_device uart_device, t_ck_uart_mode txmode)
{ /* {{{ ck_uart_set_txmode */
    uart_device->txmode = txmode;
    1ae0:	cd4c                	sw	a1,28(a0)
} /* }}} */
    1ae2:	8082                	ret

00001ae4 <ck_uart_open>:
 * @param  id: UART device ID
 * @retval 0 if success, 1 if fail
 */
uint32_t ck_uart_open(p_ck_uart_device uart_device, uint32_t id)
{
    if (id == 0)
    1ae4:	e981                	bnez	a1,1af4 <ck_uart_open+0x10>
    {
        uart_device->uart_id = 0;
        uart_device->register_map = (uint32_t*)UART0_BASE_ADDR;
    1ae6:	400157b7          	lui	a5,0x40015
        uart_device->uart_id = 0;
    1aea:	00052023          	sw	zero,0(a0)
        uart_device->register_map = (uint32_t*)UART0_BASE_ADDR;
    1aee:	c15c                	sw	a5,4(a0)
        return 0;
    1af0:	4501                	li	a0,0
    1af2:	8082                	ret
    }
    else
    {
        return 1;
    1af4:	4505                	li	a0,1
    }
}
    1af6:	8082                	ret

00001af8 <ck_uart_init>:
 * @param  uart_cfig: uart configurations collection, a structure datatype
 * @retval 0 if success, 1 if fail
 */
uint32_t ck_uart_init(p_ck_uart_device uart_device, p_ck_uart_cfig uart_cfig)
{
    if (uart_device->uart_id == 0xFFFF)
    1af8:	4118                	lw	a4,0(a0)
    1afa:	67c1                	lui	a5,0x10
    1afc:	17fd                	addi	a5,a5,-1
    1afe:	0af70163          	beq	a4,a5,1ba0 <ck_uart_init+0xa8>
        return 1;
    ck_uart_set_baudrate(uart_device, uart_cfig->baudrate);
    1b02:	4194                	lw	a3,0(a1)
    baud_div = (APB_FREQ/baudrate) >> 4;
    1b04:	05f5e7b7          	lui	a5,0x5f5e
    1b08:	10078793          	addi	a5,a5,256 # 5f5e100 <_global_impure_ptr+0x5f580f8>
    1b0c:	02d7d7b3          	divu	a5,a5,a3
    uint32_t *addr = uart_device->register_map;
    1b10:	4158                	lw	a4,4(a0)
{
    1b12:	1141                	addi	sp,sp,-16
    1b14:	c606                	sw	ra,12(sp)
    1b16:	c422                	sw	s0,8(sp)
    1b18:	c226                	sw	s1,4(sp)
    uart_device->baudrate = baudrate;
    1b1a:	c514                	sw	a3,8(a0)
    *(reg8_t*)(addr+CK_UART_LCR) |= LCR_SET_DLAB;
    1b1c:	00c74683          	lbu	a3,12(a4)
    1b20:	84ae                	mv	s1,a1
    1b22:	842a                	mv	s0,a0
    1b24:	f806e693          	ori	a3,a3,-128
    1b28:	0ff6f693          	andi	a3,a3,255
    1b2c:	00d70623          	sb	a3,12(a4)
    baud_div = (APB_FREQ/baudrate) >> 4;
    1b30:	0047d693          	srli	a3,a5,0x4
    *(reg8_t*)(addr+CK_UART_DLL) = (baud_div & 0xFF);
    1b34:	0ff6f693          	andi	a3,a3,255
    *(reg8_t*)(addr+CK_UART_DLH) = ((baud_div >> 8) & 0xFF);
    1b38:	83b1                	srli	a5,a5,0xc
    *(reg8_t*)(addr+CK_UART_DLL) = (baud_div & 0xFF);
    1b3a:	00d70023          	sb	a3,0(a4)
    *(reg8_t*)(addr+CK_UART_DLH) = ((baud_div >> 8) & 0xFF);
    1b3e:	0ff7f793          	andi	a5,a5,255
    1b42:	00f70223          	sb	a5,4(a4)
    *(reg8_t*)(addr+CK_UART_LCR) &= (~LCR_SET_DLAB);
    1b46:	00c74783          	lbu	a5,12(a4)
    1b4a:	07f7f793          	andi	a5,a5,127
    1b4e:	00f70623          	sb	a5,12(a4)
    ck_uart_set_parity(uart_device, uart_cfig->parity);
    1b52:	458c                	lw	a1,8(a1)
    1b54:	35b5                	jal	19c0 <ck_uart_set_parity>
    ck_uart_set_wordsize(uart_device, uart_cfig->wordsize);
    1b56:	44cc                	lw	a1,12(s1)
    1b58:	8522                	mv	a0,s0
    1b5a:	3dc9                	jal	1a2c <ck_uart_set_wordsize>
    ck_uart_set_stopbit(uart_device, uart_cfig->stopbit);
    1b5c:	40dc                	lw	a5,4(s1)
    uart_device->stopbit = stopbit;
    1b5e:	c81c                	sw	a5,16(s0)
    switch(stopbit)
    1b60:	cb85                	beqz	a5,1b90 <ck_uart_init+0x98>
    1b62:	4705                	li	a4,1
    1b64:	00e78c63          	beq	a5,a4,1b7c <ck_uart_init+0x84>
    uart_device->rxmode = rxmode;
    1b68:	4898                	lw	a4,16(s1)
    uart_device->txmode = txmode;
    1b6a:	48dc                	lw	a5,20(s1)
    ck_uart_set_rxmode(uart_device, uart_cfig->rxmode);
    ck_uart_set_txmode(uart_device, uart_cfig->txmode);
    return 0;
}
    1b6c:	40b2                	lw	ra,12(sp)
    uart_device->rxmode = rxmode;
    1b6e:	cc18                	sw	a4,24(s0)
    uart_device->txmode = txmode;
    1b70:	cc5c                	sw	a5,28(s0)
}
    1b72:	4422                	lw	s0,8(sp)
    1b74:	4492                	lw	s1,4(sp)
    return 0;
    1b76:	4501                	li	a0,0
}
    1b78:	0141                	addi	sp,sp,16
    1b7a:	8082                	ret
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) |= LCR_STOP_BIT2;
    1b7c:	4058                	lw	a4,4(s0)
    1b7e:	00c74783          	lbu	a5,12(a4)
    1b82:	0ff7f793          	andi	a5,a5,255
    1b86:	0047e793          	ori	a5,a5,4
    1b8a:	00f70623          	sb	a5,12(a4)
            break;
    1b8e:	bfe9                	j	1b68 <ck_uart_init+0x70>
    1b90:	4058                	lw	a4,4(s0)
            *(reg8_t*)(uart_device->register_map+CK_UART_LCR) &= LCR_STOP_BIT1;
    1b92:	00c74783          	lbu	a5,12(a4)
    1b96:	0fb7f793          	andi	a5,a5,251
    1b9a:	00f70623          	sb	a5,12(a4)
            break;
    1b9e:	b7e9                	j	1b68 <ck_uart_init+0x70>
        return 1;
    1ba0:	4505                	li	a0,1
}
    1ba2:	8082                	ret

00001ba4 <ck_uart_close>:
 */
uint32_t ck_uart_close(p_ck_uart_device uart_device)
{
    ck_uart_set_rxmode(uart_device, DISABLE);
    ck_uart_set_txmode(uart_device, DISABLE);
    uart_device->uart_id = 0xFFFF;
    1ba4:	67c1                	lui	a5,0x10
    1ba6:	17fd                	addi	a5,a5,-1
    uart_device->rxmode = rxmode;
    1ba8:	00052c23          	sw	zero,24(a0)
    uart_device->txmode = txmode;
    1bac:	00052e23          	sw	zero,28(a0)
    uart_device->uart_id = 0xFFFF;
    1bb0:	c11c                	sw	a5,0(a0)
    return 0;
}
    1bb2:	4501                	li	a0,0
    1bb4:	8082                	ret

00001bb6 <ck_uart_putc>:
 * @param  c: character needs to transmit
 * @retval 0 if success, 1 if fail
 */
uint32_t ck_uart_putc(p_ck_uart_device uart_device, uint8_t c)
{
    if (uart_device->txmode == DISABLE)
    1bb6:	4d5c                	lw	a5,28(a0)
    1bb8:	cb99                	beqz	a5,1bce <ck_uart_putc+0x18>
        return 1;
    // wait until uart transmit buffer is empty
    while (!((*(reg8_t*)(uart_device->register_map+CK_UART_LSR)) & CK_LSR_TRANS_EMPTY));
    1bba:	4158                	lw	a4,4(a0)
    1bbc:	01474783          	lbu	a5,20(a4)
    1bc0:	0207f793          	andi	a5,a5,32
    1bc4:	dfe5                	beqz	a5,1bbc <ck_uart_putc+0x6>

    *(reg8_t*)(uart_device->register_map+CK_UART_THR) = c;
    1bc6:	00b70023          	sb	a1,0(a4)
    return 0;
    1bca:	4501                	li	a0,0
    1bcc:	8082                	ret
        return 1;
    1bce:	4505                	li	a0,1
}
    1bd0:	8082                	ret

00001bd2 <ck_uart_status>:
    //uart_lsr = *(reg8_t*)(uart_device->register_map+CK_UART_LSR);
    if (uart_lsr & CK_LSR_TEMT)
        return 0;
    else
        return 1;
}
    1bd2:	4501                	li	a0,0
    1bd4:	8082                	ret

00001bd6 <vasprintf>:


#define CHUNKSIZE (256)

int vasprintf(char **ret, const char *fmt, va_list ap)
{
    1bd6:	1101                	addi	sp,sp,-32
    1bd8:	c05a                	sw	s6,0(sp)
    1bda:	8b2a                	mv	s6,a0
    size_t chunks;
    size_t buflen;
    char * buf;
    int    len;

    chunks = ((strlen(fmt) + 1) / CHUNKSIZE) + 1;
    1bdc:	852e                	mv	a0,a1
{
    1bde:	ca26                	sw	s1,20(sp)
    1be0:	c64e                	sw	s3,12(sp)
    1be2:	c452                	sw	s4,8(sp)
    1be4:	c256                	sw	s5,4(sp)
    1be6:	ce06                	sw	ra,28(sp)
    1be8:	cc22                	sw	s0,24(sp)
    1bea:	c84a                	sw	s2,16(sp)
    1bec:	8a2e                	mv	s4,a1
    1bee:	8ab2                	mv	s5,a2
    chunks = ((strlen(fmt) + 1) / CHUNKSIZE) + 1;
    1bf0:	291030ef          	jal	ra,5680 <strlen>
    1bf4:	00150993          	addi	s3,a0,1
    1bf8:	f009f993          	andi	s3,s3,-256
    buflen = chunks * CHUNKSIZE;
    1bfc:	10098493          	addi	s1,s3,256

    *ret = NULL;
    1c00:	000b2023          	sw	zero,0(s6)
    1c04:	20098993          	addi	s3,s3,512
    for (;;) {
        buf = malloc(buflen);
    1c08:	8526                	mv	a0,s1
    1c0a:	34c030ef          	jal	ra,4f56 <malloc>
        if (buf == NULL) {
            return -ENOMEM;
        }
        len = vsnprintf(buf, buflen, fmt, ap);
    1c0e:	85a6                	mv	a1,s1
    1c10:	86d6                	mv	a3,s5
    1c12:	8652                	mv	a2,s4
        buf = malloc(buflen);
    1c14:	892a                	mv	s2,a0
        if (buf == NULL) {
    1c16:	cd29                	beqz	a0,1c70 <vasprintf+0x9a>
        len = vsnprintf(buf, buflen, fmt, ap);
    1c18:	3329                	jal	1922 <vsnprintf>
    1c1a:	842a                	mv	s0,a0

        if (len >= 0 && (size_t)len < buflen - 1) {
    1c1c:	14fd                	addi	s1,s1,-1
            break;
        }
        free(buf);
    1c1e:	854a                	mv	a0,s2
        if (len >= 0 && (size_t)len < buflen - 1) {
    1c20:	00044d63          	bltz	s0,1c3a <vasprintf+0x64>
    1c24:	02946163          	bltu	s0,s1,1c46 <vasprintf+0x70>
        * len >= 0 is required for vsnprintf implementations that
        * return -1 for insufficient buffer
        */

        if (len >= 0 && buflen <= (size_t)len) {
            buflen = len + 1;
    1c28:	00140493          	addi	s1,s0,1
        free(buf);
    1c2c:	336030ef          	jal	ra,4f62 <free>
        if (len >= 0 && buflen <= (size_t)len) {
    1c30:	01346763          	bltu	s0,s3,1c3e <vasprintf+0x68>
    1c34:	10098993          	addi	s3,s3,256
    1c38:	bfc1                	j	1c08 <vasprintf+0x32>
        free(buf);
    1c3a:	328030ef          	jal	ra,4f62 <free>
    1c3e:	84ce                	mv	s1,s3
    1c40:	10098993          	addi	s3,s3,256
    1c44:	b7d1                	j	1c08 <vasprintf+0x32>
        }
    }

    if (len > 0 && buf != NULL) {
    1c46:	ec01                	bnez	s0,1c5e <vasprintf+0x88>
        else
            *ret = buf;
    }

    return len;
}
    1c48:	40f2                	lw	ra,28(sp)
    1c4a:	8522                	mv	a0,s0
    1c4c:	4462                	lw	s0,24(sp)
    1c4e:	44d2                	lw	s1,20(sp)
    1c50:	4942                	lw	s2,16(sp)
    1c52:	49b2                	lw	s3,12(sp)
    1c54:	4a22                	lw	s4,8(sp)
    1c56:	4a92                	lw	s5,4(sp)
    1c58:	4b02                	lw	s6,0(sp)
    1c5a:	6105                	addi	sp,sp,32
    1c5c:	8082                	ret
        *ret = strdup(buf);
    1c5e:	1e1030ef          	jal	ra,563e <strdup>
    1c62:	00ab2023          	sw	a0,0(s6)
        if (*ret != NULL)
    1c66:	c519                	beqz	a0,1c74 <vasprintf+0x9e>
            free(buf);
    1c68:	854a                	mv	a0,s2
    1c6a:	2f8030ef          	jal	ra,4f62 <free>
    1c6e:	bfe9                	j	1c48 <vasprintf+0x72>
            return -ENOMEM;
    1c70:	5451                	li	s0,-12
    1c72:	bfd9                	j	1c48 <vasprintf+0x72>
            *ret = buf;
    1c74:	012b2023          	sw	s2,0(s6)
    1c78:	bfc1                	j	1c48 <vasprintf+0x72>

00001c7a <asprintf>:

int asprintf(char **buf, const char *fmt, ...)
{
    1c7a:	7139                	addi	sp,sp,-64
    va_list args;
    int     i;

    va_start(args, fmt);
    1c7c:	02810313          	addi	t1,sp,40
{
    1c80:	d432                	sw	a2,40(sp)
    i = vasprintf(buf, fmt, args);
    1c82:	861a                	mv	a2,t1
{
    1c84:	ce06                	sw	ra,28(sp)
    1c86:	d636                	sw	a3,44(sp)
    1c88:	d83a                	sw	a4,48(sp)
    1c8a:	da3e                	sw	a5,52(sp)
    1c8c:	dc42                	sw	a6,56(sp)
    1c8e:	de46                	sw	a7,60(sp)
    va_start(args, fmt);
    1c90:	c61a                	sw	t1,12(sp)
    i = vasprintf(buf, fmt, args);
    1c92:	3791                	jal	1bd6 <vasprintf>
    va_end(args);
    return i;
}
    1c94:	40f2                	lw	ra,28(sp)
    1c96:	6121                	addi	sp,sp,64
    1c98:	8082                	ret

00001c9a <ck_intc_init>:

//config the interrupt controller
void ck_intc_init()
{
	int *picr = TCIP_BASE;
        *picr = 0x0;
    1c9a:	e00007b7          	lui	a5,0xe0000
    1c9e:	0007a023          	sw	zero,0(a5) # e0000000 <__kernel_stack+0xbff40008>
        
        // Write ISER
        int *piser = CLIC_BASE+INTIE+0x10;
        *piser = 0x810000;
    1ca2:	00810737          	lui	a4,0x810
    1ca6:	e08007b7          	lui	a5,0xe0800
    1caa:	40e7a823          	sw	a4,1040(a5) # e0800410 <__kernel_stack+0xc0740418>
}
    1cae:	8082                	ret

00001cb0 <__thead_vprintfsprintf>:
#include <stdarg.h>

int __thead_vprintfsprintf(char *str, FILE *stream, const char *format, va_list arg_ptr)
{
    return 0;
}
    1cb0:	4501                	li	a0,0
    1cb2:	8082                	ret

00001cb4 <__thead_vprintfprintf>:

int __thead_vprintfprintf(FILE *stream, const char *format, va_list arg_ptr)
{
    return 0;
}
    1cb4:	4501                	li	a0,0
    1cb6:	8082                	ret

00001cb8 <stdout>:

#undef stdout
int stdout()
{
    return 0;
}
    1cb8:	4501                	li	a0,0
    1cba:	8082                	ret

00001cbc <os_critical_enter>:
      : :"r" (ch): "x13" );
}
*/
void os_critical_enter(void)
{
}
    1cbc:	8082                	ret

00001cbe <os_critical_exit>:
    1cbe:	8082                	ret

00001cc0 <delay_ms>:
	for(i=0;i<time;i++){
		for(j=0;j<50000;j++){
			;
		}
	}
}
    1cc0:	8082                	ret

00001cc2 <fputc>:

//重写fputc
int fputc(int ch, FILE *stream)
{ 
	ck_uart_putc(&uart0, (char)ch);
    1cc2:	0ff57593          	andi	a1,a0,255
    1cc6:	20000537          	lui	a0,0x20000
    1cca:	00450513          	addi	a0,a0,4 # 20000004 <uart0>
    1cce:	b5e5                	j	1bb6 <ck_uart_putc>

00001cd0 <_nettle_md5_compress>:
 * Compresses 20 (_MD5_DIGEST_LENGTH + MD5_DATA_LENGTH) words into 4
 * (_MD5_DIGEST_LENGTH) words. */

void
_nettle_md5_compress(uint32_t *digest, const uint8_t *input)
{
    1cd0:	7119                	addi	sp,sp,-128
    1cd2:	dca2                	sw	s0,120(sp)
  uint32_t data[MD5_DATA_LENGTH];
  uint32_t a, b, c, d;
  unsigned i;

  for (i = 0; i < MD5_DATA_LENGTH; i++, input += 4)
    data[i] = LE_READ_UINT32(input);
    1cd4:	04000613          	li	a2,64
{
    1cd8:	842a                	mv	s0,a0
    data[i] = LE_READ_UINT32(input);
    1cda:	850a                	mv	a0,sp
{
    1cdc:	daa6                	sw	s1,116(sp)
    1cde:	d8ca                	sw	s2,112(sp)
    1ce0:	d6ce                	sw	s3,108(sp)
    1ce2:	d4d2                	sw	s4,104(sp)
    1ce4:	d2d6                	sw	s5,100(sp)
    1ce6:	d0da                	sw	s6,96(sp)
    1ce8:	cede                	sw	s7,92(sp)
    1cea:	cce2                	sw	s8,88(sp)
    1cec:	cae6                	sw	s9,84(sp)
    1cee:	c8ea                	sw	s10,80(sp)
    1cf0:	c6ee                	sw	s11,76(sp)
    1cf2:	de86                	sw	ra,124(sp)
    data[i] = LE_READ_UINT32(input);
    1cf4:	045030ef          	jal	ra,5538 <memcpy>

  a = digest[0];
  b = digest[1];
  c = digest[2];
    1cf8:	00842c83          	lw	s9,8(s0)
  d = digest[3];
    1cfc:	00c42d83          	lw	s11,12(s0)
  b = digest[1];
    1d00:	00442883          	lw	a7,4(s0)

  ROUND(F1, a, b, c, d, data[ 0] + 0xd76aa478, 7);
    1d04:	4c02                	lw	s8,0(sp)
    1d06:	4014                	lw	a3,0(s0)
    1d08:	d76aa737          	lui	a4,0xd76aa
    1d0c:	01bcc7b3          	xor	a5,s9,s11
    1d10:	47870713          	addi	a4,a4,1144 # d76aa478 <__kernel_stack+0xb75ea480>
    1d14:	9762                	add	a4,a4,s8
    1d16:	0117f7b3          	and	a5,a5,a7
    1d1a:	9736                	add	a4,a4,a3
    1d1c:	01b7c7b3          	xor	a5,a5,s11
    1d20:	97ba                	add	a5,a5,a4
  ROUND(F1, d, a, b, c, data[ 1] + 0xe8c7b756, 12);
    1d22:	4492                	lw	s1,4(sp)
  ROUND(F1, a, b, c, d, data[ 0] + 0xd76aa478, 7);
    1d24:	00779713          	slli	a4,a5,0x7
    1d28:	83e5                	srli	a5,a5,0x19
    1d2a:	8fd9                	or	a5,a5,a4
    1d2c:	e8c7b737          	lui	a4,0xe8c7b
    1d30:	97c6                	add	a5,a5,a7
  ROUND(F1, d, a, b, c, data[ 1] + 0xe8c7b756, 12);
    1d32:	0198c6b3          	xor	a3,a7,s9
    1d36:	75670713          	addi	a4,a4,1878 # e8c7b756 <__kernel_stack+0xc8bbb75e>
    1d3a:	9726                	add	a4,a4,s1
    1d3c:	8efd                	and	a3,a3,a5
    1d3e:	976e                	add	a4,a4,s11
    1d40:	0196c6b3          	xor	a3,a3,s9
    1d44:	96ba                	add	a3,a3,a4
  ROUND(F1, c, d, a, b, data[ 2] + 0x242070db, 17);
    1d46:	4322                	lw	t1,8(sp)
  ROUND(F1, d, a, b, c, data[ 1] + 0xe8c7b756, 12);
    1d48:	00c69713          	slli	a4,a3,0xc
    1d4c:	82d1                	srli	a3,a3,0x14
    1d4e:	8ed9                	or	a3,a3,a4
    1d50:	24207737          	lui	a4,0x24207
    1d54:	96be                	add	a3,a3,a5
  ROUND(F1, c, d, a, b, data[ 2] + 0x242070db, 17);
    1d56:	00f8c633          	xor	a2,a7,a5
    1d5a:	0db70713          	addi	a4,a4,219 # 242070db <__kernel_stack+0x41470e3>
    1d5e:	971a                	add	a4,a4,t1
    1d60:	8e75                	and	a2,a2,a3
    1d62:	9766                	add	a4,a4,s9
    1d64:	01164633          	xor	a2,a2,a7
    1d68:	963a                	add	a2,a2,a4
  ROUND(F1, b, c, d, a, data[ 3] + 0xc1bdceee, 22);
    1d6a:	49b2                	lw	s3,12(sp)
  ROUND(F1, c, d, a, b, data[ 2] + 0x242070db, 17);
    1d6c:	00f65713          	srli	a4,a2,0xf
    1d70:	0646                	slli	a2,a2,0x11
    1d72:	8e59                	or	a2,a2,a4
    1d74:	c1bdd5b7          	lui	a1,0xc1bdd
    1d78:	9636                	add	a2,a2,a3
  ROUND(F1, b, c, d, a, data[ 3] + 0xc1bdceee, 22);
    1d7a:	00d7c733          	xor	a4,a5,a3
    1d7e:	eee58593          	addi	a1,a1,-274 # c1bdceee <__kernel_stack+0xa1b1cef6>
    1d82:	95ce                	add	a1,a1,s3
    1d84:	8f71                	and	a4,a4,a2
    1d86:	95c6                	add	a1,a1,a7
    1d88:	8f3d                	xor	a4,a4,a5
    1d8a:	972e                	add	a4,a4,a1
  ROUND(F1, a, b, c, d, data[ 4] + 0xf57c0faf, 7);
    1d8c:	4ec2                	lw	t4,16(sp)
  ROUND(F1, b, c, d, a, data[ 3] + 0xc1bdceee, 22);
    1d8e:	00a75593          	srli	a1,a4,0xa
    1d92:	075a                	slli	a4,a4,0x16
    1d94:	8f4d                	or	a4,a4,a1
    1d96:	f57c1537          	lui	a0,0xf57c1
    1d9a:	9732                	add	a4,a4,a2
  ROUND(F1, a, b, c, d, data[ 4] + 0xf57c0faf, 7);
    1d9c:	00c6c5b3          	xor	a1,a3,a2
    1da0:	faf50513          	addi	a0,a0,-81 # f57c0faf <__kernel_stack+0xd5700fb7>
    1da4:	8df9                	and	a1,a1,a4
    1da6:	9576                	add	a0,a0,t4
    1da8:	953e                	add	a0,a0,a5
    1daa:	00d5c7b3          	xor	a5,a1,a3
    1dae:	97aa                	add	a5,a5,a0
  ROUND(F1, d, a, b, c, data[ 5] + 0x4787c62a, 12);
    1db0:	4ad2                	lw	s5,20(sp)
  ROUND(F1, a, b, c, d, data[ 4] + 0xf57c0faf, 7);
    1db2:	00779593          	slli	a1,a5,0x7
    1db6:	83e5                	srli	a5,a5,0x19
    1db8:	8fcd                	or	a5,a5,a1
    1dba:	4787c537          	lui	a0,0x4787c
    1dbe:	97ba                	add	a5,a5,a4
  ROUND(F1, d, a, b, c, data[ 5] + 0x4787c62a, 12);
    1dc0:	00e645b3          	xor	a1,a2,a4
    1dc4:	62a50513          	addi	a0,a0,1578 # 4787c62a <__kernel_stack+0x277bc632>
    1dc8:	8dfd                	and	a1,a1,a5
    1dca:	9556                	add	a0,a0,s5
    1dcc:	9536                	add	a0,a0,a3
    1dce:	00c5c6b3          	xor	a3,a1,a2
    1dd2:	96aa                	add	a3,a3,a0
  ROUND(F1, c, d, a, b, data[ 6] + 0xa8304613, 17);
    1dd4:	4fe2                	lw	t6,24(sp)
  ROUND(F1, d, a, b, c, data[ 5] + 0x4787c62a, 12);
    1dd6:	00c69593          	slli	a1,a3,0xc
    1dda:	82d1                	srli	a3,a3,0x14
    1ddc:	8ecd                	or	a3,a3,a1
    1dde:	a8304537          	lui	a0,0xa8304
    1de2:	96be                	add	a3,a3,a5
  ROUND(F1, c, d, a, b, data[ 6] + 0xa8304613, 17);
    1de4:	00f745b3          	xor	a1,a4,a5
    1de8:	61350513          	addi	a0,a0,1555 # a8304613 <__kernel_stack+0x8824461b>
    1dec:	8df5                	and	a1,a1,a3
    1dee:	957e                	add	a0,a0,t6
    1df0:	9532                	add	a0,a0,a2
    1df2:	00e5c633          	xor	a2,a1,a4
    1df6:	962a                	add	a2,a2,a0
  ROUND(F1, b, c, d, a, data[ 7] + 0xfd469501, 22);
    1df8:	4bf2                	lw	s7,28(sp)
  ROUND(F1, c, d, a, b, data[ 6] + 0xa8304613, 17);
    1dfa:	00f65593          	srli	a1,a2,0xf
    1dfe:	0646                	slli	a2,a2,0x11
    1e00:	8e4d                	or	a2,a2,a1
    1e02:	fd469537          	lui	a0,0xfd469
    1e06:	9636                	add	a2,a2,a3
  ROUND(F1, b, c, d, a, data[ 7] + 0xfd469501, 22);
    1e08:	00d7c5b3          	xor	a1,a5,a3
    1e0c:	50150513          	addi	a0,a0,1281 # fd469501 <__kernel_stack+0xdd3a9509>
    1e10:	8df1                	and	a1,a1,a2
    1e12:	955e                	add	a0,a0,s7
    1e14:	953a                	add	a0,a0,a4
    1e16:	00f5c733          	xor	a4,a1,a5
    1e1a:	972a                	add	a4,a4,a0
  ROUND(F1, a, b, c, d, data[ 8] + 0x698098d8, 7);
    1e1c:	5382                	lw	t2,32(sp)
  ROUND(F1, b, c, d, a, data[ 7] + 0xfd469501, 22);
    1e1e:	00a75593          	srli	a1,a4,0xa
    1e22:	075a                	slli	a4,a4,0x16
    1e24:	8f4d                	or	a4,a4,a1
    1e26:	6980a537          	lui	a0,0x6980a
    1e2a:	9732                	add	a4,a4,a2
  ROUND(F1, a, b, c, d, data[ 8] + 0x698098d8, 7);
    1e2c:	00c6c5b3          	xor	a1,a3,a2
    1e30:	8d850513          	addi	a0,a0,-1832 # 698098d8 <__kernel_stack+0x497498e0>
    1e34:	8df9                	and	a1,a1,a4
    1e36:	951e                	add	a0,a0,t2
    1e38:	953e                	add	a0,a0,a5
    1e3a:	00d5c7b3          	xor	a5,a1,a3
    1e3e:	97aa                	add	a5,a5,a0
    1e40:	00779593          	slli	a1,a5,0x7
  ROUND(F1, d, a, b, c, data[ 9] + 0x8b44f7af, 12);
    1e44:	5512                	lw	a0,36(sp)
  ROUND(F1, a, b, c, d, data[ 8] + 0x698098d8, 7);
    1e46:	83e5                	srli	a5,a5,0x19
    1e48:	8fcd                	or	a5,a5,a1
    1e4a:	8b44f837          	lui	a6,0x8b44f
    1e4e:	97ba                	add	a5,a5,a4
  ROUND(F1, d, a, b, c, data[ 9] + 0x8b44f7af, 12);
    1e50:	00e645b3          	xor	a1,a2,a4
    1e54:	7af80813          	addi	a6,a6,1967 # 8b44f7af <__kernel_stack+0x6b38f7b7>
    1e58:	8dfd                	and	a1,a1,a5
    1e5a:	982a                	add	a6,a6,a0
    1e5c:	9836                	add	a6,a6,a3
    1e5e:	00c5c6b3          	xor	a3,a1,a2
    1e62:	96c2                	add	a3,a3,a6
  ROUND(F1, c, d, a, b, data[10] + 0xffff5bb1, 17);
    1e64:	5922                	lw	s2,40(sp)
  ROUND(F1, d, a, b, c, data[ 9] + 0x8b44f7af, 12);
    1e66:	00c69593          	slli	a1,a3,0xc
    1e6a:	82d1                	srli	a3,a3,0x14
    1e6c:	8ecd                	or	a3,a3,a1
    1e6e:	7859                	lui	a6,0xffff6
    1e70:	96be                	add	a3,a3,a5
  ROUND(F1, c, d, a, b, data[10] + 0xffff5bb1, 17);
    1e72:	00f745b3          	xor	a1,a4,a5
    1e76:	bb180813          	addi	a6,a6,-1103 # ffff5bb1 <__kernel_stack+0xdff35bb9>
    1e7a:	8df5                	and	a1,a1,a3
    1e7c:	984a                	add	a6,a6,s2
    1e7e:	9832                	add	a6,a6,a2
    1e80:	00e5c633          	xor	a2,a1,a4
    1e84:	9642                	add	a2,a2,a6
  ROUND(F1, b, c, d, a, data[11] + 0x895cd7be, 22);
    1e86:	5e32                	lw	t3,44(sp)
  ROUND(F1, c, d, a, b, data[10] + 0xffff5bb1, 17);
    1e88:	00f65593          	srli	a1,a2,0xf
    1e8c:	0646                	slli	a2,a2,0x11
    1e8e:	8e4d                	or	a2,a2,a1
    1e90:	895cd837          	lui	a6,0x895cd
    1e94:	9636                	add	a2,a2,a3
  ROUND(F1, b, c, d, a, data[11] + 0x895cd7be, 22);
    1e96:	00d7c5b3          	xor	a1,a5,a3
    1e9a:	7be80813          	addi	a6,a6,1982 # 895cd7be <__kernel_stack+0x6950d7c6>
    1e9e:	8df1                	and	a1,a1,a2
    1ea0:	9872                	add	a6,a6,t3
    1ea2:	983a                	add	a6,a6,a4
    1ea4:	00f5c733          	xor	a4,a1,a5
    1ea8:	9742                	add	a4,a4,a6
  ROUND(F1, a, b, c, d, data[12] + 0x6b901122, 7);
    1eaa:	5a42                	lw	s4,48(sp)
  ROUND(F1, b, c, d, a, data[11] + 0x895cd7be, 22);
    1eac:	00a75593          	srli	a1,a4,0xa
    1eb0:	075a                	slli	a4,a4,0x16
    1eb2:	8f4d                	or	a4,a4,a1
    1eb4:	6b901837          	lui	a6,0x6b901
    1eb8:	9732                	add	a4,a4,a2
  ROUND(F1, a, b, c, d, data[12] + 0x6b901122, 7);
    1eba:	00c6c5b3          	xor	a1,a3,a2
    1ebe:	12280813          	addi	a6,a6,290 # 6b901122 <__kernel_stack+0x4b84112a>
    1ec2:	8df9                	and	a1,a1,a4
    1ec4:	9852                	add	a6,a6,s4
    1ec6:	983e                	add	a6,a6,a5
    1ec8:	00d5c7b3          	xor	a5,a1,a3
    1ecc:	97c2                	add	a5,a5,a6
  ROUND(F1, d, a, b, c, data[13] + 0xfd987193, 12);
    1ece:	5f52                	lw	t5,52(sp)
  ROUND(F1, a, b, c, d, data[12] + 0x6b901122, 7);
    1ed0:	00779593          	slli	a1,a5,0x7
    1ed4:	83e5                	srli	a5,a5,0x19
    1ed6:	8fcd                	or	a5,a5,a1
    1ed8:	fd987837          	lui	a6,0xfd987
    1edc:	97ba                	add	a5,a5,a4
  ROUND(F1, d, a, b, c, data[13] + 0xfd987193, 12);
    1ede:	00e645b3          	xor	a1,a2,a4
    1ee2:	19380813          	addi	a6,a6,403 # fd987193 <__kernel_stack+0xdd8c719b>
    1ee6:	8dfd                	and	a1,a1,a5
    1ee8:	987a                	add	a6,a6,t5
    1eea:	9836                	add	a6,a6,a3
    1eec:	00c5c6b3          	xor	a3,a1,a2
    1ef0:	96c2                	add	a3,a3,a6
  ROUND(F1, c, d, a, b, data[14] + 0xa679438e, 17);
    1ef2:	5b62                	lw	s6,56(sp)
  ROUND(F1, d, a, b, c, data[13] + 0xfd987193, 12);
    1ef4:	00c69593          	slli	a1,a3,0xc
    1ef8:	82d1                	srli	a3,a3,0x14
    1efa:	8ecd                	or	a3,a3,a1
    1efc:	a6794837          	lui	a6,0xa6794
    1f00:	96be                	add	a3,a3,a5
  ROUND(F1, c, d, a, b, data[14] + 0xa679438e, 17);
    1f02:	00f745b3          	xor	a1,a4,a5
    1f06:	38e80813          	addi	a6,a6,910 # a679438e <__kernel_stack+0x866d4396>
    1f0a:	8df5                	and	a1,a1,a3
    1f0c:	985a                	add	a6,a6,s6
    1f0e:	9832                	add	a6,a6,a2
    1f10:	00e5c633          	xor	a2,a1,a4
    1f14:	9642                	add	a2,a2,a6
  ROUND(F1, b, c, d, a, data[15] + 0x49b40821, 22);
    1f16:	52f2                	lw	t0,60(sp)
  ROUND(F1, c, d, a, b, data[14] + 0xa679438e, 17);
    1f18:	00f65593          	srli	a1,a2,0xf
    1f1c:	0646                	slli	a2,a2,0x11
    1f1e:	8e4d                	or	a2,a2,a1
    1f20:	49b41837          	lui	a6,0x49b41
    1f24:	9636                	add	a2,a2,a3
  ROUND(F1, b, c, d, a, data[15] + 0x49b40821, 22);
    1f26:	00d7c5b3          	xor	a1,a5,a3
    1f2a:	82180813          	addi	a6,a6,-2015 # 49b40821 <__kernel_stack+0x29a80829>
    1f2e:	8df1                	and	a1,a1,a2
    1f30:	9816                	add	a6,a6,t0
    1f32:	983a                	add	a6,a6,a4
    1f34:	00f5c733          	xor	a4,a1,a5
    1f38:	9742                	add	a4,a4,a6
    1f3a:	00a75593          	srli	a1,a4,0xa
    1f3e:	075a                	slli	a4,a4,0x16
    1f40:	8f4d                	or	a4,a4,a1
    1f42:	9732                	add	a4,a4,a2

  ROUND(F2, a, b, c, d, data[ 1] + 0xf61e2562, 5);
    1f44:	f61e2837          	lui	a6,0xf61e2
    1f48:	00e645b3          	xor	a1,a2,a4
    1f4c:	56280813          	addi	a6,a6,1378 # f61e2562 <__kernel_stack+0xd612256a>
    1f50:	8df5                	and	a1,a1,a3
    1f52:	9826                	add	a6,a6,s1
    1f54:	983e                	add	a6,a6,a5
    1f56:	00c5c7b3          	xor	a5,a1,a2
    1f5a:	97c2                	add	a5,a5,a6
    1f5c:	00579593          	slli	a1,a5,0x5
    1f60:	83ed                	srli	a5,a5,0x1b
    1f62:	8fcd                	or	a5,a5,a1
    1f64:	97ba                	add	a5,a5,a4
  ROUND(F2, d, a, b, c, data[ 6] + 0xc040b340, 9);
    1f66:	c040b837          	lui	a6,0xc040b
    1f6a:	00f745b3          	xor	a1,a4,a5
    1f6e:	34080813          	addi	a6,a6,832 # c040b340 <__kernel_stack+0xa034b348>
    1f72:	8df1                	and	a1,a1,a2
    1f74:	987e                	add	a6,a6,t6
    1f76:	9836                	add	a6,a6,a3
    1f78:	00e5c6b3          	xor	a3,a1,a4
    1f7c:	96c2                	add	a3,a3,a6
    1f7e:	00969593          	slli	a1,a3,0x9
    1f82:	82dd                	srli	a3,a3,0x17
    1f84:	8ecd                	or	a3,a3,a1
    1f86:	96be                	add	a3,a3,a5
  ROUND(F2, c, d, a, b, data[11] + 0x265e5a51, 14);
    1f88:	265e6837          	lui	a6,0x265e6
    1f8c:	00d7c5b3          	xor	a1,a5,a3
    1f90:	a5180813          	addi	a6,a6,-1455 # 265e5a51 <__kernel_stack+0x6525a59>
    1f94:	8df9                	and	a1,a1,a4
    1f96:	9872                	add	a6,a6,t3
    1f98:	9832                	add	a6,a6,a2
    1f9a:	00f5c633          	xor	a2,a1,a5
    1f9e:	9642                	add	a2,a2,a6
    1fa0:	00e61593          	slli	a1,a2,0xe
    1fa4:	8249                	srli	a2,a2,0x12
    1fa6:	8e4d                	or	a2,a2,a1
    1fa8:	9636                	add	a2,a2,a3
  ROUND(F2, b, c, d, a, data[ 0] + 0xe9b6c7aa, 20);
    1faa:	e9b6c837          	lui	a6,0xe9b6c
    1fae:	00c6c5b3          	xor	a1,a3,a2
    1fb2:	7aa80813          	addi	a6,a6,1962 # e9b6c7aa <__kernel_stack+0xc9aac7b2>
    1fb6:	8dfd                	and	a1,a1,a5
    1fb8:	9862                	add	a6,a6,s8
    1fba:	983a                	add	a6,a6,a4
    1fbc:	00d5c733          	xor	a4,a1,a3
    1fc0:	9742                	add	a4,a4,a6
    1fc2:	00c75593          	srli	a1,a4,0xc
    1fc6:	0752                	slli	a4,a4,0x14
    1fc8:	8f4d                	or	a4,a4,a1
    1fca:	9732                	add	a4,a4,a2
  ROUND(F2, a, b, c, d, data[ 5] + 0xd62f105d, 5);
    1fcc:	d62f1837          	lui	a6,0xd62f1
    1fd0:	00e645b3          	xor	a1,a2,a4
    1fd4:	05d80813          	addi	a6,a6,93 # d62f105d <__kernel_stack+0xb6231065>
    1fd8:	8df5                	and	a1,a1,a3
    1fda:	9856                	add	a6,a6,s5
    1fdc:	983e                	add	a6,a6,a5
    1fde:	00c5c7b3          	xor	a5,a1,a2
    1fe2:	97c2                	add	a5,a5,a6
    1fe4:	00579593          	slli	a1,a5,0x5
    1fe8:	83ed                	srli	a5,a5,0x1b
    1fea:	8fcd                	or	a5,a5,a1
    1fec:	97ba                	add	a5,a5,a4
  ROUND(F2, d, a, b, c, data[10] + 0x02441453, 9);
    1fee:	02441837          	lui	a6,0x2441
    1ff2:	00f745b3          	xor	a1,a4,a5
    1ff6:	45380813          	addi	a6,a6,1107 # 2441453 <_global_impure_ptr+0x243b44b>
    1ffa:	8df1                	and	a1,a1,a2
    1ffc:	984a                	add	a6,a6,s2
    1ffe:	9836                	add	a6,a6,a3
    2000:	00e5c6b3          	xor	a3,a1,a4
    2004:	96c2                	add	a3,a3,a6
    2006:	00969593          	slli	a1,a3,0x9
    200a:	82dd                	srli	a3,a3,0x17
    200c:	8ecd                	or	a3,a3,a1
    200e:	96be                	add	a3,a3,a5
  ROUND(F2, c, d, a, b, data[15] + 0xd8a1e681, 14);
    2010:	d8a1e837          	lui	a6,0xd8a1e
    2014:	00d7c5b3          	xor	a1,a5,a3
    2018:	68180813          	addi	a6,a6,1665 # d8a1e681 <__kernel_stack+0xb895e689>
    201c:	8df9                	and	a1,a1,a4
    201e:	9816                	add	a6,a6,t0
    2020:	9832                	add	a6,a6,a2
    2022:	00f5c633          	xor	a2,a1,a5
    2026:	9642                	add	a2,a2,a6
    2028:	00e61593          	slli	a1,a2,0xe
    202c:	8249                	srli	a2,a2,0x12
    202e:	8e4d                	or	a2,a2,a1
    2030:	9636                	add	a2,a2,a3
  ROUND(F2, b, c, d, a, data[ 4] + 0xe7d3fbc8, 20);
    2032:	e7d40837          	lui	a6,0xe7d40
    2036:	00c6c5b3          	xor	a1,a3,a2
    203a:	bc880813          	addi	a6,a6,-1080 # e7d3fbc8 <__kernel_stack+0xc7c7fbd0>
    203e:	8dfd                	and	a1,a1,a5
    2040:	9876                	add	a6,a6,t4
    2042:	983a                	add	a6,a6,a4
    2044:	00d5c733          	xor	a4,a1,a3
    2048:	9742                	add	a4,a4,a6
    204a:	00c75593          	srli	a1,a4,0xc
    204e:	0752                	slli	a4,a4,0x14
    2050:	8f4d                	or	a4,a4,a1
    2052:	9732                	add	a4,a4,a2
  ROUND(F2, a, b, c, d, data[ 9] + 0x21e1cde6, 5);
    2054:	21e1d837          	lui	a6,0x21e1d
    2058:	00e645b3          	xor	a1,a2,a4
    205c:	de680813          	addi	a6,a6,-538 # 21e1cde6 <__kernel_stack+0x1d5cdee>
    2060:	8df5                	and	a1,a1,a3
    2062:	982a                	add	a6,a6,a0
    2064:	983e                	add	a6,a6,a5
    2066:	00c5c7b3          	xor	a5,a1,a2
    206a:	97c2                	add	a5,a5,a6
    206c:	00579593          	slli	a1,a5,0x5
    2070:	83ed                	srli	a5,a5,0x1b
    2072:	8fcd                	or	a5,a5,a1
    2074:	97ba                	add	a5,a5,a4
  ROUND(F2, d, a, b, c, data[14] + 0xc33707d6, 9);
    2076:	c3370837          	lui	a6,0xc3370
    207a:	00f745b3          	xor	a1,a4,a5
    207e:	7d680813          	addi	a6,a6,2006 # c33707d6 <__kernel_stack+0xa32b07de>
    2082:	8df1                	and	a1,a1,a2
    2084:	985a                	add	a6,a6,s6
    2086:	9836                	add	a6,a6,a3
    2088:	00e5c6b3          	xor	a3,a1,a4
    208c:	96c2                	add	a3,a3,a6
    208e:	00969593          	slli	a1,a3,0x9
    2092:	82dd                	srli	a3,a3,0x17
    2094:	8ecd                	or	a3,a3,a1
    2096:	96be                	add	a3,a3,a5
  ROUND(F2, c, d, a, b, data[ 3] + 0xf4d50d87, 14);
    2098:	f4d51837          	lui	a6,0xf4d51
    209c:	00d7c5b3          	xor	a1,a5,a3
    20a0:	d8780813          	addi	a6,a6,-633 # f4d50d87 <__kernel_stack+0xd4c90d8f>
    20a4:	8df9                	and	a1,a1,a4
    20a6:	984e                	add	a6,a6,s3
    20a8:	9832                	add	a6,a6,a2
    20aa:	00f5c633          	xor	a2,a1,a5
    20ae:	9642                	add	a2,a2,a6
    20b0:	00e61593          	slli	a1,a2,0xe
    20b4:	8249                	srli	a2,a2,0x12
    20b6:	8e4d                	or	a2,a2,a1
    20b8:	9636                	add	a2,a2,a3
  ROUND(F2, b, c, d, a, data[ 8] + 0x455a14ed, 20);
    20ba:	455a1837          	lui	a6,0x455a1
    20be:	00c6c5b3          	xor	a1,a3,a2
    20c2:	4ed80813          	addi	a6,a6,1261 # 455a14ed <__kernel_stack+0x254e14f5>
    20c6:	8dfd                	and	a1,a1,a5
    20c8:	981e                	add	a6,a6,t2
    20ca:	983a                	add	a6,a6,a4
    20cc:	00d5c733          	xor	a4,a1,a3
    20d0:	9742                	add	a4,a4,a6
    20d2:	00c75593          	srli	a1,a4,0xc
    20d6:	0752                	slli	a4,a4,0x14
    20d8:	8f4d                	or	a4,a4,a1
    20da:	9732                	add	a4,a4,a2
  ROUND(F2, a, b, c, d, data[13] + 0xa9e3e905, 5);
    20dc:	a9e3f837          	lui	a6,0xa9e3f
    20e0:	00e645b3          	xor	a1,a2,a4
    20e4:	90580813          	addi	a6,a6,-1787 # a9e3e905 <__kernel_stack+0x89d7e90d>
    20e8:	8df5                	and	a1,a1,a3
    20ea:	987a                	add	a6,a6,t5
    20ec:	983e                	add	a6,a6,a5
    20ee:	00c5c7b3          	xor	a5,a1,a2
    20f2:	97c2                	add	a5,a5,a6
    20f4:	00579593          	slli	a1,a5,0x5
    20f8:	83ed                	srli	a5,a5,0x1b
    20fa:	8fcd                	or	a5,a5,a1
    20fc:	97ba                	add	a5,a5,a4
  ROUND(F2, d, a, b, c, data[ 2] + 0xfcefa3f8, 9);
    20fe:	fcefa837          	lui	a6,0xfcefa
    2102:	00f745b3          	xor	a1,a4,a5
    2106:	3f880813          	addi	a6,a6,1016 # fcefa3f8 <__kernel_stack+0xdce3a400>
    210a:	8df1                	and	a1,a1,a2
    210c:	981a                	add	a6,a6,t1
    210e:	9836                	add	a6,a6,a3
    2110:	00e5c6b3          	xor	a3,a1,a4
    2114:	96c2                	add	a3,a3,a6
    2116:	00969593          	slli	a1,a3,0x9
    211a:	82dd                	srli	a3,a3,0x17
    211c:	8ecd                	or	a3,a3,a1
    211e:	96be                	add	a3,a3,a5
  ROUND(F2, c, d, a, b, data[ 7] + 0x676f02d9, 14);
    2120:	676f0837          	lui	a6,0x676f0
    2124:	00d7c5b3          	xor	a1,a5,a3
    2128:	2d980813          	addi	a6,a6,729 # 676f02d9 <__kernel_stack+0x476302e1>
    212c:	985e                	add	a6,a6,s7
    212e:	8df9                	and	a1,a1,a4
    2130:	9642                	add	a2,a2,a6
    2132:	8dbd                	xor	a1,a1,a5
    2134:	95b2                	add	a1,a1,a2
    2136:	00e59613          	slli	a2,a1,0xe
    213a:	81c9                	srli	a1,a1,0x12
    213c:	8dd1                	or	a1,a1,a2
    213e:	95b6                	add	a1,a1,a3
  ROUND(F2, b, c, d, a, data[12] + 0x8d2a4c8a, 20);
    2140:	8d2a5d37          	lui	s10,0x8d2a5
    2144:	00b6c633          	xor	a2,a3,a1
    2148:	c8ad0d13          	addi	s10,s10,-886 # 8d2a4c8a <__kernel_stack+0x6d1e4c92>
    214c:	9d52                	add	s10,s10,s4
    214e:	00f67833          	and	a6,a2,a5
    2152:	00d84833          	xor	a6,a6,a3
    2156:	976a                	add	a4,a4,s10
    2158:	9742                	add	a4,a4,a6
    215a:	00c75d13          	srli	s10,a4,0xc
    215e:	fffa4837          	lui	a6,0xfffa4
    2162:	0752                	slli	a4,a4,0x14
    2164:	01a76733          	or	a4,a4,s10
    2168:	94280813          	addi	a6,a6,-1726 # fffa3942 <__kernel_stack+0xdfee394a>
    216c:	972e                	add	a4,a4,a1

  ROUND(F3, a, b, c, d, data[ 5] + 0xfffa3942, 4);
    216e:	9856                	add	a6,a6,s5
    2170:	983e                	add	a6,a6,a5
    2172:	00e647b3          	xor	a5,a2,a4
    2176:	97c2                	add	a5,a5,a6
    2178:	00479613          	slli	a2,a5,0x4
    217c:	8771f837          	lui	a6,0x8771f
    2180:	83f1                	srli	a5,a5,0x1c
    2182:	8fd1                	or	a5,a5,a2
    2184:	68180813          	addi	a6,a6,1665 # 8771f681 <__kernel_stack+0x6765f689>
    2188:	97ba                	add	a5,a5,a4
  ROUND(F3, d, a, b, c, data[ 8] + 0x8771f681, 11);
    218a:	00e5c633          	xor	a2,a1,a4
    218e:	981e                	add	a6,a6,t2
    2190:	9836                	add	a6,a6,a3
    2192:	00f646b3          	xor	a3,a2,a5
    2196:	96c2                	add	a3,a3,a6
    2198:	00b69613          	slli	a2,a3,0xb
    219c:	6d9d6837          	lui	a6,0x6d9d6
    21a0:	82d5                	srli	a3,a3,0x15
    21a2:	8ed1                	or	a3,a3,a2
    21a4:	12280813          	addi	a6,a6,290 # 6d9d6122 <__kernel_stack+0x4d91612a>
    21a8:	96be                	add	a3,a3,a5
  ROUND(F3, c, d, a, b, data[11] + 0x6d9d6122, 16);
    21aa:	9872                	add	a6,a6,t3
    21ac:	00f74633          	xor	a2,a4,a5
    21b0:	95c2                	add	a1,a1,a6
    21b2:	8e35                	xor	a2,a2,a3
    21b4:	962e                	add	a2,a2,a1
    21b6:	01061593          	slli	a1,a2,0x10
    21ba:	fde54837          	lui	a6,0xfde54
    21be:	8241                	srli	a2,a2,0x10
    21c0:	8e4d                	or	a2,a2,a1
    21c2:	80c80813          	addi	a6,a6,-2036 # fde5380c <__kernel_stack+0xddd93814>
    21c6:	9636                	add	a2,a2,a3
  ROUND(F3, b, c, d, a, data[14] + 0xfde5380c, 23);
    21c8:	00d7c5b3          	xor	a1,a5,a3
    21cc:	985a                	add	a6,a6,s6
    21ce:	983a                	add	a6,a6,a4
    21d0:	00c5c733          	xor	a4,a1,a2
    21d4:	9742                	add	a4,a4,a6
    21d6:	00975593          	srli	a1,a4,0x9
    21da:	a4bef837          	lui	a6,0xa4bef
    21de:	075e                	slli	a4,a4,0x17
    21e0:	8f4d                	or	a4,a4,a1
    21e2:	a4480813          	addi	a6,a6,-1468 # a4beea44 <__kernel_stack+0x84b2ea4c>
    21e6:	9732                	add	a4,a4,a2
  ROUND(F3, a, b, c, d, data[ 1] + 0xa4beea44, 4);
    21e8:	9826                	add	a6,a6,s1
    21ea:	00c6c5b3          	xor	a1,a3,a2
    21ee:	97c2                	add	a5,a5,a6
    21f0:	8db9                	xor	a1,a1,a4
    21f2:	95be                	add	a1,a1,a5
    21f4:	00459793          	slli	a5,a1,0x4
    21f8:	4bded837          	lui	a6,0x4bded
    21fc:	81f1                	srli	a1,a1,0x1c
    21fe:	8ddd                	or	a1,a1,a5
    2200:	fa980813          	addi	a6,a6,-87 # 4bdecfa9 <__kernel_stack+0x2bd2cfb1>
    2204:	95ba                	add	a1,a1,a4
  ROUND(F3, d, a, b, c, data[ 4] + 0x4bdecfa9, 11);
    2206:	00e647b3          	xor	a5,a2,a4
    220a:	9876                	add	a6,a6,t4
    220c:	9836                	add	a6,a6,a3
    220e:	00b7c6b3          	xor	a3,a5,a1
    2212:	96c2                	add	a3,a3,a6
    2214:	00b69793          	slli	a5,a3,0xb
    2218:	f6bb5837          	lui	a6,0xf6bb5
    221c:	82d5                	srli	a3,a3,0x15
    221e:	8edd                	or	a3,a3,a5
    2220:	b6080813          	addi	a6,a6,-1184 # f6bb4b60 <__kernel_stack+0xd6af4b68>
    2224:	96ae                	add	a3,a3,a1
  ROUND(F3, c, d, a, b, data[ 7] + 0xf6bb4b60, 16);
    2226:	985e                	add	a6,a6,s7
    2228:	00b747b3          	xor	a5,a4,a1
    222c:	9642                	add	a2,a2,a6
    222e:	8fb5                	xor	a5,a5,a3
    2230:	97b2                	add	a5,a5,a2
    2232:	01079613          	slli	a2,a5,0x10
    2236:	bebfc837          	lui	a6,0xbebfc
    223a:	83c1                	srli	a5,a5,0x10
    223c:	8fd1                	or	a5,a5,a2
    223e:	c7080813          	addi	a6,a6,-912 # bebfbc70 <__kernel_stack+0x9eb3bc78>
    2242:	97b6                	add	a5,a5,a3
  ROUND(F3, b, c, d, a, data[10] + 0xbebfbc70, 23);
    2244:	984a                	add	a6,a6,s2
    2246:	00d5c633          	xor	a2,a1,a3
    224a:	9742                	add	a4,a4,a6
    224c:	8e3d                	xor	a2,a2,a5
    224e:	963a                	add	a2,a2,a4
    2250:	00965713          	srli	a4,a2,0x9
    2254:	289b8837          	lui	a6,0x289b8
    2258:	065e                	slli	a2,a2,0x17
    225a:	8e59                	or	a2,a2,a4
    225c:	ec680813          	addi	a6,a6,-314 # 289b7ec6 <__kernel_stack+0x88f7ece>
    2260:	963e                	add	a2,a2,a5
  ROUND(F3, a, b, c, d, data[13] + 0x289b7ec6, 4);
    2262:	987a                	add	a6,a6,t5
    2264:	00f6c733          	xor	a4,a3,a5
    2268:	95c2                	add	a1,a1,a6
    226a:	8f31                	xor	a4,a4,a2
    226c:	972e                	add	a4,a4,a1
    226e:	00471593          	slli	a1,a4,0x4
    2272:	eaa12837          	lui	a6,0xeaa12
    2276:	8371                	srli	a4,a4,0x1c
    2278:	8f4d                	or	a4,a4,a1
    227a:	7fa80813          	addi	a6,a6,2042 # eaa127fa <__kernel_stack+0xca952802>
    227e:	9732                	add	a4,a4,a2
  ROUND(F3, d, a, b, c, data[ 0] + 0xeaa127fa, 11);
    2280:	00c7c5b3          	xor	a1,a5,a2
    2284:	9862                	add	a6,a6,s8
    2286:	9836                	add	a6,a6,a3
    2288:	00e5c6b3          	xor	a3,a1,a4
    228c:	96c2                	add	a3,a3,a6
    228e:	00b69593          	slli	a1,a3,0xb
    2292:	d4ef3837          	lui	a6,0xd4ef3
    2296:	82d5                	srli	a3,a3,0x15
    2298:	8ecd                	or	a3,a3,a1
    229a:	08580813          	addi	a6,a6,133 # d4ef3085 <__kernel_stack+0xb4e3308d>
    229e:	96ba                	add	a3,a3,a4
  ROUND(F3, c, d, a, b, data[ 3] + 0xd4ef3085, 16);
    22a0:	984e                	add	a6,a6,s3
    22a2:	00e645b3          	xor	a1,a2,a4
    22a6:	97c2                	add	a5,a5,a6
    22a8:	8db5                	xor	a1,a1,a3
    22aa:	95be                	add	a1,a1,a5
    22ac:	01059793          	slli	a5,a1,0x10
    22b0:	04882837          	lui	a6,0x4882
    22b4:	81c1                	srli	a1,a1,0x10
    22b6:	8ddd                	or	a1,a1,a5
    22b8:	d0580813          	addi	a6,a6,-763 # 4881d05 <_global_impure_ptr+0x487bcfd>
    22bc:	95b6                	add	a1,a1,a3
  ROUND(F3, b, c, d, a, data[ 6] + 0x04881d05, 23);
    22be:	987e                	add	a6,a6,t6
    22c0:	00d747b3          	xor	a5,a4,a3
    22c4:	9642                	add	a2,a2,a6
    22c6:	8fad                	xor	a5,a5,a1
    22c8:	97b2                	add	a5,a5,a2
    22ca:	0097d613          	srli	a2,a5,0x9
    22ce:	d9d4d837          	lui	a6,0xd9d4d
    22d2:	07de                	slli	a5,a5,0x17
    22d4:	8fd1                	or	a5,a5,a2
    22d6:	03980813          	addi	a6,a6,57 # d9d4d039 <__kernel_stack+0xb9c8d041>
    22da:	97ae                	add	a5,a5,a1
  ROUND(F3, a, b, c, d, data[ 9] + 0xd9d4d039, 4);
    22dc:	00b6c633          	xor	a2,a3,a1
    22e0:	982a                	add	a6,a6,a0
    22e2:	983a                	add	a6,a6,a4
    22e4:	00f64733          	xor	a4,a2,a5
    22e8:	9742                	add	a4,a4,a6
    22ea:	00471613          	slli	a2,a4,0x4
    22ee:	e6dba837          	lui	a6,0xe6dba
    22f2:	8371                	srli	a4,a4,0x1c
    22f4:	8f51                	or	a4,a4,a2
    22f6:	9e580813          	addi	a6,a6,-1563 # e6db99e5 <__kernel_stack+0xc6cf99ed>
    22fa:	973e                	add	a4,a4,a5
  ROUND(F3, d, a, b, c, data[12] + 0xe6db99e5, 11);
    22fc:	9852                	add	a6,a6,s4
    22fe:	00f5c633          	xor	a2,a1,a5
    2302:	96c2                	add	a3,a3,a6
    2304:	8e39                	xor	a2,a2,a4
    2306:	9636                	add	a2,a2,a3
    2308:	00b61693          	slli	a3,a2,0xb
    230c:	1fa28837          	lui	a6,0x1fa28
    2310:	8255                	srli	a2,a2,0x15
    2312:	8e55                	or	a2,a2,a3
    2314:	cf880813          	addi	a6,a6,-776 # 1fa27cf8 <_global_impure_ptr+0x1fa21cf0>
    2318:	963a                	add	a2,a2,a4
  ROUND(F3, c, d, a, b, data[15] + 0x1fa27cf8, 16);
    231a:	9816                	add	a6,a6,t0
    231c:	00e7c6b3          	xor	a3,a5,a4
    2320:	95c2                	add	a1,a1,a6
    2322:	8eb1                	xor	a3,a3,a2
    2324:	96ae                	add	a3,a3,a1
    2326:	01069593          	slli	a1,a3,0x10
    232a:	c4ac5837          	lui	a6,0xc4ac5
    232e:	82c1                	srli	a3,a3,0x10
    2330:	8ecd                	or	a3,a3,a1
    2332:	66580813          	addi	a6,a6,1637 # c4ac5665 <__kernel_stack+0xa4a0566d>
    2336:	96b2                	add	a3,a3,a2
  ROUND(F3, b, c, d, a, data[ 2] + 0xc4ac5665, 23);
    2338:	00c745b3          	xor	a1,a4,a2
    233c:	981a                	add	a6,a6,t1
    233e:	983e                	add	a6,a6,a5
    2340:	00d5c7b3          	xor	a5,a1,a3
    2344:	97c2                	add	a5,a5,a6
    2346:	0097d593          	srli	a1,a5,0x9
    234a:	07de                	slli	a5,a5,0x17
    234c:	8fcd                	or	a5,a5,a1
    234e:	f4292837          	lui	a6,0xf4292
    2352:	97b6                	add	a5,a5,a3

  ROUND(F4, a, b, c, d, data[ 0] + 0xf4292244, 6);
    2354:	fff64593          	not	a1,a2
    2358:	24480813          	addi	a6,a6,580 # f4292244 <__kernel_stack+0xd41d224c>
    235c:	9c42                	add	s8,s8,a6
    235e:	8ddd                	or	a1,a1,a5
    2360:	9762                	add	a4,a4,s8
    2362:	8db5                	xor	a1,a1,a3
    2364:	95ba                	add	a1,a1,a4
    2366:	00659713          	slli	a4,a1,0x6
    236a:	81e9                	srli	a1,a1,0x1a
    236c:	8dd9                	or	a1,a1,a4
    236e:	432b0837          	lui	a6,0x432b0
    2372:	95be                	add	a1,a1,a5
  ROUND(F4, d, a, b, c, data[ 7] + 0x432aff97, 10);
    2374:	fff6c713          	not	a4,a3
    2378:	f9780813          	addi	a6,a6,-105 # 432aff97 <__kernel_stack+0x231eff9f>
    237c:	9bc2                	add	s7,s7,a6
    237e:	8f4d                	or	a4,a4,a1
    2380:	965e                	add	a2,a2,s7
    2382:	8f3d                	xor	a4,a4,a5
    2384:	9732                	add	a4,a4,a2
    2386:	00a71613          	slli	a2,a4,0xa
    238a:	8359                	srli	a4,a4,0x16
    238c:	8f51                	or	a4,a4,a2
    238e:	ab942837          	lui	a6,0xab942
    2392:	972e                	add	a4,a4,a1
  ROUND(F4, c, d, a, b, data[14] + 0xab9423a7, 15);
    2394:	fff7c613          	not	a2,a5
    2398:	3a780813          	addi	a6,a6,935 # ab9423a7 <__kernel_stack+0x8b8823af>
    239c:	8e59                	or	a2,a2,a4
    239e:	9b42                	add	s6,s6,a6
    23a0:	9b36                	add	s6,s6,a3
    23a2:	00b646b3          	xor	a3,a2,a1
    23a6:	96da                	add	a3,a3,s6
    23a8:	00f69613          	slli	a2,a3,0xf
    23ac:	82c5                	srli	a3,a3,0x11
    23ae:	8ed1                	or	a3,a3,a2
    23b0:	fc93a837          	lui	a6,0xfc93a
    23b4:	96ba                	add	a3,a3,a4
  ROUND(F4, b, c, d, a, data[ 5] + 0xfc93a039, 21);
    23b6:	fff5c613          	not	a2,a1
    23ba:	03980813          	addi	a6,a6,57 # fc93a039 <__kernel_stack+0xdc87a041>
    23be:	9ac2                	add	s5,s5,a6
    23c0:	8e55                	or	a2,a2,a3
    23c2:	97d6                	add	a5,a5,s5
    23c4:	8e39                	xor	a2,a2,a4
    23c6:	963e                	add	a2,a2,a5
    23c8:	00b65793          	srli	a5,a2,0xb
    23cc:	0656                	slli	a2,a2,0x15
    23ce:	8e5d                	or	a2,a2,a5
    23d0:	655b6837          	lui	a6,0x655b6
    23d4:	9636                	add	a2,a2,a3
  ROUND(F4, a, b, c, d, data[12] + 0x655b59c3, 6);
    23d6:	fff74793          	not	a5,a4
    23da:	9c380813          	addi	a6,a6,-1597 # 655b59c3 <__kernel_stack+0x454f59cb>
    23de:	9a42                	add	s4,s4,a6
    23e0:	8fd1                	or	a5,a5,a2
    23e2:	95d2                	add	a1,a1,s4
    23e4:	8fb5                	xor	a5,a5,a3
    23e6:	97ae                	add	a5,a5,a1
    23e8:	00679593          	slli	a1,a5,0x6
    23ec:	83e9                	srli	a5,a5,0x1a
    23ee:	8fcd                	or	a5,a5,a1
    23f0:	8f0cd837          	lui	a6,0x8f0cd
    23f4:	97b2                	add	a5,a5,a2
  ROUND(F4, d, a, b, c, data[ 3] + 0x8f0ccc92, 10);
    23f6:	fff6c593          	not	a1,a3
    23fa:	c9280813          	addi	a6,a6,-878 # 8f0ccc92 <__kernel_stack+0x6f00cc9a>
    23fe:	8ddd                	or	a1,a1,a5
    2400:	99c2                	add	s3,s3,a6
    2402:	99ba                	add	s3,s3,a4
    2404:	00c5c733          	xor	a4,a1,a2
    2408:	974e                	add	a4,a4,s3
    240a:	00a71593          	slli	a1,a4,0xa
    240e:	8359                	srli	a4,a4,0x16
    2410:	8f4d                	or	a4,a4,a1
    2412:	ffeff837          	lui	a6,0xffeff
    2416:	973e                	add	a4,a4,a5
  ROUND(F4, c, d, a, b, data[10] + 0xffeff47d, 15);
    2418:	fff64593          	not	a1,a2
    241c:	47d80813          	addi	a6,a6,1149 # ffeff47d <__kernel_stack+0xdfe3f485>
    2420:	8dd9                	or	a1,a1,a4
    2422:	9942                	add	s2,s2,a6
    2424:	9936                	add	s2,s2,a3
    2426:	00f5c6b3          	xor	a3,a1,a5
    242a:	96ca                	add	a3,a3,s2
    242c:	00f69593          	slli	a1,a3,0xf
    2430:	82c5                	srli	a3,a3,0x11
    2432:	8ecd                	or	a3,a3,a1
    2434:	85846837          	lui	a6,0x85846
    2438:	96ba                	add	a3,a3,a4
  ROUND(F4, b, c, d, a, data[ 1] + 0x85845dd1, 21);
    243a:	fff7c593          	not	a1,a5
    243e:	dd180813          	addi	a6,a6,-559 # 85845dd1 <__kernel_stack+0x65785dd9>
    2442:	8dd5                	or	a1,a1,a3
    2444:	94c2                	add	s1,s1,a6
    2446:	94b2                	add	s1,s1,a2
    2448:	00e5c633          	xor	a2,a1,a4
    244c:	9626                	add	a2,a2,s1
    244e:	00b65593          	srli	a1,a2,0xb
    2452:	0656                	slli	a2,a2,0x15
    2454:	8e4d                	or	a2,a2,a1
    2456:	6fa88837          	lui	a6,0x6fa88
    245a:	9636                	add	a2,a2,a3
  ROUND(F4, a, b, c, d, data[ 8] + 0x6fa87e4f, 6);
    245c:	fff74593          	not	a1,a4
    2460:	e4f80813          	addi	a6,a6,-433 # 6fa87e4f <__kernel_stack+0x4f9c7e57>
    2464:	981e                	add	a6,a6,t2
    2466:	00c5e3b3          	or	t2,a1,a2
    246a:	97c2                	add	a5,a5,a6
    246c:	00d3c3b3          	xor	t2,t2,a3
    2470:	93be                	add	t2,t2,a5
    2472:	00639793          	slli	a5,t2,0x6
    2476:	01a3d393          	srli	t2,t2,0x1a
    247a:	00f3e3b3          	or	t2,t2,a5
    247e:	fe2ce7b7          	lui	a5,0xfe2ce
    2482:	93b2                	add	t2,t2,a2
  ROUND(F4, d, a, b, c, data[15] + 0xfe2ce6e0, 10);
    2484:	fff6c813          	not	a6,a3
    2488:	6e078793          	addi	a5,a5,1760 # fe2ce6e0 <__kernel_stack+0xde20e6e8>
    248c:	92be                	add	t0,t0,a5
    248e:	00786833          	or	a6,a6,t2
    2492:	9716                	add	a4,a4,t0
    2494:	00c84833          	xor	a6,a6,a2
    2498:	983a                	add	a6,a6,a4
    249a:	00a81793          	slli	a5,a6,0xa
    249e:	01685813          	srli	a6,a6,0x16
    24a2:	00f86833          	or	a6,a6,a5
    24a6:	a30147b7          	lui	a5,0xa3014
    24aa:	981e                	add	a6,a6,t2
  ROUND(F4, c, d, a, b, data[ 6] + 0xa3014314, 15);
    24ac:	fff64593          	not	a1,a2
    24b0:	31478793          	addi	a5,a5,788 # a3014314 <__kernel_stack+0x82f5431c>
    24b4:	9fbe                	add	t6,t6,a5
    24b6:	0105e5b3          	or	a1,a1,a6
    24ba:	96fe                	add	a3,a3,t6
    24bc:	0075c5b3          	xor	a1,a1,t2
    24c0:	95b6                	add	a1,a1,a3
    24c2:	00f59793          	slli	a5,a1,0xf
    24c6:	81c5                	srli	a1,a1,0x11
    24c8:	8ddd                	or	a1,a1,a5
    24ca:	4e081737          	lui	a4,0x4e081
    24ce:	95c2                	add	a1,a1,a6
  ROUND(F4, b, c, d, a, data[13] + 0x4e0811a1, 21);
    24d0:	fff3c793          	not	a5,t2
    24d4:	1a170713          	addi	a4,a4,417 # 4e0811a1 <__kernel_stack+0x2dfc11a9>
    24d8:	8fcd                	or	a5,a5,a1
    24da:	9f3a                	add	t5,t5,a4
    24dc:	9f32                	add	t5,t5,a2
    24de:	0107c633          	xor	a2,a5,a6
    24e2:	967a                	add	a2,a2,t5
    24e4:	00b65793          	srli	a5,a2,0xb
    24e8:	0656                	slli	a2,a2,0x15
    24ea:	8e5d                	or	a2,a2,a5
    24ec:	f7538737          	lui	a4,0xf7538
    24f0:	962e                	add	a2,a2,a1
  ROUND(F4, a, b, c, d, data[ 4] + 0xf7537e82, 6);
    24f2:	fff84793          	not	a5,a6
    24f6:	e8270713          	addi	a4,a4,-382 # f7537e82 <__kernel_stack+0xd7477e8a>
    24fa:	9eba                	add	t4,t4,a4
    24fc:	8fd1                	or	a5,a5,a2
    24fe:	8fad                	xor	a5,a5,a1
    2500:	93f6                	add	t2,t2,t4
    2502:	979e                	add	a5,a5,t2
    2504:	00679713          	slli	a4,a5,0x6
    2508:	83e9                	srli	a5,a5,0x1a
    250a:	8fd9                	or	a5,a5,a4
    250c:	bd3af6b7          	lui	a3,0xbd3af
    2510:	97b2                	add	a5,a5,a2
  ROUND(F4, d, a, b, c, data[11] + 0xbd3af235, 10);
    2512:	fff5c713          	not	a4,a1
    2516:	23568693          	addi	a3,a3,565 # bd3af235 <__kernel_stack+0x9d2ef23d>
    251a:	9e36                	add	t3,t3,a3
    251c:	8f5d                	or	a4,a4,a5
    251e:	9872                	add	a6,a6,t3
    2520:	8f31                	xor	a4,a4,a2
    2522:	9742                	add	a4,a4,a6
    2524:	00a71693          	slli	a3,a4,0xa
    2528:	8359                	srli	a4,a4,0x16
    252a:	8f55                	or	a4,a4,a3
    252c:	2ad7d837          	lui	a6,0x2ad7d
    2530:	973e                	add	a4,a4,a5
  ROUND(F4, c, d, a, b, data[ 2] + 0x2ad7d2bb, 15);
    2532:	fff64693          	not	a3,a2
    2536:	2bb80813          	addi	a6,a6,699 # 2ad7d2bb <__kernel_stack+0xacbd2c3>
    253a:	9342                	add	t1,t1,a6
    253c:	8ed9                	or	a3,a3,a4
    253e:	959a                	add	a1,a1,t1
    2540:	8ebd                	xor	a3,a3,a5
    2542:	96ae                	add	a3,a3,a1
    2544:	00f69593          	slli	a1,a3,0xf
    2548:	82c5                	srli	a3,a3,0x11
    254a:	8ecd                	or	a3,a3,a1
    254c:	eb86d837          	lui	a6,0xeb86d
    2550:	96ba                	add	a3,a3,a4
  ROUND(F4, b, c, d, a, data[ 9] + 0xeb86d391, 21);
    2552:	fff7c593          	not	a1,a5
    2556:	39180813          	addi	a6,a6,913 # eb86d391 <__kernel_stack+0xcb7ad399>
    255a:	8dd5                	or	a1,a1,a3
    255c:	9542                	add	a0,a0,a6
    255e:	9532                	add	a0,a0,a2
    2560:	00e5c633          	xor	a2,a1,a4
    2564:	962a                	add	a2,a2,a0
    2566:	00b65593          	srli	a1,a2,0xb
    256a:	0656                	slli	a2,a2,0x15
    256c:	8e4d                	or	a2,a2,a1

  digest[0] += a;
    256e:	400c                	lw	a1,0(s0)
  digest[1] += b;
    2570:	98b6                	add	a7,a7,a3
  digest[2] += c;
  digest[3] += d;
    2572:	976e                	add	a4,a4,s11
  digest[2] += c;
    2574:	96e6                	add	a3,a3,s9
  digest[0] += a;
    2576:	97ae                	add	a5,a5,a1
  digest[1] += b;
    2578:	98b2                	add	a7,a7,a2
}
    257a:	50f6                	lw	ra,124(sp)
  digest[0] += a;
    257c:	c01c                	sw	a5,0(s0)
  digest[1] += b;
    257e:	01142223          	sw	a7,4(s0)
  digest[2] += c;
    2582:	c414                	sw	a3,8(s0)
  digest[3] += d;
    2584:	c458                	sw	a4,12(s0)
}
    2586:	5466                	lw	s0,120(sp)
    2588:	54d6                	lw	s1,116(sp)
    258a:	5946                	lw	s2,112(sp)
    258c:	59b6                	lw	s3,108(sp)
    258e:	5a26                	lw	s4,104(sp)
    2590:	5a96                	lw	s5,100(sp)
    2592:	5b06                	lw	s6,96(sp)
    2594:	4bf6                	lw	s7,92(sp)
    2596:	4c66                	lw	s8,88(sp)
    2598:	4cd6                	lw	s9,84(sp)
    259a:	4d46                	lw	s10,80(sp)
    259c:	4db6                	lw	s11,76(sp)
    259e:	6109                	addi	sp,sp,128
    25a0:	8082                	ret

000025a2 <initialise_benchmark>:


void
initialise_benchmark (void)
{
}
    25a2:	8082                	ret

000025a4 <benchmark>:


int
benchmark (void)
{
  memcpy (digest, digest_ref, _MD5_DIGEST_LENGTH * sizeof (digest[0]));
    25a4:	6799                	lui	a5,0x6
    25a6:	dd478793          	addi	a5,a5,-556 # 5dd4 <digest_ref>
    25aa:	0007a803          	lw	a6,0(a5)
    25ae:	43d0                	lw	a2,4(a5)
    25b0:	4794                	lw	a3,8(a5)
    25b2:	47d8                	lw	a4,12(a5)
{
    25b4:	1141                	addi	sp,sp,-16
  memcpy (digest, digest_ref, _MD5_DIGEST_LENGTH * sizeof (digest[0]));
    25b6:	20001537          	lui	a0,0x20001
{
    25ba:	c606                	sw	ra,12(sp)
  memcpy (digest, digest_ref, _MD5_DIGEST_LENGTH * sizeof (digest[0]));
    25bc:	8f450793          	addi	a5,a0,-1804 # 200008f4 <digest>
  _nettle_md5_compress(digest, input);
    25c0:	200005b7          	lui	a1,0x20000
    25c4:	8f450513          	addi	a0,a0,-1804
    25c8:	02458593          	addi	a1,a1,36 # 20000024 <input>
  memcpy (digest, digest_ref, _MD5_DIGEST_LENGTH * sizeof (digest[0]));
    25cc:	0107a023          	sw	a6,0(a5)
    25d0:	c3d0                	sw	a2,4(a5)
    25d2:	c794                	sw	a3,8(a5)
    25d4:	c7d8                	sw	a4,12(a5)
  _nettle_md5_compress(digest, input);
    25d6:	efaff0ef          	jal	ra,1cd0 <_nettle_md5_compress>
  return 0;
}
    25da:	40b2                	lw	ra,12(sp)
    25dc:	4501                	li	a0,0
    25de:	0141                	addi	sp,sp,16
    25e0:	8082                	ret

000025e2 <verify_benchmark>:

int verify_benchmark(int unused) {
    25e2:	7179                	addi	sp,sp,-48
    25e4:	d422                	sw	s0,40(sp)
    25e6:	20001437          	lui	s0,0x20001
    25ea:	ce4e                	sw	s3,28(sp)
    25ec:	8f440993          	addi	s3,s0,-1804 # 200008f4 <digest>
    25f0:	d226                	sw	s1,36(sp)
    25f2:	d04a                	sw	s2,32(sp)
    25f4:	d606                	sw	ra,44(sp)
    25f6:	8f440413          	addi	s0,s0,-1804
    25fa:	01098913          	addi	s2,s3,16
    25fe:	6499                	lui	s1,0x6
  
int i;
  // #include <stdio.h>
   for (i=0; i<_MD5_DIGEST_LENGTH; i++)
     printf("%x\n", digest[i]);
    2600:	400c                	lw	a1,0(s0)
    2602:	db848513          	addi	a0,s1,-584 # 5db8 <pow10.0+0x50>
   for (i=0; i<_MD5_DIGEST_LENGTH; i++)
    2606:	0411                	addi	s0,s0,4
     printf("%x\n", digest[i]);
    2608:	a80ff0ef          	jal	ra,1888 <printf>
   for (i=0; i<_MD5_DIGEST_LENGTH; i++)
    260c:	ff241ae3          	bne	s0,s2,2600 <verify_benchmark+0x1e>
  uint32_t expected[_MD5_DIGEST_LENGTH] =
    2610:	6799                	lui	a5,0x6
    2612:	dd478793          	addi	a5,a5,-556 # 5dd4 <digest_ref>
    2616:	4bcc                	lw	a1,20(a5)
    2618:	4f90                	lw	a2,24(a5)
    261a:	4fd4                	lw	a3,28(a5)
    {0xddaf8815, 0x2149cb8f, 0x9cdd75fd, 0x14a43e27};

  return ! memcmp (digest, expected, _MD5_DIGEST_LENGTH * sizeof (digest[0]));
    261c:	0009a703          	lw	a4,0(s3)
  uint32_t expected[_MD5_DIGEST_LENGTH] =
    2620:	4b9c                	lw	a5,16(a5)
    2622:	c22e                	sw	a1,4(sp)
    2624:	c432                	sw	a2,8(sp)
    2626:	c636                	sw	a3,12(sp)
  return ! memcmp (digest, expected, _MD5_DIGEST_LENGTH * sizeof (digest[0]));
    2628:	00f70c63          	beq	a4,a5,2640 <verify_benchmark+0x5e>
    262c:	4505                	li	a0,1
}
    262e:	50b2                	lw	ra,44(sp)
    2630:	5422                	lw	s0,40(sp)
    2632:	5492                	lw	s1,36(sp)
    2634:	5902                	lw	s2,32(sp)
    2636:	49f2                	lw	s3,28(sp)
    2638:	00154513          	xori	a0,a0,1
    263c:	6145                	addi	sp,sp,48
    263e:	8082                	ret
  return ! memcmp (digest, expected, _MD5_DIGEST_LENGTH * sizeof (digest[0]));
    2640:	0049a703          	lw	a4,4(s3)
    2644:	feb714e3          	bne	a4,a1,262c <verify_benchmark+0x4a>
    2648:	0089a703          	lw	a4,8(s3)
    264c:	fec710e3          	bne	a4,a2,262c <verify_benchmark+0x4a>
    2650:	00c9a703          	lw	a4,12(s3)
    2654:	4501                	li	a0,0
    2656:	fcd71be3          	bne	a4,a3,262c <verify_benchmark+0x4a>
    265a:	bfd1                	j	262e <verify_benchmark+0x4c>

0000265c <main>:
{
//--------------------------------------------------------
  // setup uart
  //--------------------------------------------------------
  t_ck_uart_cfig   uart_cfig;
  uart_cfig.baudrate = BAUD;       // any integer value is allowed
    265c:	6795                	lui	a5,0x5
{
    265e:	7179                	addi	sp,sp,-48
  uart_cfig.baudrate = BAUD;       // any integer value is allowed
    2660:	b0078793          	addi	a5,a5,-1280 # 4b00 <__subdf3+0x6c6>
{
    2664:	d422                	sw	s0,40(sp)
  uart_cfig.baudrate = BAUD;       // any integer value is allowed
    2666:	c43e                	sw	a5,8(sp)
  uart_cfig.parity = PARITY_NONE;     // PARITY_NONE / PARITY_ODD / PARITY_EVEN
  uart_cfig.stopbit = STOPBIT_1;      // STOPBIT_1 / STOPBIT_2
  uart_cfig.wordsize = WORDSIZE_8;    // from WORDSIZE_5 to WORDSIZE_8
  uart_cfig.txmode = ENABLE;          // ENABLE or DISABLE
  // open UART device with id = 0 (UART0)
  ck_uart_open(&uart0, 0);
    2668:	20000437          	lui	s0,0x20000
  uart_cfig.wordsize = WORDSIZE_8;    // from WORDSIZE_5 to WORDSIZE_8
    266c:	478d                	li	a5,3
    266e:	ca3e                	sw	a5,20(sp)
  ck_uart_open(&uart0, 0);
    2670:	4581                	li	a1,0
  uart_cfig.txmode = ENABLE;          // ENABLE or DISABLE
    2672:	4785                	li	a5,1
  ck_uart_open(&uart0, 0);
    2674:	00440513          	addi	a0,s0,4 # 20000004 <uart0>
{
    2678:	d606                	sw	ra,44(sp)
  uart_cfig.txmode = ENABLE;          // ENABLE or DISABLE
    267a:	ce3e                	sw	a5,28(sp)
  uart_cfig.parity = PARITY_NONE;     // PARITY_NONE / PARITY_ODD / PARITY_EVEN
    267c:	c802                	sw	zero,16(sp)
  uart_cfig.stopbit = STOPBIT_1;      // STOPBIT_1 / STOPBIT_2
    267e:	c602                	sw	zero,12(sp)
  ck_uart_open(&uart0, 0);
    2680:	c64ff0ef          	jal	ra,1ae4 <ck_uart_open>
  // initialize uart using uart_cfig structure
  ck_uart_init(&uart0, &uart_cfig);
    2684:	002c                	addi	a1,sp,8
    2686:	00440513          	addi	a0,s0,4
    268a:	c6eff0ef          	jal	ra,1af8 <ck_uart_init>

benchmark();
    268e:	3f19                	jal	25a4 <benchmark>
verify_benchmark(1);
    2690:	4505                	li	a0,1
    2692:	3f81                	jal	25e2 <verify_benchmark>
printf("nettle_md5 TEST Finsh!\n");
    2694:	6519                	lui	a0,0x6
    2696:	dbc50513          	addi	a0,a0,-580 # 5dbc <pow10.0+0x54>
    269a:	9acff0ef          	jal	ra,1846 <puts>

return 0;
    }
    269e:	50b2                	lw	ra,44(sp)
    26a0:	5422                	lw	s0,40(sp)
    26a2:	4501                	li	a0,0
    26a4:	6145                	addi	sp,sp,48
    26a6:	8082                	ret

000026a8 <__udivdi3>:
    26a8:	88aa                	mv	a7,a0
    26aa:	87ae                	mv	a5,a1
    26ac:	8832                	mv	a6,a2
    26ae:	8536                	mv	a0,a3
    26b0:	8346                	mv	t1,a7
    26b2:	20069663          	bnez	a3,28be <__udivdi3+0x216>
    26b6:	00003697          	auipc	a3,0x3
    26ba:	7b668693          	addi	a3,a3,1974 # 5e6c <__clz_tab>
    26be:	0ac5ff63          	bgeu	a1,a2,277c <__udivdi3+0xd4>
    26c2:	6741                	lui	a4,0x10
    26c4:	0ae67563          	bgeu	a2,a4,276e <__udivdi3+0xc6>
    26c8:	0ff00713          	li	a4,255
    26cc:	00c73733          	sltu	a4,a4,a2
    26d0:	070e                	slli	a4,a4,0x3
    26d2:	00e65533          	srl	a0,a2,a4
    26d6:	96aa                	add	a3,a3,a0
    26d8:	0006c683          	lbu	a3,0(a3)
    26dc:	02000513          	li	a0,32
    26e0:	9736                	add	a4,a4,a3
    26e2:	40e506b3          	sub	a3,a0,a4
    26e6:	00e50b63          	beq	a0,a4,26fc <__udivdi3+0x54>
    26ea:	00d795b3          	sll	a1,a5,a3
    26ee:	00e8d733          	srl	a4,a7,a4
    26f2:	00d61833          	sll	a6,a2,a3
    26f6:	8dd9                	or	a1,a1,a4
    26f8:	00d89333          	sll	t1,a7,a3
    26fc:	01085893          	srli	a7,a6,0x10
    2700:	0315d6b3          	divu	a3,a1,a7
    2704:	01081613          	slli	a2,a6,0x10
    2708:	8241                	srli	a2,a2,0x10
    270a:	01035793          	srli	a5,t1,0x10
    270e:	0315f733          	remu	a4,a1,a7
    2712:	8536                	mv	a0,a3
    2714:	02d605b3          	mul	a1,a2,a3
    2718:	0742                	slli	a4,a4,0x10
    271a:	8fd9                	or	a5,a5,a4
    271c:	00b7fc63          	bgeu	a5,a1,2734 <__udivdi3+0x8c>
    2720:	97c2                	add	a5,a5,a6
    2722:	fff68513          	addi	a0,a3,-1
    2726:	0107e763          	bltu	a5,a6,2734 <__udivdi3+0x8c>
    272a:	00b7f563          	bgeu	a5,a1,2734 <__udivdi3+0x8c>
    272e:	ffe68513          	addi	a0,a3,-2
    2732:	97c2                	add	a5,a5,a6
    2734:	8f8d                	sub	a5,a5,a1
    2736:	0317f733          	remu	a4,a5,a7
    273a:	0342                	slli	t1,t1,0x10
    273c:	01035313          	srli	t1,t1,0x10
    2740:	0317d7b3          	divu	a5,a5,a7
    2744:	0742                	slli	a4,a4,0x10
    2746:	00676333          	or	t1,a4,t1
    274a:	02f606b3          	mul	a3,a2,a5
    274e:	863e                	mv	a2,a5
    2750:	00d37b63          	bgeu	t1,a3,2766 <__udivdi3+0xbe>
    2754:	9342                	add	t1,t1,a6
    2756:	fff78613          	addi	a2,a5,-1
    275a:	01036663          	bltu	t1,a6,2766 <__udivdi3+0xbe>
    275e:	00d37463          	bgeu	t1,a3,2766 <__udivdi3+0xbe>
    2762:	ffe78613          	addi	a2,a5,-2
    2766:	0542                	slli	a0,a0,0x10
    2768:	8d51                	or	a0,a0,a2
    276a:	4581                	li	a1,0
    276c:	a85d                	j	2822 <__udivdi3+0x17a>
    276e:	01000537          	lui	a0,0x1000
    2772:	4741                	li	a4,16
    2774:	f4a66fe3          	bltu	a2,a0,26d2 <__udivdi3+0x2a>
    2778:	4761                	li	a4,24
    277a:	bfa1                	j	26d2 <__udivdi3+0x2a>
    277c:	e601                	bnez	a2,2784 <__udivdi3+0xdc>
    277e:	4705                	li	a4,1
    2780:	02c75833          	divu	a6,a4,a2
    2784:	6741                	lui	a4,0x10
    2786:	08e87f63          	bgeu	a6,a4,2824 <__udivdi3+0x17c>
    278a:	0ff00713          	li	a4,255
    278e:	01077363          	bgeu	a4,a6,2794 <__udivdi3+0xec>
    2792:	4521                	li	a0,8
    2794:	00a85733          	srl	a4,a6,a0
    2798:	96ba                	add	a3,a3,a4
    279a:	0006c703          	lbu	a4,0(a3)
    279e:	02000613          	li	a2,32
    27a2:	972a                	add	a4,a4,a0
    27a4:	40e606b3          	sub	a3,a2,a4
    27a8:	08e61563          	bne	a2,a4,2832 <__udivdi3+0x18a>
    27ac:	410787b3          	sub	a5,a5,a6
    27b0:	4585                	li	a1,1
    27b2:	01085893          	srli	a7,a6,0x10
    27b6:	01081613          	slli	a2,a6,0x10
    27ba:	8241                	srli	a2,a2,0x10
    27bc:	01035713          	srli	a4,t1,0x10
    27c0:	0317f6b3          	remu	a3,a5,a7
    27c4:	0317d7b3          	divu	a5,a5,a7
    27c8:	06c2                	slli	a3,a3,0x10
    27ca:	8f55                	or	a4,a4,a3
    27cc:	02f60e33          	mul	t3,a2,a5
    27d0:	853e                	mv	a0,a5
    27d2:	01c77c63          	bgeu	a4,t3,27ea <__udivdi3+0x142>
    27d6:	9742                	add	a4,a4,a6
    27d8:	fff78513          	addi	a0,a5,-1
    27dc:	01076763          	bltu	a4,a6,27ea <__udivdi3+0x142>
    27e0:	01c77563          	bgeu	a4,t3,27ea <__udivdi3+0x142>
    27e4:	ffe78513          	addi	a0,a5,-2
    27e8:	9742                	add	a4,a4,a6
    27ea:	41c70733          	sub	a4,a4,t3
    27ee:	031777b3          	remu	a5,a4,a7
    27f2:	0342                	slli	t1,t1,0x10
    27f4:	01035313          	srli	t1,t1,0x10
    27f8:	03175733          	divu	a4,a4,a7
    27fc:	07c2                	slli	a5,a5,0x10
    27fe:	0067e333          	or	t1,a5,t1
    2802:	02e606b3          	mul	a3,a2,a4
    2806:	863a                	mv	a2,a4
    2808:	00d37b63          	bgeu	t1,a3,281e <__udivdi3+0x176>
    280c:	9342                	add	t1,t1,a6
    280e:	fff70613          	addi	a2,a4,-1 # ffff <_global_impure_ptr+0x9ff7>
    2812:	01036663          	bltu	t1,a6,281e <__udivdi3+0x176>
    2816:	00d37463          	bgeu	t1,a3,281e <__udivdi3+0x176>
    281a:	ffe70613          	addi	a2,a4,-2
    281e:	0542                	slli	a0,a0,0x10
    2820:	8d51                	or	a0,a0,a2
    2822:	8082                	ret
    2824:	01000737          	lui	a4,0x1000
    2828:	4541                	li	a0,16
    282a:	f6e865e3          	bltu	a6,a4,2794 <__udivdi3+0xec>
    282e:	4561                	li	a0,24
    2830:	b795                	j	2794 <__udivdi3+0xec>
    2832:	00d81833          	sll	a6,a6,a3
    2836:	00e7d533          	srl	a0,a5,a4
    283a:	00d89333          	sll	t1,a7,a3
    283e:	00d797b3          	sll	a5,a5,a3
    2842:	00e8d733          	srl	a4,a7,a4
    2846:	01085893          	srli	a7,a6,0x10
    284a:	00f76633          	or	a2,a4,a5
    284e:	03157733          	remu	a4,a0,a7
    2852:	01081793          	slli	a5,a6,0x10
    2856:	83c1                	srli	a5,a5,0x10
    2858:	01065593          	srli	a1,a2,0x10
    285c:	03155533          	divu	a0,a0,a7
    2860:	0742                	slli	a4,a4,0x10
    2862:	8f4d                	or	a4,a4,a1
    2864:	02a786b3          	mul	a3,a5,a0
    2868:	85aa                	mv	a1,a0
    286a:	00d77c63          	bgeu	a4,a3,2882 <__udivdi3+0x1da>
    286e:	9742                	add	a4,a4,a6
    2870:	fff50593          	addi	a1,a0,-1 # ffffff <_global_impure_ptr+0xff9ff7>
    2874:	01076763          	bltu	a4,a6,2882 <__udivdi3+0x1da>
    2878:	00d77563          	bgeu	a4,a3,2882 <__udivdi3+0x1da>
    287c:	ffe50593          	addi	a1,a0,-2
    2880:	9742                	add	a4,a4,a6
    2882:	40d706b3          	sub	a3,a4,a3
    2886:	0316f733          	remu	a4,a3,a7
    288a:	0642                	slli	a2,a2,0x10
    288c:	8241                	srli	a2,a2,0x10
    288e:	0316d6b3          	divu	a3,a3,a7
    2892:	0742                	slli	a4,a4,0x10
    2894:	02d78533          	mul	a0,a5,a3
    2898:	00c767b3          	or	a5,a4,a2
    289c:	8736                	mv	a4,a3
    289e:	00a7fc63          	bgeu	a5,a0,28b6 <__udivdi3+0x20e>
    28a2:	97c2                	add	a5,a5,a6
    28a4:	fff68713          	addi	a4,a3,-1
    28a8:	0107e763          	bltu	a5,a6,28b6 <__udivdi3+0x20e>
    28ac:	00a7f563          	bgeu	a5,a0,28b6 <__udivdi3+0x20e>
    28b0:	ffe68713          	addi	a4,a3,-2
    28b4:	97c2                	add	a5,a5,a6
    28b6:	05c2                	slli	a1,a1,0x10
    28b8:	8f89                	sub	a5,a5,a0
    28ba:	8dd9                	or	a1,a1,a4
    28bc:	bddd                	j	27b2 <__udivdi3+0x10a>
    28be:	14d5e263          	bltu	a1,a3,2a02 <__udivdi3+0x35a>
    28c2:	6741                	lui	a4,0x10
    28c4:	02e6ff63          	bgeu	a3,a4,2902 <__udivdi3+0x25a>
    28c8:	0ff00713          	li	a4,255
    28cc:	00d735b3          	sltu	a1,a4,a3
    28d0:	058e                	slli	a1,a1,0x3
    28d2:	00b6d533          	srl	a0,a3,a1
    28d6:	00003717          	auipc	a4,0x3
    28da:	59670713          	addi	a4,a4,1430 # 5e6c <__clz_tab>
    28de:	972a                	add	a4,a4,a0
    28e0:	00074703          	lbu	a4,0(a4)
    28e4:	02000513          	li	a0,32
    28e8:	972e                	add	a4,a4,a1
    28ea:	40e505b3          	sub	a1,a0,a4
    28ee:	02e51163          	bne	a0,a4,2910 <__udivdi3+0x268>
    28f2:	4505                	li	a0,1
    28f4:	f2f6e7e3          	bltu	a3,a5,2822 <__udivdi3+0x17a>
    28f8:	00c8b533          	sltu	a0,a7,a2
    28fc:	00154513          	xori	a0,a0,1
    2900:	b70d                	j	2822 <__udivdi3+0x17a>
    2902:	01000737          	lui	a4,0x1000
    2906:	45c1                	li	a1,16
    2908:	fce6e5e3          	bltu	a3,a4,28d2 <__udivdi3+0x22a>
    290c:	45e1                	li	a1,24
    290e:	b7d1                	j	28d2 <__udivdi3+0x22a>
    2910:	00e65833          	srl	a6,a2,a4
    2914:	00b696b3          	sll	a3,a3,a1
    2918:	00d86833          	or	a6,a6,a3
    291c:	00e7d333          	srl	t1,a5,a4
    2920:	01085e93          	srli	t4,a6,0x10
    2924:	03d376b3          	remu	a3,t1,t4
    2928:	00b797b3          	sll	a5,a5,a1
    292c:	00e8d733          	srl	a4,a7,a4
    2930:	00b61e33          	sll	t3,a2,a1
    2934:	00f76633          	or	a2,a4,a5
    2938:	01081793          	slli	a5,a6,0x10
    293c:	83c1                	srli	a5,a5,0x10
    293e:	01065713          	srli	a4,a2,0x10
    2942:	03d35333          	divu	t1,t1,t4
    2946:	06c2                	slli	a3,a3,0x10
    2948:	8f55                	or	a4,a4,a3
    294a:	02678f33          	mul	t5,a5,t1
    294e:	851a                	mv	a0,t1
    2950:	01e77c63          	bgeu	a4,t5,2968 <__udivdi3+0x2c0>
    2954:	9742                	add	a4,a4,a6
    2956:	fff30513          	addi	a0,t1,-1
    295a:	01076763          	bltu	a4,a6,2968 <__udivdi3+0x2c0>
    295e:	01e77563          	bgeu	a4,t5,2968 <__udivdi3+0x2c0>
    2962:	ffe30513          	addi	a0,t1,-2
    2966:	9742                	add	a4,a4,a6
    2968:	41e70733          	sub	a4,a4,t5
    296c:	03d776b3          	remu	a3,a4,t4
    2970:	03d75733          	divu	a4,a4,t4
    2974:	06c2                	slli	a3,a3,0x10
    2976:	02e78333          	mul	t1,a5,a4
    297a:	01061793          	slli	a5,a2,0x10
    297e:	83c1                	srli	a5,a5,0x10
    2980:	8fd5                	or	a5,a5,a3
    2982:	863a                	mv	a2,a4
    2984:	0067fc63          	bgeu	a5,t1,299c <__udivdi3+0x2f4>
    2988:	97c2                	add	a5,a5,a6
    298a:	fff70613          	addi	a2,a4,-1 # ffffff <_global_impure_ptr+0xff9ff7>
    298e:	0107e763          	bltu	a5,a6,299c <__udivdi3+0x2f4>
    2992:	0067f563          	bgeu	a5,t1,299c <__udivdi3+0x2f4>
    2996:	ffe70613          	addi	a2,a4,-2
    299a:	97c2                	add	a5,a5,a6
    299c:	0542                	slli	a0,a0,0x10
    299e:	6ec1                	lui	t4,0x10
    29a0:	8d51                	or	a0,a0,a2
    29a2:	fffe8693          	addi	a3,t4,-1 # ffff <_global_impure_ptr+0x9ff7>
    29a6:	010e5613          	srli	a2,t3,0x10
    29aa:	01055813          	srli	a6,a0,0x10
    29ae:	406787b3          	sub	a5,a5,t1
    29b2:	00d57333          	and	t1,a0,a3
    29b6:	00de76b3          	and	a3,t3,a3
    29ba:	02d30e33          	mul	t3,t1,a3
    29be:	02d806b3          	mul	a3,a6,a3
    29c2:	010e5713          	srli	a4,t3,0x10
    29c6:	02c30333          	mul	t1,t1,a2
    29ca:	9336                	add	t1,t1,a3
    29cc:	971a                	add	a4,a4,t1
    29ce:	02c80833          	mul	a6,a6,a2
    29d2:	00d77363          	bgeu	a4,a3,29d8 <__udivdi3+0x330>
    29d6:	9876                	add	a6,a6,t4
    29d8:	01075693          	srli	a3,a4,0x10
    29dc:	9836                	add	a6,a6,a3
    29de:	0307e063          	bltu	a5,a6,29fe <__udivdi3+0x356>
    29e2:	d90794e3          	bne	a5,a6,276a <__udivdi3+0xc2>
    29e6:	67c1                	lui	a5,0x10
    29e8:	17fd                	addi	a5,a5,-1
    29ea:	8f7d                	and	a4,a4,a5
    29ec:	0742                	slli	a4,a4,0x10
    29ee:	00fe7e33          	and	t3,t3,a5
    29f2:	00b898b3          	sll	a7,a7,a1
    29f6:	9772                	add	a4,a4,t3
    29f8:	4581                	li	a1,0
    29fa:	e2e8f4e3          	bgeu	a7,a4,2822 <__udivdi3+0x17a>
    29fe:	157d                	addi	a0,a0,-1
    2a00:	b3ad                	j	276a <__udivdi3+0xc2>
    2a02:	4581                	li	a1,0
    2a04:	4501                	li	a0,0
    2a06:	bd31                	j	2822 <__udivdi3+0x17a>

00002a08 <__umoddi3>:
    2a08:	832a                	mv	t1,a0
    2a0a:	8832                	mv	a6,a2
    2a0c:	87b6                	mv	a5,a3
    2a0e:	872e                	mv	a4,a1
    2a10:	1c069563          	bnez	a3,2bda <__umoddi3+0x1d2>
    2a14:	00003697          	auipc	a3,0x3
    2a18:	45868693          	addi	a3,a3,1112 # 5e6c <__clz_tab>
    2a1c:	0ac5f663          	bgeu	a1,a2,2ac8 <__umoddi3+0xc0>
    2a20:	68c1                	lui	a7,0x10
    2a22:	09167c63          	bgeu	a2,a7,2aba <__umoddi3+0xb2>
    2a26:	0ff00893          	li	a7,255
    2a2a:	00c8f363          	bgeu	a7,a2,2a30 <__umoddi3+0x28>
    2a2e:	47a1                	li	a5,8
    2a30:	00f658b3          	srl	a7,a2,a5
    2a34:	96c6                	add	a3,a3,a7
    2a36:	0006c683          	lbu	a3,0(a3)
    2a3a:	97b6                	add	a5,a5,a3
    2a3c:	02000693          	li	a3,32
    2a40:	40f688b3          	sub	a7,a3,a5
    2a44:	00f68c63          	beq	a3,a5,2a5c <__umoddi3+0x54>
    2a48:	011595b3          	sll	a1,a1,a7
    2a4c:	00f357b3          	srl	a5,t1,a5
    2a50:	01161833          	sll	a6,a2,a7
    2a54:	00b7e733          	or	a4,a5,a1
    2a58:	01131533          	sll	a0,t1,a7
    2a5c:	01085593          	srli	a1,a6,0x10
    2a60:	02b777b3          	remu	a5,a4,a1
    2a64:	01081613          	slli	a2,a6,0x10
    2a68:	8241                	srli	a2,a2,0x10
    2a6a:	01055693          	srli	a3,a0,0x10
    2a6e:	02b75733          	divu	a4,a4,a1
    2a72:	07c2                	slli	a5,a5,0x10
    2a74:	8edd                	or	a3,a3,a5
    2a76:	02e60733          	mul	a4,a2,a4
    2a7a:	00e6f863          	bgeu	a3,a4,2a8a <__umoddi3+0x82>
    2a7e:	96c2                	add	a3,a3,a6
    2a80:	0106e563          	bltu	a3,a6,2a8a <__umoddi3+0x82>
    2a84:	00e6f363          	bgeu	a3,a4,2a8a <__umoddi3+0x82>
    2a88:	96c2                	add	a3,a3,a6
    2a8a:	8e99                	sub	a3,a3,a4
    2a8c:	02b6f7b3          	remu	a5,a3,a1
    2a90:	0542                	slli	a0,a0,0x10
    2a92:	8141                	srli	a0,a0,0x10
    2a94:	02b6d6b3          	divu	a3,a3,a1
    2a98:	07c2                	slli	a5,a5,0x10
    2a9a:	8d5d                	or	a0,a0,a5
    2a9c:	02d606b3          	mul	a3,a2,a3
    2aa0:	00d57863          	bgeu	a0,a3,2ab0 <__umoddi3+0xa8>
    2aa4:	9542                	add	a0,a0,a6
    2aa6:	01056563          	bltu	a0,a6,2ab0 <__umoddi3+0xa8>
    2aaa:	00d57363          	bgeu	a0,a3,2ab0 <__umoddi3+0xa8>
    2aae:	9542                	add	a0,a0,a6
    2ab0:	8d15                	sub	a0,a0,a3
    2ab2:	01155533          	srl	a0,a0,a7
    2ab6:	4581                	li	a1,0
    2ab8:	8082                	ret
    2aba:	010008b7          	lui	a7,0x1000
    2abe:	47c1                	li	a5,16
    2ac0:	f71668e3          	bltu	a2,a7,2a30 <__umoddi3+0x28>
    2ac4:	47e1                	li	a5,24
    2ac6:	b7ad                	j	2a30 <__umoddi3+0x28>
    2ac8:	e601                	bnez	a2,2ad0 <__umoddi3+0xc8>
    2aca:	4705                	li	a4,1
    2acc:	02c75833          	divu	a6,a4,a2
    2ad0:	6741                	lui	a4,0x10
    2ad2:	08e87363          	bgeu	a6,a4,2b58 <__umoddi3+0x150>
    2ad6:	0ff00713          	li	a4,255
    2ada:	01077363          	bgeu	a4,a6,2ae0 <__umoddi3+0xd8>
    2ade:	47a1                	li	a5,8
    2ae0:	00f85733          	srl	a4,a6,a5
    2ae4:	96ba                	add	a3,a3,a4
    2ae6:	0006c603          	lbu	a2,0(a3)
    2aea:	963e                	add	a2,a2,a5
    2aec:	02000793          	li	a5,32
    2af0:	40c788b3          	sub	a7,a5,a2
    2af4:	06c79963          	bne	a5,a2,2b66 <__umoddi3+0x15e>
    2af8:	410585b3          	sub	a1,a1,a6
    2afc:	01085693          	srli	a3,a6,0x10
    2b00:	01081793          	slli	a5,a6,0x10
    2b04:	83c1                	srli	a5,a5,0x10
    2b06:	01055613          	srli	a2,a0,0x10
    2b0a:	02d5f733          	remu	a4,a1,a3
    2b0e:	02d5d5b3          	divu	a1,a1,a3
    2b12:	0742                	slli	a4,a4,0x10
    2b14:	8f51                	or	a4,a4,a2
    2b16:	02b785b3          	mul	a1,a5,a1
    2b1a:	00b77863          	bgeu	a4,a1,2b2a <__umoddi3+0x122>
    2b1e:	9742                	add	a4,a4,a6
    2b20:	01076563          	bltu	a4,a6,2b2a <__umoddi3+0x122>
    2b24:	00b77363          	bgeu	a4,a1,2b2a <__umoddi3+0x122>
    2b28:	9742                	add	a4,a4,a6
    2b2a:	40b705b3          	sub	a1,a4,a1
    2b2e:	02d5f733          	remu	a4,a1,a3
    2b32:	0542                	slli	a0,a0,0x10
    2b34:	8141                	srli	a0,a0,0x10
    2b36:	02d5d5b3          	divu	a1,a1,a3
    2b3a:	02b785b3          	mul	a1,a5,a1
    2b3e:	01071793          	slli	a5,a4,0x10
    2b42:	8d5d                	or	a0,a0,a5
    2b44:	00b57863          	bgeu	a0,a1,2b54 <__umoddi3+0x14c>
    2b48:	9542                	add	a0,a0,a6
    2b4a:	01056563          	bltu	a0,a6,2b54 <__umoddi3+0x14c>
    2b4e:	00b57363          	bgeu	a0,a1,2b54 <__umoddi3+0x14c>
    2b52:	9542                	add	a0,a0,a6
    2b54:	8d0d                	sub	a0,a0,a1
    2b56:	bfb1                	j	2ab2 <__umoddi3+0xaa>
    2b58:	01000737          	lui	a4,0x1000
    2b5c:	47c1                	li	a5,16
    2b5e:	f8e861e3          	bltu	a6,a4,2ae0 <__umoddi3+0xd8>
    2b62:	47e1                	li	a5,24
    2b64:	bfb5                	j	2ae0 <__umoddi3+0xd8>
    2b66:	01181833          	sll	a6,a6,a7
    2b6a:	00c5d6b3          	srl	a3,a1,a2
    2b6e:	01085793          	srli	a5,a6,0x10
    2b72:	02f6f733          	remu	a4,a3,a5
    2b76:	011595b3          	sll	a1,a1,a7
    2b7a:	00c35633          	srl	a2,t1,a2
    2b7e:	8e4d                	or	a2,a2,a1
    2b80:	01081593          	slli	a1,a6,0x10
    2b84:	81c1                	srli	a1,a1,0x10
    2b86:	01131533          	sll	a0,t1,a7
    2b8a:	01065313          	srli	t1,a2,0x10
    2b8e:	02f6d6b3          	divu	a3,a3,a5
    2b92:	0742                	slli	a4,a4,0x10
    2b94:	00676733          	or	a4,a4,t1
    2b98:	02d586b3          	mul	a3,a1,a3
    2b9c:	00d77863          	bgeu	a4,a3,2bac <__umoddi3+0x1a4>
    2ba0:	9742                	add	a4,a4,a6
    2ba2:	01076563          	bltu	a4,a6,2bac <__umoddi3+0x1a4>
    2ba6:	00d77363          	bgeu	a4,a3,2bac <__umoddi3+0x1a4>
    2baa:	9742                	add	a4,a4,a6
    2bac:	40d706b3          	sub	a3,a4,a3
    2bb0:	02f6f733          	remu	a4,a3,a5
    2bb4:	0642                	slli	a2,a2,0x10
    2bb6:	8241                	srli	a2,a2,0x10
    2bb8:	02f6d6b3          	divu	a3,a3,a5
    2bbc:	0742                	slli	a4,a4,0x10
    2bbe:	02d586b3          	mul	a3,a1,a3
    2bc2:	00c765b3          	or	a1,a4,a2
    2bc6:	00d5f863          	bgeu	a1,a3,2bd6 <__umoddi3+0x1ce>
    2bca:	95c2                	add	a1,a1,a6
    2bcc:	0105e563          	bltu	a1,a6,2bd6 <__umoddi3+0x1ce>
    2bd0:	00d5f363          	bgeu	a1,a3,2bd6 <__umoddi3+0x1ce>
    2bd4:	95c2                	add	a1,a1,a6
    2bd6:	8d95                	sub	a1,a1,a3
    2bd8:	b715                	j	2afc <__umoddi3+0xf4>
    2bda:	ecd5efe3          	bltu	a1,a3,2ab8 <__umoddi3+0xb0>
    2bde:	67c1                	lui	a5,0x10
    2be0:	04f6f463          	bgeu	a3,a5,2c28 <__umoddi3+0x220>
    2be4:	0ff00893          	li	a7,255
    2be8:	00d8b7b3          	sltu	a5,a7,a3
    2bec:	078e                	slli	a5,a5,0x3
    2bee:	00f6d8b3          	srl	a7,a3,a5
    2bf2:	00003817          	auipc	a6,0x3
    2bf6:	27a80813          	addi	a6,a6,634 # 5e6c <__clz_tab>
    2bfa:	9846                	add	a6,a6,a7
    2bfc:	00084883          	lbu	a7,0(a6)
    2c00:	98be                	add	a7,a7,a5
    2c02:	02000793          	li	a5,32
    2c06:	41178833          	sub	a6,a5,a7
    2c0a:	03179663          	bne	a5,a7,2c36 <__umoddi3+0x22e>
    2c0e:	00b6e463          	bltu	a3,a1,2c16 <__umoddi3+0x20e>
    2c12:	00c36963          	bltu	t1,a2,2c24 <__umoddi3+0x21c>
    2c16:	40c30533          	sub	a0,t1,a2
    2c1a:	8d95                	sub	a1,a1,a3
    2c1c:	00a33733          	sltu	a4,t1,a0
    2c20:	40e58733          	sub	a4,a1,a4
    2c24:	85ba                	mv	a1,a4
    2c26:	bd49                	j	2ab8 <__umoddi3+0xb0>
    2c28:	01000837          	lui	a6,0x1000
    2c2c:	47c1                	li	a5,16
    2c2e:	fd06e0e3          	bltu	a3,a6,2bee <__umoddi3+0x1e6>
    2c32:	47e1                	li	a5,24
    2c34:	bf6d                	j	2bee <__umoddi3+0x1e6>
    2c36:	011657b3          	srl	a5,a2,a7
    2c3a:	010696b3          	sll	a3,a3,a6
    2c3e:	00d7ee33          	or	t3,a5,a3
    2c42:	0115d733          	srl	a4,a1,a7
    2c46:	010e5f13          	srli	t5,t3,0x10
    2c4a:	01061eb3          	sll	t4,a2,a6
    2c4e:	03e77633          	remu	a2,a4,t5
    2c52:	010595b3          	sll	a1,a1,a6
    2c56:	011357b3          	srl	a5,t1,a7
    2c5a:	8fcd                	or	a5,a5,a1
    2c5c:	010e1593          	slli	a1,t3,0x10
    2c60:	81c1                	srli	a1,a1,0x10
    2c62:	01031533          	sll	a0,t1,a6
    2c66:	0107d693          	srli	a3,a5,0x10
    2c6a:	03e75733          	divu	a4,a4,t5
    2c6e:	0642                	slli	a2,a2,0x10
    2c70:	8ed1                	or	a3,a3,a2
    2c72:	02e58333          	mul	t1,a1,a4
    2c76:	863a                	mv	a2,a4
    2c78:	0066fc63          	bgeu	a3,t1,2c90 <__umoddi3+0x288>
    2c7c:	96f2                	add	a3,a3,t3
    2c7e:	fff70613          	addi	a2,a4,-1 # ffffff <_global_impure_ptr+0xff9ff7>
    2c82:	01c6e763          	bltu	a3,t3,2c90 <__umoddi3+0x288>
    2c86:	0066f563          	bgeu	a3,t1,2c90 <__umoddi3+0x288>
    2c8a:	ffe70613          	addi	a2,a4,-2
    2c8e:	96f2                	add	a3,a3,t3
    2c90:	406686b3          	sub	a3,a3,t1
    2c94:	03e6f333          	remu	t1,a3,t5
    2c98:	03e6d6b3          	divu	a3,a3,t5
    2c9c:	0342                	slli	t1,t1,0x10
    2c9e:	02d58733          	mul	a4,a1,a3
    2ca2:	01079593          	slli	a1,a5,0x10
    2ca6:	81c1                	srli	a1,a1,0x10
    2ca8:	00b365b3          	or	a1,t1,a1
    2cac:	87b6                	mv	a5,a3
    2cae:	00e5fc63          	bgeu	a1,a4,2cc6 <__umoddi3+0x2be>
    2cb2:	95f2                	add	a1,a1,t3
    2cb4:	fff68793          	addi	a5,a3,-1
    2cb8:	01c5e763          	bltu	a1,t3,2cc6 <__umoddi3+0x2be>
    2cbc:	00e5f563          	bgeu	a1,a4,2cc6 <__umoddi3+0x2be>
    2cc0:	ffe68793          	addi	a5,a3,-2
    2cc4:	95f2                	add	a1,a1,t3
    2cc6:	0642                	slli	a2,a2,0x10
    2cc8:	6f41                	lui	t5,0x10
    2cca:	8e5d                	or	a2,a2,a5
    2ccc:	ffff0693          	addi	a3,t5,-1 # ffff <_global_impure_ptr+0x9ff7>
    2cd0:	00d67333          	and	t1,a2,a3
    2cd4:	8d99                	sub	a1,a1,a4
    2cd6:	8241                	srli	a2,a2,0x10
    2cd8:	010ed713          	srli	a4,t4,0x10
    2cdc:	00def6b3          	and	a3,t4,a3
    2ce0:	02d307b3          	mul	a5,t1,a3
    2ce4:	02d606b3          	mul	a3,a2,a3
    2ce8:	02e30333          	mul	t1,t1,a4
    2cec:	02e60633          	mul	a2,a2,a4
    2cf0:	9336                	add	t1,t1,a3
    2cf2:	0107d713          	srli	a4,a5,0x10
    2cf6:	971a                	add	a4,a4,t1
    2cf8:	00d77363          	bgeu	a4,a3,2cfe <__umoddi3+0x2f6>
    2cfc:	967a                	add	a2,a2,t5
    2cfe:	01075693          	srli	a3,a4,0x10
    2d02:	96b2                	add	a3,a3,a2
    2d04:	6641                	lui	a2,0x10
    2d06:	167d                	addi	a2,a2,-1
    2d08:	8f71                	and	a4,a4,a2
    2d0a:	0742                	slli	a4,a4,0x10
    2d0c:	8ff1                	and	a5,a5,a2
    2d0e:	97ba                	add	a5,a5,a4
    2d10:	00d5e663          	bltu	a1,a3,2d1c <__umoddi3+0x314>
    2d14:	00d59b63          	bne	a1,a3,2d2a <__umoddi3+0x322>
    2d18:	00f57963          	bgeu	a0,a5,2d2a <__umoddi3+0x322>
    2d1c:	41d78633          	sub	a2,a5,t4
    2d20:	00c7b7b3          	sltu	a5,a5,a2
    2d24:	97f2                	add	a5,a5,t3
    2d26:	8e9d                	sub	a3,a3,a5
    2d28:	87b2                	mv	a5,a2
    2d2a:	40f507b3          	sub	a5,a0,a5
    2d2e:	00f53533          	sltu	a0,a0,a5
    2d32:	8d95                	sub	a1,a1,a3
    2d34:	8d89                	sub	a1,a1,a0
    2d36:	011598b3          	sll	a7,a1,a7
    2d3a:	0107d533          	srl	a0,a5,a6
    2d3e:	00a8e533          	or	a0,a7,a0
    2d42:	0105d5b3          	srl	a1,a1,a6
    2d46:	bb8d                	j	2ab8 <__umoddi3+0xb0>

00002d48 <__adddf3>:
    2d48:	1101                	addi	sp,sp,-32
    2d4a:	ce06                	sw	ra,28(sp)
    2d4c:	cc22                	sw	s0,24(sp)
    2d4e:	ca26                	sw	s1,20(sp)
    2d50:	c84a                	sw	s2,16(sp)
    2d52:	c64e                	sw	s3,12(sp)
    2d54:	c452                	sw	s4,8(sp)
    2d56:	002029f3          	frrm	s3
    2d5a:	001008b7          	lui	a7,0x100
    2d5e:	18fd                	addi	a7,a7,-1
    2d60:	00b8f733          	and	a4,a7,a1
    2d64:	0145d413          	srli	s0,a1,0x14
    2d68:	01f5d493          	srli	s1,a1,0x1f
    2d6c:	0146d593          	srli	a1,a3,0x14
    2d70:	00371793          	slli	a5,a4,0x3
    2d74:	00d8f8b3          	and	a7,a7,a3
    2d78:	01d55713          	srli	a4,a0,0x1d
    2d7c:	7ff47413          	andi	s0,s0,2047
    2d80:	7ff5f593          	andi	a1,a1,2047
    2d84:	8f5d                	or	a4,a4,a5
    2d86:	01f6d313          	srli	t1,a3,0x1f
    2d8a:	00351793          	slli	a5,a0,0x3
    2d8e:	01d65693          	srli	a3,a2,0x1d
    2d92:	088e                	slli	a7,a7,0x3
    2d94:	40b40533          	sub	a0,s0,a1
    2d98:	00361813          	slli	a6,a2,0x3
    2d9c:	0116e6b3          	or	a3,a3,a7
    2da0:	862a                	mv	a2,a0
    2da2:	34649563          	bne	s1,t1,30ec <__adddf3+0x3a4>
    2da6:	10a05a63          	blez	a0,2eba <__adddf3+0x172>
    2daa:	04059463          	bnez	a1,2df2 <__adddf3+0xaa>
    2dae:	0106e533          	or	a0,a3,a6
    2db2:	e511                	bnez	a0,2dbe <__adddf3+0x76>
    2db4:	7ff00693          	li	a3,2047
    2db8:	2ad61c63          	bne	a2,a3,3070 <__adddf3+0x328>
    2dbc:	a839                	j	2dda <__adddf3+0x92>
    2dbe:	fff60513          	addi	a0,a2,-1 # ffff <_global_impure_ptr+0x9ff7>
    2dc2:	e901                	bnez	a0,2dd2 <__adddf3+0x8a>
    2dc4:	983e                	add	a6,a6,a5
    2dc6:	96ba                	add	a3,a3,a4
    2dc8:	00f837b3          	sltu	a5,a6,a5
    2dcc:	96be                	add	a3,a3,a5
    2dce:	4605                	li	a2,1
    2dd0:	a059                	j	2e56 <__adddf3+0x10e>
    2dd2:	7ff00893          	li	a7,2047
    2dd6:	05161163          	bne	a2,a7,2e18 <__adddf3+0xd0>
    2dda:	00f766b3          	or	a3,a4,a5
    2dde:	70068063          	beqz	a3,34de <__adddf3+0x796>
    2de2:	004006b7          	lui	a3,0x400
    2de6:	8ef9                	and	a3,a3,a4
    2de8:	4401                	li	s0,0
    2dea:	20069263          	bnez	a3,2fee <__adddf3+0x2a6>
    2dee:	45c1                	li	a1,16
    2df0:	aafd                	j	2fee <__adddf3+0x2a6>
    2df2:	7ff00613          	li	a2,2047
    2df6:	00c41e63          	bne	s0,a2,2e12 <__adddf3+0xca>
    2dfa:	00f766b3          	or	a3,a4,a5
    2dfe:	6e068363          	beqz	a3,34e4 <__adddf3+0x79c>
    2e02:	004006b7          	lui	a3,0x400
    2e06:	8ef9                	and	a3,a3,a4
    2e08:	12068563          	beqz	a3,2f32 <__adddf3+0x1ea>
    2e0c:	7ff00613          	li	a2,2047
    2e10:	a485                	j	3070 <__adddf3+0x328>
    2e12:	00800637          	lui	a2,0x800
    2e16:	8ed1                	or	a3,a3,a2
    2e18:	03800613          	li	a2,56
    2e1c:	08a64a63          	blt	a2,a0,2eb0 <__adddf3+0x168>
    2e20:	467d                	li	a2,31
    2e22:	06a64063          	blt	a2,a0,2e82 <__adddf3+0x13a>
    2e26:	02000613          	li	a2,32
    2e2a:	8e09                	sub	a2,a2,a0
    2e2c:	00a858b3          	srl	a7,a6,a0
    2e30:	00c695b3          	sll	a1,a3,a2
    2e34:	00c81833          	sll	a6,a6,a2
    2e38:	0115e5b3          	or	a1,a1,a7
    2e3c:	01003833          	snez	a6,a6
    2e40:	0105e833          	or	a6,a1,a6
    2e44:	00a6d533          	srl	a0,a3,a0
    2e48:	983e                	add	a6,a6,a5
    2e4a:	953a                	add	a0,a0,a4
    2e4c:	00f837b3          	sltu	a5,a6,a5
    2e50:	00f506b3          	add	a3,a0,a5
    2e54:	8622                	mv	a2,s0
    2e56:	008007b7          	lui	a5,0x800
    2e5a:	8ff5                	and	a5,a5,a3
    2e5c:	cbb5                	beqz	a5,2ed0 <__adddf3+0x188>
    2e5e:	0605                	addi	a2,a2,1
    2e60:	7ff00793          	li	a5,2047
    2e64:	26f60363          	beq	a2,a5,30ca <__adddf3+0x382>
    2e68:	ff800737          	lui	a4,0xff800
    2e6c:	177d                	addi	a4,a4,-1
    2e6e:	00185793          	srli	a5,a6,0x1
    2e72:	8f75                	and	a4,a4,a3
    2e74:	00187813          	andi	a6,a6,1
    2e78:	0107e833          	or	a6,a5,a6
    2e7c:	01f71793          	slli	a5,a4,0x1f
    2e80:	a2ed                	j	306a <__adddf3+0x322>
    2e82:	fe050593          	addi	a1,a0,-32
    2e86:	02000893          	li	a7,32
    2e8a:	00b6d5b3          	srl	a1,a3,a1
    2e8e:	4601                	li	a2,0
    2e90:	01150863          	beq	a0,a7,2ea0 <__adddf3+0x158>
    2e94:	04000613          	li	a2,64
    2e98:	40a60533          	sub	a0,a2,a0
    2e9c:	00a69633          	sll	a2,a3,a0
    2ea0:	01066833          	or	a6,a2,a6
    2ea4:	01003833          	snez	a6,a6
    2ea8:	0105e833          	or	a6,a1,a6
    2eac:	4501                	li	a0,0
    2eae:	bf69                	j	2e48 <__adddf3+0x100>
    2eb0:	0106e833          	or	a6,a3,a6
    2eb4:	01003833          	snez	a6,a6
    2eb8:	bfd5                	j	2eac <__adddf3+0x164>
    2eba:	c97d                	beqz	a0,2fb0 <__adddf3+0x268>
    2ebc:	40858633          	sub	a2,a1,s0
    2ec0:	e821                	bnez	s0,2f10 <__adddf3+0x1c8>
    2ec2:	00f76533          	or	a0,a4,a5
    2ec6:	e911                	bnez	a0,2eda <__adddf3+0x192>
    2ec8:	7ff00793          	li	a5,2047
    2ecc:	02f60663          	beq	a2,a5,2ef8 <__adddf3+0x1b0>
    2ed0:	8736                	mv	a4,a3
    2ed2:	87c2                	mv	a5,a6
    2ed4:	40060563          	beqz	a2,32de <__adddf3+0x596>
    2ed8:	aa61                	j	3070 <__adddf3+0x328>
    2eda:	fff60893          	addi	a7,a2,-1 # 7fffff <_global_impure_ptr+0x7f9ff7>
    2ede:	00089963          	bnez	a7,2ef0 <__adddf3+0x1a8>
    2ee2:	97c2                	add	a5,a5,a6
    2ee4:	0107b833          	sltu	a6,a5,a6
    2ee8:	96ba                	add	a3,a3,a4
    2eea:	96c2                	add	a3,a3,a6
    2eec:	883e                	mv	a6,a5
    2eee:	b5c5                	j	2dce <__adddf3+0x86>
    2ef0:	7ff00513          	li	a0,2047
    2ef4:	04a61563          	bne	a2,a0,2f3e <__adddf3+0x1f6>
    2ef8:	0106e7b3          	or	a5,a3,a6
    2efc:	5e078763          	beqz	a5,34ea <__adddf3+0x7a2>
    2f00:	004007b7          	lui	a5,0x400
    2f04:	8ff5                	and	a5,a5,a3
    2f06:	8736                	mv	a4,a3
    2f08:	5e079363          	bnez	a5,34ee <__adddf3+0x7a6>
    2f0c:	87c2                	mv	a5,a6
    2f0e:	b5c5                	j	2dee <__adddf3+0xa6>
    2f10:	7ff00513          	li	a0,2047
    2f14:	02a59163          	bne	a1,a0,2f36 <__adddf3+0x1ee>
    2f18:	0106e7b3          	or	a5,a3,a6
    2f1c:	5a078463          	beqz	a5,34c4 <__adddf3+0x77c>
    2f20:	004007b7          	lui	a5,0x400
    2f24:	8ff5                	and	a5,a5,a3
    2f26:	8736                	mv	a4,a3
    2f28:	5a079363          	bnez	a5,34ce <__adddf3+0x786>
    2f2c:	87c2                	mv	a5,a6
    2f2e:	7ff00613          	li	a2,2047
    2f32:	4401                	li	s0,0
    2f34:	bd6d                	j	2dee <__adddf3+0xa6>
    2f36:	00800537          	lui	a0,0x800
    2f3a:	8f49                	or	a4,a4,a0
    2f3c:	88b2                	mv	a7,a2
    2f3e:	03800613          	li	a2,56
    2f42:	07164363          	blt	a2,a7,2fa8 <__adddf3+0x260>
    2f46:	467d                	li	a2,31
    2f48:	03164b63          	blt	a2,a7,2f7e <__adddf3+0x236>
    2f4c:	02000513          	li	a0,32
    2f50:	41150533          	sub	a0,a0,a7
    2f54:	00a71633          	sll	a2,a4,a0
    2f58:	0117d333          	srl	t1,a5,a7
    2f5c:	00a797b3          	sll	a5,a5,a0
    2f60:	00666633          	or	a2,a2,t1
    2f64:	00f037b3          	snez	a5,a5
    2f68:	8fd1                	or	a5,a5,a2
    2f6a:	01175733          	srl	a4,a4,a7
    2f6e:	97c2                	add	a5,a5,a6
    2f70:	9736                	add	a4,a4,a3
    2f72:	0107b6b3          	sltu	a3,a5,a6
    2f76:	96ba                	add	a3,a3,a4
    2f78:	883e                	mv	a6,a5
    2f7a:	862e                	mv	a2,a1
    2f7c:	bde9                	j	2e56 <__adddf3+0x10e>
    2f7e:	fe088613          	addi	a2,a7,-32 # fffe0 <_global_impure_ptr+0xf9fd8>
    2f82:	02000313          	li	t1,32
    2f86:	00c75633          	srl	a2,a4,a2
    2f8a:	4501                	li	a0,0
    2f8c:	00688863          	beq	a7,t1,2f9c <__adddf3+0x254>
    2f90:	04000513          	li	a0,64
    2f94:	41150533          	sub	a0,a0,a7
    2f98:	00a71533          	sll	a0,a4,a0
    2f9c:	8fc9                	or	a5,a5,a0
    2f9e:	00f037b3          	snez	a5,a5
    2fa2:	8fd1                	or	a5,a5,a2
    2fa4:	4701                	li	a4,0
    2fa6:	b7e1                	j	2f6e <__adddf3+0x226>
    2fa8:	8fd9                	or	a5,a5,a4
    2faa:	00f037b3          	snez	a5,a5
    2fae:	bfdd                	j	2fa4 <__adddf3+0x25c>
    2fb0:	00140613          	addi	a2,s0,1
    2fb4:	7fe67513          	andi	a0,a2,2046
    2fb8:	ed41                	bnez	a0,3050 <__adddf3+0x308>
    2fba:	00f76533          	or	a0,a4,a5
    2fbe:	e421                	bnez	s0,3006 <__adddf3+0x2be>
    2fc0:	4c050563          	beqz	a0,348a <__adddf3+0x742>
    2fc4:	0106e633          	or	a2,a3,a6
    2fc8:	30060b63          	beqz	a2,32de <__adddf3+0x596>
    2fcc:	983e                	add	a6,a6,a5
    2fce:	00f837b3          	sltu	a5,a6,a5
    2fd2:	9736                	add	a4,a4,a3
    2fd4:	973e                	add	a4,a4,a5
    2fd6:	008007b7          	lui	a5,0x800
    2fda:	8ff9                	and	a5,a5,a4
    2fdc:	4a078863          	beqz	a5,348c <__adddf3+0x744>
    2fe0:	ff8007b7          	lui	a5,0xff800
    2fe4:	17fd                	addi	a5,a5,-1
    2fe6:	8f7d                	and	a4,a4,a5
    2fe8:	4581                	li	a1,0
    2fea:	87c2                	mv	a5,a6
    2fec:	4605                	li	a2,1
    2fee:	0077f693          	andi	a3,a5,7
    2ff2:	e6d5                	bnez	a3,309e <__adddf3+0x356>
    2ff4:	58040363          	beqz	s0,357a <__adddf3+0x832>
    2ff8:	0015f693          	andi	a3,a1,1
    2ffc:	56068f63          	beqz	a3,357a <__adddf3+0x832>
    3000:	0025e593          	ori	a1,a1,2
    3004:	ab9d                	j	357a <__adddf3+0x832>
    3006:	7ff00613          	li	a2,2047
    300a:	02c41d63          	bne	s0,a2,3044 <__adddf3+0x2fc>
    300e:	5e050563          	beqz	a0,35f8 <__adddf3+0x8b0>
    3012:	00400637          	lui	a2,0x400
    3016:	8e79                	and	a2,a2,a4
    3018:	00163613          	seqz	a2,a2
    301c:	0612                	slli	a2,a2,0x4
    301e:	54859363          	bne	a1,s0,3564 <__adddf3+0x81c>
    3022:	85b2                	mv	a1,a2
    3024:	0106e633          	or	a2,a3,a6
    3028:	c611                	beqz	a2,3034 <__adddf3+0x2ec>
    302a:	00400637          	lui	a2,0x400
    302e:	8e75                	and	a2,a2,a3
    3030:	e211                	bnez	a2,3034 <__adddf3+0x2ec>
    3032:	45c1                	li	a1,16
    3034:	52051963          	bnez	a0,3566 <__adddf3+0x81e>
    3038:	8736                	mv	a4,a3
    303a:	87c2                	mv	a5,a6
    303c:	4401                	li	s0,0
    303e:	7ff00613          	li	a2,2047
    3042:	b775                	j	2fee <__adddf3+0x2a6>
    3044:	00c59463          	bne	a1,a2,304c <__adddf3+0x304>
    3048:	4581                	li	a1,0
    304a:	bfe9                	j	3024 <__adddf3+0x2dc>
    304c:	4581                	li	a1,0
    304e:	b7dd                	j	3034 <__adddf3+0x2ec>
    3050:	7ff00593          	li	a1,2047
    3054:	02b60063          	beq	a2,a1,3074 <__adddf3+0x32c>
    3058:	983e                	add	a6,a6,a5
    305a:	00f837b3          	sltu	a5,a6,a5
    305e:	9736                	add	a4,a4,a3
    3060:	973e                	add	a4,a4,a5
    3062:	01f71793          	slli	a5,a4,0x1f
    3066:	00185813          	srli	a6,a6,0x1
    306a:	0107e7b3          	or	a5,a5,a6
    306e:	8305                	srli	a4,a4,0x1
    3070:	4401                	li	s0,0
    3072:	a9bd                	j	34f0 <__adddf3+0x7a8>
    3074:	00098763          	beqz	s3,3082 <__adddf3+0x33a>
    3078:	478d                	li	a5,3
    307a:	00f99763          	bne	s3,a5,3088 <__adddf3+0x340>
    307e:	00049a63          	bnez	s1,3092 <__adddf3+0x34a>
    3082:	7ff00613          	li	a2,2047
    3086:	a889                	j	30d8 <__adddf3+0x390>
    3088:	4789                	li	a5,2
    308a:	00f99463          	bne	s3,a5,3092 <__adddf3+0x34a>
    308e:	fe049ae3          	bnez	s1,3082 <__adddf3+0x33a>
    3092:	4401                	li	s0,0
    3094:	577d                	li	a4,-1
    3096:	57fd                	li	a5,-1
    3098:	7fe00613          	li	a2,2046
    309c:	4595                	li	a1,5
    309e:	4689                	li	a3,2
    30a0:	0015e593          	ori	a1,a1,1
    30a4:	48d98763          	beq	s3,a3,3532 <__adddf3+0x7ea>
    30a8:	468d                	li	a3,3
    30aa:	48d98063          	beq	s3,a3,352a <__adddf3+0x7e2>
    30ae:	48099363          	bnez	s3,3534 <__adddf3+0x7ec>
    30b2:	00f7f693          	andi	a3,a5,15
    30b6:	4511                	li	a0,4
    30b8:	46a68e63          	beq	a3,a0,3534 <__adddf3+0x7ec>
    30bc:	00478693          	addi	a3,a5,4 # ff800004 <__kernel_stack+0xdf74000c>
    30c0:	00f6b7b3          	sltu	a5,a3,a5
    30c4:	973e                	add	a4,a4,a5
    30c6:	87b6                	mv	a5,a3
    30c8:	a1b5                	j	3534 <__adddf3+0x7ec>
    30ca:	00098763          	beqz	s3,30d8 <__adddf3+0x390>
    30ce:	478d                	li	a5,3
    30d0:	00f99863          	bne	s3,a5,30e0 <__adddf3+0x398>
    30d4:	3e049f63          	bnez	s1,34d2 <__adddf3+0x78a>
    30d8:	4701                	li	a4,0
    30da:	4781                	li	a5,0
    30dc:	4595                	li	a1,5
    30de:	a971                	j	357a <__adddf3+0x832>
    30e0:	4789                	li	a5,2
    30e2:	3ef99863          	bne	s3,a5,34d2 <__adddf3+0x78a>
    30e6:	fe0499e3          	bnez	s1,30d8 <__adddf3+0x390>
    30ea:	b765                	j	3092 <__adddf3+0x34a>
    30ec:	0ca05763          	blez	a0,31ba <__adddf3+0x472>
    30f0:	08059263          	bnez	a1,3174 <__adddf3+0x42c>
    30f4:	0106e533          	or	a0,a3,a6
    30f8:	ca050ee3          	beqz	a0,2db4 <__adddf3+0x6c>
    30fc:	fff60513          	addi	a0,a2,-1 # 3fffff <_global_impure_ptr+0x3f9ff7>
    3100:	e911                	bnez	a0,3114 <__adddf3+0x3cc>
    3102:	41078833          	sub	a6,a5,a6
    3106:	40d706b3          	sub	a3,a4,a3
    310a:	0107b7b3          	sltu	a5,a5,a6
    310e:	8e9d                	sub	a3,a3,a5
    3110:	4605                	li	a2,1
    3112:	a0a9                	j	315c <__adddf3+0x414>
    3114:	7ff00893          	li	a7,2047
    3118:	cd1601e3          	beq	a2,a7,2dda <__adddf3+0x92>
    311c:	03800613          	li	a2,56
    3120:	08a64863          	blt	a2,a0,31b0 <__adddf3+0x468>
    3124:	467d                	li	a2,31
    3126:	04a64f63          	blt	a2,a0,3184 <__adddf3+0x43c>
    312a:	02000613          	li	a2,32
    312e:	8e09                	sub	a2,a2,a0
    3130:	00c695b3          	sll	a1,a3,a2
    3134:	00a858b3          	srl	a7,a6,a0
    3138:	00c81833          	sll	a6,a6,a2
    313c:	0115e5b3          	or	a1,a1,a7
    3140:	01003833          	snez	a6,a6
    3144:	0105e833          	or	a6,a1,a6
    3148:	00a6d6b3          	srl	a3,a3,a0
    314c:	41078833          	sub	a6,a5,a6
    3150:	40d706b3          	sub	a3,a4,a3
    3154:	0107b7b3          	sltu	a5,a5,a6
    3158:	8e9d                	sub	a3,a3,a5
    315a:	8622                	mv	a2,s0
    315c:	00800937          	lui	s2,0x800
    3160:	0126f7b3          	and	a5,a3,s2
    3164:	d60786e3          	beqz	a5,2ed0 <__adddf3+0x188>
    3168:	197d                	addi	s2,s2,-1
    316a:	0126f933          	and	s2,a3,s2
    316e:	8a42                	mv	s4,a6
    3170:	8432                	mv	s0,a2
    3172:	a4b5                	j	33de <__adddf3+0x696>
    3174:	7ff00613          	li	a2,2047
    3178:	c8c401e3          	beq	s0,a2,2dfa <__adddf3+0xb2>
    317c:	00800637          	lui	a2,0x800
    3180:	8ed1                	or	a3,a3,a2
    3182:	bf69                	j	311c <__adddf3+0x3d4>
    3184:	fe050593          	addi	a1,a0,-32 # 7fffe0 <_global_impure_ptr+0x7f9fd8>
    3188:	02000893          	li	a7,32
    318c:	00b6d5b3          	srl	a1,a3,a1
    3190:	4601                	li	a2,0
    3192:	01150763          	beq	a0,a7,31a0 <__adddf3+0x458>
    3196:	04000613          	li	a2,64
    319a:	8e09                	sub	a2,a2,a0
    319c:	00c69633          	sll	a2,a3,a2
    31a0:	01066833          	or	a6,a2,a6
    31a4:	01003833          	snez	a6,a6
    31a8:	0105e833          	or	a6,a1,a6
    31ac:	4681                	li	a3,0
    31ae:	bf79                	j	314c <__adddf3+0x404>
    31b0:	0106e833          	or	a6,a3,a6
    31b4:	01003833          	snez	a6,a6
    31b8:	bfd5                	j	31ac <__adddf3+0x464>
    31ba:	cd75                	beqz	a0,32b6 <__adddf3+0x56e>
    31bc:	40858633          	sub	a2,a1,s0
    31c0:	e439                	bnez	s0,320e <__adddf3+0x4c6>
    31c2:	00f76533          	or	a0,a4,a5
    31c6:	e509                	bnez	a0,31d0 <__adddf3+0x488>
    31c8:	7ff00793          	li	a5,2047
    31cc:	849a                	mv	s1,t1
    31ce:	b9fd                	j	2ecc <__adddf3+0x184>
    31d0:	fff60893          	addi	a7,a2,-1 # 7fffff <_global_impure_ptr+0x7f9ff7>
    31d4:	00089c63          	bnez	a7,31ec <__adddf3+0x4a4>
    31d8:	40f807b3          	sub	a5,a6,a5
    31dc:	00f83833          	sltu	a6,a6,a5
    31e0:	8e99                	sub	a3,a3,a4
    31e2:	410686b3          	sub	a3,a3,a6
    31e6:	849a                	mv	s1,t1
    31e8:	883e                	mv	a6,a5
    31ea:	b71d                	j	3110 <__adddf3+0x3c8>
    31ec:	7ff00513          	li	a0,2047
    31f0:	04a61663          	bne	a2,a0,323c <__adddf3+0x4f4>
    31f4:	0106e7b3          	or	a5,a3,a6
    31f8:	2e078e63          	beqz	a5,34f4 <__adddf3+0x7ac>
    31fc:	004007b7          	lui	a5,0x400
    3200:	8ff5                	and	a5,a5,a3
    3202:	8736                	mv	a4,a3
    3204:	2e079b63          	bnez	a5,34fa <__adddf3+0x7b2>
    3208:	87c2                	mv	a5,a6
    320a:	849a                	mv	s1,t1
    320c:	b6cd                	j	2dee <__adddf3+0xa6>
    320e:	7ff00513          	li	a0,2047
    3212:	02a59163          	bne	a1,a0,3234 <__adddf3+0x4ec>
    3216:	0106e7b3          	or	a5,a3,a6
    321a:	2e078363          	beqz	a5,3500 <__adddf3+0x7b8>
    321e:	004007b7          	lui	a5,0x400
    3222:	8ff5                	and	a5,a5,a3
    3224:	8736                	mv	a4,a3
    3226:	2e079163          	bnez	a5,3508 <__adddf3+0x7c0>
    322a:	87c2                	mv	a5,a6
    322c:	7ff00613          	li	a2,2047
    3230:	849a                	mv	s1,t1
    3232:	b301                	j	2f32 <__adddf3+0x1ea>
    3234:	00800537          	lui	a0,0x800
    3238:	8f49                	or	a4,a4,a0
    323a:	88b2                	mv	a7,a2
    323c:	03800613          	li	a2,56
    3240:	07164763          	blt	a2,a7,32ae <__adddf3+0x566>
    3244:	467d                	li	a2,31
    3246:	03164f63          	blt	a2,a7,3284 <__adddf3+0x53c>
    324a:	02000513          	li	a0,32
    324e:	41150533          	sub	a0,a0,a7
    3252:	00a71633          	sll	a2,a4,a0
    3256:	0117de33          	srl	t3,a5,a7
    325a:	00a797b3          	sll	a5,a5,a0
    325e:	01c66633          	or	a2,a2,t3
    3262:	00f037b3          	snez	a5,a5
    3266:	8fd1                	or	a5,a5,a2
    3268:	01175733          	srl	a4,a4,a7
    326c:	40f807b3          	sub	a5,a6,a5
    3270:	40e68733          	sub	a4,a3,a4
    3274:	00f836b3          	sltu	a3,a6,a5
    3278:	40d706b3          	sub	a3,a4,a3
    327c:	883e                	mv	a6,a5
    327e:	862e                	mv	a2,a1
    3280:	849a                	mv	s1,t1
    3282:	bde9                	j	315c <__adddf3+0x414>
    3284:	fe088613          	addi	a2,a7,-32
    3288:	02000e13          	li	t3,32
    328c:	00c75633          	srl	a2,a4,a2
    3290:	4501                	li	a0,0
    3292:	01c88863          	beq	a7,t3,32a2 <__adddf3+0x55a>
    3296:	04000513          	li	a0,64
    329a:	41150533          	sub	a0,a0,a7
    329e:	00a71533          	sll	a0,a4,a0
    32a2:	8fc9                	or	a5,a5,a0
    32a4:	00f037b3          	snez	a5,a5
    32a8:	8fd1                	or	a5,a5,a2
    32aa:	4701                	li	a4,0
    32ac:	b7c1                	j	326c <__adddf3+0x524>
    32ae:	8fd9                	or	a5,a5,a4
    32b0:	00f037b3          	snez	a5,a5
    32b4:	bfdd                	j	32aa <__adddf3+0x562>
    32b6:	00140613          	addi	a2,s0,1
    32ba:	7fe67613          	andi	a2,a2,2046
    32be:	ea7d                	bnez	a2,33b4 <__adddf3+0x66c>
    32c0:	00f768b3          	or	a7,a4,a5
    32c4:	0106e533          	or	a0,a3,a6
    32c8:	e05d                	bnez	s0,336e <__adddf3+0x626>
    32ca:	06089263          	bnez	a7,332e <__adddf3+0x5e6>
    32ce:	1c051163          	bnez	a0,3490 <__adddf3+0x748>
    32d2:	ffe98493          	addi	s1,s3,-2
    32d6:	0014b493          	seqz	s1,s1
    32da:	4701                	li	a4,0
    32dc:	4781                	li	a5,0
    32de:	00e7e6b3          	or	a3,a5,a4
    32e2:	24068063          	beqz	a3,3522 <__adddf3+0x7da>
    32e6:	01f7d693          	srli	a3,a5,0x1f
    32ea:	00171413          	slli	s0,a4,0x1
    32ee:	9436                	add	s0,s0,a3
    32f0:	00179693          	slli	a3,a5,0x1
    32f4:	0076f613          	andi	a2,a3,7
    32f8:	4581                	li	a1,0
    32fa:	c605                	beqz	a2,3322 <__adddf3+0x5da>
    32fc:	4609                	li	a2,2
    32fe:	1ac98963          	beq	s3,a2,34b0 <__adddf3+0x768>
    3302:	460d                	li	a2,3
    3304:	18c98c63          	beq	s3,a2,349c <__adddf3+0x754>
    3308:	4585                	li	a1,1
    330a:	00099c63          	bnez	s3,3322 <__adddf3+0x5da>
    330e:	00f6f613          	andi	a2,a3,15
    3312:	4511                	li	a0,4
    3314:	00a60763          	beq	a2,a0,3322 <__adddf3+0x5da>
    3318:	ffc6b693          	sltiu	a3,a3,-4
    331c:	0016c693          	xori	a3,a3,1
    3320:	9436                	add	s0,s0,a3
    3322:	8061                	srli	s0,s0,0x18
    3324:	00144413          	xori	s0,s0,1
    3328:	8805                	andi	s0,s0,1
    332a:	4601                	li	a2,0
    332c:	b1c9                	j	2fee <__adddf3+0x2a6>
    332e:	d945                	beqz	a0,32de <__adddf3+0x596>
    3330:	410785b3          	sub	a1,a5,a6
    3334:	00b7b533          	sltu	a0,a5,a1
    3338:	40d70633          	sub	a2,a4,a3
    333c:	8e09                	sub	a2,a2,a0
    333e:	00800537          	lui	a0,0x800
    3342:	8d71                	and	a0,a0,a2
    3344:	c919                	beqz	a0,335a <__adddf3+0x612>
    3346:	40f807b3          	sub	a5,a6,a5
    334a:	40e68733          	sub	a4,a3,a4
    334e:	00f83833          	sltu	a6,a6,a5
    3352:	41070733          	sub	a4,a4,a6
    3356:	849a                	mv	s1,t1
    3358:	b759                	j	32de <__adddf3+0x596>
    335a:	00c5e7b3          	or	a5,a1,a2
    335e:	12079c63          	bnez	a5,3496 <__adddf3+0x74e>
    3362:	ffe98493          	addi	s1,s3,-2
    3366:	0014b493          	seqz	s1,s1
    336a:	4701                	li	a4,0
    336c:	bf8d                	j	32de <__adddf3+0x596>
    336e:	7ff00613          	li	a2,2047
    3372:	00c41e63          	bne	s0,a2,338e <__adddf3+0x646>
    3376:	26088963          	beqz	a7,35e8 <__adddf3+0x8a0>
    337a:	00400637          	lui	a2,0x400
    337e:	8e79                	and	a2,a2,a4
    3380:	00163613          	seqz	a2,a2
    3384:	0612                	slli	a2,a2,0x4
    3386:	26859563          	bne	a1,s0,35f0 <__adddf3+0x8a8>
    338a:	85b2                	mv	a1,a2
    338c:	a021                	j	3394 <__adddf3+0x64c>
    338e:	02c59163          	bne	a1,a2,33b0 <__adddf3+0x668>
    3392:	4581                	li	a1,0
    3394:	c511                	beqz	a0,33a0 <__adddf3+0x658>
    3396:	00400637          	lui	a2,0x400
    339a:	8e75                	and	a2,a2,a3
    339c:	e211                	bnez	a2,33a0 <__adddf3+0x658>
    339e:	45c1                	li	a1,16
    33a0:	24089963          	bnez	a7,35f2 <__adddf3+0x8aa>
    33a4:	16050763          	beqz	a0,3512 <__adddf3+0x7ca>
    33a8:	8736                	mv	a4,a3
    33aa:	87c2                	mv	a5,a6
    33ac:	849a                	mv	s1,t1
    33ae:	b179                	j	303c <__adddf3+0x2f4>
    33b0:	4581                	li	a1,0
    33b2:	b7fd                	j	33a0 <__adddf3+0x658>
    33b4:	41078a33          	sub	s4,a5,a6
    33b8:	0147b633          	sltu	a2,a5,s4
    33bc:	40d70933          	sub	s2,a4,a3
    33c0:	40c90933          	sub	s2,s2,a2
    33c4:	00800637          	lui	a2,0x800
    33c8:	00c97633          	and	a2,s2,a2
    33cc:	c62d                	beqz	a2,3436 <__adddf3+0x6ee>
    33ce:	40f80a33          	sub	s4,a6,a5
    33d2:	8e99                	sub	a3,a3,a4
    33d4:	01483833          	sltu	a6,a6,s4
    33d8:	41068933          	sub	s2,a3,a6
    33dc:	849a                	mv	s1,t1
    33de:	06090063          	beqz	s2,343e <__adddf3+0x6f6>
    33e2:	854a                	mv	a0,s2
    33e4:	337010ef          	jal	ra,4f1a <__clzsi2>
    33e8:	ff850613          	addi	a2,a0,-8 # 7ffff8 <_global_impure_ptr+0x7f9ff0>
    33ec:	47fd                	li	a5,31
    33ee:	04c7ce63          	blt	a5,a2,344a <__adddf3+0x702>
    33f2:	02000693          	li	a3,32
    33f6:	8e91                	sub	a3,a3,a2
    33f8:	00c91733          	sll	a4,s2,a2
    33fc:	00da56b3          	srl	a3,s4,a3
    3400:	8ed9                	or	a3,a3,a4
    3402:	00ca1833          	sll	a6,s4,a2
    3406:	06864b63          	blt	a2,s0,347c <__adddf3+0x734>
    340a:	8e01                	sub	a2,a2,s0
    340c:	00160713          	addi	a4,a2,1 # 800001 <_global_impure_ptr+0x7f9ff9>
    3410:	47fd                	li	a5,31
    3412:	04e7c263          	blt	a5,a4,3456 <__adddf3+0x70e>
    3416:	02000613          	li	a2,32
    341a:	8e19                	sub	a2,a2,a4
    341c:	00c697b3          	sll	a5,a3,a2
    3420:	00e85533          	srl	a0,a6,a4
    3424:	00c81633          	sll	a2,a6,a2
    3428:	8fc9                	or	a5,a5,a0
    342a:	00c03633          	snez	a2,a2
    342e:	8fd1                	or	a5,a5,a2
    3430:	00e6d733          	srl	a4,a3,a4
    3434:	b56d                	j	32de <__adddf3+0x596>
    3436:	012a67b3          	or	a5,s4,s2
    343a:	f3d5                	bnez	a5,33de <__adddf3+0x696>
    343c:	b71d                	j	3362 <__adddf3+0x61a>
    343e:	8552                	mv	a0,s4
    3440:	2db010ef          	jal	ra,4f1a <__clzsi2>
    3444:	02050513          	addi	a0,a0,32
    3448:	b745                	j	33e8 <__adddf3+0x6a0>
    344a:	fd850693          	addi	a3,a0,-40
    344e:	00da16b3          	sll	a3,s4,a3
    3452:	4801                	li	a6,0
    3454:	bf4d                	j	3406 <__adddf3+0x6be>
    3456:	1605                	addi	a2,a2,-31
    3458:	02000593          	li	a1,32
    345c:	00c6d633          	srl	a2,a3,a2
    3460:	4781                	li	a5,0
    3462:	00b70763          	beq	a4,a1,3470 <__adddf3+0x728>
    3466:	04000793          	li	a5,64
    346a:	8f99                	sub	a5,a5,a4
    346c:	00f697b3          	sll	a5,a3,a5
    3470:	00f867b3          	or	a5,a6,a5
    3474:	00f037b3          	snez	a5,a5
    3478:	8fd1                	or	a5,a5,a2
    347a:	bdc5                	j	336a <__adddf3+0x622>
    347c:	ff8007b7          	lui	a5,0xff800
    3480:	17fd                	addi	a5,a5,-1
    3482:	40c40633          	sub	a2,s0,a2
    3486:	8efd                	and	a3,a3,a5
    3488:	b4a1                	j	2ed0 <__adddf3+0x188>
    348a:	8736                	mv	a4,a3
    348c:	87c2                	mv	a5,a6
    348e:	bd81                	j	32de <__adddf3+0x596>
    3490:	8736                	mv	a4,a3
    3492:	87c2                	mv	a5,a6
    3494:	b5c9                	j	3356 <__adddf3+0x60e>
    3496:	8732                	mv	a4,a2
    3498:	87ae                	mv	a5,a1
    349a:	b591                	j	32de <__adddf3+0x596>
    349c:	85a6                	mv	a1,s1
    349e:	e80492e3          	bnez	s1,3322 <__adddf3+0x5da>
    34a2:	ff86b693          	sltiu	a3,a3,-8
    34a6:	0016c693          	xori	a3,a3,1
    34aa:	9436                	add	s0,s0,a3
    34ac:	4585                	li	a1,1
    34ae:	bd95                	j	3322 <__adddf3+0x5da>
    34b0:	4585                	li	a1,1
    34b2:	e60488e3          	beqz	s1,3322 <__adddf3+0x5da>
    34b6:	ff86b693          	sltiu	a3,a3,-8
    34ba:	0016c693          	xori	a3,a3,1
    34be:	9436                	add	s0,s0,a3
    34c0:	85a6                	mv	a1,s1
    34c2:	b585                	j	3322 <__adddf3+0x5da>
    34c4:	4701                	li	a4,0
    34c6:	7ff00613          	li	a2,2047
    34ca:	4581                	li	a1,0
    34cc:	a07d                	j	357a <__adddf3+0x832>
    34ce:	87c2                	mv	a5,a6
    34d0:	ba35                	j	2e0c <__adddf3+0xc4>
    34d2:	577d                	li	a4,-1
    34d4:	57fd                	li	a5,-1
    34d6:	7fe00613          	li	a2,2046
    34da:	4401                	li	s0,0
    34dc:	b6c1                	j	309c <__adddf3+0x354>
    34de:	4701                	li	a4,0
    34e0:	4781                	li	a5,0
    34e2:	a861                	j	357a <__adddf3+0x832>
    34e4:	4701                	li	a4,0
    34e6:	4781                	li	a5,0
    34e8:	bff9                	j	34c6 <__adddf3+0x77e>
    34ea:	4701                	li	a4,0
    34ec:	bff9                	j	34ca <__adddf3+0x782>
    34ee:	87c2                	mv	a5,a6
    34f0:	4581                	li	a1,0
    34f2:	bcf5                	j	2fee <__adddf3+0x2a6>
    34f4:	4701                	li	a4,0
    34f6:	849a                	mv	s1,t1
    34f8:	bfc9                	j	34ca <__adddf3+0x782>
    34fa:	87c2                	mv	a5,a6
    34fc:	849a                	mv	s1,t1
    34fe:	bfcd                	j	34f0 <__adddf3+0x7a8>
    3500:	4701                	li	a4,0
    3502:	7ff00613          	li	a2,2047
    3506:	bfc5                	j	34f6 <__adddf3+0x7ae>
    3508:	87c2                	mv	a5,a6
    350a:	7ff00613          	li	a2,2047
    350e:	849a                	mv	s1,t1
    3510:	b685                	j	3070 <__adddf3+0x328>
    3512:	4781                	li	a5,0
    3514:	4481                	li	s1,0
    3516:	00400737          	lui	a4,0x400
    351a:	7ff00613          	li	a2,2047
    351e:	45c1                	li	a1,16
    3520:	a8a9                	j	357a <__adddf3+0x832>
    3522:	4701                	li	a4,0
    3524:	4781                	li	a5,0
    3526:	4601                	li	a2,0
    3528:	b74d                	j	34ca <__adddf3+0x782>
    352a:	e489                	bnez	s1,3534 <__adddf3+0x7ec>
    352c:	00878693          	addi	a3,a5,8 # ff800008 <__kernel_stack+0xdf740010>
    3530:	be41                	j	30c0 <__adddf3+0x378>
    3532:	fced                	bnez	s1,352c <__adddf3+0x7e4>
    3534:	ac0416e3          	bnez	s0,3000 <__adddf3+0x2b8>
    3538:	a089                	j	357a <__adddf3+0x832>
    353a:	4781                	li	a5,0
    353c:	02098063          	beqz	s3,355c <__adddf3+0x814>
    3540:	470d                	li	a4,3
    3542:	00e99863          	bne	s3,a4,3552 <__adddf3+0x80a>
    3546:	00048b63          	beqz	s1,355c <__adddf3+0x814>
    354a:	57fd                	li	a5,-1
    354c:	7fe00613          	li	a2,2046
    3550:	a031                	j	355c <__adddf3+0x814>
    3552:	4709                	li	a4,2
    3554:	fee99be3          	bne	s3,a4,354a <__adddf3+0x802>
    3558:	fe0489e3          	beqz	s1,354a <__adddf3+0x802>
    355c:	0055e593          	ori	a1,a1,5
    3560:	873e                	mv	a4,a5
    3562:	a80d                	j	3594 <__adddf3+0x84c>
    3564:	85b2                	mv	a1,a2
    3566:	0106e6b3          	or	a3,a3,a6
    356a:	ac0689e3          	beqz	a3,303c <__adddf3+0x2f4>
    356e:	4481                	li	s1,0
    3570:	00400737          	lui	a4,0x400
    3574:	4781                	li	a5,0
    3576:	7ff00613          	li	a2,2047
    357a:	008006b7          	lui	a3,0x800
    357e:	8ef9                	and	a3,a3,a4
    3580:	ca91                	beqz	a3,3594 <__adddf3+0x84c>
    3582:	0605                	addi	a2,a2,1
    3584:	7ff00693          	li	a3,2047
    3588:	fad609e3          	beq	a2,a3,353a <__adddf3+0x7f2>
    358c:	ff8006b7          	lui	a3,0xff800
    3590:	16fd                	addi	a3,a3,-1
    3592:	8f75                	and	a4,a4,a3
    3594:	0037d513          	srli	a0,a5,0x3
    3598:	7ff00693          	li	a3,2047
    359c:	01d71793          	slli	a5,a4,0x1d
    35a0:	8fc9                	or	a5,a5,a0
    35a2:	830d                	srli	a4,a4,0x3
    35a4:	00d61963          	bne	a2,a3,35b6 <__adddf3+0x86e>
    35a8:	8fd9                	or	a5,a5,a4
    35aa:	4701                	li	a4,0
    35ac:	c789                	beqz	a5,35b6 <__adddf3+0x86e>
    35ae:	00080737          	lui	a4,0x80
    35b2:	4781                	li	a5,0
    35b4:	4481                	li	s1,0
    35b6:	7ff006b7          	lui	a3,0x7ff00
    35ba:	0652                	slli	a2,a2,0x14
    35bc:	0732                	slli	a4,a4,0xc
    35be:	8e75                	and	a2,a2,a3
    35c0:	8331                	srli	a4,a4,0xc
    35c2:	8f51                	or	a4,a4,a2
    35c4:	04fe                	slli	s1,s1,0x1f
    35c6:	009766b3          	or	a3,a4,s1
    35ca:	873e                	mv	a4,a5
    35cc:	87b6                	mv	a5,a3
    35ce:	c199                	beqz	a1,35d4 <__adddf3+0x88c>
    35d0:	0015a073          	csrs	fflags,a1
    35d4:	40f2                	lw	ra,28(sp)
    35d6:	4462                	lw	s0,24(sp)
    35d8:	44d2                	lw	s1,20(sp)
    35da:	4942                	lw	s2,16(sp)
    35dc:	49b2                	lw	s3,12(sp)
    35de:	4a22                	lw	s4,8(sp)
    35e0:	853a                	mv	a0,a4
    35e2:	85be                	mv	a1,a5
    35e4:	6105                	addi	sp,sp,32
    35e6:	8082                	ret
    35e8:	da8585e3          	beq	a1,s0,3392 <__adddf3+0x64a>
    35ec:	4581                	li	a1,0
    35ee:	bb5d                	j	33a4 <__adddf3+0x65c>
    35f0:	85b2                	mv	a1,a2
    35f2:	a40505e3          	beqz	a0,303c <__adddf3+0x2f4>
    35f6:	bfa5                	j	356e <__adddf3+0x826>
    35f8:	a48588e3          	beq	a1,s0,3048 <__adddf3+0x300>
    35fc:	4581                	li	a1,0
    35fe:	bc2d                	j	3038 <__adddf3+0x2f0>

00003600 <__divdf3>:
    3600:	7179                	addi	sp,sp,-48
    3602:	d422                	sw	s0,40(sp)
    3604:	ca56                	sw	s5,20(sp)
    3606:	c266                	sw	s9,4(sp)
    3608:	d606                	sw	ra,44(sp)
    360a:	d226                	sw	s1,36(sp)
    360c:	d04a                	sw	s2,32(sp)
    360e:	ce4e                	sw	s3,28(sp)
    3610:	cc52                	sw	s4,24(sp)
    3612:	c85a                	sw	s6,16(sp)
    3614:	c65e                	sw	s7,12(sp)
    3616:	c462                	sw	s8,8(sp)
    3618:	842a                	mv	s0,a0
    361a:	8cb2                	mv	s9,a2
    361c:	8ab6                	mv	s5,a3
    361e:	00202973          	frrm	s2
    3622:	0145db13          	srli	s6,a1,0x14
    3626:	00c59b93          	slli	s7,a1,0xc
    362a:	7ffb7b13          	andi	s6,s6,2047
    362e:	00cbdb93          	srli	s7,s7,0xc
    3632:	01f5da13          	srli	s4,a1,0x1f
    3636:	020b0663          	beqz	s6,3662 <__divdf3+0x62>
    363a:	7ff00793          	li	a5,2047
    363e:	06fb0b63          	beq	s6,a5,36b4 <__divdf3+0xb4>
    3642:	01d55713          	srli	a4,a0,0x1d
    3646:	0b8e                	slli	s7,s7,0x3
    3648:	01776bb3          	or	s7,a4,s7
    364c:	008007b7          	lui	a5,0x800
    3650:	00fbebb3          	or	s7,s7,a5
    3654:	00351993          	slli	s3,a0,0x3
    3658:	c01b0b13          	addi	s6,s6,-1023
    365c:	4c01                	li	s8,0
    365e:	4481                	li	s1,0
    3660:	a0bd                	j	36ce <__divdf3+0xce>
    3662:	00abe7b3          	or	a5,s7,a0
    3666:	c7e9                	beqz	a5,3730 <__divdf3+0x130>
    3668:	020b8b63          	beqz	s7,369e <__divdf3+0x9e>
    366c:	855e                	mv	a0,s7
    366e:	0ad010ef          	jal	ra,4f1a <__clzsi2>
    3672:	ff550713          	addi	a4,a0,-11
    3676:	47f1                	li	a5,28
    3678:	02e7c863          	blt	a5,a4,36a8 <__divdf3+0xa8>
    367c:	46f5                	li	a3,29
    367e:	ff850993          	addi	s3,a0,-8
    3682:	8e99                	sub	a3,a3,a4
    3684:	013b9bb3          	sll	s7,s7,s3
    3688:	00d456b3          	srl	a3,s0,a3
    368c:	0176ebb3          	or	s7,a3,s7
    3690:	013419b3          	sll	s3,s0,s3
    3694:	c0d00593          	li	a1,-1011
    3698:	40a58b33          	sub	s6,a1,a0
    369c:	b7c1                	j	365c <__divdf3+0x5c>
    369e:	07d010ef          	jal	ra,4f1a <__clzsi2>
    36a2:	02050513          	addi	a0,a0,32
    36a6:	b7f1                	j	3672 <__divdf3+0x72>
    36a8:	fd850b93          	addi	s7,a0,-40
    36ac:	01741bb3          	sll	s7,s0,s7
    36b0:	4981                	li	s3,0
    36b2:	b7cd                	j	3694 <__divdf3+0x94>
    36b4:	00abe433          	or	s0,s7,a0
    36b8:	c049                	beqz	s0,373a <__divdf3+0x13a>
    36ba:	000807b7          	lui	a5,0x80
    36be:	00fbf7b3          	and	a5,s7,a5
    36c2:	89aa                	mv	s3,a0
    36c4:	7ff00b13          	li	s6,2047
    36c8:	4c0d                	li	s8,3
    36ca:	44c1                	li	s1,16
    36cc:	fbc9                	bnez	a5,365e <__divdf3+0x5e>
    36ce:	00ca9513          	slli	a0,s5,0xc
    36d2:	00c55413          	srli	s0,a0,0xc
    36d6:	014ad513          	srli	a0,s5,0x14
    36da:	7ff57593          	andi	a1,a0,2047
    36de:	87e6                	mv	a5,s9
    36e0:	01fada93          	srli	s5,s5,0x1f
    36e4:	c1ad                	beqz	a1,3746 <__divdf3+0x146>
    36e6:	7ff00713          	li	a4,2047
    36ea:	0ae58963          	beq	a1,a4,379c <__divdf3+0x19c>
    36ee:	01dcd793          	srli	a5,s9,0x1d
    36f2:	00341513          	slli	a0,s0,0x3
    36f6:	8d5d                	or	a0,a0,a5
    36f8:	00800437          	lui	s0,0x800
    36fc:	8c49                	or	s0,s0,a0
    36fe:	003c9793          	slli	a5,s9,0x3
    3702:	c0158513          	addi	a0,a1,-1023
    3706:	4701                	li	a4,0
    3708:	002c1693          	slli	a3,s8,0x2
    370c:	8ed9                	or	a3,a3,a4
    370e:	40ab05b3          	sub	a1,s6,a0
    3712:	16fd                	addi	a3,a3,-1
    3714:	4539                	li	a0,14
    3716:	015a4633          	xor	a2,s4,s5
    371a:	0ad56a63          	bltu	a0,a3,37ce <__divdf3+0x1ce>
    371e:	00002517          	auipc	a0,0x2
    3722:	6d650513          	addi	a0,a0,1750 # 5df4 <digest_ref+0x20>
    3726:	068a                	slli	a3,a3,0x2
    3728:	96aa                	add	a3,a3,a0
    372a:	4294                	lw	a3,0(a3)
    372c:	96aa                	add	a3,a3,a0
    372e:	8682                	jr	a3
    3730:	4b81                	li	s7,0
    3732:	4981                	li	s3,0
    3734:	4b01                	li	s6,0
    3736:	4c05                	li	s8,1
    3738:	b71d                	j	365e <__divdf3+0x5e>
    373a:	4b81                	li	s7,0
    373c:	4981                	li	s3,0
    373e:	7ff00b13          	li	s6,2047
    3742:	4c09                	li	s8,2
    3744:	bf29                	j	365e <__divdf3+0x5e>
    3746:	019467b3          	or	a5,s0,s9
    374a:	c7ad                	beqz	a5,37b4 <__divdf3+0x1b4>
    374c:	02040c63          	beqz	s0,3784 <__divdf3+0x184>
    3750:	8522                	mv	a0,s0
    3752:	7c8010ef          	jal	ra,4f1a <__clzsi2>
    3756:	85aa                	mv	a1,a0
    3758:	ff558693          	addi	a3,a1,-11
    375c:	47f1                	li	a5,28
    375e:	02d7c963          	blt	a5,a3,3790 <__divdf3+0x190>
    3762:	4775                	li	a4,29
    3764:	ff858793          	addi	a5,a1,-8
    3768:	8f15                	sub	a4,a4,a3
    376a:	00f41533          	sll	a0,s0,a5
    376e:	00ecd733          	srl	a4,s9,a4
    3772:	00a76433          	or	s0,a4,a0
    3776:	00fc97b3          	sll	a5,s9,a5
    377a:	c0d00713          	li	a4,-1011
    377e:	40b70533          	sub	a0,a4,a1
    3782:	b751                	j	3706 <__divdf3+0x106>
    3784:	8566                	mv	a0,s9
    3786:	794010ef          	jal	ra,4f1a <__clzsi2>
    378a:	02050593          	addi	a1,a0,32
    378e:	b7e9                	j	3758 <__divdf3+0x158>
    3790:	fd858513          	addi	a0,a1,-40
    3794:	00ac9433          	sll	s0,s9,a0
    3798:	4781                	li	a5,0
    379a:	b7c5                	j	377a <__divdf3+0x17a>
    379c:	01946633          	or	a2,s0,s9
    37a0:	ce19                	beqz	a2,37be <__divdf3+0x1be>
    37a2:	00080737          	lui	a4,0x80
    37a6:	8f61                	and	a4,a4,s0
    37a8:	7ff00513          	li	a0,2047
    37ac:	ef19                	bnez	a4,37ca <__divdf3+0x1ca>
    37ae:	470d                	li	a4,3
    37b0:	44c1                	li	s1,16
    37b2:	bf99                	j	3708 <__divdf3+0x108>
    37b4:	4401                	li	s0,0
    37b6:	4781                	li	a5,0
    37b8:	4501                	li	a0,0
    37ba:	4705                	li	a4,1
    37bc:	b7b1                	j	3708 <__divdf3+0x108>
    37be:	4401                	li	s0,0
    37c0:	4781                	li	a5,0
    37c2:	7ff00513          	li	a0,2047
    37c6:	4709                	li	a4,2
    37c8:	b781                	j	3708 <__divdf3+0x108>
    37ca:	470d                	li	a4,3
    37cc:	bf35                	j	3708 <__divdf3+0x108>
    37ce:	01746663          	bltu	s0,s7,37da <__divdf3+0x1da>
    37d2:	268b9463          	bne	s7,s0,3a3a <__divdf3+0x43a>
    37d6:	26f9e263          	bltu	s3,a5,3a3a <__divdf3+0x43a>
    37da:	01fb9513          	slli	a0,s7,0x1f
    37de:	0019d713          	srli	a4,s3,0x1
    37e2:	01f99693          	slli	a3,s3,0x1f
    37e6:	001bdb93          	srli	s7,s7,0x1
    37ea:	00e569b3          	or	s3,a0,a4
    37ee:	00841513          	slli	a0,s0,0x8
    37f2:	0187d813          	srli	a6,a5,0x18
    37f6:	00a86833          	or	a6,a6,a0
    37fa:	8141                	srli	a0,a0,0x10
    37fc:	02abde33          	divu	t3,s7,a0
    3800:	01081f13          	slli	t5,a6,0x10
    3804:	010f5f13          	srli	t5,t5,0x10
    3808:	00879893          	slli	a7,a5,0x8
    380c:	0109d793          	srli	a5,s3,0x10
    3810:	02abfbb3          	remu	s7,s7,a0
    3814:	8372                	mv	t1,t3
    3816:	03cf0733          	mul	a4,t5,t3
    381a:	0bc2                	slli	s7,s7,0x10
    381c:	0177e7b3          	or	a5,a5,s7
    3820:	00e7fc63          	bgeu	a5,a4,3838 <__divdf3+0x238>
    3824:	97c2                	add	a5,a5,a6
    3826:	fffe0313          	addi	t1,t3,-1
    382a:	0107e763          	bltu	a5,a6,3838 <__divdf3+0x238>
    382e:	00e7f563          	bgeu	a5,a4,3838 <__divdf3+0x238>
    3832:	ffee0313          	addi	t1,t3,-2
    3836:	97c2                	add	a5,a5,a6
    3838:	8f99                	sub	a5,a5,a4
    383a:	02a7deb3          	divu	t4,a5,a0
    383e:	01099713          	slli	a4,s3,0x10
    3842:	8341                	srli	a4,a4,0x10
    3844:	02a7f7b3          	remu	a5,a5,a0
    3848:	89f6                	mv	s3,t4
    384a:	03df0e33          	mul	t3,t5,t4
    384e:	07c2                	slli	a5,a5,0x10
    3850:	8f5d                	or	a4,a4,a5
    3852:	01c77c63          	bgeu	a4,t3,386a <__divdf3+0x26a>
    3856:	9742                	add	a4,a4,a6
    3858:	fffe8993          	addi	s3,t4,-1
    385c:	01076763          	bltu	a4,a6,386a <__divdf3+0x26a>
    3860:	01c77563          	bgeu	a4,t3,386a <__divdf3+0x26a>
    3864:	ffee8993          	addi	s3,t4,-2
    3868:	9742                	add	a4,a4,a6
    386a:	0342                	slli	t1,t1,0x10
    386c:	013369b3          	or	s3,t1,s3
    3870:	6341                	lui	t1,0x10
    3872:	fff30e93          	addi	t4,t1,-1 # ffff <_global_impure_ptr+0x9ff7>
    3876:	0109d293          	srli	t0,s3,0x10
    387a:	0108df93          	srli	t6,a7,0x10
    387e:	41c70733          	sub	a4,a4,t3
    3882:	01d9fe33          	and	t3,s3,t4
    3886:	01d8feb3          	and	t4,a7,t4
    388a:	03de07b3          	mul	a5,t3,t4
    388e:	03d28433          	mul	s0,t0,t4
    3892:	03cf8e33          	mul	t3,t6,t3
    3896:	008e03b3          	add	t2,t3,s0
    389a:	0107de13          	srli	t3,a5,0x10
    389e:	9e1e                	add	t3,t3,t2
    38a0:	03f282b3          	mul	t0,t0,t6
    38a4:	008e7363          	bgeu	t3,s0,38aa <__divdf3+0x2aa>
    38a8:	929a                	add	t0,t0,t1
    38aa:	63c1                	lui	t2,0x10
    38ac:	010e5313          	srli	t1,t3,0x10
    38b0:	13fd                	addi	t2,t2,-1
    38b2:	929a                	add	t0,t0,t1
    38b4:	007e7333          	and	t1,t3,t2
    38b8:	0342                	slli	t1,t1,0x10
    38ba:	0077f7b3          	and	a5,a5,t2
    38be:	933e                	add	t1,t1,a5
    38c0:	00576763          	bltu	a4,t0,38ce <__divdf3+0x2ce>
    38c4:	844e                	mv	s0,s3
    38c6:	02571e63          	bne	a4,t0,3902 <__divdf3+0x302>
    38ca:	0266fc63          	bgeu	a3,t1,3902 <__divdf3+0x302>
    38ce:	96c6                	add	a3,a3,a7
    38d0:	0116b7b3          	sltu	a5,a3,a7
    38d4:	97c2                	add	a5,a5,a6
    38d6:	973e                	add	a4,a4,a5
    38d8:	fff98413          	addi	s0,s3,-1
    38dc:	00e86663          	bltu	a6,a4,38e8 <__divdf3+0x2e8>
    38e0:	02e81163          	bne	a6,a4,3902 <__divdf3+0x302>
    38e4:	0116ef63          	bltu	a3,a7,3902 <__divdf3+0x302>
    38e8:	00576663          	bltu	a4,t0,38f4 <__divdf3+0x2f4>
    38ec:	00e29b63          	bne	t0,a4,3902 <__divdf3+0x302>
    38f0:	0066f963          	bgeu	a3,t1,3902 <__divdf3+0x302>
    38f4:	96c6                	add	a3,a3,a7
    38f6:	0116b7b3          	sltu	a5,a3,a7
    38fa:	97c2                	add	a5,a5,a6
    38fc:	ffe98413          	addi	s0,s3,-2
    3900:	973e                	add	a4,a4,a5
    3902:	40668333          	sub	t1,a3,t1
    3906:	40570733          	sub	a4,a4,t0
    390a:	0066b6b3          	sltu	a3,a3,t1
    390e:	8f15                	sub	a4,a4,a3
    3910:	57fd                	li	a5,-1
    3912:	0ee80763          	beq	a6,a4,3a00 <__divdf3+0x400>
    3916:	02a752b3          	divu	t0,a4,a0
    391a:	01035793          	srli	a5,t1,0x10
    391e:	02a77733          	remu	a4,a4,a0
    3922:	8696                	mv	a3,t0
    3924:	025f0e33          	mul	t3,t5,t0
    3928:	0742                	slli	a4,a4,0x10
    392a:	8f5d                	or	a4,a4,a5
    392c:	01c77c63          	bgeu	a4,t3,3944 <__divdf3+0x344>
    3930:	9742                	add	a4,a4,a6
    3932:	fff28693          	addi	a3,t0,-1
    3936:	01076763          	bltu	a4,a6,3944 <__divdf3+0x344>
    393a:	01c77563          	bgeu	a4,t3,3944 <__divdf3+0x344>
    393e:	ffe28693          	addi	a3,t0,-2
    3942:	9742                	add	a4,a4,a6
    3944:	41c70733          	sub	a4,a4,t3
    3948:	02a75e33          	divu	t3,a4,a0
    394c:	01031793          	slli	a5,t1,0x10
    3950:	83c1                	srli	a5,a5,0x10
    3952:	02a77733          	remu	a4,a4,a0
    3956:	03cf0f33          	mul	t5,t5,t3
    395a:	0742                	slli	a4,a4,0x10
    395c:	8f5d                	or	a4,a4,a5
    395e:	87f2                	mv	a5,t3
    3960:	01e77c63          	bgeu	a4,t5,3978 <__divdf3+0x378>
    3964:	9742                	add	a4,a4,a6
    3966:	fffe0793          	addi	a5,t3,-1
    396a:	01076763          	bltu	a4,a6,3978 <__divdf3+0x378>
    396e:	01e77563          	bgeu	a4,t5,3978 <__divdf3+0x378>
    3972:	ffee0793          	addi	a5,t3,-2
    3976:	9742                	add	a4,a4,a6
    3978:	06c2                	slli	a3,a3,0x10
    397a:	8edd                	or	a3,a3,a5
    397c:	01069793          	slli	a5,a3,0x10
    3980:	83c1                	srli	a5,a5,0x10
    3982:	0106d313          	srli	t1,a3,0x10
    3986:	026f8e33          	mul	t3,t6,t1
    398a:	41e70733          	sub	a4,a4,t5
    398e:	02ff8fb3          	mul	t6,t6,a5
    3992:	02fe8f33          	mul	t5,t4,a5
    3996:	03d30eb3          	mul	t4,t1,t4
    399a:	010f5793          	srli	a5,t5,0x10
    399e:	9ff6                	add	t6,t6,t4
    39a0:	97fe                	add	a5,a5,t6
    39a2:	01d7f463          	bgeu	a5,t4,39aa <__divdf3+0x3aa>
    39a6:	6541                	lui	a0,0x10
    39a8:	9e2a                	add	t3,t3,a0
    39aa:	0107d313          	srli	t1,a5,0x10
    39ae:	9372                	add	t1,t1,t3
    39b0:	6e41                	lui	t3,0x10
    39b2:	1e7d                	addi	t3,t3,-1
    39b4:	01c7f533          	and	a0,a5,t3
    39b8:	0542                	slli	a0,a0,0x10
    39ba:	01cf7f33          	and	t5,t5,t3
    39be:	957a                	add	a0,a0,t5
    39c0:	00676663          	bltu	a4,t1,39cc <__divdf3+0x3cc>
    39c4:	2c671263          	bne	a4,t1,3c88 <__divdf3+0x688>
    39c8:	87b6                	mv	a5,a3
    39ca:	c91d                	beqz	a0,3a00 <__divdf3+0x400>
    39cc:	9742                	add	a4,a4,a6
    39ce:	fff68793          	addi	a5,a3,-1 # 7fefffff <__kernel_stack+0x5fe40007>
    39d2:	03076163          	bltu	a4,a6,39f4 <__divdf3+0x3f4>
    39d6:	00676663          	bltu	a4,t1,39e2 <__divdf3+0x3e2>
    39da:	2a671663          	bne	a4,t1,3c86 <__divdf3+0x686>
    39de:	00a8fd63          	bgeu	a7,a0,39f8 <__divdf3+0x3f8>
    39e2:	ffe68793          	addi	a5,a3,-2
    39e6:	00189693          	slli	a3,a7,0x1
    39ea:	0116b8b3          	sltu	a7,a3,a7
    39ee:	9846                	add	a6,a6,a7
    39f0:	9742                	add	a4,a4,a6
    39f2:	88b6                	mv	a7,a3
    39f4:	00671463          	bne	a4,t1,39fc <__divdf3+0x3fc>
    39f8:	00a88463          	beq	a7,a0,3a00 <__divdf3+0x400>
    39fc:	0017e793          	ori	a5,a5,1
    3a00:	3ff58813          	addi	a6,a1,1023
    3a04:	11005863          	blez	a6,3b14 <__divdf3+0x514>
    3a08:	0077f713          	andi	a4,a5,7
    3a0c:	cf25                	beqz	a4,3a84 <__divdf3+0x484>
    3a0e:	4709                	li	a4,2
    3a10:	0014e493          	ori	s1,s1,1
    3a14:	06e90763          	beq	s2,a4,3a82 <__divdf3+0x482>
    3a18:	470d                	li	a4,3
    3a1a:	06e90063          	beq	s2,a4,3a7a <__divdf3+0x47a>
    3a1e:	06091363          	bnez	s2,3a84 <__divdf3+0x484>
    3a22:	00f7f713          	andi	a4,a5,15
    3a26:	4691                	li	a3,4
    3a28:	04d70e63          	beq	a4,a3,3a84 <__divdf3+0x484>
    3a2c:	00478713          	addi	a4,a5,4 # 80004 <_global_impure_ptr+0x79ffc>
    3a30:	00f737b3          	sltu	a5,a4,a5
    3a34:	943e                	add	s0,s0,a5
    3a36:	87ba                	mv	a5,a4
    3a38:	a0b1                	j	3a84 <__divdf3+0x484>
    3a3a:	15fd                	addi	a1,a1,-1
    3a3c:	4681                	li	a3,0
    3a3e:	bb45                	j	37ee <__divdf3+0x1ee>
    3a40:	8652                	mv	a2,s4
    3a42:	845e                	mv	s0,s7
    3a44:	87ce                	mv	a5,s3
    3a46:	8762                	mv	a4,s8
    3a48:	468d                	li	a3,3
    3a4a:	22d70763          	beq	a4,a3,3c78 <__divdf3+0x678>
    3a4e:	4685                	li	a3,1
    3a50:	22d70163          	beq	a4,a3,3c72 <__divdf3+0x672>
    3a54:	4689                	li	a3,2
    3a56:	fad715e3          	bne	a4,a3,3a00 <__divdf3+0x400>
    3a5a:	a029                	j	3a64 <__divdf3+0x464>
    3a5c:	8656                	mv	a2,s5
    3a5e:	b7ed                	j	3a48 <__divdf3+0x448>
    3a60:	0084e493          	ori	s1,s1,8
    3a64:	4501                	li	a0,0
    3a66:	4781                	li	a5,0
    3a68:	7ff00713          	li	a4,2047
    3a6c:	a091                	j	3ab0 <__divdf3+0x4b0>
    3a6e:	00080437          	lui	s0,0x80
    3a72:	4781                	li	a5,0
    3a74:	4601                	li	a2,0
    3a76:	470d                	li	a4,3
    3a78:	bfc1                	j	3a48 <__divdf3+0x448>
    3a7a:	e609                	bnez	a2,3a84 <__divdf3+0x484>
    3a7c:	00878713          	addi	a4,a5,8
    3a80:	bf45                	j	3a30 <__divdf3+0x430>
    3a82:	fe6d                	bnez	a2,3a7c <__divdf3+0x47c>
    3a84:	01000737          	lui	a4,0x1000
    3a88:	8f61                	and	a4,a4,s0
    3a8a:	c719                	beqz	a4,3a98 <__divdf3+0x498>
    3a8c:	ff000737          	lui	a4,0xff000
    3a90:	177d                	addi	a4,a4,-1
    3a92:	8c79                	and	s0,s0,a4
    3a94:	40058813          	addi	a6,a1,1024
    3a98:	7fe00713          	li	a4,2046
    3a9c:	05074663          	blt	a4,a6,3ae8 <__divdf3+0x4e8>
    3aa0:	0037d713          	srli	a4,a5,0x3
    3aa4:	01d41793          	slli	a5,s0,0x1d
    3aa8:	8fd9                	or	a5,a5,a4
    3aaa:	00345513          	srli	a0,s0,0x3
    3aae:	8742                	mv	a4,a6
    3ab0:	0752                	slli	a4,a4,0x14
    3ab2:	7ff006b7          	lui	a3,0x7ff00
    3ab6:	0532                	slli	a0,a0,0xc
    3ab8:	8f75                	and	a4,a4,a3
    3aba:	8131                	srli	a0,a0,0xc
    3abc:	8d59                	or	a0,a0,a4
    3abe:	067e                	slli	a2,a2,0x1f
    3ac0:	00c56733          	or	a4,a0,a2
    3ac4:	85ba                	mv	a1,a4
    3ac6:	853e                	mv	a0,a5
    3ac8:	c099                	beqz	s1,3ace <__divdf3+0x4ce>
    3aca:	0014a073          	csrs	fflags,s1
    3ace:	50b2                	lw	ra,44(sp)
    3ad0:	5422                	lw	s0,40(sp)
    3ad2:	5492                	lw	s1,36(sp)
    3ad4:	5902                	lw	s2,32(sp)
    3ad6:	49f2                	lw	s3,28(sp)
    3ad8:	4a62                	lw	s4,24(sp)
    3ada:	4ad2                	lw	s5,20(sp)
    3adc:	4b42                	lw	s6,16(sp)
    3ade:	4bb2                	lw	s7,12(sp)
    3ae0:	4c22                	lw	s8,8(sp)
    3ae2:	4c92                	lw	s9,4(sp)
    3ae4:	6145                	addi	sp,sp,48
    3ae6:	8082                	ret
    3ae8:	4789                	li	a5,2
    3aea:	02f90363          	beq	s2,a5,3b10 <__divdf3+0x510>
    3aee:	478d                	li	a5,3
    3af0:	00f90863          	beq	s2,a5,3b00 <__divdf3+0x500>
    3af4:	00091763          	bnez	s2,3b02 <__divdf3+0x502>
    3af8:	4781                	li	a5,0
    3afa:	7ff00713          	li	a4,2047
    3afe:	a029                	j	3b08 <__divdf3+0x508>
    3b00:	de65                	beqz	a2,3af8 <__divdf3+0x4f8>
    3b02:	57fd                	li	a5,-1
    3b04:	7fe00713          	li	a4,2046
    3b08:	0054e493          	ori	s1,s1,5
    3b0c:	853e                	mv	a0,a5
    3b0e:	b74d                	j	3ab0 <__divdf3+0x4b0>
    3b10:	f665                	bnez	a2,3af8 <__divdf3+0x4f8>
    3b12:	bfc5                	j	3b02 <__divdf3+0x502>
    3b14:	4705                	li	a4,1
    3b16:	04081463          	bnez	a6,3b5e <__divdf3+0x55e>
    3b1a:	0077f693          	andi	a3,a5,7
    3b1e:	8722                	mv	a4,s0
    3b20:	ca9d                	beqz	a3,3b56 <__divdf3+0x556>
    3b22:	4689                	li	a3,2
    3b24:	0014e493          	ori	s1,s1,1
    3b28:	02d90663          	beq	s2,a3,3b54 <__divdf3+0x554>
    3b2c:	468d                	li	a3,3
    3b2e:	00d90f63          	beq	s2,a3,3b4c <__divdf3+0x54c>
    3b32:	02091263          	bnez	s2,3b56 <__divdf3+0x556>
    3b36:	00f7f693          	andi	a3,a5,15
    3b3a:	4511                	li	a0,4
    3b3c:	00a68d63          	beq	a3,a0,3b56 <__divdf3+0x556>
    3b40:	ffc7b713          	sltiu	a4,a5,-4
    3b44:	00174713          	xori	a4,a4,1
    3b48:	9722                	add	a4,a4,s0
    3b4a:	a031                	j	3b56 <__divdf3+0x556>
    3b4c:	e609                	bnez	a2,3b56 <__divdf3+0x556>
    3b4e:	ff87b713          	sltiu	a4,a5,-8
    3b52:	bfcd                	j	3b44 <__divdf3+0x544>
    3b54:	fe6d                	bnez	a2,3b4e <__divdf3+0x54e>
    3b56:	8361                	srli	a4,a4,0x18
    3b58:	00174713          	xori	a4,a4,1
    3b5c:	8b05                	andi	a4,a4,1
    3b5e:	4505                	li	a0,1
    3b60:	41050533          	sub	a0,a0,a6
    3b64:	03800693          	li	a3,56
    3b68:	0ca6c263          	blt	a3,a0,3c2c <__divdf3+0x62c>
    3b6c:	46fd                	li	a3,31
    3b6e:	04a6ca63          	blt	a3,a0,3bc2 <__divdf3+0x5c2>
    3b72:	41e58593          	addi	a1,a1,1054
    3b76:	00a7d833          	srl	a6,a5,a0
    3b7a:	00b416b3          	sll	a3,s0,a1
    3b7e:	00b797b3          	sll	a5,a5,a1
    3b82:	0106e6b3          	or	a3,a3,a6
    3b86:	00f037b3          	snez	a5,a5
    3b8a:	8fd5                	or	a5,a5,a3
    3b8c:	00a45533          	srl	a0,s0,a0
    3b90:	0077f693          	andi	a3,a5,7
    3b94:	c2ad                	beqz	a3,3bf6 <__divdf3+0x5f6>
    3b96:	4689                	li	a3,2
    3b98:	0014e493          	ori	s1,s1,1
    3b9c:	04d90c63          	beq	s2,a3,3bf4 <__divdf3+0x5f4>
    3ba0:	468d                	li	a3,3
    3ba2:	04d90563          	beq	s2,a3,3bec <__divdf3+0x5ec>
    3ba6:	04091863          	bnez	s2,3bf6 <__divdf3+0x5f6>
    3baa:	00f7f693          	andi	a3,a5,15
    3bae:	4591                	li	a1,4
    3bb0:	04b68363          	beq	a3,a1,3bf6 <__divdf3+0x5f6>
    3bb4:	00478693          	addi	a3,a5,4
    3bb8:	00f6b7b3          	sltu	a5,a3,a5
    3bbc:	953e                	add	a0,a0,a5
    3bbe:	87b6                	mv	a5,a3
    3bc0:	a81d                	j	3bf6 <__divdf3+0x5f6>
    3bc2:	5685                	li	a3,-31
    3bc4:	410686b3          	sub	a3,a3,a6
    3bc8:	02000893          	li	a7,32
    3bcc:	00d456b3          	srl	a3,s0,a3
    3bd0:	4801                	li	a6,0
    3bd2:	01150663          	beq	a0,a7,3bde <__divdf3+0x5de>
    3bd6:	43e58593          	addi	a1,a1,1086
    3bda:	00b41833          	sll	a6,s0,a1
    3bde:	00f867b3          	or	a5,a6,a5
    3be2:	00f037b3          	snez	a5,a5
    3be6:	8fd5                	or	a5,a5,a3
    3be8:	4501                	li	a0,0
    3bea:	b75d                	j	3b90 <__divdf3+0x590>
    3bec:	e609                	bnez	a2,3bf6 <__divdf3+0x5f6>
    3bee:	00878693          	addi	a3,a5,8
    3bf2:	b7d9                	j	3bb8 <__divdf3+0x5b8>
    3bf4:	fe6d                	bnez	a2,3bee <__divdf3+0x5ee>
    3bf6:	008006b7          	lui	a3,0x800
    3bfa:	8ee9                	and	a3,a3,a0
    3bfc:	ca81                	beqz	a3,3c0c <__divdf3+0x60c>
    3bfe:	0014e493          	ori	s1,s1,1
    3c02:	4501                	li	a0,0
    3c04:	4781                	li	a5,0
    3c06:	e305                	bnez	a4,3c26 <__divdf3+0x626>
    3c08:	4705                	li	a4,1
    3c0a:	b55d                	j	3ab0 <__divdf3+0x4b0>
    3c0c:	0037d693          	srli	a3,a5,0x3
    3c10:	01d51793          	slli	a5,a0,0x1d
    3c14:	8fd5                	or	a5,a5,a3
    3c16:	810d                	srli	a0,a0,0x3
    3c18:	e8070ce3          	beqz	a4,3ab0 <__divdf3+0x4b0>
    3c1c:	0014f713          	andi	a4,s1,1
    3c20:	e80708e3          	beqz	a4,3ab0 <__divdf3+0x4b0>
    3c24:	4701                	li	a4,0
    3c26:	0024e493          	ori	s1,s1,2
    3c2a:	b559                	j	3ab0 <__divdf3+0x4b0>
    3c2c:	8fc1                	or	a5,a5,s0
    3c2e:	cf91                	beqz	a5,3c4a <__divdf3+0x64a>
    3c30:	4789                	li	a5,2
    3c32:	0014e493          	ori	s1,s1,1
    3c36:	02f90363          	beq	s2,a5,3c5c <__divdf3+0x65c>
    3c3a:	478d                	li	a5,3
    3c3c:	00f90c63          	beq	s2,a5,3c54 <__divdf3+0x654>
    3c40:	4785                	li	a5,1
    3c42:	00091363          	bnez	s2,3c48 <__divdf3+0x648>
    3c46:	4795                	li	a5,5
    3c48:	838d                	srli	a5,a5,0x3
    3c4a:	0024e493          	ori	s1,s1,2
    3c4e:	4501                	li	a0,0
    3c50:	4701                	li	a4,0
    3c52:	bdb9                	j	3ab0 <__divdf3+0x4b0>
    3c54:	47a5                	li	a5,9
    3c56:	da6d                	beqz	a2,3c48 <__divdf3+0x648>
    3c58:	4785                	li	a5,1
    3c5a:	b7fd                	j	3c48 <__divdf3+0x648>
    3c5c:	47a5                	li	a5,9
    3c5e:	f66d                	bnez	a2,3c48 <__divdf3+0x648>
    3c60:	bfe5                	j	3c58 <__divdf3+0x658>
    3c62:	00080537          	lui	a0,0x80
    3c66:	4781                	li	a5,0
    3c68:	7ff00713          	li	a4,2047
    3c6c:	4601                	li	a2,0
    3c6e:	44c1                	li	s1,16
    3c70:	b581                	j	3ab0 <__divdf3+0x4b0>
    3c72:	4501                	li	a0,0
    3c74:	4781                	li	a5,0
    3c76:	bfe9                	j	3c50 <__divdf3+0x650>
    3c78:	00080537          	lui	a0,0x80
    3c7c:	4781                	li	a5,0
    3c7e:	7ff00713          	li	a4,2047
    3c82:	4601                	li	a2,0
    3c84:	b535                	j	3ab0 <__divdf3+0x4b0>
    3c86:	86be                	mv	a3,a5
    3c88:	87b6                	mv	a5,a3
    3c8a:	bb8d                	j	39fc <__divdf3+0x3fc>

00003c8c <__eqdf2>:
    3c8c:	882a                	mv	a6,a0
    3c8e:	002027f3          	frrm	a5
    3c92:	001007b7          	lui	a5,0x100
    3c96:	0145d893          	srli	a7,a1,0x14
    3c9a:	17fd                	addi	a5,a5,-1
    3c9c:	0146d313          	srli	t1,a3,0x14
    3ca0:	8e2a                	mv	t3,a0
    3ca2:	7ff8f893          	andi	a7,a7,2047
    3ca6:	7ff00513          	li	a0,2047
    3caa:	00b7f733          	and	a4,a5,a1
    3cae:	8eb2                	mv	t4,a2
    3cb0:	8ff5                	and	a5,a5,a3
    3cb2:	81fd                	srli	a1,a1,0x1f
    3cb4:	7ff37313          	andi	t1,t1,2047
    3cb8:	82fd                	srli	a3,a3,0x1f
    3cba:	00a89863          	bne	a7,a0,3cca <__eqdf2+0x3e>
    3cbe:	01076533          	or	a0,a4,a6
    3cc2:	e531                	bnez	a0,3d0e <__eqdf2+0x82>
    3cc4:	07131463          	bne	t1,a7,3d2c <__eqdf2+0xa0>
    3cc8:	a019                	j	3cce <__eqdf2+0x42>
    3cca:	00a31563          	bne	t1,a0,3cd4 <__eqdf2+0x48>
    3cce:	00c7e533          	or	a0,a5,a2
    3cd2:	e515                	bnez	a0,3cfe <__eqdf2+0x72>
    3cd4:	4505                	li	a0,1
    3cd6:	04689c63          	bne	a7,t1,3d2e <__eqdf2+0xa2>
    3cda:	04f71a63          	bne	a4,a5,3d2e <__eqdf2+0xa2>
    3cde:	05de1863          	bne	t3,t4,3d2e <__eqdf2+0xa2>
    3ce2:	00d58c63          	beq	a1,a3,3cfa <__eqdf2+0x6e>
    3ce6:	04089463          	bnez	a7,3d2e <__eqdf2+0xa2>
    3cea:	01076733          	or	a4,a4,a6
    3cee:	00e03533          	snez	a0,a4
    3cf2:	8082                	ret
    3cf4:	00186073          	csrsi	fflags,16
    3cf8:	a815                	j	3d2c <__eqdf2+0xa0>
    3cfa:	4501                	li	a0,0
    3cfc:	8082                	ret
    3cfe:	7ff00693          	li	a3,2047
    3d02:	02d89163          	bne	a7,a3,3d24 <__eqdf2+0x98>
    3d06:	01076833          	or	a6,a4,a6
    3d0a:	00080d63          	beqz	a6,3d24 <__eqdf2+0x98>
    3d0e:	000806b7          	lui	a3,0x80
    3d12:	8f75                	and	a4,a4,a3
    3d14:	d365                	beqz	a4,3cf4 <__eqdf2+0x68>
    3d16:	7ff00713          	li	a4,2047
    3d1a:	4505                	li	a0,1
    3d1c:	00e31963          	bne	t1,a4,3d2e <__eqdf2+0xa2>
    3d20:	8e5d                	or	a2,a2,a5
    3d22:	c611                	beqz	a2,3d2e <__eqdf2+0xa2>
    3d24:	00080737          	lui	a4,0x80
    3d28:	8ff9                	and	a5,a5,a4
    3d2a:	d7e9                	beqz	a5,3cf4 <__eqdf2+0x68>
    3d2c:	4505                	li	a0,1
    3d2e:	8082                	ret

00003d30 <__gedf2>:
    3d30:	87aa                	mv	a5,a0
    3d32:	00202773          	frrm	a4
    3d36:	00100737          	lui	a4,0x100
    3d3a:	177d                	addi	a4,a4,-1
    3d3c:	0145d813          	srli	a6,a1,0x14
    3d40:	00b778b3          	and	a7,a4,a1
    3d44:	832a                	mv	t1,a0
    3d46:	7ff87813          	andi	a6,a6,2047
    3d4a:	01f5d513          	srli	a0,a1,0x1f
    3d4e:	7ff00e93          	li	t4,2047
    3d52:	0146d593          	srli	a1,a3,0x14
    3d56:	8f75                	and	a4,a4,a3
    3d58:	8e32                	mv	t3,a2
    3d5a:	7ff5f593          	andi	a1,a1,2047
    3d5e:	82fd                	srli	a3,a3,0x1f
    3d60:	01d81a63          	bne	a6,t4,3d74 <__gedf2+0x44>
    3d64:	00f8eeb3          	or	t4,a7,a5
    3d68:	060e8963          	beqz	t4,3dda <__gedf2+0xaa>
    3d6c:	00186073          	csrsi	fflags,16
    3d70:	5579                	li	a0,-2
    3d72:	8082                	ret
    3d74:	01d59663          	bne	a1,t4,3d80 <__gedf2+0x50>
    3d78:	00c76eb3          	or	t4,a4,a2
    3d7c:	fe0e98e3          	bnez	t4,3d6c <__gedf2+0x3c>
    3d80:	04081f63          	bnez	a6,3dde <__gedf2+0xae>
    3d84:	00f8e7b3          	or	a5,a7,a5
    3d88:	0017b793          	seqz	a5,a5
    3d8c:	e199                	bnez	a1,3d92 <__gedf2+0x62>
    3d8e:	8e59                	or	a2,a2,a4
    3d90:	c221                	beqz	a2,3dd0 <__gedf2+0xa0>
    3d92:	00079a63          	bnez	a5,3da6 <__gedf2+0x76>
    3d96:	00d51463          	bne	a0,a3,3d9e <__gedf2+0x6e>
    3d9a:	0105da63          	bge	a1,a6,3dae <__gedf2+0x7e>
    3d9e:	02050763          	beqz	a0,3dcc <__gedf2+0x9c>
    3da2:	557d                	li	a0,-1
    3da4:	8082                	ret
    3da6:	557d                	li	a0,-1
    3da8:	c699                	beqz	a3,3db6 <__gedf2+0x86>
    3daa:	8536                	mv	a0,a3
    3dac:	8082                	ret
    3dae:	00b85563          	bge	a6,a1,3db8 <__gedf2+0x88>
    3db2:	fe0508e3          	beqz	a0,3da2 <__gedf2+0x72>
    3db6:	8082                	ret
    3db8:	ff1763e3          	bltu	a4,a7,3d9e <__gedf2+0x6e>
    3dbc:	00e89c63          	bne	a7,a4,3dd4 <__gedf2+0xa4>
    3dc0:	fc6e6fe3          	bltu	t3,t1,3d9e <__gedf2+0x6e>
    3dc4:	ffc367e3          	bltu	t1,t3,3db2 <__gedf2+0x82>
    3dc8:	4501                	li	a0,0
    3dca:	8082                	ret
    3dcc:	4505                	li	a0,1
    3dce:	8082                	ret
    3dd0:	ffe5                	bnez	a5,3dc8 <__gedf2+0x98>
    3dd2:	b7f1                	j	3d9e <__gedf2+0x6e>
    3dd4:	fce8efe3          	bltu	a7,a4,3db2 <__gedf2+0x82>
    3dd8:	bfc5                	j	3dc8 <__gedf2+0x98>
    3dda:	f9058fe3          	beq	a1,a6,3d78 <__gedf2+0x48>
    3dde:	fa059ce3          	bnez	a1,3d96 <__gedf2+0x66>
    3de2:	4781                	li	a5,0
    3de4:	b76d                	j	3d8e <__gedf2+0x5e>

00003de6 <__ledf2>:
    3de6:	87aa                	mv	a5,a0
    3de8:	00202773          	frrm	a4
    3dec:	00100737          	lui	a4,0x100
    3df0:	177d                	addi	a4,a4,-1
    3df2:	0145d813          	srli	a6,a1,0x14
    3df6:	00b778b3          	and	a7,a4,a1
    3dfa:	832a                	mv	t1,a0
    3dfc:	7ff87813          	andi	a6,a6,2047
    3e00:	01f5d513          	srli	a0,a1,0x1f
    3e04:	7ff00e93          	li	t4,2047
    3e08:	0146d593          	srli	a1,a3,0x14
    3e0c:	8f75                	and	a4,a4,a3
    3e0e:	8e32                	mv	t3,a2
    3e10:	7ff5f593          	andi	a1,a1,2047
    3e14:	82fd                	srli	a3,a3,0x1f
    3e16:	01d81a63          	bne	a6,t4,3e2a <__ledf2+0x44>
    3e1a:	00f8eeb3          	or	t4,a7,a5
    3e1e:	060e8963          	beqz	t4,3e90 <__ledf2+0xaa>
    3e22:	00186073          	csrsi	fflags,16
    3e26:	4509                	li	a0,2
    3e28:	8082                	ret
    3e2a:	01d59663          	bne	a1,t4,3e36 <__ledf2+0x50>
    3e2e:	00c76eb3          	or	t4,a4,a2
    3e32:	fe0e98e3          	bnez	t4,3e22 <__ledf2+0x3c>
    3e36:	04081f63          	bnez	a6,3e94 <__ledf2+0xae>
    3e3a:	00f8e7b3          	or	a5,a7,a5
    3e3e:	0017b793          	seqz	a5,a5
    3e42:	e199                	bnez	a1,3e48 <__ledf2+0x62>
    3e44:	8e59                	or	a2,a2,a4
    3e46:	c221                	beqz	a2,3e86 <__ledf2+0xa0>
    3e48:	00079a63          	bnez	a5,3e5c <__ledf2+0x76>
    3e4c:	00d51463          	bne	a0,a3,3e54 <__ledf2+0x6e>
    3e50:	0105da63          	bge	a1,a6,3e64 <__ledf2+0x7e>
    3e54:	02050763          	beqz	a0,3e82 <__ledf2+0x9c>
    3e58:	557d                	li	a0,-1
    3e5a:	8082                	ret
    3e5c:	557d                	li	a0,-1
    3e5e:	c699                	beqz	a3,3e6c <__ledf2+0x86>
    3e60:	8536                	mv	a0,a3
    3e62:	8082                	ret
    3e64:	00b85563          	bge	a6,a1,3e6e <__ledf2+0x88>
    3e68:	fe0508e3          	beqz	a0,3e58 <__ledf2+0x72>
    3e6c:	8082                	ret
    3e6e:	ff1763e3          	bltu	a4,a7,3e54 <__ledf2+0x6e>
    3e72:	00e89c63          	bne	a7,a4,3e8a <__ledf2+0xa4>
    3e76:	fc6e6fe3          	bltu	t3,t1,3e54 <__ledf2+0x6e>
    3e7a:	ffc367e3          	bltu	t1,t3,3e68 <__ledf2+0x82>
    3e7e:	4501                	li	a0,0
    3e80:	8082                	ret
    3e82:	4505                	li	a0,1
    3e84:	8082                	ret
    3e86:	ffe5                	bnez	a5,3e7e <__ledf2+0x98>
    3e88:	b7f1                	j	3e54 <__ledf2+0x6e>
    3e8a:	fce8efe3          	bltu	a7,a4,3e68 <__ledf2+0x82>
    3e8e:	bfc5                	j	3e7e <__ledf2+0x98>
    3e90:	f9058fe3          	beq	a1,a6,3e2e <__ledf2+0x48>
    3e94:	fa059ce3          	bnez	a1,3e4c <__ledf2+0x66>
    3e98:	4781                	li	a5,0
    3e9a:	b76d                	j	3e44 <__ledf2+0x5e>

00003e9c <__muldf3>:
    3e9c:	7179                	addi	sp,sp,-48
    3e9e:	d422                	sw	s0,40(sp)
    3ea0:	ca56                	sw	s5,20(sp)
    3ea2:	c266                	sw	s9,4(sp)
    3ea4:	d606                	sw	ra,44(sp)
    3ea6:	d226                	sw	s1,36(sp)
    3ea8:	d04a                	sw	s2,32(sp)
    3eaa:	ce4e                	sw	s3,28(sp)
    3eac:	cc52                	sw	s4,24(sp)
    3eae:	c85a                	sw	s6,16(sp)
    3eb0:	c65e                	sw	s7,12(sp)
    3eb2:	c462                	sw	s8,8(sp)
    3eb4:	842a                	mv	s0,a0
    3eb6:	8cb2                	mv	s9,a2
    3eb8:	8ab6                	mv	s5,a3
    3eba:	00202973          	frrm	s2
    3ebe:	0145db93          	srli	s7,a1,0x14
    3ec2:	00c59993          	slli	s3,a1,0xc
    3ec6:	7ffbfb93          	andi	s7,s7,2047
    3eca:	00c9d993          	srli	s3,s3,0xc
    3ece:	01f5db13          	srli	s6,a1,0x1f
    3ed2:	020b8663          	beqz	s7,3efe <__muldf3+0x62>
    3ed6:	7ff00793          	li	a5,2047
    3eda:	06fb8b63          	beq	s7,a5,3f50 <__muldf3+0xb4>
    3ede:	01d55793          	srli	a5,a0,0x1d
    3ee2:	098e                	slli	s3,s3,0x3
    3ee4:	0137e9b3          	or	s3,a5,s3
    3ee8:	008007b7          	lui	a5,0x800
    3eec:	00f9e9b3          	or	s3,s3,a5
    3ef0:	00351a13          	slli	s4,a0,0x3
    3ef4:	c01b8b93          	addi	s7,s7,-1023
    3ef8:	4c01                	li	s8,0
    3efa:	4481                	li	s1,0
    3efc:	a0bd                	j	3f6a <__muldf3+0xce>
    3efe:	00a9e7b3          	or	a5,s3,a0
    3f02:	c7e1                	beqz	a5,3fca <__muldf3+0x12e>
    3f04:	02098b63          	beqz	s3,3f3a <__muldf3+0x9e>
    3f08:	854e                	mv	a0,s3
    3f0a:	010010ef          	jal	ra,4f1a <__clzsi2>
    3f0e:	ff550713          	addi	a4,a0,-11 # 7fff5 <_global_impure_ptr+0x79fed>
    3f12:	47f1                	li	a5,28
    3f14:	02e7c863          	blt	a5,a4,3f44 <__muldf3+0xa8>
    3f18:	47f5                	li	a5,29
    3f1a:	ff850a13          	addi	s4,a0,-8
    3f1e:	8f99                	sub	a5,a5,a4
    3f20:	014999b3          	sll	s3,s3,s4
    3f24:	00f457b3          	srl	a5,s0,a5
    3f28:	0137e9b3          	or	s3,a5,s3
    3f2c:	01441a33          	sll	s4,s0,s4
    3f30:	c0d00b93          	li	s7,-1011
    3f34:	40ab8bb3          	sub	s7,s7,a0
    3f38:	b7c1                	j	3ef8 <__muldf3+0x5c>
    3f3a:	7e1000ef          	jal	ra,4f1a <__clzsi2>
    3f3e:	02050513          	addi	a0,a0,32
    3f42:	b7f1                	j	3f0e <__muldf3+0x72>
    3f44:	fd850993          	addi	s3,a0,-40
    3f48:	013419b3          	sll	s3,s0,s3
    3f4c:	4a01                	li	s4,0
    3f4e:	b7cd                	j	3f30 <__muldf3+0x94>
    3f50:	00a9e433          	or	s0,s3,a0
    3f54:	c041                	beqz	s0,3fd4 <__muldf3+0x138>
    3f56:	000807b7          	lui	a5,0x80
    3f5a:	00f9f7b3          	and	a5,s3,a5
    3f5e:	8a2a                	mv	s4,a0
    3f60:	7ff00b93          	li	s7,2047
    3f64:	4c0d                	li	s8,3
    3f66:	44c1                	li	s1,16
    3f68:	fbc9                	bnez	a5,3efa <__muldf3+0x5e>
    3f6a:	014ad513          	srli	a0,s5,0x14
    3f6e:	00ca9413          	slli	s0,s5,0xc
    3f72:	7ff57513          	andi	a0,a0,2047
    3f76:	87e6                	mv	a5,s9
    3f78:	8031                	srli	s0,s0,0xc
    3f7a:	01fada93          	srli	s5,s5,0x1f
    3f7e:	c12d                	beqz	a0,3fe0 <__muldf3+0x144>
    3f80:	7ff00713          	li	a4,2047
    3f84:	0ae50763          	beq	a0,a4,4032 <__muldf3+0x196>
    3f88:	01dcd793          	srli	a5,s9,0x1d
    3f8c:	040e                	slli	s0,s0,0x3
    3f8e:	8c5d                	or	s0,s0,a5
    3f90:	008007b7          	lui	a5,0x800
    3f94:	8c5d                	or	s0,s0,a5
    3f96:	c0150513          	addi	a0,a0,-1023
    3f9a:	003c9793          	slli	a5,s9,0x3
    3f9e:	4701                	li	a4,0
    3fa0:	002c1693          	slli	a3,s8,0x2
    3fa4:	8ed9                	or	a3,a3,a4
    3fa6:	9baa                	add	s7,s7,a0
    3fa8:	16fd                	addi	a3,a3,-1
    3faa:	4639                	li	a2,14
    3fac:	015b45b3          	xor	a1,s6,s5
    3fb0:	001b8513          	addi	a0,s7,1
    3fb4:	0ed66b63          	bltu	a2,a3,40aa <__muldf3+0x20e>
    3fb8:	00002617          	auipc	a2,0x2
    3fbc:	e7860613          	addi	a2,a2,-392 # 5e30 <digest_ref+0x5c>
    3fc0:	068a                	slli	a3,a3,0x2
    3fc2:	96b2                	add	a3,a3,a2
    3fc4:	4294                	lw	a3,0(a3)
    3fc6:	96b2                	add	a3,a3,a2
    3fc8:	8682                	jr	a3
    3fca:	4981                	li	s3,0
    3fcc:	4a01                	li	s4,0
    3fce:	4b81                	li	s7,0
    3fd0:	4c05                	li	s8,1
    3fd2:	b725                	j	3efa <__muldf3+0x5e>
    3fd4:	4981                	li	s3,0
    3fd6:	4a01                	li	s4,0
    3fd8:	7ff00b93          	li	s7,2047
    3fdc:	4c09                	li	s8,2
    3fde:	bf31                	j	3efa <__muldf3+0x5e>
    3fe0:	019467b3          	or	a5,s0,s9
    3fe4:	c3bd                	beqz	a5,404a <__muldf3+0x1ae>
    3fe6:	02040a63          	beqz	s0,401a <__muldf3+0x17e>
    3fea:	8522                	mv	a0,s0
    3fec:	72f000ef          	jal	ra,4f1a <__clzsi2>
    3ff0:	ff550693          	addi	a3,a0,-11
    3ff4:	47f1                	li	a5,28
    3ff6:	02d7c863          	blt	a5,a3,4026 <__muldf3+0x18a>
    3ffa:	4775                	li	a4,29
    3ffc:	ff850793          	addi	a5,a0,-8
    4000:	8f15                	sub	a4,a4,a3
    4002:	00f41433          	sll	s0,s0,a5
    4006:	00ecd733          	srl	a4,s9,a4
    400a:	8c59                	or	s0,s0,a4
    400c:	00fc97b3          	sll	a5,s9,a5
    4010:	c0d00713          	li	a4,-1011
    4014:	40a70533          	sub	a0,a4,a0
    4018:	b759                	j	3f9e <__muldf3+0x102>
    401a:	8566                	mv	a0,s9
    401c:	6ff000ef          	jal	ra,4f1a <__clzsi2>
    4020:	02050513          	addi	a0,a0,32
    4024:	b7f1                	j	3ff0 <__muldf3+0x154>
    4026:	fd850413          	addi	s0,a0,-40
    402a:	008c9433          	sll	s0,s9,s0
    402e:	4781                	li	a5,0
    4030:	b7c5                	j	4010 <__muldf3+0x174>
    4032:	01946633          	or	a2,s0,s9
    4036:	ce19                	beqz	a2,4054 <__muldf3+0x1b8>
    4038:	00080737          	lui	a4,0x80
    403c:	8f61                	and	a4,a4,s0
    403e:	7ff00513          	li	a0,2047
    4042:	ef19                	bnez	a4,4060 <__muldf3+0x1c4>
    4044:	470d                	li	a4,3
    4046:	44c1                	li	s1,16
    4048:	bfa1                	j	3fa0 <__muldf3+0x104>
    404a:	4401                	li	s0,0
    404c:	4781                	li	a5,0
    404e:	4501                	li	a0,0
    4050:	4705                	li	a4,1
    4052:	b7b9                	j	3fa0 <__muldf3+0x104>
    4054:	4401                	li	s0,0
    4056:	4781                	li	a5,0
    4058:	7ff00513          	li	a0,2047
    405c:	4709                	li	a4,2
    405e:	b789                	j	3fa0 <__muldf3+0x104>
    4060:	470d                	li	a4,3
    4062:	bf3d                	j	3fa0 <__muldf3+0x104>
    4064:	00080437          	lui	s0,0x80
    4068:	4781                	li	a5,0
    406a:	7ff00713          	li	a4,2047
    406e:	4581                	li	a1,0
    4070:	44c1                	li	s1,16
    4072:	0752                	slli	a4,a4,0x14
    4074:	7ff006b7          	lui	a3,0x7ff00
    4078:	0432                	slli	s0,s0,0xc
    407a:	8f75                	and	a4,a4,a3
    407c:	8031                	srli	s0,s0,0xc
    407e:	05fe                	slli	a1,a1,0x1f
    4080:	8c59                	or	s0,s0,a4
    4082:	00b46733          	or	a4,s0,a1
    4086:	853e                	mv	a0,a5
    4088:	85ba                	mv	a1,a4
    408a:	c099                	beqz	s1,4090 <__muldf3+0x1f4>
    408c:	0014a073          	csrs	fflags,s1
    4090:	50b2                	lw	ra,44(sp)
    4092:	5422                	lw	s0,40(sp)
    4094:	5492                	lw	s1,36(sp)
    4096:	5902                	lw	s2,32(sp)
    4098:	49f2                	lw	s3,28(sp)
    409a:	4a62                	lw	s4,24(sp)
    409c:	4ad2                	lw	s5,20(sp)
    409e:	4b42                	lw	s6,16(sp)
    40a0:	4bb2                	lw	s7,12(sp)
    40a2:	4c22                	lw	s8,8(sp)
    40a4:	4c92                	lw	s9,4(sp)
    40a6:	6145                	addi	sp,sp,48
    40a8:	8082                	ret
    40aa:	6ec1                	lui	t4,0x10
    40ac:	fffe8e13          	addi	t3,t4,-1 # ffff <_global_impure_ptr+0x9ff7>
    40b0:	010a5713          	srli	a4,s4,0x10
    40b4:	0107d893          	srli	a7,a5,0x10
    40b8:	01ca7a33          	and	s4,s4,t3
    40bc:	01c7f7b3          	and	a5,a5,t3
    40c0:	03488833          	mul	a6,a7,s4
    40c4:	034786b3          	mul	a3,a5,s4
    40c8:	02f70f33          	mul	t5,a4,a5
    40cc:	01e80333          	add	t1,a6,t5
    40d0:	0106d813          	srli	a6,a3,0x10
    40d4:	981a                	add	a6,a6,t1
    40d6:	03170633          	mul	a2,a4,a7
    40da:	01e87363          	bgeu	a6,t5,40e0 <__muldf3+0x244>
    40de:	9676                	add	a2,a2,t4
    40e0:	01085f93          	srli	t6,a6,0x10
    40e4:	01c87833          	and	a6,a6,t3
    40e8:	01c6f6b3          	and	a3,a3,t3
    40ec:	01045e93          	srli	t4,s0,0x10
    40f0:	01c47e33          	and	t3,s0,t3
    40f4:	0842                	slli	a6,a6,0x10
    40f6:	9836                	add	a6,a6,a3
    40f8:	03c70f33          	mul	t5,a4,t3
    40fc:	03ca06b3          	mul	a3,s4,t3
    4100:	034e8a33          	mul	s4,t4,s4
    4104:	01ea0333          	add	t1,s4,t5
    4108:	0106da13          	srli	s4,a3,0x10
    410c:	9a1a                	add	s4,s4,t1
    410e:	03d70733          	mul	a4,a4,t4
    4112:	01ea7463          	bgeu	s4,t5,411a <__muldf3+0x27e>
    4116:	6341                	lui	t1,0x10
    4118:	971a                	add	a4,a4,t1
    411a:	010a5313          	srli	t1,s4,0x10
    411e:	933a                	add	t1,t1,a4
    4120:	6741                	lui	a4,0x10
    4122:	fff70f13          	addi	t5,a4,-1 # ffff <_global_impure_ptr+0x9ff7>
    4126:	01ea7a33          	and	s4,s4,t5
    412a:	01e6f6b3          	and	a3,a3,t5
    412e:	0109d413          	srli	s0,s3,0x10
    4132:	0a42                	slli	s4,s4,0x10
    4134:	01e9f9b3          	and	s3,s3,t5
    4138:	03378f33          	mul	t5,a5,s3
    413c:	9a36                	add	s4,s4,a3
    413e:	9fd2                	add	t6,t6,s4
    4140:	033886b3          	mul	a3,a7,s3
    4144:	02f407b3          	mul	a5,s0,a5
    4148:	028882b3          	mul	t0,a7,s0
    414c:	00f688b3          	add	a7,a3,a5
    4150:	010f5693          	srli	a3,t5,0x10
    4154:	96c6                	add	a3,a3,a7
    4156:	00f6f363          	bgeu	a3,a5,415c <__muldf3+0x2c0>
    415a:	92ba                	add	t0,t0,a4
    415c:	6741                	lui	a4,0x10
    415e:	fff70793          	addi	a5,a4,-1 # ffff <_global_impure_ptr+0x9ff7>
    4162:	00ff7f33          	and	t5,t5,a5
    4166:	0106d893          	srli	a7,a3,0x10
    416a:	8efd                	and	a3,a3,a5
    416c:	03c987b3          	mul	a5,s3,t3
    4170:	06c2                	slli	a3,a3,0x10
    4172:	96fa                	add	a3,a3,t5
    4174:	9896                	add	a7,a7,t0
    4176:	03c40e33          	mul	t3,s0,t3
    417a:	033e89b3          	mul	s3,t4,s3
    417e:	028e8f33          	mul	t5,t4,s0
    4182:	99f2                	add	s3,s3,t3
    4184:	0107d413          	srli	s0,a5,0x10
    4188:	99a2                	add	s3,s3,s0
    418a:	01c9f363          	bgeu	s3,t3,4190 <__muldf3+0x2f4>
    418e:	9f3a                	add	t5,t5,a4
    4190:	6e41                	lui	t3,0x10
    4192:	1e7d                	addi	t3,t3,-1
    4194:	01c9f733          	and	a4,s3,t3
    4198:	01c7f7b3          	and	a5,a5,t3
    419c:	0742                	slli	a4,a4,0x10
    419e:	967e                	add	a2,a2,t6
    41a0:	973e                	add	a4,a4,a5
    41a2:	01463a33          	sltu	s4,a2,s4
    41a6:	971a                	add	a4,a4,t1
    41a8:	01470433          	add	s0,a4,s4
    41ac:	9636                	add	a2,a2,a3
    41ae:	00d636b3          	sltu	a3,a2,a3
    41b2:	01140e33          	add	t3,s0,a7
    41b6:	00de0eb3          	add	t4,t3,a3
    41ba:	00673733          	sltu	a4,a4,t1
    41be:	01443433          	sltu	s0,s0,s4
    41c2:	8c59                	or	s0,s0,a4
    41c4:	00deb6b3          	sltu	a3,t4,a3
    41c8:	0109d993          	srli	s3,s3,0x10
    41cc:	011e38b3          	sltu	a7,t3,a7
    41d0:	944e                	add	s0,s0,s3
    41d2:	00d8e6b3          	or	a3,a7,a3
    41d6:	9436                	add	s0,s0,a3
    41d8:	947a                	add	s0,s0,t5
    41da:	017ed793          	srli	a5,t4,0x17
    41de:	0426                	slli	s0,s0,0x9
    41e0:	8c5d                	or	s0,s0,a5
    41e2:	00961793          	slli	a5,a2,0x9
    41e6:	0107e7b3          	or	a5,a5,a6
    41ea:	00f037b3          	snez	a5,a5
    41ee:	825d                	srli	a2,a2,0x17
    41f0:	01000737          	lui	a4,0x1000
    41f4:	8fd1                	or	a5,a5,a2
    41f6:	0ea6                	slli	t4,t4,0x9
    41f8:	8f61                	and	a4,a4,s0
    41fa:	01d7e7b3          	or	a5,a5,t4
    41fe:	cb25                	beqz	a4,426e <__muldf3+0x3d2>
    4200:	0017d713          	srli	a4,a5,0x1
    4204:	8b85                	andi	a5,a5,1
    4206:	8fd9                	or	a5,a5,a4
    4208:	01f41713          	slli	a4,s0,0x1f
    420c:	8fd9                	or	a5,a5,a4
    420e:	8005                	srli	s0,s0,0x1
    4210:	3ff50813          	addi	a6,a0,1023
    4214:	0d005063          	blez	a6,42d4 <__muldf3+0x438>
    4218:	0077f713          	andi	a4,a5,7
    421c:	c325                	beqz	a4,427c <__muldf3+0x3e0>
    421e:	4709                	li	a4,2
    4220:	0014e493          	ori	s1,s1,1
    4224:	04e90b63          	beq	s2,a4,427a <__muldf3+0x3de>
    4228:	470d                	li	a4,3
    422a:	04e90463          	beq	s2,a4,4272 <__muldf3+0x3d6>
    422e:	04091763          	bnez	s2,427c <__muldf3+0x3e0>
    4232:	00f7f713          	andi	a4,a5,15
    4236:	4691                	li	a3,4
    4238:	04d70263          	beq	a4,a3,427c <__muldf3+0x3e0>
    423c:	00478713          	addi	a4,a5,4 # 800004 <_global_impure_ptr+0x7f9ffc>
    4240:	00f737b3          	sltu	a5,a4,a5
    4244:	943e                	add	s0,s0,a5
    4246:	87ba                	mv	a5,a4
    4248:	a815                	j	427c <__muldf3+0x3e0>
    424a:	85da                	mv	a1,s6
    424c:	844e                	mv	s0,s3
    424e:	87d2                	mv	a5,s4
    4250:	8762                	mv	a4,s8
    4252:	4689                	li	a3,2
    4254:	1cd70763          	beq	a4,a3,4422 <__muldf3+0x586>
    4258:	468d                	li	a3,3
    425a:	1cd70963          	beq	a4,a3,442c <__muldf3+0x590>
    425e:	4685                	li	a3,1
    4260:	fad718e3          	bne	a4,a3,4210 <__muldf3+0x374>
    4264:	4401                	li	s0,0
    4266:	4781                	li	a5,0
    4268:	a265                	j	4410 <__muldf3+0x574>
    426a:	85d6                	mv	a1,s5
    426c:	b7dd                	j	4252 <__muldf3+0x3b6>
    426e:	855e                	mv	a0,s7
    4270:	b745                	j	4210 <__muldf3+0x374>
    4272:	e589                	bnez	a1,427c <__muldf3+0x3e0>
    4274:	00878713          	addi	a4,a5,8
    4278:	b7e1                	j	4240 <__muldf3+0x3a4>
    427a:	fded                	bnez	a1,4274 <__muldf3+0x3d8>
    427c:	01000737          	lui	a4,0x1000
    4280:	8f61                	and	a4,a4,s0
    4282:	c719                	beqz	a4,4290 <__muldf3+0x3f4>
    4284:	ff000737          	lui	a4,0xff000
    4288:	177d                	addi	a4,a4,-1
    428a:	8c79                	and	s0,s0,a4
    428c:	40050813          	addi	a6,a0,1024
    4290:	7fe00713          	li	a4,2046
    4294:	01074a63          	blt	a4,a6,42a8 <__muldf3+0x40c>
    4298:	0037d713          	srli	a4,a5,0x3
    429c:	01d41793          	slli	a5,s0,0x1d
    42a0:	8fd9                	or	a5,a5,a4
    42a2:	800d                	srli	s0,s0,0x3
    42a4:	8742                	mv	a4,a6
    42a6:	b3f1                	j	4072 <__muldf3+0x1d6>
    42a8:	4789                	li	a5,2
    42aa:	02f90363          	beq	s2,a5,42d0 <__muldf3+0x434>
    42ae:	478d                	li	a5,3
    42b0:	00f90863          	beq	s2,a5,42c0 <__muldf3+0x424>
    42b4:	00091763          	bnez	s2,42c2 <__muldf3+0x426>
    42b8:	4781                	li	a5,0
    42ba:	7ff00713          	li	a4,2047
    42be:	a029                	j	42c8 <__muldf3+0x42c>
    42c0:	dde5                	beqz	a1,42b8 <__muldf3+0x41c>
    42c2:	57fd                	li	a5,-1
    42c4:	7fe00713          	li	a4,2046
    42c8:	0054e493          	ori	s1,s1,5
    42cc:	843e                	mv	s0,a5
    42ce:	b355                	j	4072 <__muldf3+0x1d6>
    42d0:	f5e5                	bnez	a1,42b8 <__muldf3+0x41c>
    42d2:	bfc5                	j	42c2 <__muldf3+0x426>
    42d4:	4705                	li	a4,1
    42d6:	04081463          	bnez	a6,431e <__muldf3+0x482>
    42da:	0077f693          	andi	a3,a5,7
    42de:	8722                	mv	a4,s0
    42e0:	ca9d                	beqz	a3,4316 <__muldf3+0x47a>
    42e2:	4689                	li	a3,2
    42e4:	0014e493          	ori	s1,s1,1
    42e8:	02d90663          	beq	s2,a3,4314 <__muldf3+0x478>
    42ec:	468d                	li	a3,3
    42ee:	00d90f63          	beq	s2,a3,430c <__muldf3+0x470>
    42f2:	02091263          	bnez	s2,4316 <__muldf3+0x47a>
    42f6:	00f7f693          	andi	a3,a5,15
    42fa:	4611                	li	a2,4
    42fc:	00c68d63          	beq	a3,a2,4316 <__muldf3+0x47a>
    4300:	ffc7b713          	sltiu	a4,a5,-4
    4304:	00174713          	xori	a4,a4,1
    4308:	9722                	add	a4,a4,s0
    430a:	a031                	j	4316 <__muldf3+0x47a>
    430c:	e589                	bnez	a1,4316 <__muldf3+0x47a>
    430e:	ff87b713          	sltiu	a4,a5,-8
    4312:	bfcd                	j	4304 <__muldf3+0x468>
    4314:	fded                	bnez	a1,430e <__muldf3+0x472>
    4316:	8361                	srli	a4,a4,0x18
    4318:	00174713          	xori	a4,a4,1
    431c:	8b05                	andi	a4,a4,1
    431e:	4685                	li	a3,1
    4320:	410686b3          	sub	a3,a3,a6
    4324:	03800613          	li	a2,56
    4328:	0cd64263          	blt	a2,a3,43ec <__muldf3+0x550>
    432c:	467d                	li	a2,31
    432e:	04d64a63          	blt	a2,a3,4382 <__muldf3+0x4e6>
    4332:	41e50513          	addi	a0,a0,1054
    4336:	00a41633          	sll	a2,s0,a0
    433a:	00d7d833          	srl	a6,a5,a3
    433e:	00a797b3          	sll	a5,a5,a0
    4342:	01066633          	or	a2,a2,a6
    4346:	00f037b3          	snez	a5,a5
    434a:	8fd1                	or	a5,a5,a2
    434c:	00d45433          	srl	s0,s0,a3
    4350:	0077f693          	andi	a3,a5,7
    4354:	c2ad                	beqz	a3,43b6 <__muldf3+0x51a>
    4356:	4689                	li	a3,2
    4358:	0014e493          	ori	s1,s1,1
    435c:	04d90c63          	beq	s2,a3,43b4 <__muldf3+0x518>
    4360:	468d                	li	a3,3
    4362:	04d90563          	beq	s2,a3,43ac <__muldf3+0x510>
    4366:	04091863          	bnez	s2,43b6 <__muldf3+0x51a>
    436a:	00f7f693          	andi	a3,a5,15
    436e:	4611                	li	a2,4
    4370:	04c68363          	beq	a3,a2,43b6 <__muldf3+0x51a>
    4374:	00478693          	addi	a3,a5,4
    4378:	00f6b7b3          	sltu	a5,a3,a5
    437c:	943e                	add	s0,s0,a5
    437e:	87b6                	mv	a5,a3
    4380:	a81d                	j	43b6 <__muldf3+0x51a>
    4382:	5605                	li	a2,-31
    4384:	41060633          	sub	a2,a2,a6
    4388:	02000893          	li	a7,32
    438c:	00c45633          	srl	a2,s0,a2
    4390:	4801                	li	a6,0
    4392:	01168663          	beq	a3,a7,439e <__muldf3+0x502>
    4396:	43e50513          	addi	a0,a0,1086
    439a:	00a41833          	sll	a6,s0,a0
    439e:	00f867b3          	or	a5,a6,a5
    43a2:	00f037b3          	snez	a5,a5
    43a6:	8fd1                	or	a5,a5,a2
    43a8:	4401                	li	s0,0
    43aa:	b75d                	j	4350 <__muldf3+0x4b4>
    43ac:	e589                	bnez	a1,43b6 <__muldf3+0x51a>
    43ae:	00878693          	addi	a3,a5,8
    43b2:	b7d9                	j	4378 <__muldf3+0x4dc>
    43b4:	fded                	bnez	a1,43ae <__muldf3+0x512>
    43b6:	008006b7          	lui	a3,0x800
    43ba:	8ee1                	and	a3,a3,s0
    43bc:	ca81                	beqz	a3,43cc <__muldf3+0x530>
    43be:	0014e493          	ori	s1,s1,1
    43c2:	4401                	li	s0,0
    43c4:	4781                	li	a5,0
    43c6:	e305                	bnez	a4,43e6 <__muldf3+0x54a>
    43c8:	4705                	li	a4,1
    43ca:	b165                	j	4072 <__muldf3+0x1d6>
    43cc:	0037d693          	srli	a3,a5,0x3
    43d0:	01d41793          	slli	a5,s0,0x1d
    43d4:	8fd5                	or	a5,a5,a3
    43d6:	800d                	srli	s0,s0,0x3
    43d8:	c8070de3          	beqz	a4,4072 <__muldf3+0x1d6>
    43dc:	0014f713          	andi	a4,s1,1
    43e0:	c80709e3          	beqz	a4,4072 <__muldf3+0x1d6>
    43e4:	4701                	li	a4,0
    43e6:	0024e493          	ori	s1,s1,2
    43ea:	b161                	j	4072 <__muldf3+0x1d6>
    43ec:	8fc1                	or	a5,a5,s0
    43ee:	cf91                	beqz	a5,440a <__muldf3+0x56e>
    43f0:	4789                	li	a5,2
    43f2:	0014e493          	ori	s1,s1,1
    43f6:	02f90363          	beq	s2,a5,441c <__muldf3+0x580>
    43fa:	478d                	li	a5,3
    43fc:	00f90c63          	beq	s2,a5,4414 <__muldf3+0x578>
    4400:	4785                	li	a5,1
    4402:	00091363          	bnez	s2,4408 <__muldf3+0x56c>
    4406:	4795                	li	a5,5
    4408:	838d                	srli	a5,a5,0x3
    440a:	0024e493          	ori	s1,s1,2
    440e:	4401                	li	s0,0
    4410:	4701                	li	a4,0
    4412:	b185                	j	4072 <__muldf3+0x1d6>
    4414:	47a5                	li	a5,9
    4416:	d9ed                	beqz	a1,4408 <__muldf3+0x56c>
    4418:	4785                	li	a5,1
    441a:	b7fd                	j	4408 <__muldf3+0x56c>
    441c:	47a5                	li	a5,9
    441e:	f5ed                	bnez	a1,4408 <__muldf3+0x56c>
    4420:	bfe5                	j	4418 <__muldf3+0x57c>
    4422:	4401                	li	s0,0
    4424:	4781                	li	a5,0
    4426:	7ff00713          	li	a4,2047
    442a:	b1a1                	j	4072 <__muldf3+0x1d6>
    442c:	00080437          	lui	s0,0x80
    4430:	4781                	li	a5,0
    4432:	7ff00713          	li	a4,2047
    4436:	4581                	li	a1,0
    4438:	b92d                	j	4072 <__muldf3+0x1d6>

0000443a <__subdf3>:
    443a:	1101                	addi	sp,sp,-32
    443c:	ce06                	sw	ra,28(sp)
    443e:	cc22                	sw	s0,24(sp)
    4440:	ca26                	sw	s1,20(sp)
    4442:	c84a                	sw	s2,16(sp)
    4444:	c64e                	sw	s3,12(sp)
    4446:	c452                	sw	s4,8(sp)
    4448:	002029f3          	frrm	s3
    444c:	001008b7          	lui	a7,0x100
    4450:	18fd                	addi	a7,a7,-1
    4452:	00b8f733          	and	a4,a7,a1
    4456:	0145d413          	srli	s0,a1,0x14
    445a:	00d8f8b3          	and	a7,a7,a3
    445e:	01f5d493          	srli	s1,a1,0x1f
    4462:	0146d593          	srli	a1,a3,0x14
    4466:	00371793          	slli	a5,a4,0x3
    446a:	01f6d313          	srli	t1,a3,0x1f
    446e:	01d55713          	srli	a4,a0,0x1d
    4472:	01d65693          	srli	a3,a2,0x1d
    4476:	088e                	slli	a7,a7,0x3
    4478:	00361813          	slli	a6,a2,0x3
    447c:	7ff5f593          	andi	a1,a1,2047
    4480:	7ff00613          	li	a2,2047
    4484:	8f5d                	or	a4,a4,a5
    4486:	7ff47413          	andi	s0,s0,2047
    448a:	00351793          	slli	a5,a0,0x3
    448e:	0116e6b3          	or	a3,a3,a7
    4492:	00c59563          	bne	a1,a2,449c <__subdf3+0x62>
    4496:	0106e633          	or	a2,a3,a6
    449a:	e219                	bnez	a2,44a0 <__subdf3+0x66>
    449c:	00134313          	xori	t1,t1,1
    44a0:	40b40633          	sub	a2,s0,a1
    44a4:	3c931c63          	bne	t1,s1,487c <__subdf3+0x442>
    44a8:	12c05163          	blez	a2,45ca <__subdf3+0x190>
    44ac:	04059a63          	bnez	a1,4500 <__subdf3+0xc6>
    44b0:	0106e533          	or	a0,a3,a6
    44b4:	e10d                	bnez	a0,44d6 <__subdf3+0x9c>
    44b6:	7ff00693          	li	a3,2047
    44ba:	4401                	li	s0,0
    44bc:	24d61363          	bne	a2,a3,4702 <__subdf3+0x2c8>
    44c0:	00f766b3          	or	a3,a4,a5
    44c4:	7a068763          	beqz	a3,4c72 <__subdf3+0x838>
    44c8:	00400437          	lui	s0,0x400
    44cc:	8c79                	and	s0,s0,a4
    44ce:	00143413          	seqz	s0,s0
    44d2:	0412                	slli	s0,s0,0x4
    44d4:	a43d                	j	4702 <__subdf3+0x2c8>
    44d6:	fff60513          	addi	a0,a2,-1
    44da:	e901                	bnez	a0,44ea <__subdf3+0xb0>
    44dc:	983e                	add	a6,a6,a5
    44de:	96ba                	add	a3,a3,a4
    44e0:	00f837b3          	sltu	a5,a6,a5
    44e4:	96be                	add	a3,a3,a5
    44e6:	4605                	li	a2,1
    44e8:	a041                	j	4568 <__subdf3+0x12e>
    44ea:	7ff00893          	li	a7,2047
    44ee:	03161f63          	bne	a2,a7,452c <__subdf3+0xf2>
    44f2:	00f766b3          	or	a3,a4,a5
    44f6:	fae9                	bnez	a3,44c8 <__subdf3+0x8e>
    44f8:	4701                	li	a4,0
    44fa:	4781                	li	a5,0
    44fc:	4401                	li	s0,0
    44fe:	ac9d                	j	4774 <__subdf3+0x33a>
    4500:	7ff00593          	li	a1,2047
    4504:	02b41063          	bne	s0,a1,4524 <__subdf3+0xea>
    4508:	00f766b3          	or	a3,a4,a5
    450c:	76068663          	beqz	a3,4c78 <__subdf3+0x83e>
    4510:	004006b7          	lui	a3,0x400
    4514:	8ef9                	and	a3,a3,a4
    4516:	7ff00613          	li	a2,2047
    451a:	4581                	li	a1,0
    451c:	2e069263          	bnez	a3,4800 <__subdf3+0x3c6>
    4520:	4441                	li	s0,16
    4522:	a2c5                	j	4702 <__subdf3+0x2c8>
    4524:	008005b7          	lui	a1,0x800
    4528:	8ecd                	or	a3,a3,a1
    452a:	8532                	mv	a0,a2
    452c:	03800613          	li	a2,56
    4530:	08a64863          	blt	a2,a0,45c0 <__subdf3+0x186>
    4534:	467d                	li	a2,31
    4536:	04a64f63          	blt	a2,a0,4594 <__subdf3+0x15a>
    453a:	02000613          	li	a2,32
    453e:	8e09                	sub	a2,a2,a0
    4540:	00c695b3          	sll	a1,a3,a2
    4544:	00a858b3          	srl	a7,a6,a0
    4548:	00c81833          	sll	a6,a6,a2
    454c:	0115e5b3          	or	a1,a1,a7
    4550:	01003833          	snez	a6,a6
    4554:	0105e833          	or	a6,a1,a6
    4558:	00a6d6b3          	srl	a3,a3,a0
    455c:	983e                	add	a6,a6,a5
    455e:	96ba                	add	a3,a3,a4
    4560:	00f837b3          	sltu	a5,a6,a5
    4564:	96be                	add	a3,a3,a5
    4566:	8622                	mv	a2,s0
    4568:	008007b7          	lui	a5,0x800
    456c:	8ff5                	and	a5,a5,a3
    456e:	cbad                	beqz	a5,45e0 <__subdf3+0x1a6>
    4570:	0605                	addi	a2,a2,1
    4572:	7ff00793          	li	a5,2047
    4576:	2ef60263          	beq	a2,a5,485a <__subdf3+0x420>
    457a:	ff800737          	lui	a4,0xff800
    457e:	177d                	addi	a4,a4,-1
    4580:	00185793          	srli	a5,a6,0x1
    4584:	8f75                	and	a4,a4,a3
    4586:	00187813          	andi	a6,a6,1
    458a:	0107e833          	or	a6,a5,a6
    458e:	01f71793          	slli	a5,a4,0x1f
    4592:	a49d                	j	47f8 <__subdf3+0x3be>
    4594:	fe050593          	addi	a1,a0,-32
    4598:	02000893          	li	a7,32
    459c:	00b6d5b3          	srl	a1,a3,a1
    45a0:	4601                	li	a2,0
    45a2:	01150763          	beq	a0,a7,45b0 <__subdf3+0x176>
    45a6:	04000613          	li	a2,64
    45aa:	8e09                	sub	a2,a2,a0
    45ac:	00c69633          	sll	a2,a3,a2
    45b0:	01066833          	or	a6,a2,a6
    45b4:	01003833          	snez	a6,a6
    45b8:	0105e833          	or	a6,a1,a6
    45bc:	4681                	li	a3,0
    45be:	bf79                	j	455c <__subdf3+0x122>
    45c0:	0106e833          	or	a6,a3,a6
    45c4:	01003833          	snez	a6,a6
    45c8:	bfd5                	j	45bc <__subdf3+0x182>
    45ca:	ce65                	beqz	a2,46c2 <__subdf3+0x288>
    45cc:	40858633          	sub	a2,a1,s0
    45d0:	e829                	bnez	s0,4622 <__subdf3+0x1e8>
    45d2:	00f76533          	or	a0,a4,a5
    45d6:	e911                	bnez	a0,45ea <__subdf3+0x1b0>
    45d8:	7ff00793          	li	a5,2047
    45dc:	02f60663          	beq	a2,a5,4608 <__subdf3+0x1ce>
    45e0:	8736                	mv	a4,a3
    45e2:	87c2                	mv	a5,a6
    45e4:	48060563          	beqz	a2,4a6e <__subdf3+0x634>
    45e8:	ac19                	j	47fe <__subdf3+0x3c4>
    45ea:	fff60893          	addi	a7,a2,-1
    45ee:	00089963          	bnez	a7,4600 <__subdf3+0x1c6>
    45f2:	97c2                	add	a5,a5,a6
    45f4:	0107b833          	sltu	a6,a5,a6
    45f8:	96ba                	add	a3,a3,a4
    45fa:	96c2                	add	a3,a3,a6
    45fc:	883e                	mv	a6,a5
    45fe:	b5e5                	j	44e6 <__subdf3+0xac>
    4600:	7ff00513          	li	a0,2047
    4604:	04a61663          	bne	a2,a0,4650 <__subdf3+0x216>
    4608:	0106e7b3          	or	a5,a3,a6
    460c:	4701                	li	a4,0
    460e:	16078363          	beqz	a5,4774 <__subdf3+0x33a>
    4612:	004007b7          	lui	a5,0x400
    4616:	8ff5                	and	a5,a5,a3
    4618:	8736                	mv	a4,a3
    461a:	66079263          	bnez	a5,4c7e <__subdf3+0x844>
    461e:	87c2                	mv	a5,a6
    4620:	a015                	j	4644 <__subdf3+0x20a>
    4622:	7ff00513          	li	a0,2047
    4626:	02a59163          	bne	a1,a0,4648 <__subdf3+0x20e>
    462a:	0106e7b3          	or	a5,a3,a6
    462e:	62078463          	beqz	a5,4c56 <__subdf3+0x81c>
    4632:	004007b7          	lui	a5,0x400
    4636:	8ff5                	and	a5,a5,a3
    4638:	8736                	mv	a4,a3
    463a:	62079263          	bnez	a5,4c5e <__subdf3+0x824>
    463e:	87c2                	mv	a5,a6
    4640:	7ff00613          	li	a2,2047
    4644:	4581                	li	a1,0
    4646:	bde9                	j	4520 <__subdf3+0xe6>
    4648:	00800537          	lui	a0,0x800
    464c:	8f49                	or	a4,a4,a0
    464e:	88b2                	mv	a7,a2
    4650:	03800613          	li	a2,56
    4654:	07164363          	blt	a2,a7,46ba <__subdf3+0x280>
    4658:	467d                	li	a2,31
    465a:	03164b63          	blt	a2,a7,4690 <__subdf3+0x256>
    465e:	02000513          	li	a0,32
    4662:	41150533          	sub	a0,a0,a7
    4666:	00a71633          	sll	a2,a4,a0
    466a:	0117d333          	srl	t1,a5,a7
    466e:	00a797b3          	sll	a5,a5,a0
    4672:	00666633          	or	a2,a2,t1
    4676:	00f037b3          	snez	a5,a5
    467a:	8fd1                	or	a5,a5,a2
    467c:	01175733          	srl	a4,a4,a7
    4680:	97c2                	add	a5,a5,a6
    4682:	9736                	add	a4,a4,a3
    4684:	0107b6b3          	sltu	a3,a5,a6
    4688:	96ba                	add	a3,a3,a4
    468a:	883e                	mv	a6,a5
    468c:	862e                	mv	a2,a1
    468e:	bde9                	j	4568 <__subdf3+0x12e>
    4690:	fe088613          	addi	a2,a7,-32 # fffe0 <_global_impure_ptr+0xf9fd8>
    4694:	02000313          	li	t1,32
    4698:	00c75633          	srl	a2,a4,a2
    469c:	4501                	li	a0,0
    469e:	00688863          	beq	a7,t1,46ae <__subdf3+0x274>
    46a2:	04000513          	li	a0,64
    46a6:	41150533          	sub	a0,a0,a7
    46aa:	00a71533          	sll	a0,a4,a0
    46ae:	8fc9                	or	a5,a5,a0
    46b0:	00f037b3          	snez	a5,a5
    46b4:	8fd1                	or	a5,a5,a2
    46b6:	4701                	li	a4,0
    46b8:	b7e1                	j	4680 <__subdf3+0x246>
    46ba:	8fd9                	or	a5,a5,a4
    46bc:	00f037b3          	snez	a5,a5
    46c0:	bfdd                	j	46b6 <__subdf3+0x27c>
    46c2:	00140613          	addi	a2,s0,1 # 400001 <_global_impure_ptr+0x3f9ff9>
    46c6:	7fe67513          	andi	a0,a2,2046
    46ca:	10051a63          	bnez	a0,47de <__subdf3+0x3a4>
    46ce:	00f76633          	or	a2,a4,a5
    46d2:	e421                	bnez	s0,471a <__subdf3+0x2e0>
    46d4:	54060463          	beqz	a2,4c1c <__subdf3+0x7e2>
    46d8:	0106e633          	or	a2,a3,a6
    46dc:	38060963          	beqz	a2,4a6e <__subdf3+0x634>
    46e0:	983e                	add	a6,a6,a5
    46e2:	00f837b3          	sltu	a5,a6,a5
    46e6:	9736                	add	a4,a4,a3
    46e8:	973e                	add	a4,a4,a5
    46ea:	008007b7          	lui	a5,0x800
    46ee:	8ff9                	and	a5,a5,a4
    46f0:	52078763          	beqz	a5,4c1e <__subdf3+0x7e4>
    46f4:	ff8007b7          	lui	a5,0xff800
    46f8:	17fd                	addi	a5,a5,-1
    46fa:	8f7d                	and	a4,a4,a5
    46fc:	4581                	li	a1,0
    46fe:	87c2                	mv	a5,a6
    4700:	4605                	li	a2,1
    4702:	0077f693          	andi	a3,a5,7
    4706:	12069463          	bnez	a3,482e <__subdf3+0x3f4>
    470a:	06058563          	beqz	a1,4774 <__subdf3+0x33a>
    470e:	00147693          	andi	a3,s0,1
    4712:	c2ad                	beqz	a3,4774 <__subdf3+0x33a>
    4714:	00246413          	ori	s0,s0,2
    4718:	a8b1                	j	4774 <__subdf3+0x33a>
    471a:	7ff00513          	li	a0,2047
    471e:	02a41563          	bne	s0,a0,4748 <__subdf3+0x30e>
    4722:	5c060e63          	beqz	a2,4cfe <__subdf3+0x8c4>
    4726:	00400437          	lui	s0,0x400
    472a:	8c79                	and	s0,s0,a4
    472c:	00143413          	seqz	s0,s0
    4730:	0412                	slli	s0,s0,0x4
    4732:	02a59863          	bne	a1,a0,4762 <__subdf3+0x328>
    4736:	0106e5b3          	or	a1,a3,a6
    473a:	c991                	beqz	a1,474e <__subdf3+0x314>
    473c:	004005b7          	lui	a1,0x400
    4740:	8df5                	and	a1,a1,a3
    4742:	e591                	bnez	a1,474e <__subdf3+0x314>
    4744:	4441                	li	s0,16
    4746:	a021                	j	474e <__subdf3+0x314>
    4748:	4401                	li	s0,0
    474a:	fea586e3          	beq	a1,a0,4736 <__subdf3+0x2fc>
    474e:	00061a63          	bnez	a2,4762 <__subdf3+0x328>
    4752:	8736                	mv	a4,a3
    4754:	87c2                	mv	a5,a6
    4756:	4581                	li	a1,0
    4758:	7ff00613          	li	a2,2047
    475c:	b75d                	j	4702 <__subdf3+0x2c8>
    475e:	4401                	li	s0,0
    4760:	bfd9                	j	4736 <__subdf3+0x2fc>
    4762:	0106e6b3          	or	a3,a3,a6
    4766:	dae5                	beqz	a3,4756 <__subdf3+0x31c>
    4768:	4481                	li	s1,0
    476a:	00400737          	lui	a4,0x400
    476e:	4781                	li	a5,0
    4770:	7ff00613          	li	a2,2047
    4774:	008006b7          	lui	a3,0x800
    4778:	8ef9                	and	a3,a3,a4
    477a:	ca91                	beqz	a3,478e <__subdf3+0x354>
    477c:	0605                	addi	a2,a2,1
    477e:	7ff00693          	li	a3,2047
    4782:	54d60563          	beq	a2,a3,4ccc <__subdf3+0x892>
    4786:	ff8006b7          	lui	a3,0xff800
    478a:	16fd                	addi	a3,a3,-1
    478c:	8f75                	and	a4,a4,a3
    478e:	0037d513          	srli	a0,a5,0x3
    4792:	7ff00693          	li	a3,2047
    4796:	01d71793          	slli	a5,a4,0x1d
    479a:	8fc9                	or	a5,a5,a0
    479c:	830d                	srli	a4,a4,0x3
    479e:	00d61963          	bne	a2,a3,47b0 <__subdf3+0x376>
    47a2:	8fd9                	or	a5,a5,a4
    47a4:	4701                	li	a4,0
    47a6:	c789                	beqz	a5,47b0 <__subdf3+0x376>
    47a8:	00080737          	lui	a4,0x80
    47ac:	4781                	li	a5,0
    47ae:	4481                	li	s1,0
    47b0:	7ff006b7          	lui	a3,0x7ff00
    47b4:	0652                	slli	a2,a2,0x14
    47b6:	0732                	slli	a4,a4,0xc
    47b8:	8e75                	and	a2,a2,a3
    47ba:	8331                	srli	a4,a4,0xc
    47bc:	8f51                	or	a4,a4,a2
    47be:	04fe                	slli	s1,s1,0x1f
    47c0:	009766b3          	or	a3,a4,s1
    47c4:	853e                	mv	a0,a5
    47c6:	85b6                	mv	a1,a3
    47c8:	c019                	beqz	s0,47ce <__subdf3+0x394>
    47ca:	00142073          	csrs	fflags,s0
    47ce:	40f2                	lw	ra,28(sp)
    47d0:	4462                	lw	s0,24(sp)
    47d2:	44d2                	lw	s1,20(sp)
    47d4:	4942                	lw	s2,16(sp)
    47d6:	49b2                	lw	s3,12(sp)
    47d8:	4a22                	lw	s4,8(sp)
    47da:	6105                	addi	sp,sp,32
    47dc:	8082                	ret
    47de:	7ff00593          	li	a1,2047
    47e2:	02b60163          	beq	a2,a1,4804 <__subdf3+0x3ca>
    47e6:	983e                	add	a6,a6,a5
    47e8:	00f837b3          	sltu	a5,a6,a5
    47ec:	9736                	add	a4,a4,a3
    47ee:	973e                	add	a4,a4,a5
    47f0:	01f71793          	slli	a5,a4,0x1f
    47f4:	00185813          	srli	a6,a6,0x1
    47f8:	0107e7b3          	or	a5,a5,a6
    47fc:	8305                	srli	a4,a4,0x1
    47fe:	4581                	li	a1,0
    4800:	4401                	li	s0,0
    4802:	b701                	j	4702 <__subdf3+0x2c8>
    4804:	00098763          	beqz	s3,4812 <__subdf3+0x3d8>
    4808:	478d                	li	a5,3
    480a:	00f99763          	bne	s3,a5,4818 <__subdf3+0x3de>
    480e:	00049a63          	bnez	s1,4822 <__subdf3+0x3e8>
    4812:	7ff00613          	li	a2,2047
    4816:	a889                	j	4868 <__subdf3+0x42e>
    4818:	4789                	li	a5,2
    481a:	00f99463          	bne	s3,a5,4822 <__subdf3+0x3e8>
    481e:	fe049ae3          	bnez	s1,4812 <__subdf3+0x3d8>
    4822:	4581                	li	a1,0
    4824:	577d                	li	a4,-1
    4826:	57fd                	li	a5,-1
    4828:	7fe00613          	li	a2,2046
    482c:	4415                	li	s0,5
    482e:	4689                	li	a3,2
    4830:	00146413          	ori	s0,s0,1
    4834:	48d98863          	beq	s3,a3,4cc4 <__subdf3+0x88a>
    4838:	468d                	li	a3,3
    483a:	48d98163          	beq	s3,a3,4cbc <__subdf3+0x882>
    483e:	48099463          	bnez	s3,4cc6 <__subdf3+0x88c>
    4842:	00f7f693          	andi	a3,a5,15
    4846:	4511                	li	a0,4
    4848:	46a68f63          	beq	a3,a0,4cc6 <__subdf3+0x88c>
    484c:	00478693          	addi	a3,a5,4 # ff800004 <__kernel_stack+0xdf74000c>
    4850:	00f6b7b3          	sltu	a5,a3,a5
    4854:	973e                	add	a4,a4,a5
    4856:	87b6                	mv	a5,a3
    4858:	a1bd                	j	4cc6 <__subdf3+0x88c>
    485a:	00098763          	beqz	s3,4868 <__subdf3+0x42e>
    485e:	478d                	li	a5,3
    4860:	00f99863          	bne	s3,a5,4870 <__subdf3+0x436>
    4864:	40049163          	bnez	s1,4c66 <__subdf3+0x82c>
    4868:	4701                	li	a4,0
    486a:	4781                	li	a5,0
    486c:	4415                	li	s0,5
    486e:	b719                	j	4774 <__subdf3+0x33a>
    4870:	4789                	li	a5,2
    4872:	3ef99a63          	bne	s3,a5,4c66 <__subdf3+0x82c>
    4876:	fe0499e3          	bnez	s1,4868 <__subdf3+0x42e>
    487a:	b765                	j	4822 <__subdf3+0x3e8>
    487c:	0cc05863          	blez	a2,494c <__subdf3+0x512>
    4880:	08059263          	bnez	a1,4904 <__subdf3+0x4ca>
    4884:	0106e533          	or	a0,a3,a6
    4888:	c20507e3          	beqz	a0,44b6 <__subdf3+0x7c>
    488c:	fff60513          	addi	a0,a2,-1
    4890:	e911                	bnez	a0,48a4 <__subdf3+0x46a>
    4892:	41078833          	sub	a6,a5,a6
    4896:	40d706b3          	sub	a3,a4,a3
    489a:	0107b7b3          	sltu	a5,a5,a6
    489e:	8e9d                	sub	a3,a3,a5
    48a0:	4605                	li	a2,1
    48a2:	a0a9                	j	48ec <__subdf3+0x4b2>
    48a4:	7ff00893          	li	a7,2047
    48a8:	c51605e3          	beq	a2,a7,44f2 <__subdf3+0xb8>
    48ac:	03800613          	li	a2,56
    48b0:	08a64963          	blt	a2,a0,4942 <__subdf3+0x508>
    48b4:	467d                	li	a2,31
    48b6:	06a64063          	blt	a2,a0,4916 <__subdf3+0x4dc>
    48ba:	02000613          	li	a2,32
    48be:	8e09                	sub	a2,a2,a0
    48c0:	00c695b3          	sll	a1,a3,a2
    48c4:	00a858b3          	srl	a7,a6,a0
    48c8:	00c81833          	sll	a6,a6,a2
    48cc:	0115e5b3          	or	a1,a1,a7
    48d0:	01003833          	snez	a6,a6
    48d4:	0105e833          	or	a6,a1,a6
    48d8:	00a6d6b3          	srl	a3,a3,a0
    48dc:	41078833          	sub	a6,a5,a6
    48e0:	40d706b3          	sub	a3,a4,a3
    48e4:	0107b7b3          	sltu	a5,a5,a6
    48e8:	8e9d                	sub	a3,a3,a5
    48ea:	8622                	mv	a2,s0
    48ec:	00800937          	lui	s2,0x800
    48f0:	0126f7b3          	and	a5,a3,s2
    48f4:	ce0786e3          	beqz	a5,45e0 <__subdf3+0x1a6>
    48f8:	197d                	addi	s2,s2,-1
    48fa:	0126f933          	and	s2,a3,s2
    48fe:	8a42                	mv	s4,a6
    4900:	8432                	mv	s0,a2
    4902:	ac8d                	j	4b74 <__subdf3+0x73a>
    4904:	7ff00593          	li	a1,2047
    4908:	c0b400e3          	beq	s0,a1,4508 <__subdf3+0xce>
    490c:	008005b7          	lui	a1,0x800
    4910:	8ecd                	or	a3,a3,a1
    4912:	8532                	mv	a0,a2
    4914:	bf61                	j	48ac <__subdf3+0x472>
    4916:	fe050593          	addi	a1,a0,-32 # 7fffe0 <_global_impure_ptr+0x7f9fd8>
    491a:	02000893          	li	a7,32
    491e:	00b6d5b3          	srl	a1,a3,a1
    4922:	4601                	li	a2,0
    4924:	01150763          	beq	a0,a7,4932 <__subdf3+0x4f8>
    4928:	04000613          	li	a2,64
    492c:	8e09                	sub	a2,a2,a0
    492e:	00c69633          	sll	a2,a3,a2
    4932:	01066833          	or	a6,a2,a6
    4936:	01003833          	snez	a6,a6
    493a:	0105e833          	or	a6,a1,a6
    493e:	4681                	li	a3,0
    4940:	bf71                	j	48dc <__subdf3+0x4a2>
    4942:	0106e833          	or	a6,a3,a6
    4946:	01003833          	snez	a6,a6
    494a:	bfd5                	j	493e <__subdf3+0x504>
    494c:	ce6d                	beqz	a2,4a46 <__subdf3+0x60c>
    494e:	40858633          	sub	a2,a1,s0
    4952:	e439                	bnez	s0,49a0 <__subdf3+0x566>
    4954:	00f76533          	or	a0,a4,a5
    4958:	e509                	bnez	a0,4962 <__subdf3+0x528>
    495a:	7ff00793          	li	a5,2047
    495e:	849a                	mv	s1,t1
    4960:	b9b5                	j	45dc <__subdf3+0x1a2>
    4962:	fff60893          	addi	a7,a2,-1
    4966:	00089c63          	bnez	a7,497e <__subdf3+0x544>
    496a:	40f807b3          	sub	a5,a6,a5
    496e:	00f83833          	sltu	a6,a6,a5
    4972:	8e99                	sub	a3,a3,a4
    4974:	410686b3          	sub	a3,a3,a6
    4978:	849a                	mv	s1,t1
    497a:	883e                	mv	a6,a5
    497c:	b715                	j	48a0 <__subdf3+0x466>
    497e:	7ff00513          	li	a0,2047
    4982:	04a61563          	bne	a2,a0,49cc <__subdf3+0x592>
    4986:	0106e7b3          	or	a5,a3,a6
    498a:	2e078d63          	beqz	a5,4c84 <__subdf3+0x84a>
    498e:	004007b7          	lui	a5,0x400
    4992:	8ff5                	and	a5,a5,a3
    4994:	8736                	mv	a4,a3
    4996:	2e079a63          	bnez	a5,4c8a <__subdf3+0x850>
    499a:	87c2                	mv	a5,a6
    499c:	849a                	mv	s1,t1
    499e:	b15d                	j	4644 <__subdf3+0x20a>
    49a0:	7ff00513          	li	a0,2047
    49a4:	02a59063          	bne	a1,a0,49c4 <__subdf3+0x58a>
    49a8:	0106e7b3          	or	a5,a3,a6
    49ac:	2e078263          	beqz	a5,4c90 <__subdf3+0x856>
    49b0:	004007b7          	lui	a5,0x400
    49b4:	8ff5                	and	a5,a5,a3
    49b6:	8736                	mv	a4,a3
    49b8:	2e079163          	bnez	a5,4c9a <__subdf3+0x860>
    49bc:	87c2                	mv	a5,a6
    49be:	7ff00613          	li	a2,2047
    49c2:	bfe9                	j	499c <__subdf3+0x562>
    49c4:	00800537          	lui	a0,0x800
    49c8:	8f49                	or	a4,a4,a0
    49ca:	88b2                	mv	a7,a2
    49cc:	03800613          	li	a2,56
    49d0:	07164763          	blt	a2,a7,4a3e <__subdf3+0x604>
    49d4:	467d                	li	a2,31
    49d6:	03164f63          	blt	a2,a7,4a14 <__subdf3+0x5da>
    49da:	02000513          	li	a0,32
    49de:	41150533          	sub	a0,a0,a7
    49e2:	00a71633          	sll	a2,a4,a0
    49e6:	0117de33          	srl	t3,a5,a7
    49ea:	00a797b3          	sll	a5,a5,a0
    49ee:	01c66633          	or	a2,a2,t3
    49f2:	00f037b3          	snez	a5,a5
    49f6:	8fd1                	or	a5,a5,a2
    49f8:	01175733          	srl	a4,a4,a7
    49fc:	40f807b3          	sub	a5,a6,a5
    4a00:	40e68733          	sub	a4,a3,a4
    4a04:	00f836b3          	sltu	a3,a6,a5
    4a08:	40d706b3          	sub	a3,a4,a3
    4a0c:	883e                	mv	a6,a5
    4a0e:	862e                	mv	a2,a1
    4a10:	849a                	mv	s1,t1
    4a12:	bde9                	j	48ec <__subdf3+0x4b2>
    4a14:	fe088613          	addi	a2,a7,-32
    4a18:	02000e13          	li	t3,32
    4a1c:	00c75633          	srl	a2,a4,a2
    4a20:	4501                	li	a0,0
    4a22:	01c88863          	beq	a7,t3,4a32 <__subdf3+0x5f8>
    4a26:	04000513          	li	a0,64
    4a2a:	41150533          	sub	a0,a0,a7
    4a2e:	00a71533          	sll	a0,a4,a0
    4a32:	8fc9                	or	a5,a5,a0
    4a34:	00f037b3          	snez	a5,a5
    4a38:	8fd1                	or	a5,a5,a2
    4a3a:	4701                	li	a4,0
    4a3c:	b7c1                	j	49fc <__subdf3+0x5c2>
    4a3e:	8fd9                	or	a5,a5,a4
    4a40:	00f037b3          	snez	a5,a5
    4a44:	bfdd                	j	4a3a <__subdf3+0x600>
    4a46:	00140613          	addi	a2,s0,1 # 400001 <_global_impure_ptr+0x3f9ff9>
    4a4a:	7fe67613          	andi	a2,a2,2046
    4a4e:	ee75                	bnez	a2,4b4a <__subdf3+0x710>
    4a50:	00f76533          	or	a0,a4,a5
    4a54:	0106e633          	or	a2,a3,a6
    4a58:	e05d                	bnez	s0,4afe <__subdf3+0x6c4>
    4a5a:	06051263          	bnez	a0,4abe <__subdf3+0x684>
    4a5e:	1c061263          	bnez	a2,4c22 <__subdf3+0x7e8>
    4a62:	ffe98493          	addi	s1,s3,-2
    4a66:	0014b493          	seqz	s1,s1
    4a6a:	4701                	li	a4,0
    4a6c:	4781                	li	a5,0
    4a6e:	00e7e6b3          	or	a3,a5,a4
    4a72:	24068163          	beqz	a3,4cb4 <__subdf3+0x87a>
    4a76:	01f7d693          	srli	a3,a5,0x1f
    4a7a:	00171593          	slli	a1,a4,0x1
    4a7e:	95b6                	add	a1,a1,a3
    4a80:	00179693          	slli	a3,a5,0x1
    4a84:	0076f613          	andi	a2,a3,7
    4a88:	4401                	li	s0,0
    4a8a:	c605                	beqz	a2,4ab2 <__subdf3+0x678>
    4a8c:	4609                	li	a2,2
    4a8e:	1ac98a63          	beq	s3,a2,4c42 <__subdf3+0x808>
    4a92:	460d                	li	a2,3
    4a94:	18c98d63          	beq	s3,a2,4c2e <__subdf3+0x7f4>
    4a98:	4405                	li	s0,1
    4a9a:	00099c63          	bnez	s3,4ab2 <__subdf3+0x678>
    4a9e:	00f6f613          	andi	a2,a3,15
    4aa2:	4511                	li	a0,4
    4aa4:	00a60763          	beq	a2,a0,4ab2 <__subdf3+0x678>
    4aa8:	ffc6b693          	sltiu	a3,a3,-4
    4aac:	0016c693          	xori	a3,a3,1
    4ab0:	95b6                	add	a1,a1,a3
    4ab2:	81e1                	srli	a1,a1,0x18
    4ab4:	0015c593          	xori	a1,a1,1
    4ab8:	8985                	andi	a1,a1,1
    4aba:	4601                	li	a2,0
    4abc:	b199                	j	4702 <__subdf3+0x2c8>
    4abe:	da45                	beqz	a2,4a6e <__subdf3+0x634>
    4ac0:	410785b3          	sub	a1,a5,a6
    4ac4:	00b7b533          	sltu	a0,a5,a1
    4ac8:	40d70633          	sub	a2,a4,a3
    4acc:	8e09                	sub	a2,a2,a0
    4ace:	00800537          	lui	a0,0x800
    4ad2:	8d71                	and	a0,a0,a2
    4ad4:	c919                	beqz	a0,4aea <__subdf3+0x6b0>
    4ad6:	40f807b3          	sub	a5,a6,a5
    4ada:	40e68733          	sub	a4,a3,a4
    4ade:	00f83833          	sltu	a6,a6,a5
    4ae2:	41070733          	sub	a4,a4,a6
    4ae6:	849a                	mv	s1,t1
    4ae8:	b759                	j	4a6e <__subdf3+0x634>
    4aea:	00c5e7b3          	or	a5,a1,a2
    4aee:	12079d63          	bnez	a5,4c28 <__subdf3+0x7ee>
    4af2:	ffe98493          	addi	s1,s3,-2
    4af6:	0014b493          	seqz	s1,s1
    4afa:	4701                	li	a4,0
    4afc:	bf8d                	j	4a6e <__subdf3+0x634>
    4afe:	7ff00893          	li	a7,2047
    4b02:	03141463          	bne	s0,a7,4b2a <__subdf3+0x6f0>
    4b06:	1e050863          	beqz	a0,4cf6 <__subdf3+0x8bc>
    4b0a:	00400437          	lui	s0,0x400
    4b0e:	8c79                	and	s0,s0,a4
    4b10:	00143413          	seqz	s0,s0
    4b14:	0412                	slli	s0,s0,0x4
    4b16:	03159763          	bne	a1,a7,4b44 <__subdf3+0x70a>
    4b1a:	00060b63          	beqz	a2,4b30 <__subdf3+0x6f6>
    4b1e:	004005b7          	lui	a1,0x400
    4b22:	8df5                	and	a1,a1,a3
    4b24:	e591                	bnez	a1,4b30 <__subdf3+0x6f6>
    4b26:	4441                	li	s0,16
    4b28:	a021                	j	4b30 <__subdf3+0x6f6>
    4b2a:	4401                	li	s0,0
    4b2c:	ff1587e3          	beq	a1,a7,4b1a <__subdf3+0x6e0>
    4b30:	00051a63          	bnez	a0,4b44 <__subdf3+0x70a>
    4b34:	16060863          	beqz	a2,4ca4 <__subdf3+0x86a>
    4b38:	8736                	mv	a4,a3
    4b3a:	87c2                	mv	a5,a6
    4b3c:	849a                	mv	s1,t1
    4b3e:	b921                	j	4756 <__subdf3+0x31c>
    4b40:	4401                	li	s0,0
    4b42:	bfe1                	j	4b1a <__subdf3+0x6e0>
    4b44:	c00609e3          	beqz	a2,4756 <__subdf3+0x31c>
    4b48:	b105                	j	4768 <__subdf3+0x32e>
    4b4a:	41078a33          	sub	s4,a5,a6
    4b4e:	0147b633          	sltu	a2,a5,s4
    4b52:	40d70933          	sub	s2,a4,a3
    4b56:	40c90933          	sub	s2,s2,a2
    4b5a:	00800637          	lui	a2,0x800
    4b5e:	00c97633          	and	a2,s2,a2
    4b62:	c625                	beqz	a2,4bca <__subdf3+0x790>
    4b64:	40f80a33          	sub	s4,a6,a5
    4b68:	8e99                	sub	a3,a3,a4
    4b6a:	01483833          	sltu	a6,a6,s4
    4b6e:	41068933          	sub	s2,a3,a6
    4b72:	849a                	mv	s1,t1
    4b74:	04090f63          	beqz	s2,4bd2 <__subdf3+0x798>
    4b78:	854a                	mv	a0,s2
    4b7a:	2645                	jal	4f1a <__clzsi2>
    4b7c:	ff850613          	addi	a2,a0,-8 # 7ffff8 <_global_impure_ptr+0x7f9ff0>
    4b80:	47fd                	li	a5,31
    4b82:	04c7cd63          	blt	a5,a2,4bdc <__subdf3+0x7a2>
    4b86:	02000693          	li	a3,32
    4b8a:	8e91                	sub	a3,a3,a2
    4b8c:	00c91733          	sll	a4,s2,a2
    4b90:	00da56b3          	srl	a3,s4,a3
    4b94:	8ed9                	or	a3,a3,a4
    4b96:	00ca1833          	sll	a6,s4,a2
    4b9a:	06864a63          	blt	a2,s0,4c0e <__subdf3+0x7d4>
    4b9e:	8e01                	sub	a2,a2,s0
    4ba0:	00160713          	addi	a4,a2,1 # 800001 <_global_impure_ptr+0x7f9ff9>
    4ba4:	47fd                	li	a5,31
    4ba6:	04e7c163          	blt	a5,a4,4be8 <__subdf3+0x7ae>
    4baa:	02000613          	li	a2,32
    4bae:	8e19                	sub	a2,a2,a4
    4bb0:	00c697b3          	sll	a5,a3,a2
    4bb4:	00e85533          	srl	a0,a6,a4
    4bb8:	00c81633          	sll	a2,a6,a2
    4bbc:	8fc9                	or	a5,a5,a0
    4bbe:	00c03633          	snez	a2,a2
    4bc2:	8fd1                	or	a5,a5,a2
    4bc4:	00e6d733          	srl	a4,a3,a4
    4bc8:	b55d                	j	4a6e <__subdf3+0x634>
    4bca:	012a67b3          	or	a5,s4,s2
    4bce:	f3dd                	bnez	a5,4b74 <__subdf3+0x73a>
    4bd0:	b70d                	j	4af2 <__subdf3+0x6b8>
    4bd2:	8552                	mv	a0,s4
    4bd4:	2699                	jal	4f1a <__clzsi2>
    4bd6:	02050513          	addi	a0,a0,32
    4bda:	b74d                	j	4b7c <__subdf3+0x742>
    4bdc:	fd850693          	addi	a3,a0,-40
    4be0:	00da16b3          	sll	a3,s4,a3
    4be4:	4801                	li	a6,0
    4be6:	bf55                	j	4b9a <__subdf3+0x760>
    4be8:	1605                	addi	a2,a2,-31
    4bea:	02000593          	li	a1,32
    4bee:	00c6d633          	srl	a2,a3,a2
    4bf2:	4781                	li	a5,0
    4bf4:	00b70763          	beq	a4,a1,4c02 <__subdf3+0x7c8>
    4bf8:	04000793          	li	a5,64
    4bfc:	8f99                	sub	a5,a5,a4
    4bfe:	00f697b3          	sll	a5,a3,a5
    4c02:	00f867b3          	or	a5,a6,a5
    4c06:	00f037b3          	snez	a5,a5
    4c0a:	8fd1                	or	a5,a5,a2
    4c0c:	b5fd                	j	4afa <__subdf3+0x6c0>
    4c0e:	ff8007b7          	lui	a5,0xff800
    4c12:	17fd                	addi	a5,a5,-1
    4c14:	40c40633          	sub	a2,s0,a2
    4c18:	8efd                	and	a3,a3,a5
    4c1a:	b2d9                	j	45e0 <__subdf3+0x1a6>
    4c1c:	8736                	mv	a4,a3
    4c1e:	87c2                	mv	a5,a6
    4c20:	b5b9                	j	4a6e <__subdf3+0x634>
    4c22:	8736                	mv	a4,a3
    4c24:	87c2                	mv	a5,a6
    4c26:	b5c1                	j	4ae6 <__subdf3+0x6ac>
    4c28:	8732                	mv	a4,a2
    4c2a:	87ae                	mv	a5,a1
    4c2c:	b589                	j	4a6e <__subdf3+0x634>
    4c2e:	8426                	mv	s0,s1
    4c30:	e80491e3          	bnez	s1,4ab2 <__subdf3+0x678>
    4c34:	ff86b693          	sltiu	a3,a3,-8
    4c38:	0016c693          	xori	a3,a3,1
    4c3c:	95b6                	add	a1,a1,a3
    4c3e:	4405                	li	s0,1
    4c40:	bd8d                	j	4ab2 <__subdf3+0x678>
    4c42:	4405                	li	s0,1
    4c44:	e60487e3          	beqz	s1,4ab2 <__subdf3+0x678>
    4c48:	ff86b693          	sltiu	a3,a3,-8
    4c4c:	0016c693          	xori	a3,a3,1
    4c50:	95b6                	add	a1,a1,a3
    4c52:	8426                	mv	s0,s1
    4c54:	bdb9                	j	4ab2 <__subdf3+0x678>
    4c56:	4701                	li	a4,0
    4c58:	7ff00613          	li	a2,2047
    4c5c:	b045                	j	44fc <__subdf3+0xc2>
    4c5e:	87c2                	mv	a5,a6
    4c60:	7ff00613          	li	a2,2047
    4c64:	be69                	j	47fe <__subdf3+0x3c4>
    4c66:	577d                	li	a4,-1
    4c68:	57fd                	li	a5,-1
    4c6a:	7fe00613          	li	a2,2046
    4c6e:	4581                	li	a1,0
    4c70:	be75                	j	482c <__subdf3+0x3f2>
    4c72:	4701                	li	a4,0
    4c74:	4781                	li	a5,0
    4c76:	bcfd                	j	4774 <__subdf3+0x33a>
    4c78:	4701                	li	a4,0
    4c7a:	4781                	li	a5,0
    4c7c:	bff1                	j	4c58 <__subdf3+0x81e>
    4c7e:	87c2                	mv	a5,a6
    4c80:	4581                	li	a1,0
    4c82:	b441                	j	4702 <__subdf3+0x2c8>
    4c84:	4701                	li	a4,0
    4c86:	849a                	mv	s1,t1
    4c88:	b4f5                	j	4774 <__subdf3+0x33a>
    4c8a:	87c2                	mv	a5,a6
    4c8c:	849a                	mv	s1,t1
    4c8e:	bfcd                	j	4c80 <__subdf3+0x846>
    4c90:	4701                	li	a4,0
    4c92:	7ff00613          	li	a2,2047
    4c96:	849a                	mv	s1,t1
    4c98:	b095                	j	44fc <__subdf3+0xc2>
    4c9a:	87c2                	mv	a5,a6
    4c9c:	7ff00613          	li	a2,2047
    4ca0:	849a                	mv	s1,t1
    4ca2:	beb1                	j	47fe <__subdf3+0x3c4>
    4ca4:	4781                	li	a5,0
    4ca6:	4481                	li	s1,0
    4ca8:	00400737          	lui	a4,0x400
    4cac:	7ff00613          	li	a2,2047
    4cb0:	4441                	li	s0,16
    4cb2:	b4c9                	j	4774 <__subdf3+0x33a>
    4cb4:	4701                	li	a4,0
    4cb6:	4781                	li	a5,0
    4cb8:	4601                	li	a2,0
    4cba:	b089                	j	44fc <__subdf3+0xc2>
    4cbc:	e489                	bnez	s1,4cc6 <__subdf3+0x88c>
    4cbe:	00878693          	addi	a3,a5,8 # ff800008 <__kernel_stack+0xdf740010>
    4cc2:	b679                	j	4850 <__subdf3+0x416>
    4cc4:	fced                	bnez	s1,4cbe <__subdf3+0x884>
    4cc6:	a40597e3          	bnez	a1,4714 <__subdf3+0x2da>
    4cca:	b46d                	j	4774 <__subdf3+0x33a>
    4ccc:	4781                	li	a5,0
    4cce:	02098063          	beqz	s3,4cee <__subdf3+0x8b4>
    4cd2:	470d                	li	a4,3
    4cd4:	00e99863          	bne	s3,a4,4ce4 <__subdf3+0x8aa>
    4cd8:	00048b63          	beqz	s1,4cee <__subdf3+0x8b4>
    4cdc:	57fd                	li	a5,-1
    4cde:	7fe00613          	li	a2,2046
    4ce2:	a031                	j	4cee <__subdf3+0x8b4>
    4ce4:	4709                	li	a4,2
    4ce6:	fee99be3          	bne	s3,a4,4cdc <__subdf3+0x8a2>
    4cea:	fe0489e3          	beqz	s1,4cdc <__subdf3+0x8a2>
    4cee:	00546413          	ori	s0,s0,5
    4cf2:	873e                	mv	a4,a5
    4cf4:	bc69                	j	478e <__subdf3+0x354>
    4cf6:	e48585e3          	beq	a1,s0,4b40 <__subdf3+0x706>
    4cfa:	4401                	li	s0,0
    4cfc:	bd25                	j	4b34 <__subdf3+0x6fa>
    4cfe:	a68580e3          	beq	a1,s0,475e <__subdf3+0x324>
    4d02:	4401                	li	s0,0
    4d04:	b4b9                	j	4752 <__subdf3+0x318>

00004d06 <__fixdfsi>:
    4d06:	882a                	mv	a6,a0
    4d08:	002027f3          	frrm	a5
    4d0c:	001007b7          	lui	a5,0x100
    4d10:	0145d693          	srli	a3,a1,0x14
    4d14:	fff78613          	addi	a2,a5,-1 # fffff <_global_impure_ptr+0xf9ff7>
    4d18:	7ff6f693          	andi	a3,a3,2047
    4d1c:	3fe00713          	li	a4,1022
    4d20:	8e6d                	and	a2,a2,a1
    4d22:	81fd                	srli	a1,a1,0x1f
    4d24:	00d74763          	blt	a4,a3,4d32 <__fixdfsi+0x2c>
    4d28:	08069b63          	bnez	a3,4dbe <__fixdfsi+0xb8>
    4d2c:	8d51                	or	a0,a0,a2
    4d2e:	e941                	bnez	a0,4dbe <__fixdfsi+0xb8>
    4d30:	8082                	ret
    4d32:	41d00713          	li	a4,1053
    4d36:	02d75863          	bge	a4,a3,4d66 <__fixdfsi+0x60>
    4d3a:	80000737          	lui	a4,0x80000
    4d3e:	fff74713          	not	a4,a4
    4d42:	00e58533          	add	a0,a1,a4
    4d46:	cdbd                	beqz	a1,4dc4 <__fixdfsi+0xbe>
    4d48:	41e00793          	li	a5,1054
    4d4c:	4741                	li	a4,16
    4d4e:	04f69263          	bne	a3,a5,4d92 <__fixdfsi+0x8c>
    4d52:	00b61793          	slli	a5,a2,0xb
    4d56:	01585613          	srli	a2,a6,0x15
    4d5a:	8fd1                	or	a5,a5,a2
    4d5c:	eb9d                	bnez	a5,4d92 <__fixdfsi+0x8c>
    4d5e:	00b81713          	slli	a4,a6,0xb
    4d62:	e33d                	bnez	a4,4dc8 <__fixdfsi+0xc2>
    4d64:	8082                	ret
    4d66:	43300513          	li	a0,1075
    4d6a:	8d15                	sub	a0,a0,a3
    4d6c:	477d                	li	a4,31
    4d6e:	8fd1                	or	a5,a5,a2
    4d70:	02a74463          	blt	a4,a0,4d98 <__fixdfsi+0x92>
    4d74:	bed68613          	addi	a2,a3,-1043 # 7feffbed <__kernel_stack+0x5fe3fbf5>
    4d78:	00c816b3          	sll	a3,a6,a2
    4d7c:	00c797b3          	sll	a5,a5,a2
    4d80:	00a85533          	srl	a0,a6,a0
    4d84:	00d03733          	snez	a4,a3
    4d88:	8d5d                	or	a0,a0,a5
    4d8a:	c199                	beqz	a1,4d90 <__fixdfsi+0x8a>
    4d8c:	40a00533          	neg	a0,a0
    4d90:	c319                	beqz	a4,4d96 <__fixdfsi+0x90>
    4d92:	00172073          	csrs	fflags,a4
    4d96:	8082                	ret
    4d98:	02000613          	li	a2,32
    4d9c:	4701                	li	a4,0
    4d9e:	00c50663          	beq	a0,a2,4daa <__fixdfsi+0xa4>
    4da2:	c0d68713          	addi	a4,a3,-1011
    4da6:	00e79733          	sll	a4,a5,a4
    4daa:	41300513          	li	a0,1043
    4dae:	01076733          	or	a4,a4,a6
    4db2:	8d15                	sub	a0,a0,a3
    4db4:	00e03733          	snez	a4,a4
    4db8:	00a7d533          	srl	a0,a5,a0
    4dbc:	b7f9                	j	4d8a <__fixdfsi+0x84>
    4dbe:	4501                	li	a0,0
    4dc0:	4705                	li	a4,1
    4dc2:	bfc1                	j	4d92 <__fixdfsi+0x8c>
    4dc4:	4741                	li	a4,16
    4dc6:	b7f1                	j	4d92 <__fixdfsi+0x8c>
    4dc8:	872e                	mv	a4,a1
    4dca:	b7e1                	j	4d92 <__fixdfsi+0x8c>

00004dcc <__fixunsdfsi>:
    4dcc:	86aa                	mv	a3,a0
    4dce:	002027f3          	frrm	a5
    4dd2:	00100837          	lui	a6,0x100
    4dd6:	0145d793          	srli	a5,a1,0x14
    4dda:	fff80513          	addi	a0,a6,-1 # fffff <_global_impure_ptr+0xf9ff7>
    4dde:	7ff7f793          	andi	a5,a5,2047
    4de2:	3fe00613          	li	a2,1022
    4de6:	8d6d                	and	a0,a0,a1
    4de8:	01f5d713          	srli	a4,a1,0x1f
    4dec:	00f64763          	blt	a2,a5,4dfa <__fixunsdfsi+0x2e>
    4df0:	06079763          	bnez	a5,4e5e <__fixunsdfsi+0x92>
    4df4:	8d55                	or	a0,a0,a3
    4df6:	e525                	bnez	a0,4e5e <__fixunsdfsi+0x92>
    4df8:	8082                	ret
    4dfa:	41f00613          	li	a2,1055
    4dfe:	8e19                	sub	a2,a2,a4
    4e00:	02c7d863          	bge	a5,a2,4e30 <__fixunsdfsi+0x64>
    4e04:	04071f63          	bnez	a4,4e62 <__fixunsdfsi+0x96>
    4e08:	010565b3          	or	a1,a0,a6
    4e0c:	43300513          	li	a0,1075
    4e10:	8d1d                	sub	a0,a0,a5
    4e12:	477d                	li	a4,31
    4e14:	02a74463          	blt	a4,a0,4e3c <__fixunsdfsi+0x70>
    4e18:	bed78793          	addi	a5,a5,-1043
    4e1c:	00f595b3          	sll	a1,a1,a5
    4e20:	00a6d533          	srl	a0,a3,a0
    4e24:	00f697b3          	sll	a5,a3,a5
    4e28:	8d4d                	or	a0,a0,a1
    4e2a:	cb8d                	beqz	a5,4e5c <__fixunsdfsi+0x90>
    4e2c:	4785                	li	a5,1
    4e2e:	a021                	j	4e36 <__fixunsdfsi+0x6a>
    4e30:	fff70513          	addi	a0,a4,-1 # 7fffffff <__kernel_stack+0x5ff40007>
    4e34:	47c1                	li	a5,16
    4e36:	0017a073          	csrs	fflags,a5
    4e3a:	a00d                	j	4e5c <__fixunsdfsi+0x90>
    4e3c:	02000613          	li	a2,32
    4e40:	4701                	li	a4,0
    4e42:	00c50663          	beq	a0,a2,4e4e <__fixunsdfsi+0x82>
    4e46:	c0d78713          	addi	a4,a5,-1011
    4e4a:	00e59733          	sll	a4,a1,a4
    4e4e:	41300513          	li	a0,1043
    4e52:	8d1d                	sub	a0,a0,a5
    4e54:	8f55                	or	a4,a4,a3
    4e56:	00a5d533          	srl	a0,a1,a0
    4e5a:	fb69                	bnez	a4,4e2c <__fixunsdfsi+0x60>
    4e5c:	8082                	ret
    4e5e:	4501                	li	a0,0
    4e60:	b7f1                	j	4e2c <__fixunsdfsi+0x60>
    4e62:	4501                	li	a0,0
    4e64:	bfc1                	j	4e34 <__fixunsdfsi+0x68>

00004e66 <__floatsidf>:
    4e66:	1141                	addi	sp,sp,-16
    4e68:	c606                	sw	ra,12(sp)
    4e6a:	c422                	sw	s0,8(sp)
    4e6c:	c226                	sw	s1,4(sp)
    4e6e:	cd21                	beqz	a0,4ec6 <__floatsidf+0x60>
    4e70:	41f55793          	srai	a5,a0,0x1f
    4e74:	00a7c433          	xor	s0,a5,a0
    4e78:	8c1d                	sub	s0,s0,a5
    4e7a:	01f55493          	srli	s1,a0,0x1f
    4e7e:	8522                	mv	a0,s0
    4e80:	2869                	jal	4f1a <__clzsi2>
    4e82:	41e00713          	li	a4,1054
    4e86:	47a9                	li	a5,10
    4e88:	8f09                	sub	a4,a4,a0
    4e8a:	02a7c863          	blt	a5,a0,4eba <__floatsidf+0x54>
    4e8e:	47ad                	li	a5,11
    4e90:	8f89                	sub	a5,a5,a0
    4e92:	0555                	addi	a0,a0,21
    4e94:	00f457b3          	srl	a5,s0,a5
    4e98:	00a41433          	sll	s0,s0,a0
    4e9c:	8526                	mv	a0,s1
    4e9e:	07b2                	slli	a5,a5,0xc
    4ea0:	0752                	slli	a4,a4,0x14
    4ea2:	83b1                	srli	a5,a5,0xc
    4ea4:	057e                	slli	a0,a0,0x1f
    4ea6:	8fd9                	or	a5,a5,a4
    4ea8:	40b2                	lw	ra,12(sp)
    4eaa:	00a7e733          	or	a4,a5,a0
    4eae:	8522                	mv	a0,s0
    4eb0:	4422                	lw	s0,8(sp)
    4eb2:	4492                	lw	s1,4(sp)
    4eb4:	85ba                	mv	a1,a4
    4eb6:	0141                	addi	sp,sp,16
    4eb8:	8082                	ret
    4eba:	1555                	addi	a0,a0,-11
    4ebc:	00a417b3          	sll	a5,s0,a0
    4ec0:	8526                	mv	a0,s1
    4ec2:	4401                	li	s0,0
    4ec4:	bfe9                	j	4e9e <__floatsidf+0x38>
    4ec6:	4701                	li	a4,0
    4ec8:	4781                	li	a5,0
    4eca:	bfe5                	j	4ec2 <__floatsidf+0x5c>

00004ecc <__floatunsidf>:
    4ecc:	1141                	addi	sp,sp,-16
    4ece:	c422                	sw	s0,8(sp)
    4ed0:	c606                	sw	ra,12(sp)
    4ed2:	842a                	mv	s0,a0
    4ed4:	c121                	beqz	a0,4f14 <__floatunsidf+0x48>
    4ed6:	2091                	jal	4f1a <__clzsi2>
    4ed8:	41e00713          	li	a4,1054
    4edc:	47a9                	li	a5,10
    4ede:	8f09                	sub	a4,a4,a0
    4ee0:	02a7c463          	blt	a5,a0,4f08 <__floatunsidf+0x3c>
    4ee4:	47ad                	li	a5,11
    4ee6:	8f89                	sub	a5,a5,a0
    4ee8:	0555                	addi	a0,a0,21
    4eea:	00f457b3          	srl	a5,s0,a5
    4eee:	00a41433          	sll	s0,s0,a0
    4ef2:	40b2                	lw	ra,12(sp)
    4ef4:	8522                	mv	a0,s0
    4ef6:	07b2                	slli	a5,a5,0xc
    4ef8:	4422                	lw	s0,8(sp)
    4efa:	0752                	slli	a4,a4,0x14
    4efc:	83b1                	srli	a5,a5,0xc
    4efe:	00f766b3          	or	a3,a4,a5
    4f02:	85b6                	mv	a1,a3
    4f04:	0141                	addi	sp,sp,16
    4f06:	8082                	ret
    4f08:	ff550793          	addi	a5,a0,-11
    4f0c:	00f417b3          	sll	a5,s0,a5
    4f10:	4401                	li	s0,0
    4f12:	b7c5                	j	4ef2 <__floatunsidf+0x26>
    4f14:	4781                	li	a5,0
    4f16:	4701                	li	a4,0
    4f18:	bfe9                	j	4ef2 <__floatunsidf+0x26>

00004f1a <__clzsi2>:
    4f1a:	67c1                	lui	a5,0x10
    4f1c:	02f57663          	bgeu	a0,a5,4f48 <__clzsi2+0x2e>
    4f20:	0ff00793          	li	a5,255
    4f24:	00a7b7b3          	sltu	a5,a5,a0
    4f28:	078e                	slli	a5,a5,0x3
    4f2a:	02000713          	li	a4,32
    4f2e:	8f1d                	sub	a4,a4,a5
    4f30:	00f55533          	srl	a0,a0,a5
    4f34:	00001797          	auipc	a5,0x1
    4f38:	f3878793          	addi	a5,a5,-200 # 5e6c <__clz_tab>
    4f3c:	953e                	add	a0,a0,a5
    4f3e:	00054503          	lbu	a0,0(a0)
    4f42:	40a70533          	sub	a0,a4,a0
    4f46:	8082                	ret
    4f48:	01000737          	lui	a4,0x1000
    4f4c:	47c1                	li	a5,16
    4f4e:	fce56ee3          	bltu	a0,a4,4f2a <__clzsi2+0x10>
    4f52:	47e1                	li	a5,24
    4f54:	bfd9                	j	4f2a <__clzsi2+0x10>

00004f56 <malloc>:
    4f56:	85aa                	mv	a1,a0
    4f58:	1fffc517          	auipc	a0,0x1fffc
    4f5c:	99852503          	lw	a0,-1640(a0) # 200008f0 <_impure_ptr>
    4f60:	a801                	j	4f70 <_malloc_r>

00004f62 <free>:
    4f62:	85aa                	mv	a1,a0
    4f64:	1fffc517          	auipc	a0,0x1fffc
    4f68:	98c52503          	lw	a0,-1652(a0) # 200008f0 <_impure_ptr>
    4f6c:	0490006f          	j	57b4 <_free_r>

00004f70 <_malloc_r>:
    4f70:	7179                	addi	sp,sp,-48
    4f72:	d04a                	sw	s2,32(sp)
    4f74:	d606                	sw	ra,44(sp)
    4f76:	d422                	sw	s0,40(sp)
    4f78:	d226                	sw	s1,36(sp)
    4f7a:	ce4e                	sw	s3,28(sp)
    4f7c:	cc52                	sw	s4,24(sp)
    4f7e:	ca56                	sw	s5,20(sp)
    4f80:	c85a                	sw	s6,16(sp)
    4f82:	c65e                	sw	s7,12(sp)
    4f84:	c462                	sw	s8,8(sp)
    4f86:	c266                	sw	s9,4(sp)
    4f88:	00b58793          	addi	a5,a1,11 # 40000b <_global_impure_ptr+0x3fa003>
    4f8c:	4759                	li	a4,22
    4f8e:	892a                	mv	s2,a0
    4f90:	04f76363          	bltu	a4,a5,4fd6 <_malloc_r+0x66>
    4f94:	47c1                	li	a5,16
    4f96:	16b7e363          	bltu	a5,a1,50fc <_malloc_r+0x18c>
    4f9a:	2da9                	jal	55f4 <__malloc_lock>
    4f9c:	44c1                	li	s1,16
    4f9e:	47e1                	li	a5,24
    4fa0:	4609                	li	a2,2
    4fa2:	1fffb997          	auipc	s3,0x1fffb
    4fa6:	0c298993          	addi	s3,s3,194 # 20000064 <__malloc_av_>
    4faa:	97ce                	add	a5,a5,s3
    4fac:	43c0                	lw	s0,4(a5)
    4fae:	ff878713          	addi	a4,a5,-8
    4fb2:	16e40d63          	beq	s0,a4,512c <_malloc_r+0x1bc>
    4fb6:	405c                	lw	a5,4(s0)
    4fb8:	4454                	lw	a3,12(s0)
    4fba:	4410                	lw	a2,8(s0)
    4fbc:	9bf1                	andi	a5,a5,-4
    4fbe:	97a2                	add	a5,a5,s0
    4fc0:	43d8                	lw	a4,4(a5)
    4fc2:	c654                	sw	a3,12(a2)
    4fc4:	c690                	sw	a2,8(a3)
    4fc6:	00176713          	ori	a4,a4,1
    4fca:	854a                	mv	a0,s2
    4fcc:	c3d8                	sw	a4,4(a5)
    4fce:	2d05                	jal	55fe <__malloc_unlock>
    4fd0:	00840513          	addi	a0,s0,8 # 400008 <_global_impure_ptr+0x3fa000>
    4fd4:	aa05                	j	5104 <_malloc_r+0x194>
    4fd6:	ff87f493          	andi	s1,a5,-8
    4fda:	1207c163          	bltz	a5,50fc <_malloc_r+0x18c>
    4fde:	10b4ef63          	bltu	s1,a1,50fc <_malloc_r+0x18c>
    4fe2:	2d09                	jal	55f4 <__malloc_lock>
    4fe4:	1f700793          	li	a5,503
    4fe8:	3497f963          	bgeu	a5,s1,533a <_malloc_r+0x3ca>
    4fec:	0094d793          	srli	a5,s1,0x9
    4ff0:	12078763          	beqz	a5,511e <_malloc_r+0x1ae>
    4ff4:	4711                	li	a4,4
    4ff6:	2ef76263          	bltu	a4,a5,52da <_malloc_r+0x36a>
    4ffa:	0064d793          	srli	a5,s1,0x6
    4ffe:	03978613          	addi	a2,a5,57
    5002:	03878513          	addi	a0,a5,56
    5006:	00361693          	slli	a3,a2,0x3
    500a:	1fffb997          	auipc	s3,0x1fffb
    500e:	05a98993          	addi	s3,s3,90 # 20000064 <__malloc_av_>
    5012:	96ce                	add	a3,a3,s3
    5014:	42c0                	lw	s0,4(a3)
    5016:	16e1                	addi	a3,a3,-8
    5018:	02868063          	beq	a3,s0,5038 <_malloc_r+0xc8>
    501c:	45bd                	li	a1,15
    501e:	a031                	j	502a <_malloc_r+0xba>
    5020:	26075963          	bgez	a4,5292 <_malloc_r+0x322>
    5024:	4440                	lw	s0,12(s0)
    5026:	00868963          	beq	a3,s0,5038 <_malloc_r+0xc8>
    502a:	405c                	lw	a5,4(s0)
    502c:	9bf1                	andi	a5,a5,-4
    502e:	40978733          	sub	a4,a5,s1
    5032:	fee5d7e3          	bge	a1,a4,5020 <_malloc_r+0xb0>
    5036:	862a                	mv	a2,a0
    5038:	0109a403          	lw	s0,16(s3)
    503c:	1fffb897          	auipc	a7,0x1fffb
    5040:	03088893          	addi	a7,a7,48 # 2000006c <__malloc_av_+0x8>
    5044:	11140063          	beq	s0,a7,5144 <_malloc_r+0x1d4>
    5048:	4048                	lw	a0,4(s0)
    504a:	46bd                	li	a3,15
    504c:	9971                	andi	a0,a0,-4
    504e:	409507b3          	sub	a5,a0,s1
    5052:	30f6c463          	blt	a3,a5,535a <_malloc_r+0x3ea>
    5056:	0119aa23          	sw	a7,20(s3)
    505a:	0119a823          	sw	a7,16(s3)
    505e:	2e07d363          	bgez	a5,5344 <_malloc_r+0x3d4>
    5062:	1ff00793          	li	a5,511
    5066:	22a7e963          	bltu	a5,a0,5298 <_malloc_r+0x328>
    506a:	ff857793          	andi	a5,a0,-8
    506e:	07a1                	addi	a5,a5,8
    5070:	0049a583          	lw	a1,4(s3)
    5074:	97ce                	add	a5,a5,s3
    5076:	4394                	lw	a3,0(a5)
    5078:	8115                	srli	a0,a0,0x5
    507a:	4705                	li	a4,1
    507c:	00a71733          	sll	a4,a4,a0
    5080:	8f4d                	or	a4,a4,a1
    5082:	ff878593          	addi	a1,a5,-8
    5086:	c44c                	sw	a1,12(s0)
    5088:	c414                	sw	a3,8(s0)
    508a:	00e9a223          	sw	a4,4(s3)
    508e:	c380                	sw	s0,0(a5)
    5090:	c6c0                	sw	s0,12(a3)
    5092:	40265793          	srai	a5,a2,0x2
    5096:	4585                	li	a1,1
    5098:	00f595b3          	sll	a1,a1,a5
    509c:	0ab76d63          	bltu	a4,a1,5156 <_malloc_r+0x1e6>
    50a0:	00e5f7b3          	and	a5,a1,a4
    50a4:	ef81                	bnez	a5,50bc <_malloc_r+0x14c>
    50a6:	0586                	slli	a1,a1,0x1
    50a8:	9a71                	andi	a2,a2,-4
    50aa:	00e5f7b3          	and	a5,a1,a4
    50ae:	0611                	addi	a2,a2,4
    50b0:	e791                	bnez	a5,50bc <_malloc_r+0x14c>
    50b2:	0586                	slli	a1,a1,0x1
    50b4:	00e5f7b3          	and	a5,a1,a4
    50b8:	0611                	addi	a2,a2,4
    50ba:	dfe5                	beqz	a5,50b2 <_malloc_r+0x142>
    50bc:	483d                	li	a6,15
    50be:	00361313          	slli	t1,a2,0x3
    50c2:	934e                	add	t1,t1,s3
    50c4:	851a                	mv	a0,t1
    50c6:	455c                	lw	a5,12(a0)
    50c8:	8e32                	mv	t3,a2
    50ca:	22f50863          	beq	a0,a5,52fa <_malloc_r+0x38a>
    50ce:	43d8                	lw	a4,4(a5)
    50d0:	843e                	mv	s0,a5
    50d2:	47dc                	lw	a5,12(a5)
    50d4:	9b71                	andi	a4,a4,-4
    50d6:	409706b3          	sub	a3,a4,s1
    50da:	22d84763          	blt	a6,a3,5308 <_malloc_r+0x398>
    50de:	fe06c6e3          	bltz	a3,50ca <_malloc_r+0x15a>
    50e2:	9722                	add	a4,a4,s0
    50e4:	4354                	lw	a3,4(a4)
    50e6:	4410                	lw	a2,8(s0)
    50e8:	854a                	mv	a0,s2
    50ea:	0016e693          	ori	a3,a3,1
    50ee:	c354                	sw	a3,4(a4)
    50f0:	c65c                	sw	a5,12(a2)
    50f2:	c790                	sw	a2,8(a5)
    50f4:	2329                	jal	55fe <__malloc_unlock>
    50f6:	00840513          	addi	a0,s0,8
    50fa:	a029                	j	5104 <_malloc_r+0x194>
    50fc:	47b1                	li	a5,12
    50fe:	00f92023          	sw	a5,0(s2) # 800000 <_global_impure_ptr+0x7f9ff8>
    5102:	4501                	li	a0,0
    5104:	50b2                	lw	ra,44(sp)
    5106:	5422                	lw	s0,40(sp)
    5108:	5492                	lw	s1,36(sp)
    510a:	5902                	lw	s2,32(sp)
    510c:	49f2                	lw	s3,28(sp)
    510e:	4a62                	lw	s4,24(sp)
    5110:	4ad2                	lw	s5,20(sp)
    5112:	4b42                	lw	s6,16(sp)
    5114:	4bb2                	lw	s7,12(sp)
    5116:	4c22                	lw	s8,8(sp)
    5118:	4c92                	lw	s9,4(sp)
    511a:	6145                	addi	sp,sp,48
    511c:	8082                	ret
    511e:	20000693          	li	a3,512
    5122:	04000613          	li	a2,64
    5126:	03f00513          	li	a0,63
    512a:	b5c5                	j	500a <_malloc_r+0x9a>
    512c:	47c0                	lw	s0,12(a5)
    512e:	0609                	addi	a2,a2,2
    5130:	e88793e3          	bne	a5,s0,4fb6 <_malloc_r+0x46>
    5134:	0109a403          	lw	s0,16(s3)
    5138:	1fffb897          	auipc	a7,0x1fffb
    513c:	f3488893          	addi	a7,a7,-204 # 2000006c <__malloc_av_+0x8>
    5140:	f11414e3          	bne	s0,a7,5048 <_malloc_r+0xd8>
    5144:	0049a703          	lw	a4,4(s3)
    5148:	40265793          	srai	a5,a2,0x2
    514c:	4585                	li	a1,1
    514e:	00f595b3          	sll	a1,a1,a5
    5152:	f4b777e3          	bgeu	a4,a1,50a0 <_malloc_r+0x130>
    5156:	0089a403          	lw	s0,8(s3)
    515a:	00442a83          	lw	s5,4(s0)
    515e:	ffcafb13          	andi	s6,s5,-4
    5162:	009b6763          	bltu	s6,s1,5170 <_malloc_r+0x200>
    5166:	409b07b3          	sub	a5,s6,s1
    516a:	473d                	li	a4,15
    516c:	10f74563          	blt	a4,a5,5276 <_malloc_r+0x306>
    5170:	1fffbc97          	auipc	s9,0x1fffb
    5174:	778c8c93          	addi	s9,s9,1912 # 200008e8 <__malloc_sbrk_base>
    5178:	1fffba97          	auipc	s5,0x1fffb
    517c:	7bcaaa83          	lw	s5,1980(s5) # 20000934 <__malloc_top_pad>
    5180:	000ca703          	lw	a4,0(s9)
    5184:	57fd                	li	a5,-1
    5186:	01640a33          	add	s4,s0,s6
    518a:	9aa6                	add	s5,s5,s1
    518c:	26f70e63          	beq	a4,a5,5408 <_malloc_r+0x498>
    5190:	6785                	lui	a5,0x1
    5192:	07bd                	addi	a5,a5,15
    5194:	9abe                	add	s5,s5,a5
    5196:	77fd                	lui	a5,0xfffff
    5198:	00fafab3          	and	s5,s5,a5
    519c:	85d6                	mv	a1,s5
    519e:	854a                	mv	a0,s2
    51a0:	21a5                	jal	5608 <_sbrk_r>
    51a2:	57fd                	li	a5,-1
    51a4:	8baa                	mv	s7,a0
    51a6:	1ef50a63          	beq	a0,a5,539a <_malloc_r+0x42a>
    51aa:	1f456663          	bltu	a0,s4,5396 <_malloc_r+0x426>
    51ae:	1fffbc17          	auipc	s8,0x1fffb
    51b2:	756c0c13          	addi	s8,s8,1878 # 20000904 <__malloc_current_mallinfo>
    51b6:	000c2583          	lw	a1,0(s8)
    51ba:	95d6                	add	a1,a1,s5
    51bc:	00bc2023          	sw	a1,0(s8)
    51c0:	87ae                	mv	a5,a1
    51c2:	2caa0163          	beq	s4,a0,5484 <_malloc_r+0x514>
    51c6:	000ca683          	lw	a3,0(s9)
    51ca:	577d                	li	a4,-1
    51cc:	2ce68863          	beq	a3,a4,549c <_malloc_r+0x52c>
    51d0:	414b8a33          	sub	s4,s7,s4
    51d4:	97d2                	add	a5,a5,s4
    51d6:	00fc2023          	sw	a5,0(s8)
    51da:	007bfc93          	andi	s9,s7,7
    51de:	240c8163          	beqz	s9,5420 <_malloc_r+0x4b0>
    51e2:	6785                	lui	a5,0x1
    51e4:	419b8bb3          	sub	s7,s7,s9
    51e8:	00878593          	addi	a1,a5,8 # 1008 <_ftoa+0x204>
    51ec:	0ba1                	addi	s7,s7,8
    51ee:	419585b3          	sub	a1,a1,s9
    51f2:	9ade                	add	s5,s5,s7
    51f4:	17fd                	addi	a5,a5,-1
    51f6:	415585b3          	sub	a1,a1,s5
    51fa:	00f5fa33          	and	s4,a1,a5
    51fe:	85d2                	mv	a1,s4
    5200:	854a                	mv	a0,s2
    5202:	2119                	jal	5608 <_sbrk_r>
    5204:	57fd                	li	a5,-1
    5206:	2cf50d63          	beq	a0,a5,54e0 <_malloc_r+0x570>
    520a:	41750533          	sub	a0,a0,s7
    520e:	01450ab3          	add	s5,a0,s4
    5212:	000c2583          	lw	a1,0(s8)
    5216:	0179a423          	sw	s7,8(s3)
    521a:	001aea93          	ori	s5,s5,1
    521e:	95d2                	add	a1,a1,s4
    5220:	00bc2023          	sw	a1,0(s8)
    5224:	015ba223          	sw	s5,4(s7)
    5228:	27340d63          	beq	s0,s3,54a2 <_malloc_r+0x532>
    522c:	46bd                	li	a3,15
    522e:	2766fc63          	bgeu	a3,s6,54a6 <_malloc_r+0x536>
    5232:	4058                	lw	a4,4(s0)
    5234:	ff4b0793          	addi	a5,s6,-12
    5238:	9be1                	andi	a5,a5,-8
    523a:	8b05                	andi	a4,a4,1
    523c:	8f5d                	or	a4,a4,a5
    523e:	c058                	sw	a4,4(s0)
    5240:	4615                	li	a2,5
    5242:	00f40733          	add	a4,s0,a5
    5246:	c350                	sw	a2,4(a4)
    5248:	c710                	sw	a2,8(a4)
    524a:	2af6e163          	bltu	a3,a5,54ec <_malloc_r+0x57c>
    524e:	004baa83          	lw	s5,4(s7)
    5252:	845e                	mv	s0,s7
    5254:	1fffb797          	auipc	a5,0x1fffb
    5258:	6dc78793          	addi	a5,a5,1756 # 20000930 <__malloc_max_sbrked_mem>
    525c:	4398                	lw	a4,0(a5)
    525e:	00b77363          	bgeu	a4,a1,5264 <_malloc_r+0x2f4>
    5262:	c38c                	sw	a1,0(a5)
    5264:	1fffb797          	auipc	a5,0x1fffb
    5268:	6c878793          	addi	a5,a5,1736 # 2000092c <__malloc_max_total_mem>
    526c:	4398                	lw	a4,0(a5)
    526e:	12b77a63          	bgeu	a4,a1,53a2 <_malloc_r+0x432>
    5272:	c38c                	sw	a1,0(a5)
    5274:	a23d                	j	53a2 <_malloc_r+0x432>
    5276:	0014e713          	ori	a4,s1,1
    527a:	c058                	sw	a4,4(s0)
    527c:	94a2                	add	s1,s1,s0
    527e:	0099a423          	sw	s1,8(s3)
    5282:	0017e793          	ori	a5,a5,1
    5286:	854a                	mv	a0,s2
    5288:	c0dc                	sw	a5,4(s1)
    528a:	2e95                	jal	55fe <__malloc_unlock>
    528c:	00840513          	addi	a0,s0,8
    5290:	bd95                	j	5104 <_malloc_r+0x194>
    5292:	4454                	lw	a3,12(s0)
    5294:	4410                	lw	a2,8(s0)
    5296:	b325                	j	4fbe <_malloc_r+0x4e>
    5298:	00955793          	srli	a5,a0,0x9
    529c:	4711                	li	a4,4
    529e:	0ef77463          	bgeu	a4,a5,5386 <_malloc_r+0x416>
    52a2:	4751                	li	a4,20
    52a4:	18f76d63          	bltu	a4,a5,543e <_malloc_r+0x4ce>
    52a8:	05c78693          	addi	a3,a5,92
    52ac:	05b78593          	addi	a1,a5,91
    52b0:	068e                	slli	a3,a3,0x3
    52b2:	96ce                	add	a3,a3,s3
    52b4:	429c                	lw	a5,0(a3)
    52b6:	16e1                	addi	a3,a3,-8
    52b8:	14f68a63          	beq	a3,a5,540c <_malloc_r+0x49c>
    52bc:	43d8                	lw	a4,4(a5)
    52be:	9b71                	andi	a4,a4,-4
    52c0:	00e57563          	bgeu	a0,a4,52ca <_malloc_r+0x35a>
    52c4:	479c                	lw	a5,8(a5)
    52c6:	fef69be3          	bne	a3,a5,52bc <_malloc_r+0x34c>
    52ca:	47d4                	lw	a3,12(a5)
    52cc:	0049a703          	lw	a4,4(s3)
    52d0:	c454                	sw	a3,12(s0)
    52d2:	c41c                	sw	a5,8(s0)
    52d4:	c680                	sw	s0,8(a3)
    52d6:	c7c0                	sw	s0,12(a5)
    52d8:	bb6d                	j	5092 <_malloc_r+0x122>
    52da:	4751                	li	a4,20
    52dc:	0ef77063          	bgeu	a4,a5,53bc <_malloc_r+0x44c>
    52e0:	05400713          	li	a4,84
    52e4:	16f76963          	bltu	a4,a5,5456 <_malloc_r+0x4e6>
    52e8:	00c4d793          	srli	a5,s1,0xc
    52ec:	06f78613          	addi	a2,a5,111
    52f0:	06e78513          	addi	a0,a5,110
    52f4:	00361693          	slli	a3,a2,0x3
    52f8:	bb09                	j	500a <_malloc_r+0x9a>
    52fa:	0e05                	addi	t3,t3,1
    52fc:	003e7793          	andi	a5,t3,3
    5300:	0521                	addi	a0,a0,8
    5302:	cbe9                	beqz	a5,53d4 <_malloc_r+0x464>
    5304:	455c                	lw	a5,12(a0)
    5306:	b3d1                	j	50ca <_malloc_r+0x15a>
    5308:	4410                	lw	a2,8(s0)
    530a:	0014e593          	ori	a1,s1,1
    530e:	c04c                	sw	a1,4(s0)
    5310:	c65c                	sw	a5,12(a2)
    5312:	c790                	sw	a2,8(a5)
    5314:	94a2                	add	s1,s1,s0
    5316:	0099aa23          	sw	s1,20(s3)
    531a:	0099a823          	sw	s1,16(s3)
    531e:	0016e793          	ori	a5,a3,1
    5322:	0114a623          	sw	a7,12(s1)
    5326:	0114a423          	sw	a7,8(s1)
    532a:	c0dc                	sw	a5,4(s1)
    532c:	9722                	add	a4,a4,s0
    532e:	854a                	mv	a0,s2
    5330:	c314                	sw	a3,0(a4)
    5332:	24f1                	jal	55fe <__malloc_unlock>
    5334:	00840513          	addi	a0,s0,8
    5338:	b3f1                	j	5104 <_malloc_r+0x194>
    533a:	0034d613          	srli	a2,s1,0x3
    533e:	00848793          	addi	a5,s1,8
    5342:	b185                	j	4fa2 <_malloc_r+0x32>
    5344:	00a40733          	add	a4,s0,a0
    5348:	435c                	lw	a5,4(a4)
    534a:	854a                	mv	a0,s2
    534c:	0017e793          	ori	a5,a5,1
    5350:	c35c                	sw	a5,4(a4)
    5352:	2475                	jal	55fe <__malloc_unlock>
    5354:	00840513          	addi	a0,s0,8
    5358:	b375                	j	5104 <_malloc_r+0x194>
    535a:	0014e713          	ori	a4,s1,1
    535e:	c058                	sw	a4,4(s0)
    5360:	94a2                	add	s1,s1,s0
    5362:	0099aa23          	sw	s1,20(s3)
    5366:	0099a823          	sw	s1,16(s3)
    536a:	0017e713          	ori	a4,a5,1
    536e:	0114a623          	sw	a7,12(s1)
    5372:	0114a423          	sw	a7,8(s1)
    5376:	c0d8                	sw	a4,4(s1)
    5378:	9522                	add	a0,a0,s0
    537a:	c11c                	sw	a5,0(a0)
    537c:	854a                	mv	a0,s2
    537e:	2441                	jal	55fe <__malloc_unlock>
    5380:	00840513          	addi	a0,s0,8
    5384:	b341                	j	5104 <_malloc_r+0x194>
    5386:	00655793          	srli	a5,a0,0x6
    538a:	03978693          	addi	a3,a5,57
    538e:	03878593          	addi	a1,a5,56
    5392:	068e                	slli	a3,a3,0x3
    5394:	bf39                	j	52b2 <_malloc_r+0x342>
    5396:	0d340d63          	beq	s0,s3,5470 <_malloc_r+0x500>
    539a:	0089a403          	lw	s0,8(s3)
    539e:	00442a83          	lw	s5,4(s0)
    53a2:	ffcafa93          	andi	s5,s5,-4
    53a6:	409a87b3          	sub	a5,s5,s1
    53aa:	009ae563          	bltu	s5,s1,53b4 <_malloc_r+0x444>
    53ae:	473d                	li	a4,15
    53b0:	ecf743e3          	blt	a4,a5,5276 <_malloc_r+0x306>
    53b4:	854a                	mv	a0,s2
    53b6:	24a1                	jal	55fe <__malloc_unlock>
    53b8:	4501                	li	a0,0
    53ba:	b3a9                	j	5104 <_malloc_r+0x194>
    53bc:	05c78613          	addi	a2,a5,92
    53c0:	05b78513          	addi	a0,a5,91
    53c4:	00361693          	slli	a3,a2,0x3
    53c8:	b189                	j	500a <_malloc_r+0x9a>
    53ca:	00832783          	lw	a5,8(t1) # 10008 <_global_impure_ptr+0xa000>
    53ce:	167d                	addi	a2,a2,-1
    53d0:	16679163          	bne	a5,t1,5532 <_malloc_r+0x5c2>
    53d4:	00367793          	andi	a5,a2,3
    53d8:	1361                	addi	t1,t1,-8
    53da:	fbe5                	bnez	a5,53ca <_malloc_r+0x45a>
    53dc:	0049a703          	lw	a4,4(s3)
    53e0:	fff5c793          	not	a5,a1
    53e4:	8ff9                	and	a5,a5,a4
    53e6:	00f9a223          	sw	a5,4(s3)
    53ea:	0586                	slli	a1,a1,0x1
    53ec:	d6b7e5e3          	bltu	a5,a1,5156 <_malloc_r+0x1e6>
    53f0:	d60583e3          	beqz	a1,5156 <_malloc_r+0x1e6>
    53f4:	00f5f733          	and	a4,a1,a5
    53f8:	e711                	bnez	a4,5404 <_malloc_r+0x494>
    53fa:	0586                	slli	a1,a1,0x1
    53fc:	00f5f733          	and	a4,a1,a5
    5400:	0e11                	addi	t3,t3,4
    5402:	df65                	beqz	a4,53fa <_malloc_r+0x48a>
    5404:	8672                	mv	a2,t3
    5406:	b965                	j	50be <_malloc_r+0x14e>
    5408:	0ac1                	addi	s5,s5,16
    540a:	bb49                	j	519c <_malloc_r+0x22c>
    540c:	0049a503          	lw	a0,4(s3)
    5410:	8589                	srai	a1,a1,0x2
    5412:	4705                	li	a4,1
    5414:	00b71733          	sll	a4,a4,a1
    5418:	8f49                	or	a4,a4,a0
    541a:	00e9a223          	sw	a4,4(s3)
    541e:	bd4d                	j	52d0 <_malloc_r+0x360>
    5420:	015b85b3          	add	a1,s7,s5
    5424:	40b005b3          	neg	a1,a1
    5428:	05d2                	slli	a1,a1,0x14
    542a:	0145da13          	srli	s4,a1,0x14
    542e:	85d2                	mv	a1,s4
    5430:	854a                	mv	a0,s2
    5432:	2ad9                	jal	5608 <_sbrk_r>
    5434:	57fd                	li	a5,-1
    5436:	dcf51ae3          	bne	a0,a5,520a <_malloc_r+0x29a>
    543a:	4a01                	li	s4,0
    543c:	bbd9                	j	5212 <_malloc_r+0x2a2>
    543e:	05400713          	li	a4,84
    5442:	06f76663          	bltu	a4,a5,54ae <_malloc_r+0x53e>
    5446:	00c55793          	srli	a5,a0,0xc
    544a:	06f78693          	addi	a3,a5,111
    544e:	06e78593          	addi	a1,a5,110
    5452:	068e                	slli	a3,a3,0x3
    5454:	bdb9                	j	52b2 <_malloc_r+0x342>
    5456:	15400713          	li	a4,340
    545a:	06f76663          	bltu	a4,a5,54c6 <_malloc_r+0x556>
    545e:	00f4d793          	srli	a5,s1,0xf
    5462:	07878613          	addi	a2,a5,120
    5466:	07778513          	addi	a0,a5,119
    546a:	00361693          	slli	a3,a2,0x3
    546e:	be71                	j	500a <_malloc_r+0x9a>
    5470:	1fffbc17          	auipc	s8,0x1fffb
    5474:	494c0c13          	addi	s8,s8,1172 # 20000904 <__malloc_current_mallinfo>
    5478:	000c2783          	lw	a5,0(s8)
    547c:	97d6                	add	a5,a5,s5
    547e:	00fc2023          	sw	a5,0(s8)
    5482:	b391                	j	51c6 <_malloc_r+0x256>
    5484:	014a1713          	slli	a4,s4,0x14
    5488:	d2071fe3          	bnez	a4,51c6 <_malloc_r+0x256>
    548c:	0089a403          	lw	s0,8(s3)
    5490:	9ada                	add	s5,s5,s6
    5492:	001aea93          	ori	s5,s5,1
    5496:	01542223          	sw	s5,4(s0)
    549a:	bb6d                	j	5254 <_malloc_r+0x2e4>
    549c:	017ca023          	sw	s7,0(s9)
    54a0:	bb2d                	j	51da <_malloc_r+0x26a>
    54a2:	845e                	mv	s0,s7
    54a4:	bb45                	j	5254 <_malloc_r+0x2e4>
    54a6:	4785                	li	a5,1
    54a8:	00fba223          	sw	a5,4(s7)
    54ac:	b721                	j	53b4 <_malloc_r+0x444>
    54ae:	15400713          	li	a4,340
    54b2:	04f76863          	bltu	a4,a5,5502 <_malloc_r+0x592>
    54b6:	00f55793          	srli	a5,a0,0xf
    54ba:	07878693          	addi	a3,a5,120
    54be:	07778593          	addi	a1,a5,119
    54c2:	068e                	slli	a3,a3,0x3
    54c4:	b3fd                	j	52b2 <_malloc_r+0x342>
    54c6:	55400713          	li	a4,1364
    54ca:	04f76863          	bltu	a4,a5,551a <_malloc_r+0x5aa>
    54ce:	0124d793          	srli	a5,s1,0x12
    54d2:	07d78613          	addi	a2,a5,125
    54d6:	07c78513          	addi	a0,a5,124
    54da:	00361693          	slli	a3,a2,0x3
    54de:	b635                	j	500a <_malloc_r+0x9a>
    54e0:	1ce1                	addi	s9,s9,-8
    54e2:	9ae6                	add	s5,s5,s9
    54e4:	417a8ab3          	sub	s5,s5,s7
    54e8:	4a01                	li	s4,0
    54ea:	b325                	j	5212 <_malloc_r+0x2a2>
    54ec:	00840593          	addi	a1,s0,8
    54f0:	854a                	mv	a0,s2
    54f2:	24c9                	jal	57b4 <_free_r>
    54f4:	0089a403          	lw	s0,8(s3)
    54f8:	000c2583          	lw	a1,0(s8)
    54fc:	00442a83          	lw	s5,4(s0)
    5500:	bb91                	j	5254 <_malloc_r+0x2e4>
    5502:	55400713          	li	a4,1364
    5506:	02f76163          	bltu	a4,a5,5528 <_malloc_r+0x5b8>
    550a:	01255793          	srli	a5,a0,0x12
    550e:	07d78693          	addi	a3,a5,125
    5512:	07c78593          	addi	a1,a5,124
    5516:	068e                	slli	a3,a3,0x3
    5518:	bb69                	j	52b2 <_malloc_r+0x342>
    551a:	3f800693          	li	a3,1016
    551e:	07f00613          	li	a2,127
    5522:	07e00513          	li	a0,126
    5526:	b4d5                	j	500a <_malloc_r+0x9a>
    5528:	3f800693          	li	a3,1016
    552c:	07e00593          	li	a1,126
    5530:	b349                	j	52b2 <_malloc_r+0x342>
    5532:	0049a783          	lw	a5,4(s3)
    5536:	bd55                	j	53ea <_malloc_r+0x47a>

00005538 <memcpy>:
    5538:	00463693          	sltiu	a3,a2,4
    553c:	82aa                	mv	t0,a0
    553e:	00c50333          	add	t1,a0,a2
    5542:	eea5                	bnez	a3,55ba <memcpy+0x82>
    5544:	00b546b3          	xor	a3,a0,a1
    5548:	8a8d                	andi	a3,a3,3
    554a:	eaa5                	bnez	a3,55ba <memcpy+0x82>
    554c:	00357693          	andi	a3,a0,3
    5550:	4391                	li	t2,4
    5552:	eebd                	bnez	a3,55d0 <memcpy+0x98>
    5554:	ffc37393          	andi	t2,t1,-4
    5558:	fe038313          	addi	t1,t2,-32 # ffe0 <_global_impure_ptr+0x9fd8>
    555c:	04a36263          	bltu	t1,a0,55a0 <memcpy+0x68>
    5560:	8a7d                	andi	a2,a2,31
    5562:	0001                	nop
    5564:	4198                	lw	a4,0(a1)
    5566:	c118                	sw	a4,0(a0)
    5568:	41dc                	lw	a5,4(a1)
    556a:	c15c                	sw	a5,4(a0)
    556c:	0085a803          	lw	a6,8(a1)
    5570:	01052423          	sw	a6,8(a0)
    5574:	00c5a883          	lw	a7,12(a1)
    5578:	01152623          	sw	a7,12(a0)
    557c:	4998                	lw	a4,16(a1)
    557e:	c918                	sw	a4,16(a0)
    5580:	49dc                	lw	a5,20(a1)
    5582:	c95c                	sw	a5,20(a0)
    5584:	0185a803          	lw	a6,24(a1)
    5588:	01052c23          	sw	a6,24(a0)
    558c:	01c5a883          	lw	a7,28(a1)
    5590:	02058593          	addi	a1,a1,32
    5594:	01152e23          	sw	a7,28(a0)
    5598:	02050513          	addi	a0,a0,32
    559c:	fca374e3          	bgeu	t1,a0,5564 <memcpy+0x2c>
    55a0:	ffc38313          	addi	t1,t2,-4
    55a4:	00a36963          	bltu	t1,a0,55b6 <memcpy+0x7e>
    55a8:	8a0d                	andi	a2,a2,3
    55aa:	4198                	lw	a4,0(a1)
    55ac:	0591                	addi	a1,a1,4
    55ae:	c118                	sw	a4,0(a0)
    55b0:	0511                	addi	a0,a0,4
    55b2:	fea37ce3          	bgeu	t1,a0,55aa <memcpy+0x72>
    55b6:	00c50333          	add	t1,a0,a2
    55ba:	ca09                	beqz	a2,55cc <memcpy+0x94>
    55bc:	00058703          	lb	a4,0(a1)
    55c0:	0585                	addi	a1,a1,1
    55c2:	00e50023          	sb	a4,0(a0)
    55c6:	0505                	addi	a0,a0,1
    55c8:	fe656ae3          	bltu	a0,t1,55bc <memcpy+0x84>
    55cc:	8516                	mv	a0,t0
    55ce:	8082                	ret
    55d0:	40d386b3          	sub	a3,t2,a3
    55d4:	83b6                	mv	t2,a3
    55d6:	00058703          	lb	a4,0(a1)
    55da:	0585                	addi	a1,a1,1
    55dc:	16fd                	addi	a3,a3,-1
    55de:	00e50023          	sb	a4,0(a0)
    55e2:	0505                	addi	a0,a0,1
    55e4:	faed                	bnez	a3,55d6 <memcpy+0x9e>
    55e6:	40760633          	sub	a2,a2,t2
    55ea:	00263693          	sltiu	a3,a2,2
    55ee:	f6f1                	bnez	a3,55ba <memcpy+0x82>
    55f0:	b795                	j	5554 <memcpy+0x1c>
	...

000055f4 <__malloc_lock>:
    55f4:	1fffb517          	auipc	a0,0x1fffb
    55f8:	35450513          	addi	a0,a0,852 # 20000948 <__lock___malloc_recursive_mutex>
    55fc:	a6fd                	j	59ea <__retarget_lock_acquire_recursive>

000055fe <__malloc_unlock>:
    55fe:	1fffb517          	auipc	a0,0x1fffb
    5602:	34a50513          	addi	a0,a0,842 # 20000948 <__lock___malloc_recursive_mutex>
    5606:	aec5                	j	59f6 <__retarget_lock_release_recursive>

00005608 <_sbrk_r>:
    5608:	1141                	addi	sp,sp,-16
    560a:	c422                	sw	s0,8(sp)
    560c:	842a                	mv	s0,a0
    560e:	852e                	mv	a0,a1
    5610:	1fffb797          	auipc	a5,0x1fffb
    5614:	3407a623          	sw	zero,844(a5) # 2000095c <errno>
    5618:	c606                	sw	ra,12(sp)
    561a:	29f1                	jal	5af6 <_sbrk>
    561c:	57fd                	li	a5,-1
    561e:	00f50663          	beq	a0,a5,562a <_sbrk_r+0x22>
    5622:	40b2                	lw	ra,12(sp)
    5624:	4422                	lw	s0,8(sp)
    5626:	0141                	addi	sp,sp,16
    5628:	8082                	ret
    562a:	1fffb797          	auipc	a5,0x1fffb
    562e:	3327a783          	lw	a5,818(a5) # 2000095c <errno>
    5632:	dbe5                	beqz	a5,5622 <_sbrk_r+0x1a>
    5634:	40b2                	lw	ra,12(sp)
    5636:	c01c                	sw	a5,0(s0)
    5638:	4422                	lw	s0,8(sp)
    563a:	0141                	addi	sp,sp,16
    563c:	8082                	ret

0000563e <strdup>:
    563e:	85aa                	mv	a1,a0
    5640:	1fffb517          	auipc	a0,0x1fffb
    5644:	2b052503          	lw	a0,688(a0) # 200008f0 <_impure_ptr>
    5648:	a009                	j	564a <_strdup_r>

0000564a <_strdup_r>:
    564a:	1141                	addi	sp,sp,-16
    564c:	c422                	sw	s0,8(sp)
    564e:	842a                	mv	s0,a0
    5650:	852e                	mv	a0,a1
    5652:	c606                	sw	ra,12(sp)
    5654:	c226                	sw	s1,4(sp)
    5656:	c04a                	sw	s2,0(sp)
    5658:	84ae                	mv	s1,a1
    565a:	201d                	jal	5680 <strlen>
    565c:	00150913          	addi	s2,a0,1
    5660:	85ca                	mv	a1,s2
    5662:	8522                	mv	a0,s0
    5664:	90dff0ef          	jal	ra,4f70 <_malloc_r>
    5668:	842a                	mv	s0,a0
    566a:	c501                	beqz	a0,5672 <_strdup_r+0x28>
    566c:	864a                	mv	a2,s2
    566e:	85a6                	mv	a1,s1
    5670:	35e1                	jal	5538 <memcpy>
    5672:	40b2                	lw	ra,12(sp)
    5674:	8522                	mv	a0,s0
    5676:	4422                	lw	s0,8(sp)
    5678:	4492                	lw	s1,4(sp)
    567a:	4902                	lw	s2,0(sp)
    567c:	0141                	addi	sp,sp,16
    567e:	8082                	ret

00005680 <strlen>:
    5680:	00357793          	andi	a5,a0,3
    5684:	872a                	mv	a4,a0
    5686:	ef9d                	bnez	a5,56c4 <strlen+0x44>
    5688:	7f7f86b7          	lui	a3,0x7f7f8
    568c:	f7f68693          	addi	a3,a3,-129 # 7f7f7f7f <__kernel_stack+0x5f737f87>
    5690:	55fd                	li	a1,-1
    5692:	4310                	lw	a2,0(a4)
    5694:	0711                	addi	a4,a4,4
    5696:	00d677b3          	and	a5,a2,a3
    569a:	97b6                	add	a5,a5,a3
    569c:	8fd1                	or	a5,a5,a2
    569e:	8fd5                	or	a5,a5,a3
    56a0:	feb789e3          	beq	a5,a1,5692 <strlen+0x12>
    56a4:	ffc74683          	lbu	a3,-4(a4) # fffffc <_global_impure_ptr+0xff9ff4>
    56a8:	ffd74603          	lbu	a2,-3(a4)
    56ac:	ffe74783          	lbu	a5,-2(a4)
    56b0:	8f09                	sub	a4,a4,a0
    56b2:	c695                	beqz	a3,56de <strlen+0x5e>
    56b4:	02060263          	beqz	a2,56d8 <strlen+0x58>
    56b8:	00f03533          	snez	a0,a5
    56bc:	953a                	add	a0,a0,a4
    56be:	1579                	addi	a0,a0,-2
    56c0:	8082                	ret
    56c2:	d2f9                	beqz	a3,5688 <strlen+0x8>
    56c4:	00074783          	lbu	a5,0(a4)
    56c8:	0705                	addi	a4,a4,1
    56ca:	00377693          	andi	a3,a4,3
    56ce:	fbf5                	bnez	a5,56c2 <strlen+0x42>
    56d0:	8f09                	sub	a4,a4,a0
    56d2:	fff70513          	addi	a0,a4,-1
    56d6:	8082                	ret
    56d8:	ffd70513          	addi	a0,a4,-3
    56dc:	8082                	ret
    56de:	ffc70513          	addi	a0,a4,-4
    56e2:	8082                	ret
	...

000056e6 <_malloc_trim_r>:
    56e6:	1101                	addi	sp,sp,-32
    56e8:	cc22                	sw	s0,24(sp)
    56ea:	ca26                	sw	s1,20(sp)
    56ec:	c84a                	sw	s2,16(sp)
    56ee:	c64e                	sw	s3,12(sp)
    56f0:	c452                	sw	s4,8(sp)
    56f2:	89ae                	mv	s3,a1
    56f4:	ce06                	sw	ra,28(sp)
    56f6:	1fffba17          	auipc	s4,0x1fffb
    56fa:	96ea0a13          	addi	s4,s4,-1682 # 20000064 <__malloc_av_>
    56fe:	892a                	mv	s2,a0
    5700:	3dd5                	jal	55f4 <__malloc_lock>
    5702:	008a2703          	lw	a4,8(s4)
    5706:	6785                	lui	a5,0x1
    5708:	fef78413          	addi	s0,a5,-17 # fef <_ftoa+0x1eb>
    570c:	4344                	lw	s1,4(a4)
    570e:	41340433          	sub	s0,s0,s3
    5712:	98f1                	andi	s1,s1,-4
    5714:	9426                	add	s0,s0,s1
    5716:	8031                	srli	s0,s0,0xc
    5718:	147d                	addi	s0,s0,-1
    571a:	0432                	slli	s0,s0,0xc
    571c:	00f44a63          	blt	s0,a5,5730 <_malloc_trim_r+0x4a>
    5720:	4581                	li	a1,0
    5722:	854a                	mv	a0,s2
    5724:	35d5                	jal	5608 <_sbrk_r>
    5726:	008a2783          	lw	a5,8(s4)
    572a:	97a6                	add	a5,a5,s1
    572c:	00f50d63          	beq	a0,a5,5746 <_malloc_trim_r+0x60>
    5730:	854a                	mv	a0,s2
    5732:	35f1                	jal	55fe <__malloc_unlock>
    5734:	40f2                	lw	ra,28(sp)
    5736:	4462                	lw	s0,24(sp)
    5738:	44d2                	lw	s1,20(sp)
    573a:	4942                	lw	s2,16(sp)
    573c:	49b2                	lw	s3,12(sp)
    573e:	4a22                	lw	s4,8(sp)
    5740:	4501                	li	a0,0
    5742:	6105                	addi	sp,sp,32
    5744:	8082                	ret
    5746:	408005b3          	neg	a1,s0
    574a:	854a                	mv	a0,s2
    574c:	3d75                	jal	5608 <_sbrk_r>
    574e:	57fd                	li	a5,-1
    5750:	02f50b63          	beq	a0,a5,5786 <_malloc_trim_r+0xa0>
    5754:	1fffb717          	auipc	a4,0x1fffb
    5758:	1b070713          	addi	a4,a4,432 # 20000904 <__malloc_current_mallinfo>
    575c:	431c                	lw	a5,0(a4)
    575e:	008a2683          	lw	a3,8(s4)
    5762:	8c81                	sub	s1,s1,s0
    5764:	0014e493          	ori	s1,s1,1
    5768:	40878433          	sub	s0,a5,s0
    576c:	854a                	mv	a0,s2
    576e:	c2c4                	sw	s1,4(a3)
    5770:	c300                	sw	s0,0(a4)
    5772:	3571                	jal	55fe <__malloc_unlock>
    5774:	40f2                	lw	ra,28(sp)
    5776:	4462                	lw	s0,24(sp)
    5778:	44d2                	lw	s1,20(sp)
    577a:	4942                	lw	s2,16(sp)
    577c:	49b2                	lw	s3,12(sp)
    577e:	4a22                	lw	s4,8(sp)
    5780:	4505                	li	a0,1
    5782:	6105                	addi	sp,sp,32
    5784:	8082                	ret
    5786:	4581                	li	a1,0
    5788:	854a                	mv	a0,s2
    578a:	3dbd                	jal	5608 <_sbrk_r>
    578c:	008a2703          	lw	a4,8(s4)
    5790:	46bd                	li	a3,15
    5792:	40e507b3          	sub	a5,a0,a4
    5796:	f8f6dde3          	bge	a3,a5,5730 <_malloc_trim_r+0x4a>
    579a:	0017e793          	ori	a5,a5,1
    579e:	c35c                	sw	a5,4(a4)
    57a0:	1fffb797          	auipc	a5,0x1fffb
    57a4:	1487a783          	lw	a5,328(a5) # 200008e8 <__malloc_sbrk_base>
    57a8:	8d1d                	sub	a0,a0,a5
    57aa:	1fffb797          	auipc	a5,0x1fffb
    57ae:	14a7ad23          	sw	a0,346(a5) # 20000904 <__malloc_current_mallinfo>
    57b2:	bfbd                	j	5730 <_malloc_trim_r+0x4a>

000057b4 <_free_r>:
    57b4:	cde9                	beqz	a1,588e <_free_r+0xda>
    57b6:	1141                	addi	sp,sp,-16
    57b8:	c422                	sw	s0,8(sp)
    57ba:	c226                	sw	s1,4(sp)
    57bc:	842e                	mv	s0,a1
    57be:	84aa                	mv	s1,a0
    57c0:	c606                	sw	ra,12(sp)
    57c2:	3d0d                	jal	55f4 <__malloc_lock>
    57c4:	ffc42583          	lw	a1,-4(s0)
    57c8:	ff840713          	addi	a4,s0,-8
    57cc:	1fffb817          	auipc	a6,0x1fffb
    57d0:	89880813          	addi	a6,a6,-1896 # 20000064 <__malloc_av_>
    57d4:	ffe5f793          	andi	a5,a1,-2
    57d8:	00f70633          	add	a2,a4,a5
    57dc:	4254                	lw	a3,4(a2)
    57de:	00882503          	lw	a0,8(a6)
    57e2:	9af1                	andi	a3,a3,-4
    57e4:	12c50363          	beq	a0,a2,590a <_free_r+0x156>
    57e8:	c254                	sw	a3,4(a2)
    57ea:	8985                	andi	a1,a1,1
    57ec:	00d60533          	add	a0,a2,a3
    57f0:	e9b5                	bnez	a1,5864 <_free_r+0xb0>
    57f2:	ff842303          	lw	t1,-8(s0)
    57f6:	414c                	lw	a1,4(a0)
    57f8:	1fffb897          	auipc	a7,0x1fffb
    57fc:	87488893          	addi	a7,a7,-1932 # 2000006c <__malloc_av_+0x8>
    5800:	40670733          	sub	a4,a4,t1
    5804:	4708                	lw	a0,8(a4)
    5806:	979a                	add	a5,a5,t1
    5808:	8985                	andi	a1,a1,1
    580a:	0d150f63          	beq	a0,a7,58e8 <_free_r+0x134>
    580e:	00c72303          	lw	t1,12(a4)
    5812:	00652623          	sw	t1,12(a0)
    5816:	00a32423          	sw	a0,8(t1)
    581a:	14058463          	beqz	a1,5962 <_free_r+0x1ae>
    581e:	0017e693          	ori	a3,a5,1
    5822:	c354                	sw	a3,4(a4)
    5824:	c21c                	sw	a5,0(a2)
    5826:	1ff00693          	li	a3,511
    582a:	06f6ec63          	bltu	a3,a5,58a2 <_free_r+0xee>
    582e:	ff87f693          	andi	a3,a5,-8
    5832:	06a1                	addi	a3,a3,8
    5834:	00482583          	lw	a1,4(a6)
    5838:	96c2                	add	a3,a3,a6
    583a:	4290                	lw	a2,0(a3)
    583c:	0057d513          	srli	a0,a5,0x5
    5840:	4785                	li	a5,1
    5842:	00a797b3          	sll	a5,a5,a0
    5846:	8fcd                	or	a5,a5,a1
    5848:	ff868593          	addi	a1,a3,-8
    584c:	c74c                	sw	a1,12(a4)
    584e:	c710                	sw	a2,8(a4)
    5850:	00f82223          	sw	a5,4(a6)
    5854:	c298                	sw	a4,0(a3)
    5856:	c658                	sw	a4,12(a2)
    5858:	4422                	lw	s0,8(sp)
    585a:	40b2                	lw	ra,12(sp)
    585c:	8526                	mv	a0,s1
    585e:	4492                	lw	s1,4(sp)
    5860:	0141                	addi	sp,sp,16
    5862:	bb71                	j	55fe <__malloc_unlock>
    5864:	414c                	lw	a1,4(a0)
    5866:	8985                	andi	a1,a1,1
    5868:	e585                	bnez	a1,5890 <_free_r+0xdc>
    586a:	97b6                	add	a5,a5,a3
    586c:	1fffb897          	auipc	a7,0x1fffb
    5870:	80088893          	addi	a7,a7,-2048 # 2000006c <__malloc_av_+0x8>
    5874:	4614                	lw	a3,8(a2)
    5876:	0017e513          	ori	a0,a5,1
    587a:	00f705b3          	add	a1,a4,a5
    587e:	0f168a63          	beq	a3,a7,5972 <_free_r+0x1be>
    5882:	4650                	lw	a2,12(a2)
    5884:	c6d0                	sw	a2,12(a3)
    5886:	c614                	sw	a3,8(a2)
    5888:	c348                	sw	a0,4(a4)
    588a:	c19c                	sw	a5,0(a1)
    588c:	bf69                	j	5826 <_free_r+0x72>
    588e:	8082                	ret
    5890:	0017e693          	ori	a3,a5,1
    5894:	fed42e23          	sw	a3,-4(s0)
    5898:	c21c                	sw	a5,0(a2)
    589a:	1ff00693          	li	a3,511
    589e:	f8f6f8e3          	bgeu	a3,a5,582e <_free_r+0x7a>
    58a2:	0097d693          	srli	a3,a5,0x9
    58a6:	4611                	li	a2,4
    58a8:	08d66e63          	bltu	a2,a3,5944 <_free_r+0x190>
    58ac:	0067d693          	srli	a3,a5,0x6
    58b0:	03968593          	addi	a1,a3,57
    58b4:	03868613          	addi	a2,a3,56
    58b8:	058e                	slli	a1,a1,0x3
    58ba:	95c2                	add	a1,a1,a6
    58bc:	4194                	lw	a3,0(a1)
    58be:	15e1                	addi	a1,a1,-8
    58c0:	0cd58463          	beq	a1,a3,5988 <_free_r+0x1d4>
    58c4:	42d0                	lw	a2,4(a3)
    58c6:	9a71                	andi	a2,a2,-4
    58c8:	00c7f563          	bgeu	a5,a2,58d2 <_free_r+0x11e>
    58cc:	4694                	lw	a3,8(a3)
    58ce:	fed59be3          	bne	a1,a3,58c4 <_free_r+0x110>
    58d2:	46cc                	lw	a1,12(a3)
    58d4:	c74c                	sw	a1,12(a4)
    58d6:	c714                	sw	a3,8(a4)
    58d8:	4422                	lw	s0,8(sp)
    58da:	40b2                	lw	ra,12(sp)
    58dc:	c598                	sw	a4,8(a1)
    58de:	8526                	mv	a0,s1
    58e0:	4492                	lw	s1,4(sp)
    58e2:	c6d8                	sw	a4,12(a3)
    58e4:	0141                	addi	sp,sp,16
    58e6:	bb21                	j	55fe <__malloc_unlock>
    58e8:	e5fd                	bnez	a1,59d6 <_free_r+0x222>
    58ea:	464c                	lw	a1,12(a2)
    58ec:	4610                	lw	a2,8(a2)
    58ee:	97b6                	add	a5,a5,a3
    58f0:	4422                	lw	s0,8(sp)
    58f2:	c64c                	sw	a1,12(a2)
    58f4:	c590                	sw	a2,8(a1)
    58f6:	0017e693          	ori	a3,a5,1
    58fa:	40b2                	lw	ra,12(sp)
    58fc:	c354                	sw	a3,4(a4)
    58fe:	8526                	mv	a0,s1
    5900:	973e                	add	a4,a4,a5
    5902:	4492                	lw	s1,4(sp)
    5904:	c31c                	sw	a5,0(a4)
    5906:	0141                	addi	sp,sp,16
    5908:	b9dd                	j	55fe <__malloc_unlock>
    590a:	8985                	andi	a1,a1,1
    590c:	97b6                	add	a5,a5,a3
    590e:	e989                	bnez	a1,5920 <_free_r+0x16c>
    5910:	ff842583          	lw	a1,-8(s0)
    5914:	8f0d                	sub	a4,a4,a1
    5916:	4754                	lw	a3,12(a4)
    5918:	4710                	lw	a2,8(a4)
    591a:	97ae                	add	a5,a5,a1
    591c:	c654                	sw	a3,12(a2)
    591e:	c690                	sw	a2,8(a3)
    5920:	0017e613          	ori	a2,a5,1
    5924:	1fffb697          	auipc	a3,0x1fffb
    5928:	fc86a683          	lw	a3,-56(a3) # 200008ec <__malloc_trim_threshold>
    592c:	c350                	sw	a2,4(a4)
    592e:	00e82423          	sw	a4,8(a6)
    5932:	f2d7e3e3          	bltu	a5,a3,5858 <_free_r+0xa4>
    5936:	1fffb597          	auipc	a1,0x1fffb
    593a:	ffe5a583          	lw	a1,-2(a1) # 20000934 <__malloc_top_pad>
    593e:	8526                	mv	a0,s1
    5940:	335d                	jal	56e6 <_malloc_trim_r>
    5942:	bf19                	j	5858 <_free_r+0xa4>
    5944:	4651                	li	a2,20
    5946:	02d67063          	bgeu	a2,a3,5966 <_free_r+0x1b2>
    594a:	05400613          	li	a2,84
    594e:	04d66763          	bltu	a2,a3,599c <_free_r+0x1e8>
    5952:	00c7d693          	srli	a3,a5,0xc
    5956:	06f68593          	addi	a1,a3,111
    595a:	06e68613          	addi	a2,a3,110
    595e:	058e                	slli	a1,a1,0x3
    5960:	bfa9                	j	58ba <_free_r+0x106>
    5962:	97b6                	add	a5,a5,a3
    5964:	bf01                	j	5874 <_free_r+0xc0>
    5966:	05c68593          	addi	a1,a3,92
    596a:	05b68613          	addi	a2,a3,91
    596e:	058e                	slli	a1,a1,0x3
    5970:	b7a9                	j	58ba <_free_r+0x106>
    5972:	00e82a23          	sw	a4,20(a6)
    5976:	00e82823          	sw	a4,16(a6)
    597a:	01172623          	sw	a7,12(a4)
    597e:	01172423          	sw	a7,8(a4)
    5982:	c348                	sw	a0,4(a4)
    5984:	c19c                	sw	a5,0(a1)
    5986:	bdc9                	j	5858 <_free_r+0xa4>
    5988:	00482503          	lw	a0,4(a6)
    598c:	8609                	srai	a2,a2,0x2
    598e:	4785                	li	a5,1
    5990:	00c79633          	sll	a2,a5,a2
    5994:	8e49                	or	a2,a2,a0
    5996:	00c82223          	sw	a2,4(a6)
    599a:	bf2d                	j	58d4 <_free_r+0x120>
    599c:	15400613          	li	a2,340
    59a0:	00d66a63          	bltu	a2,a3,59b4 <_free_r+0x200>
    59a4:	00f7d693          	srli	a3,a5,0xf
    59a8:	07868593          	addi	a1,a3,120
    59ac:	07768613          	addi	a2,a3,119
    59b0:	058e                	slli	a1,a1,0x3
    59b2:	b721                	j	58ba <_free_r+0x106>
    59b4:	55400613          	li	a2,1364
    59b8:	00d66a63          	bltu	a2,a3,59cc <_free_r+0x218>
    59bc:	0127d693          	srli	a3,a5,0x12
    59c0:	07d68593          	addi	a1,a3,125
    59c4:	07c68613          	addi	a2,a3,124
    59c8:	058e                	slli	a1,a1,0x3
    59ca:	bdc5                	j	58ba <_free_r+0x106>
    59cc:	3f800593          	li	a1,1016
    59d0:	07e00613          	li	a2,126
    59d4:	b5dd                	j	58ba <_free_r+0x106>
    59d6:	0017e693          	ori	a3,a5,1
    59da:	c354                	sw	a3,4(a4)
    59dc:	c21c                	sw	a5,0(a2)
    59de:	bdad                	j	5858 <_free_r+0xa4>

000059e0 <__retarget_lock_init>:
    59e0:	8082                	ret

000059e2 <__retarget_lock_init_recursive>:
    59e2:	8082                	ret

000059e4 <__retarget_lock_close>:
    59e4:	8082                	ret

000059e6 <__retarget_lock_close_recursive>:
    59e6:	8082                	ret

000059e8 <__retarget_lock_acquire>:
    59e8:	8082                	ret

000059ea <__retarget_lock_acquire_recursive>:
    59ea:	8082                	ret

000059ec <__retarget_lock_try_acquire>:
    59ec:	4505                	li	a0,1
    59ee:	8082                	ret

000059f0 <__retarget_lock_try_acquire_recursive>:
    59f0:	4505                	li	a0,1
    59f2:	8082                	ret

000059f4 <__retarget_lock_release>:
    59f4:	8082                	ret

000059f6 <__retarget_lock_release_recursive>:
    59f6:	8082                	ret

000059f8 <cleanup_glue>:
    59f8:	1101                	addi	sp,sp,-32
    59fa:	c84a                	sw	s2,16(sp)
    59fc:	0005a903          	lw	s2,0(a1)
    5a00:	cc22                	sw	s0,24(sp)
    5a02:	ca26                	sw	s1,20(sp)
    5a04:	ce06                	sw	ra,28(sp)
    5a06:	c64e                	sw	s3,12(sp)
    5a08:	c452                	sw	s4,8(sp)
    5a0a:	842e                	mv	s0,a1
    5a0c:	84aa                	mv	s1,a0
    5a0e:	02090763          	beqz	s2,5a3c <cleanup_glue+0x44>
    5a12:	00092983          	lw	s3,0(s2)
    5a16:	02098063          	beqz	s3,5a36 <cleanup_glue+0x3e>
    5a1a:	0009aa03          	lw	s4,0(s3)
    5a1e:	000a0963          	beqz	s4,5a30 <cleanup_glue+0x38>
    5a22:	000a2583          	lw	a1,0(s4)
    5a26:	c191                	beqz	a1,5a2a <cleanup_glue+0x32>
    5a28:	3fc1                	jal	59f8 <cleanup_glue>
    5a2a:	85d2                	mv	a1,s4
    5a2c:	8526                	mv	a0,s1
    5a2e:	3359                	jal	57b4 <_free_r>
    5a30:	85ce                	mv	a1,s3
    5a32:	8526                	mv	a0,s1
    5a34:	3341                	jal	57b4 <_free_r>
    5a36:	85ca                	mv	a1,s2
    5a38:	8526                	mv	a0,s1
    5a3a:	3bad                	jal	57b4 <_free_r>
    5a3c:	85a2                	mv	a1,s0
    5a3e:	4462                	lw	s0,24(sp)
    5a40:	40f2                	lw	ra,28(sp)
    5a42:	4942                	lw	s2,16(sp)
    5a44:	49b2                	lw	s3,12(sp)
    5a46:	4a22                	lw	s4,8(sp)
    5a48:	8526                	mv	a0,s1
    5a4a:	44d2                	lw	s1,20(sp)
    5a4c:	6105                	addi	sp,sp,32
    5a4e:	b39d                	j	57b4 <_free_r>

00005a50 <_reclaim_reent>:
    5a50:	1fffb797          	auipc	a5,0x1fffb
    5a54:	ea07a783          	lw	a5,-352(a5) # 200008f0 <_impure_ptr>
    5a58:	08a78e63          	beq	a5,a0,5af4 <_reclaim_reent+0xa4>
    5a5c:	456c                	lw	a1,76(a0)
    5a5e:	1101                	addi	sp,sp,-32
    5a60:	ca26                	sw	s1,20(sp)
    5a62:	ce06                	sw	ra,28(sp)
    5a64:	cc22                	sw	s0,24(sp)
    5a66:	c84a                	sw	s2,16(sp)
    5a68:	c64e                	sw	s3,12(sp)
    5a6a:	84aa                	mv	s1,a0
    5a6c:	c19d                	beqz	a1,5a92 <_reclaim_reent+0x42>
    5a6e:	4901                	li	s2,0
    5a70:	08000993          	li	s3,128
    5a74:	012587b3          	add	a5,a1,s2
    5a78:	4380                	lw	s0,0(a5)
    5a7a:	c419                	beqz	s0,5a88 <_reclaim_reent+0x38>
    5a7c:	85a2                	mv	a1,s0
    5a7e:	4000                	lw	s0,0(s0)
    5a80:	8526                	mv	a0,s1
    5a82:	3b0d                	jal	57b4 <_free_r>
    5a84:	fc65                	bnez	s0,5a7c <_reclaim_reent+0x2c>
    5a86:	44ec                	lw	a1,76(s1)
    5a88:	0911                	addi	s2,s2,4
    5a8a:	ff3915e3          	bne	s2,s3,5a74 <_reclaim_reent+0x24>
    5a8e:	8526                	mv	a0,s1
    5a90:	3315                	jal	57b4 <_free_r>
    5a92:	40ac                	lw	a1,64(s1)
    5a94:	c199                	beqz	a1,5a9a <_reclaim_reent+0x4a>
    5a96:	8526                	mv	a0,s1
    5a98:	3b31                	jal	57b4 <_free_r>
    5a9a:	1484a403          	lw	s0,328(s1)
    5a9e:	c819                	beqz	s0,5ab4 <_reclaim_reent+0x64>
    5aa0:	14c48913          	addi	s2,s1,332
    5aa4:	01240863          	beq	s0,s2,5ab4 <_reclaim_reent+0x64>
    5aa8:	85a2                	mv	a1,s0
    5aaa:	4000                	lw	s0,0(s0)
    5aac:	8526                	mv	a0,s1
    5aae:	3319                	jal	57b4 <_free_r>
    5ab0:	fe891ce3          	bne	s2,s0,5aa8 <_reclaim_reent+0x58>
    5ab4:	48ec                	lw	a1,84(s1)
    5ab6:	c199                	beqz	a1,5abc <_reclaim_reent+0x6c>
    5ab8:	8526                	mv	a0,s1
    5aba:	39ed                	jal	57b4 <_free_r>
    5abc:	5c9c                	lw	a5,56(s1)
    5abe:	c785                	beqz	a5,5ae6 <_reclaim_reent+0x96>
    5ac0:	5cdc                	lw	a5,60(s1)
    5ac2:	8526                	mv	a0,s1
    5ac4:	9782                	jalr	a5
    5ac6:	2e04a403          	lw	s0,736(s1)
    5aca:	cc11                	beqz	s0,5ae6 <_reclaim_reent+0x96>
    5acc:	400c                	lw	a1,0(s0)
    5ace:	c199                	beqz	a1,5ad4 <_reclaim_reent+0x84>
    5ad0:	8526                	mv	a0,s1
    5ad2:	371d                	jal	59f8 <cleanup_glue>
    5ad4:	85a2                	mv	a1,s0
    5ad6:	4462                	lw	s0,24(sp)
    5ad8:	40f2                	lw	ra,28(sp)
    5ada:	4942                	lw	s2,16(sp)
    5adc:	49b2                	lw	s3,12(sp)
    5ade:	8526                	mv	a0,s1
    5ae0:	44d2                	lw	s1,20(sp)
    5ae2:	6105                	addi	sp,sp,32
    5ae4:	b9c1                	j	57b4 <_free_r>
    5ae6:	40f2                	lw	ra,28(sp)
    5ae8:	4462                	lw	s0,24(sp)
    5aea:	44d2                	lw	s1,20(sp)
    5aec:	4942                	lw	s2,16(sp)
    5aee:	49b2                	lw	s3,12(sp)
    5af0:	6105                	addi	sp,sp,32
    5af2:	8082                	ret
    5af4:	8082                	ret

00005af6 <_sbrk>:
    5af6:	1fffb317          	auipc	t1,0x1fffb
    5afa:	e6a30313          	addi	t1,t1,-406 # 20000960 <heap_end.0>
    5afe:	00032783          	lw	a5,0(t1)
    5b02:	1141                	addi	sp,sp,-16
    5b04:	c606                	sw	ra,12(sp)
    5b06:	882a                	mv	a6,a0
    5b08:	e385                	bnez	a5,5b28 <_sbrk+0x32>
    5b0a:	4501                	li	a0,0
    5b0c:	4581                	li	a1,0
    5b0e:	4601                	li	a2,0
    5b10:	4681                	li	a3,0
    5b12:	4701                	li	a4,0
    5b14:	0d600893          	li	a7,214
    5b18:	00000073          	ecall
    5b1c:	577d                	li	a4,-1
    5b1e:	87aa                	mv	a5,a0
    5b20:	02e50a63          	beq	a0,a4,5b54 <_sbrk+0x5e>
    5b24:	00a32023          	sw	a0,0(t1)
    5b28:	00f80533          	add	a0,a6,a5
    5b2c:	4581                	li	a1,0
    5b2e:	4601                	li	a2,0
    5b30:	4681                	li	a3,0
    5b32:	4701                	li	a4,0
    5b34:	4781                	li	a5,0
    5b36:	0d600893          	li	a7,214
    5b3a:	00000073          	ecall
    5b3e:	00032783          	lw	a5,0(t1)
    5b42:	983e                	add	a6,a6,a5
    5b44:	01051863          	bne	a0,a6,5b54 <_sbrk+0x5e>
    5b48:	40b2                	lw	ra,12(sp)
    5b4a:	00a32023          	sw	a0,0(t1)
    5b4e:	853e                	mv	a0,a5
    5b50:	0141                	addi	sp,sp,16
    5b52:	8082                	ret
    5b54:	2039                	jal	5b62 <__errno>
    5b56:	40b2                	lw	ra,12(sp)
    5b58:	47b1                	li	a5,12
    5b5a:	c11c                	sw	a5,0(a0)
    5b5c:	557d                	li	a0,-1
    5b5e:	0141                	addi	sp,sp,16
    5b60:	8082                	ret

00005b62 <__errno>:
    5b62:	1fffb517          	auipc	a0,0x1fffb
    5b66:	d8e52503          	lw	a0,-626(a0) # 200008f0 <_impure_ptr>
    5b6a:	8082                	ret
    5b6c:	0000                	unimp
	...
